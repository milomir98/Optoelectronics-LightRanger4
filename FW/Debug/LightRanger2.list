
LightRanger2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d664  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002148  0800d830  0800d830  0001d830  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f978  0800f978  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  0800f978  0800f978  0001f978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f980  0800f980  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f980  0800f980  0001f980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f984  0800f984  0001f984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  0800f988  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019700  20000028  0800f9b0  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20019728  0800f9b0  00029728  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003907b  00000000  00000000  00020056  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004dcc  00000000  00000000  000590d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000263bd  00000000  00000000  0005de9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000015a8  00000000  00000000  00084260  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00006878  00000000  00000000  00085808  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0002d9a4  00000000  00000000  0008c080  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00019ba5  00000000  00000000  000b9a24  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00111812  00000000  00000000  000d35c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      000000fd  00000000  00000000  001e4ddb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000054c8  00000000  00000000  001e4ed8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000028 	.word	0x20000028
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800d814 	.word	0x0800d814

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000002c 	.word	0x2000002c
 8000204:	0800d814 	.word	0x0800d814

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000346:	f1a4 0401 	sub.w	r4, r4, #1
 800034a:	d1e9      	bne.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_uldivmod>:
 8000ba4:	b953      	cbnz	r3, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba6:	b94a      	cbnz	r2, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba8:	2900      	cmp	r1, #0
 8000baa:	bf08      	it	eq
 8000bac:	2800      	cmpeq	r0, #0
 8000bae:	bf1c      	itt	ne
 8000bb0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb8:	f000 b972 	b.w	8000ea0 <__aeabi_idiv0>
 8000bbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc4:	f000 f806 	bl	8000bd4 <__udivmoddi4>
 8000bc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd0:	b004      	add	sp, #16
 8000bd2:	4770      	bx	lr

08000bd4 <__udivmoddi4>:
 8000bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd8:	9e08      	ldr	r6, [sp, #32]
 8000bda:	4604      	mov	r4, r0
 8000bdc:	4688      	mov	r8, r1
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d14b      	bne.n	8000c7a <__udivmoddi4+0xa6>
 8000be2:	428a      	cmp	r2, r1
 8000be4:	4615      	mov	r5, r2
 8000be6:	d967      	bls.n	8000cb8 <__udivmoddi4+0xe4>
 8000be8:	fab2 f282 	clz	r2, r2
 8000bec:	b14a      	cbz	r2, 8000c02 <__udivmoddi4+0x2e>
 8000bee:	f1c2 0720 	rsb	r7, r2, #32
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfa:	4095      	lsls	r5, r2
 8000bfc:	ea47 0803 	orr.w	r8, r7, r3
 8000c00:	4094      	lsls	r4, r2
 8000c02:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c06:	0c23      	lsrs	r3, r4, #16
 8000c08:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c0c:	fa1f fc85 	uxth.w	ip, r5
 8000c10:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c14:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c18:	fb07 f10c 	mul.w	r1, r7, ip
 8000c1c:	4299      	cmp	r1, r3
 8000c1e:	d909      	bls.n	8000c34 <__udivmoddi4+0x60>
 8000c20:	18eb      	adds	r3, r5, r3
 8000c22:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c26:	f080 811b 	bcs.w	8000e60 <__udivmoddi4+0x28c>
 8000c2a:	4299      	cmp	r1, r3
 8000c2c:	f240 8118 	bls.w	8000e60 <__udivmoddi4+0x28c>
 8000c30:	3f02      	subs	r7, #2
 8000c32:	442b      	add	r3, r5
 8000c34:	1a5b      	subs	r3, r3, r1
 8000c36:	b2a4      	uxth	r4, r4
 8000c38:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c3c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c44:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c48:	45a4      	cmp	ip, r4
 8000c4a:	d909      	bls.n	8000c60 <__udivmoddi4+0x8c>
 8000c4c:	192c      	adds	r4, r5, r4
 8000c4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c52:	f080 8107 	bcs.w	8000e64 <__udivmoddi4+0x290>
 8000c56:	45a4      	cmp	ip, r4
 8000c58:	f240 8104 	bls.w	8000e64 <__udivmoddi4+0x290>
 8000c5c:	3802      	subs	r0, #2
 8000c5e:	442c      	add	r4, r5
 8000c60:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c64:	eba4 040c 	sub.w	r4, r4, ip
 8000c68:	2700      	movs	r7, #0
 8000c6a:	b11e      	cbz	r6, 8000c74 <__udivmoddi4+0xa0>
 8000c6c:	40d4      	lsrs	r4, r2
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e9c6 4300 	strd	r4, r3, [r6]
 8000c74:	4639      	mov	r1, r7
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d909      	bls.n	8000c92 <__udivmoddi4+0xbe>
 8000c7e:	2e00      	cmp	r6, #0
 8000c80:	f000 80eb 	beq.w	8000e5a <__udivmoddi4+0x286>
 8000c84:	2700      	movs	r7, #0
 8000c86:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8a:	4638      	mov	r0, r7
 8000c8c:	4639      	mov	r1, r7
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	fab3 f783 	clz	r7, r3
 8000c96:	2f00      	cmp	r7, #0
 8000c98:	d147      	bne.n	8000d2a <__udivmoddi4+0x156>
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xd0>
 8000c9e:	4282      	cmp	r2, r0
 8000ca0:	f200 80fa 	bhi.w	8000e98 <__udivmoddi4+0x2c4>
 8000ca4:	1a84      	subs	r4, r0, r2
 8000ca6:	eb61 0303 	sbc.w	r3, r1, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	4698      	mov	r8, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d0e0      	beq.n	8000c74 <__udivmoddi4+0xa0>
 8000cb2:	e9c6 4800 	strd	r4, r8, [r6]
 8000cb6:	e7dd      	b.n	8000c74 <__udivmoddi4+0xa0>
 8000cb8:	b902      	cbnz	r2, 8000cbc <__udivmoddi4+0xe8>
 8000cba:	deff      	udf	#255	; 0xff
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	2a00      	cmp	r2, #0
 8000cc2:	f040 808f 	bne.w	8000de4 <__udivmoddi4+0x210>
 8000cc6:	1b49      	subs	r1, r1, r5
 8000cc8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ccc:	fa1f f885 	uxth.w	r8, r5
 8000cd0:	2701      	movs	r7, #1
 8000cd2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cd6:	0c23      	lsrs	r3, r4, #16
 8000cd8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cdc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce0:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce4:	4299      	cmp	r1, r3
 8000ce6:	d907      	bls.n	8000cf8 <__udivmoddi4+0x124>
 8000ce8:	18eb      	adds	r3, r5, r3
 8000cea:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cee:	d202      	bcs.n	8000cf6 <__udivmoddi4+0x122>
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	f200 80cd 	bhi.w	8000e90 <__udivmoddi4+0x2bc>
 8000cf6:	4684      	mov	ip, r0
 8000cf8:	1a59      	subs	r1, r3, r1
 8000cfa:	b2a3      	uxth	r3, r4
 8000cfc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d00:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d04:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d08:	fb08 f800 	mul.w	r8, r8, r0
 8000d0c:	45a0      	cmp	r8, r4
 8000d0e:	d907      	bls.n	8000d20 <__udivmoddi4+0x14c>
 8000d10:	192c      	adds	r4, r5, r4
 8000d12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x14a>
 8000d18:	45a0      	cmp	r8, r4
 8000d1a:	f200 80b6 	bhi.w	8000e8a <__udivmoddi4+0x2b6>
 8000d1e:	4618      	mov	r0, r3
 8000d20:	eba4 0408 	sub.w	r4, r4, r8
 8000d24:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d28:	e79f      	b.n	8000c6a <__udivmoddi4+0x96>
 8000d2a:	f1c7 0c20 	rsb	ip, r7, #32
 8000d2e:	40bb      	lsls	r3, r7
 8000d30:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d34:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d38:	fa01 f407 	lsl.w	r4, r1, r7
 8000d3c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d40:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d44:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d48:	4325      	orrs	r5, r4
 8000d4a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d4e:	0c2c      	lsrs	r4, r5, #16
 8000d50:	fb08 3319 	mls	r3, r8, r9, r3
 8000d54:	fa1f fa8e 	uxth.w	sl, lr
 8000d58:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d5c:	fb09 f40a 	mul.w	r4, r9, sl
 8000d60:	429c      	cmp	r4, r3
 8000d62:	fa02 f207 	lsl.w	r2, r2, r7
 8000d66:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6a:	d90b      	bls.n	8000d84 <__udivmoddi4+0x1b0>
 8000d6c:	eb1e 0303 	adds.w	r3, lr, r3
 8000d70:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d74:	f080 8087 	bcs.w	8000e86 <__udivmoddi4+0x2b2>
 8000d78:	429c      	cmp	r4, r3
 8000d7a:	f240 8084 	bls.w	8000e86 <__udivmoddi4+0x2b2>
 8000d7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d82:	4473      	add	r3, lr
 8000d84:	1b1b      	subs	r3, r3, r4
 8000d86:	b2ad      	uxth	r5, r5
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d94:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d98:	45a2      	cmp	sl, r4
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x1da>
 8000d9c:	eb1e 0404 	adds.w	r4, lr, r4
 8000da0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da4:	d26b      	bcs.n	8000e7e <__udivmoddi4+0x2aa>
 8000da6:	45a2      	cmp	sl, r4
 8000da8:	d969      	bls.n	8000e7e <__udivmoddi4+0x2aa>
 8000daa:	3802      	subs	r0, #2
 8000dac:	4474      	add	r4, lr
 8000dae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db2:	fba0 8902 	umull	r8, r9, r0, r2
 8000db6:	eba4 040a 	sub.w	r4, r4, sl
 8000dba:	454c      	cmp	r4, r9
 8000dbc:	46c2      	mov	sl, r8
 8000dbe:	464b      	mov	r3, r9
 8000dc0:	d354      	bcc.n	8000e6c <__udivmoddi4+0x298>
 8000dc2:	d051      	beq.n	8000e68 <__udivmoddi4+0x294>
 8000dc4:	2e00      	cmp	r6, #0
 8000dc6:	d069      	beq.n	8000e9c <__udivmoddi4+0x2c8>
 8000dc8:	ebb1 050a 	subs.w	r5, r1, sl
 8000dcc:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd4:	40fd      	lsrs	r5, r7
 8000dd6:	40fc      	lsrs	r4, r7
 8000dd8:	ea4c 0505 	orr.w	r5, ip, r5
 8000ddc:	e9c6 5400 	strd	r5, r4, [r6]
 8000de0:	2700      	movs	r7, #0
 8000de2:	e747      	b.n	8000c74 <__udivmoddi4+0xa0>
 8000de4:	f1c2 0320 	rsb	r3, r2, #32
 8000de8:	fa20 f703 	lsr.w	r7, r0, r3
 8000dec:	4095      	lsls	r5, r2
 8000dee:	fa01 f002 	lsl.w	r0, r1, r2
 8000df2:	fa21 f303 	lsr.w	r3, r1, r3
 8000df6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfa:	4338      	orrs	r0, r7
 8000dfc:	0c01      	lsrs	r1, r0, #16
 8000dfe:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e02:	fa1f f885 	uxth.w	r8, r5
 8000e06:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e0e:	fb07 f308 	mul.w	r3, r7, r8
 8000e12:	428b      	cmp	r3, r1
 8000e14:	fa04 f402 	lsl.w	r4, r4, r2
 8000e18:	d907      	bls.n	8000e2a <__udivmoddi4+0x256>
 8000e1a:	1869      	adds	r1, r5, r1
 8000e1c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e20:	d22f      	bcs.n	8000e82 <__udivmoddi4+0x2ae>
 8000e22:	428b      	cmp	r3, r1
 8000e24:	d92d      	bls.n	8000e82 <__udivmoddi4+0x2ae>
 8000e26:	3f02      	subs	r7, #2
 8000e28:	4429      	add	r1, r5
 8000e2a:	1acb      	subs	r3, r1, r3
 8000e2c:	b281      	uxth	r1, r0
 8000e2e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e32:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e36:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3a:	fb00 f308 	mul.w	r3, r0, r8
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x27e>
 8000e42:	1869      	adds	r1, r5, r1
 8000e44:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e48:	d217      	bcs.n	8000e7a <__udivmoddi4+0x2a6>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d915      	bls.n	8000e7a <__udivmoddi4+0x2a6>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4429      	add	r1, r5
 8000e52:	1ac9      	subs	r1, r1, r3
 8000e54:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e58:	e73b      	b.n	8000cd2 <__udivmoddi4+0xfe>
 8000e5a:	4637      	mov	r7, r6
 8000e5c:	4630      	mov	r0, r6
 8000e5e:	e709      	b.n	8000c74 <__udivmoddi4+0xa0>
 8000e60:	4607      	mov	r7, r0
 8000e62:	e6e7      	b.n	8000c34 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fb      	b.n	8000c60 <__udivmoddi4+0x8c>
 8000e68:	4541      	cmp	r1, r8
 8000e6a:	d2ab      	bcs.n	8000dc4 <__udivmoddi4+0x1f0>
 8000e6c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e70:	eb69 020e 	sbc.w	r2, r9, lr
 8000e74:	3801      	subs	r0, #1
 8000e76:	4613      	mov	r3, r2
 8000e78:	e7a4      	b.n	8000dc4 <__udivmoddi4+0x1f0>
 8000e7a:	4660      	mov	r0, ip
 8000e7c:	e7e9      	b.n	8000e52 <__udivmoddi4+0x27e>
 8000e7e:	4618      	mov	r0, r3
 8000e80:	e795      	b.n	8000dae <__udivmoddi4+0x1da>
 8000e82:	4667      	mov	r7, ip
 8000e84:	e7d1      	b.n	8000e2a <__udivmoddi4+0x256>
 8000e86:	4681      	mov	r9, r0
 8000e88:	e77c      	b.n	8000d84 <__udivmoddi4+0x1b0>
 8000e8a:	3802      	subs	r0, #2
 8000e8c:	442c      	add	r4, r5
 8000e8e:	e747      	b.n	8000d20 <__udivmoddi4+0x14c>
 8000e90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e94:	442b      	add	r3, r5
 8000e96:	e72f      	b.n	8000cf8 <__udivmoddi4+0x124>
 8000e98:	4638      	mov	r0, r7
 8000e9a:	e708      	b.n	8000cae <__udivmoddi4+0xda>
 8000e9c:	4637      	mov	r7, r6
 8000e9e:	e6e9      	b.n	8000c74 <__udivmoddi4+0xa0>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ea4:	4a0e      	ldr	r2, [pc, #56]	; (8000ee0 <HAL_InitTick+0x3c>)
 8000ea6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eaa:	490e      	ldr	r1, [pc, #56]	; (8000ee4 <HAL_InitTick+0x40>)
 8000eac:	7812      	ldrb	r2, [r2, #0]
 8000eae:	fbb3 f3f2 	udiv	r3, r3, r2
{
 8000eb2:	b510      	push	{r4, lr}
 8000eb4:	4604      	mov	r4, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eb6:	6808      	ldr	r0, [r1, #0]
 8000eb8:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ebc:	f000 fb12 	bl	80014e4 <HAL_SYSTICK_Config>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec0:	b908      	cbnz	r0, 8000ec6 <HAL_InitTick+0x22>
 8000ec2:	2c0f      	cmp	r4, #15
 8000ec4:	d901      	bls.n	8000eca <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000ec6:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 8000ec8:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	4621      	mov	r1, r4
 8000ece:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed2:	f000 fac3 	bl	800145c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed6:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <HAL_InitTick+0x44>)
 8000ed8:	2000      	movs	r0, #0
 8000eda:	601c      	str	r4, [r3, #0]
}
 8000edc:	bd10      	pop	{r4, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000000 	.word	0x20000000
 8000ee4:	20000008 	.word	0x20000008
 8000ee8:	20000004 	.word	0x20000004

08000eec <HAL_Init>:
{
 8000eec:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eee:	2003      	movs	r0, #3
 8000ef0:	f000 faa0 	bl	8001434 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	f7ff ffd5 	bl	8000ea4 <HAL_InitTick>
  HAL_MspInit();
 8000efa:	f004 fed3 	bl	8005ca4 <HAL_MspInit>
}
 8000efe:	2000      	movs	r0, #0
 8000f00:	bd08      	pop	{r3, pc}
 8000f02:	bf00      	nop

08000f04 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000f04:	4a03      	ldr	r2, [pc, #12]	; (8000f14 <HAL_IncTick+0x10>)
 8000f06:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <HAL_IncTick+0x14>)
 8000f08:	6811      	ldr	r1, [r2, #0]
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	440b      	add	r3, r1
 8000f0e:	6013      	str	r3, [r2, #0]
}
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	200191c4 	.word	0x200191c4
 8000f18:	20000000 	.word	0x20000000

08000f1c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f1c:	4b01      	ldr	r3, [pc, #4]	; (8000f24 <HAL_GetTick+0x8>)
 8000f1e:	6818      	ldr	r0, [r3, #0]
}
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	200191c4 	.word	0x200191c4

08000f28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f28:	b538      	push	{r3, r4, r5, lr}
 8000f2a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f2c:	f7ff fff6 	bl	8000f1c <HAL_GetTick>
 8000f30:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f32:	1c63      	adds	r3, r4, #1
 8000f34:	d002      	beq.n	8000f3c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f36:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <HAL_Delay+0x20>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f3c:	f7ff ffee 	bl	8000f1c <HAL_GetTick>
 8000f40:	1b40      	subs	r0, r0, r5
 8000f42:	42a0      	cmp	r0, r4
 8000f44:	d3fa      	bcc.n	8000f3c <HAL_Delay+0x14>
  {
  }
}
 8000f46:	bd38      	pop	{r3, r4, r5, pc}
 8000f48:	20000000 	.word	0x20000000

08000f4c <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f4c:	2800      	cmp	r0, #0
 8000f4e:	f000 8092 	beq.w	8001076 <HAL_ADC_Init+0x12a>
{
 8000f52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f54:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8000f56:	4604      	mov	r4, r0
 8000f58:	2d00      	cmp	r5, #0
 8000f5a:	f000 8082 	beq.w	8001062 <HAL_ADC_Init+0x116>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f60:	06db      	lsls	r3, r3, #27
 8000f62:	d504      	bpl.n	8000f6e <HAL_ADC_Init+0x22>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f64:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 8000f66:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8000f68:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 8000f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8000f6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f70:	4a4e      	ldr	r2, [pc, #312]	; (80010ac <HAL_ADC_Init+0x160>)
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8000f72:	494f      	ldr	r1, [pc, #316]	; (80010b0 <HAL_ADC_Init+0x164>)
    ADC_STATE_CLR_SET(hadc->State,
 8000f74:	401a      	ands	r2, r3
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000f76:	6823      	ldr	r3, [r4, #0]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f78:	4d4e      	ldr	r5, [pc, #312]	; (80010b4 <HAL_ADC_Init+0x168>)
    ADC_STATE_CLR_SET(hadc->State,
 8000f7a:	f042 0202 	orr.w	r2, r2, #2
 8000f7e:	6422      	str	r2, [r4, #64]	; 0x40
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8000f80:	684a      	ldr	r2, [r1, #4]
 8000f82:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000f86:	604a      	str	r2, [r1, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8000f88:	684a      	ldr	r2, [r1, #4]
 8000f8a:	6860      	ldr	r0, [r4, #4]
 8000f8c:	4302      	orrs	r2, r0
 8000f8e:	604a      	str	r2, [r1, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000f90:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000f92:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000f94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000f98:	f8d4 c008 	ldr.w	ip, [r4, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000f9c:	68e7      	ldr	r7, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000f9e:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000fa0:	6858      	ldr	r0, [r3, #4]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fa2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000fa4:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fa8:	42ae      	cmp	r6, r5
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000faa:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000fac:	6858      	ldr	r0, [r3, #4]
 8000fae:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 8000fb2:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000fb4:	6859      	ldr	r1, [r3, #4]
 8000fb6:	ea41 010c 	orr.w	r1, r1, ip
 8000fba:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000fbc:	6899      	ldr	r1, [r3, #8]
 8000fbe:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8000fc2:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000fc4:	689a      	ldr	r2, [r3, #8]
 8000fc6:	ea42 0207 	orr.w	r2, r2, r7
 8000fca:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fcc:	d055      	beq.n	800107a <HAL_ADC_Init+0x12e>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000fce:	6899      	ldr	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000fd0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000fd2:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000fd6:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000fd8:	689a      	ldr	r2, [r3, #8]
 8000fda:	4316      	orrs	r6, r2
 8000fdc:	609e      	str	r6, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000fde:	6899      	ldr	r1, [r3, #8]
 8000fe0:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8000fe4:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000fe6:	689a      	ldr	r2, [r3, #8]
 8000fe8:	4302      	orrs	r2, r0
 8000fea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000fec:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000fee:	69a5      	ldr	r5, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000ff0:	f021 0102 	bic.w	r1, r1, #2
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000ff4:	f894 0020 	ldrb.w	r0, [r4, #32]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000ff8:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000ffa:	689a      	ldr	r2, [r3, #8]
 8000ffc:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8001000:	609a      	str	r2, [r3, #8]
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001002:	2800      	cmp	r0, #0
 8001004:	d142      	bne.n	800108c <HAL_ADC_Init+0x140>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001006:	685a      	ldr	r2, [r3, #4]
 8001008:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800100c:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800100e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    ADC_CLEAR_ERRORCODE(hadc);
 8001010:	2600      	movs	r6, #0
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001012:	69e5      	ldr	r5, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001014:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001018:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800101c:	1e6a      	subs	r2, r5, #1
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800101e:	6967      	ldr	r7, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001020:	62d8      	str	r0, [r3, #44]	; 0x2c
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001022:	4630      	mov	r0, r6
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001024:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8001026:	ea45 5502 	orr.w	r5, r5, r2, lsl #20
 800102a:	62dd      	str	r5, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800102c:	689d      	ldr	r5, [r3, #8]
 800102e:	f425 7500 	bic.w	r5, r5, #512	; 0x200
 8001032:	609d      	str	r5, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001034:	6899      	ldr	r1, [r3, #8]
 8001036:	ea41 214c 	orr.w	r1, r1, ip, lsl #9
 800103a:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800103c:	6899      	ldr	r1, [r3, #8]
 800103e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001042:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001044:	689a      	ldr	r2, [r3, #8]
 8001046:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 800104a:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800104c:	6466      	str	r6, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800104e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001050:	f023 0303 	bic.w	r3, r3, #3
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800105a:	2300      	movs	r3, #0
 800105c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 8001062:	f004 fe37 	bl	8005cd4 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001066:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001068:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 800106a:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800106e:	06db      	lsls	r3, r3, #27
 8001070:	f53f af78 	bmi.w	8000f64 <HAL_ADC_Init+0x18>
 8001074:	e77b      	b.n	8000f6e <HAL_ADC_Init+0x22>
    return HAL_ERROR;
 8001076:	2001      	movs	r0, #1
}
 8001078:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800107a:	689a      	ldr	r2, [r3, #8]
 800107c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001080:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001082:	689a      	ldr	r2, [r3, #8]
 8001084:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	e7af      	b.n	8000fec <HAL_ADC_Init+0xa0>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800108c:	6858      	ldr	r0, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800108e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001090:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001094:	1e51      	subs	r1, r2, #1
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001096:	6058      	str	r0, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001098:	685a      	ldr	r2, [r3, #4]
 800109a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800109e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80010a0:	685a      	ldr	r2, [r3, #4]
 80010a2:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	e7b1      	b.n	800100e <HAL_ADC_Init+0xc2>
 80010aa:	bf00      	nop
 80010ac:	ffffeefd 	.word	0xffffeefd
 80010b0:	40012300 	.word	0x40012300
 80010b4:	0f000001 	.word	0x0f000001

080010b8 <HAL_ADC_Start_DMA>:
{
 80010b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ba:	4604      	mov	r4, r0
 80010bc:	b083      	sub	sp, #12
  __IO uint32_t counter = 0;
 80010be:	2000      	movs	r0, #0
  __HAL_LOCK(hadc);
 80010c0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
  __IO uint32_t counter = 0;
 80010c4:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	f000 8089 	beq.w	80011de <HAL_ADC_Start_DMA+0x126>
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010cc:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hadc);
 80010ce:	2001      	movs	r0, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010d0:	68ab      	ldr	r3, [r5, #8]
  __HAL_LOCK(hadc);
 80010d2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010d6:	07de      	lsls	r6, r3, #31
 80010d8:	d414      	bmi.n	8001104 <HAL_ADC_Start_DMA+0x4c>
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80010da:	4b47      	ldr	r3, [pc, #284]	; (80011f8 <HAL_ADC_Start_DMA+0x140>)
 80010dc:	4e47      	ldr	r6, [pc, #284]	; (80011fc <HAL_ADC_Start_DMA+0x144>)
 80010de:	6818      	ldr	r0, [r3, #0]
    __HAL_ADC_ENABLE(hadc);
 80010e0:	68ab      	ldr	r3, [r5, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80010e2:	fba6 6000 	umull	r6, r0, r6, r0
    __HAL_ADC_ENABLE(hadc);
 80010e6:	f043 0301 	orr.w	r3, r3, #1
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80010ea:	0c80      	lsrs	r0, r0, #18
    __HAL_ADC_ENABLE(hadc);
 80010ec:	60ab      	str	r3, [r5, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80010ee:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80010f2:	9001      	str	r0, [sp, #4]
    while(counter != 0)
 80010f4:	9b01      	ldr	r3, [sp, #4]
 80010f6:	b12b      	cbz	r3, 8001104 <HAL_ADC_Start_DMA+0x4c>
      counter--;
 80010f8:	9801      	ldr	r0, [sp, #4]
 80010fa:	3801      	subs	r0, #1
 80010fc:	9001      	str	r0, [sp, #4]
    while(counter != 0)
 80010fe:	9801      	ldr	r0, [sp, #4]
 8001100:	2800      	cmp	r0, #0
 8001102:	d1f9      	bne.n	80010f8 <HAL_ADC_Start_DMA+0x40>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001104:	68a8      	ldr	r0, [r5, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8001106:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001108:	f010 0001 	ands.w	r0, r0, #1
 800110c:	d044      	beq.n	8001198 <HAL_ADC_Start_DMA+0xe0>
    ADC_STATE_CLR_SET(hadc->State,
 800110e:	483c      	ldr	r0, [pc, #240]	; (8001200 <HAL_ADC_Start_DMA+0x148>)
 8001110:	4018      	ands	r0, r3
 8001112:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8001116:	6420      	str	r0, [r4, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001118:	686b      	ldr	r3, [r5, #4]
 800111a:	0558      	lsls	r0, r3, #21
 800111c:	d505      	bpl.n	800112a <HAL_ADC_Start_DMA+0x72>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800111e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001120:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001124:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001128:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800112a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800112c:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 8001130:	d047      	beq.n	80011c2 <HAL_ADC_Start_DMA+0x10a>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001132:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001134:	f023 0306 	bic.w	r3, r3, #6
 8001138:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800113a:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 800113c:	4613      	mov	r3, r2
 800113e:	f8df e0d8 	ldr.w	lr, [pc, #216]	; 8001218 <HAL_ADC_Start_DMA+0x160>
 8001142:	460a      	mov	r2, r1
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001144:	f06f 0c22 	mvn.w	ip, #34	; 0x22
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001148:	482e      	ldr	r0, [pc, #184]	; (8001204 <HAL_ADC_Start_DMA+0x14c>)
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800114a:	492f      	ldr	r1, [pc, #188]	; (8001208 <HAL_ADC_Start_DMA+0x150>)
    __HAL_UNLOCK(hadc);   
 800114c:	2600      	movs	r6, #0
 800114e:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001152:	64f9      	str	r1, [r7, #76]	; 0x4c
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001154:	f105 014c 	add.w	r1, r5, #76	; 0x4c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001158:	e9c7 e00f 	strd	lr, r0, [r7, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800115c:	f8c5 c000 	str.w	ip, [r5]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001160:	4638      	mov	r0, r7
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001162:	686f      	ldr	r7, [r5, #4]
 8001164:	f047 6780 	orr.w	r7, r7, #67108864	; 0x4000000
 8001168:	606f      	str	r7, [r5, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800116a:	68af      	ldr	r7, [r5, #8]
 800116c:	f447 7780 	orr.w	r7, r7, #256	; 0x100
 8001170:	60af      	str	r7, [r5, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001172:	f000 fa6f 	bl	8001654 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001176:	4b25      	ldr	r3, [pc, #148]	; (800120c <HAL_ADC_Start_DMA+0x154>)
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001178:	6822      	ldr	r2, [r4, #0]
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800117a:	6858      	ldr	r0, [r3, #4]
 800117c:	f010 001f 	ands.w	r0, r0, #31
 8001180:	d113      	bne.n	80011aa <HAL_ADC_Start_DMA+0xf2>
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001182:	6893      	ldr	r3, [r2, #8]
 8001184:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8001188:	d10d      	bne.n	80011a6 <HAL_ADC_Start_DMA+0xee>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800118a:	6891      	ldr	r1, [r2, #8]
  return HAL_OK;
 800118c:	4618      	mov	r0, r3
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800118e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8001192:	6091      	str	r1, [r2, #8]
}
 8001194:	b003      	add	sp, #12
 8001196:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001198:	f043 0310 	orr.w	r3, r3, #16
 800119c:	6423      	str	r3, [r4, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800119e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	6463      	str	r3, [r4, #68]	; 0x44
}
 80011a6:	b003      	add	sp, #12
 80011a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011aa:	4919      	ldr	r1, [pc, #100]	; (8001210 <HAL_ADC_Start_DMA+0x158>)
 80011ac:	428a      	cmp	r2, r1
 80011ae:	d00a      	beq.n	80011c6 <HAL_ADC_Start_DMA+0x10e>
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80011b0:	685b      	ldr	r3, [r3, #4]
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011b2:	06db      	lsls	r3, r3, #27
 80011b4:	d402      	bmi.n	80011bc <HAL_ADC_Start_DMA+0x104>
 80011b6:	4917      	ldr	r1, [pc, #92]	; (8001214 <HAL_ADC_Start_DMA+0x15c>)
 80011b8:	428a      	cmp	r2, r1
 80011ba:	d013      	beq.n	80011e4 <HAL_ADC_Start_DMA+0x12c>
  return HAL_OK;
 80011bc:	2000      	movs	r0, #0
}
 80011be:	b003      	add	sp, #12
 80011c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ADC_CLEAR_ERRORCODE(hadc);
 80011c2:	6463      	str	r3, [r4, #68]	; 0x44
 80011c4:	e7b9      	b.n	800113a <HAL_ADC_Start_DMA+0x82>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011c6:	6893      	ldr	r3, [r2, #8]
 80011c8:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 80011cc:	d103      	bne.n	80011d6 <HAL_ADC_Start_DMA+0x11e>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011ce:	6893      	ldr	r3, [r2, #8]
 80011d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80011d4:	6093      	str	r3, [r2, #8]
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80011d6:	4b0d      	ldr	r3, [pc, #52]	; (800120c <HAL_ADC_Start_DMA+0x154>)
  return HAL_OK;
 80011d8:	2000      	movs	r0, #0
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	e7e3      	b.n	80011a6 <HAL_ADC_Start_DMA+0xee>
  __HAL_LOCK(hadc);
 80011de:	2002      	movs	r0, #2
}
 80011e0:	b003      	add	sp, #12
 80011e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011e4:	6888      	ldr	r0, [r1, #8]
 80011e6:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 80011ea:	d1e7      	bne.n	80011bc <HAL_ADC_Start_DMA+0x104>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011ec:	688b      	ldr	r3, [r1, #8]
 80011ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80011f2:	608b      	str	r3, [r1, #8]
 80011f4:	e7d7      	b.n	80011a6 <HAL_ADC_Start_DMA+0xee>
 80011f6:	bf00      	nop
 80011f8:	20000008 	.word	0x20000008
 80011fc:	431bde83 	.word	0x431bde83
 8001200:	fffff8fe 	.word	0xfffff8fe
 8001204:	08001221 	.word	0x08001221
 8001208:	08001231 	.word	0x08001231
 800120c:	40012300 	.word	0x40012300
 8001210:	40012000 	.word	0x40012000
 8001214:	40012200 	.word	0x40012200
 8001218:	08001249 	.word	0x08001249

0800121c <HAL_ADC_ConvHalfCpltCallback>:
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop

08001220 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001220:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001222:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001224:	f7ff fffa 	bl	800121c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001228:	bd08      	pop	{r3, pc}
 800122a:	bf00      	nop

0800122c <HAL_ADC_ErrorCallback>:
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop

08001230 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001230:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001232:	2240      	movs	r2, #64	; 0x40
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001234:	6b83      	ldr	r3, [r0, #56]	; 0x38
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001236:	641a      	str	r2, [r3, #64]	; 0x40
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001238:	4618      	mov	r0, r3
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800123a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800123c:	f042 0204 	orr.w	r2, r2, #4
 8001240:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_ADC_ErrorCallback(hadc);
 8001242:	f7ff fff3 	bl	800122c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001246:	bd08      	pop	{r3, pc}

08001248 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001248:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800124a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800124c:	f012 0f50 	tst.w	r2, #80	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001250:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8001252:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001254:	d123      	bne.n	800129e <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001256:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800125a:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800125c:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800125e:	688a      	ldr	r2, [r1, #8]
 8001260:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001264:	d117      	bne.n	8001296 <ADC_DMAConvCplt+0x4e>
 8001266:	699a      	ldr	r2, [r3, #24]
 8001268:	b9aa      	cbnz	r2, 8001296 <ADC_DMAConvCplt+0x4e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800126a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800126c:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8001270:	d002      	beq.n	8001278 <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001272:	688a      	ldr	r2, [r1, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001274:	0550      	lsls	r0, r2, #21
 8001276:	d40e      	bmi.n	8001296 <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001278:	684a      	ldr	r2, [r1, #4]
 800127a:	f022 0220 	bic.w	r2, r2, #32
 800127e:	604a      	str	r2, [r1, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001280:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001282:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001286:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001288:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800128a:	04d1      	lsls	r1, r2, #19
 800128c:	d403      	bmi.n	8001296 <ADC_DMAConvCplt+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800128e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001290:	f042 0201 	orr.w	r2, r2, #1
 8001294:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8001296:	4618      	mov	r0, r3
 8001298:	f004 f9d8 	bl	800564c <HAL_ADC_ConvCpltCallback>
}
 800129c:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800129e:	06d2      	lsls	r2, r2, #27
 80012a0:	d404      	bmi.n	80012ac <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80012a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 80012a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80012a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012aa:	4718      	bx	r3
      HAL_ADC_ErrorCallback(hadc);
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ffbd 	bl	800122c <HAL_ADC_ErrorCallback>
}
 80012b2:	bd10      	pop	{r4, pc}

080012b4 <HAL_ADC_ConfigChannel>:
  __HAL_LOCK(hadc);
 80012b4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  __IO uint32_t counter = 0;
 80012b8:	2200      	movs	r2, #0
{
 80012ba:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 80012bc:	2b01      	cmp	r3, #1
{
 80012be:	b083      	sub	sp, #12
  __IO uint32_t counter = 0;
 80012c0:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80012c2:	f000 809d 	beq.w	8001400 <HAL_ADC_ConfigChannel+0x14c>
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80012c6:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 80012c8:	2201      	movs	r2, #1
 80012ca:	6803      	ldr	r3, [r0, #0]
 80012cc:	b2b7      	uxth	r7, r6
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80012ce:	2e09      	cmp	r6, #9
  __HAL_LOCK(hadc);
 80012d0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
 80012d4:	eb07 0547 	add.w	r5, r7, r7, lsl #1
 80012d8:	688a      	ldr	r2, [r1, #8]
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80012da:	d92f      	bls.n	800133c <HAL_ADC_ConfigChannel+0x88>
 80012dc:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
 80012e0:	d02c      	beq.n	800133c <HAL_ADC_ConfigChannel+0x88>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80012e2:	3d1e      	subs	r5, #30
 80012e4:	f04f 0c07 	mov.w	ip, #7
 80012e8:	68dc      	ldr	r4, [r3, #12]
 80012ea:	fa0c fc05 	lsl.w	ip, ip, r5
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012ee:	f8df e138 	ldr.w	lr, [pc, #312]	; 8001428 <HAL_ADC_ConfigChannel+0x174>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80012f2:	ea24 040c 	bic.w	r4, r4, ip
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012f6:	4576      	cmp	r6, lr
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80012f8:	60dc      	str	r4, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012fa:	f000 8084 	beq.w	8001406 <HAL_ADC_ConfigChannel+0x152>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80012fe:	fa02 f505 	lsl.w	r5, r2, r5
 8001302:	68da      	ldr	r2, [r3, #12]
 8001304:	4315      	orrs	r5, r2
 8001306:	60dd      	str	r5, [r3, #12]
  if (sConfig->Rank < 7)
 8001308:	6849      	ldr	r1, [r1, #4]
 800130a:	2906      	cmp	r1, #6
 800130c:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8001310:	d826      	bhi.n	8001360 <HAL_ADC_ConfigChannel+0xac>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001312:	3a05      	subs	r2, #5
 8001314:	241f      	movs	r4, #31
 8001316:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001318:	4094      	lsls	r4, r2
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800131a:	fa07 f202 	lsl.w	r2, r7, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800131e:	ea21 0104 	bic.w	r1, r1, r4
 8001322:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001324:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001326:	430a      	orrs	r2, r1
 8001328:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800132a:	4a3e      	ldr	r2, [pc, #248]	; (8001424 <HAL_ADC_ConfigChannel+0x170>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d029      	beq.n	8001384 <HAL_ADC_ConfigChannel+0xd0>
  __HAL_UNLOCK(hadc);
 8001330:	2300      	movs	r3, #0
 8001332:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001336:	4618      	mov	r0, r3
}
 8001338:	b003      	add	sp, #12
 800133a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800133c:	f04f 0c07 	mov.w	ip, #7
 8001340:	691c      	ldr	r4, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001342:	40aa      	lsls	r2, r5
  if (sConfig->Rank < 7)
 8001344:	6849      	ldr	r1, [r1, #4]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001346:	fa0c f505 	lsl.w	r5, ip, r5
  if (sConfig->Rank < 7)
 800134a:	2906      	cmp	r1, #6
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800134c:	ea24 0505 	bic.w	r5, r4, r5
 8001350:	611d      	str	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001352:	691d      	ldr	r5, [r3, #16]
 8001354:	ea45 0502 	orr.w	r5, r5, r2
 8001358:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800135c:	611d      	str	r5, [r3, #16]
  if (sConfig->Rank < 7)
 800135e:	d9d8      	bls.n	8001312 <HAL_ADC_ConfigChannel+0x5e>
  else if (sConfig->Rank < 13)
 8001360:	290c      	cmp	r1, #12
 8001362:	d838      	bhi.n	80013d6 <HAL_ADC_ConfigChannel+0x122>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001364:	f1a2 0423 	sub.w	r4, r2, #35	; 0x23
 8001368:	251f      	movs	r5, #31
 800136a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800136c:	40a5      	lsls	r5, r4
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800136e:	fa07 f204 	lsl.w	r2, r7, r4
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001372:	ea21 0105 	bic.w	r1, r1, r5
 8001376:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001378:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800137a:	4314      	orrs	r4, r2
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800137c:	4a29      	ldr	r2, [pc, #164]	; (8001424 <HAL_ADC_ConfigChannel+0x170>)
 800137e:	4293      	cmp	r3, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001380:	631c      	str	r4, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001382:	d1d5      	bne.n	8001330 <HAL_ADC_ConfigChannel+0x7c>
 8001384:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
 8001388:	d033      	beq.n	80013f2 <HAL_ADC_ConfigChannel+0x13e>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800138a:	2e12      	cmp	r6, #18
 800138c:	d040      	beq.n	8001410 <HAL_ADC_ConfigChannel+0x15c>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800138e:	4b26      	ldr	r3, [pc, #152]	; (8001428 <HAL_ADC_ConfigChannel+0x174>)
 8001390:	429e      	cmp	r6, r3
 8001392:	d143      	bne.n	800141c <HAL_ADC_ConfigChannel+0x168>
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001394:	4a25      	ldr	r2, [pc, #148]	; (800142c <HAL_ADC_ConfigChannel+0x178>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001396:	4924      	ldr	r1, [pc, #144]	; (8001428 <HAL_ADC_ConfigChannel+0x174>)
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001398:	6853      	ldr	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800139a:	428e      	cmp	r6, r1
    ADC->CCR |= ADC_CCR_TSVREFE;
 800139c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80013a0:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013a2:	d1c5      	bne.n	8001330 <HAL_ADC_ConfigChannel+0x7c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80013a4:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 80013a8:	4b21      	ldr	r3, [pc, #132]	; (8001430 <HAL_ADC_ConfigChannel+0x17c>)
 80013aa:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f202 3283 	addw	r2, r2, #899	; 0x383
 80013b4:	fba2 2303 	umull	r2, r3, r2, r3
 80013b8:	0c9b      	lsrs	r3, r3, #18
 80013ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 80013c2:	9b01      	ldr	r3, [sp, #4]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d0b3      	beq.n	8001330 <HAL_ADC_ConfigChannel+0x7c>
        counter--;
 80013c8:	9b01      	ldr	r3, [sp, #4]
 80013ca:	3b01      	subs	r3, #1
 80013cc:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 80013ce:	9b01      	ldr	r3, [sp, #4]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1f9      	bne.n	80013c8 <HAL_ADC_ConfigChannel+0x114>
 80013d4:	e7ac      	b.n	8001330 <HAL_ADC_ConfigChannel+0x7c>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80013d6:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 80013da:	251f      	movs	r5, #31
 80013dc:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80013de:	408d      	lsls	r5, r1
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80013e0:	fa07 f201 	lsl.w	r2, r7, r1
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80013e4:	ea24 0405 	bic.w	r4, r4, r5
 80013e8:	62dc      	str	r4, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80013ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013ec:	430a      	orrs	r2, r1
 80013ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80013f0:	e79b      	b.n	800132a <HAL_ADC_ConfigChannel+0x76>
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80013f2:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 80013f6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80013fa:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
 80013fe:	e797      	b.n	8001330 <HAL_ADC_ConfigChannel+0x7c>
  __HAL_LOCK(hadc);
 8001400:	2002      	movs	r0, #2
}
 8001402:	b003      	add	sp, #12
 8001404:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001406:	68dd      	ldr	r5, [r3, #12]
 8001408:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
 800140c:	60dd      	str	r5, [r3, #12]
 800140e:	e77b      	b.n	8001308 <HAL_ADC_ConfigChannel+0x54>
    ADC->CCR |= ADC_CCR_VBATE;
 8001410:	4a06      	ldr	r2, [pc, #24]	; (800142c <HAL_ADC_ConfigChannel+0x178>)
 8001412:	6853      	ldr	r3, [r2, #4]
 8001414:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001418:	6053      	str	r3, [r2, #4]
 800141a:	e789      	b.n	8001330 <HAL_ADC_ConfigChannel+0x7c>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800141c:	2e11      	cmp	r6, #17
 800141e:	d0b9      	beq.n	8001394 <HAL_ADC_ConfigChannel+0xe0>
 8001420:	e786      	b.n	8001330 <HAL_ADC_ConfigChannel+0x7c>
 8001422:	bf00      	nop
 8001424:	40012000 	.word	0x40012000
 8001428:	10000012 	.word	0x10000012
 800142c:	40012300 	.word	0x40012300
 8001430:	20000008 	.word	0x20000008

08001434 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001434:	4907      	ldr	r1, [pc, #28]	; (8001454 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001436:	0200      	lsls	r0, r0, #8
 8001438:	4b07      	ldr	r3, [pc, #28]	; (8001458 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800143a:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800143c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001440:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001442:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8001446:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001448:	f85d 4b04 	ldr.w	r4, [sp], #4
 800144c:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800144e:	4318      	orrs	r0, r3
  SCB->AIRCR =  reg_value;
 8001450:	60c8      	str	r0, [r1, #12]
 8001452:	4770      	bx	lr
 8001454:	e000ed00 	.word	0xe000ed00
 8001458:	05fa0000 	.word	0x05fa0000

0800145c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800145c:	4b17      	ldr	r3, [pc, #92]	; (80014bc <HAL_NVIC_SetPriority+0x60>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001464:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001466:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800146a:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800146c:	2d04      	cmp	r5, #4
 800146e:	bf28      	it	cs
 8001470:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001472:	2c06      	cmp	r4, #6
 8001474:	d918      	bls.n	80014a8 <HAL_NVIC_SetPriority+0x4c>
 8001476:	3b03      	subs	r3, #3
 8001478:	f04f 34ff 	mov.w	r4, #4294967295
 800147c:	409c      	lsls	r4, r3
 800147e:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001482:	f04f 32ff 	mov.w	r2, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8001486:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001488:	fa02 f205 	lsl.w	r2, r2, r5
 800148c:	ea21 0102 	bic.w	r1, r1, r2
 8001490:	fa01 f203 	lsl.w	r2, r1, r3
 8001494:	ea42 0204 	orr.w	r2, r2, r4
 8001498:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800149c:	b2d2      	uxtb	r2, r2
  if ((int32_t)(IRQn) >= 0)
 800149e:	db06      	blt.n	80014ae <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a0:	4b07      	ldr	r3, [pc, #28]	; (80014c0 <HAL_NVIC_SetPriority+0x64>)
 80014a2:	541a      	strb	r2, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80014a4:	bc30      	pop	{r4, r5}
 80014a6:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014a8:	2400      	movs	r4, #0
 80014aa:	4623      	mov	r3, r4
 80014ac:	e7e9      	b.n	8001482 <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ae:	f000 000f 	and.w	r0, r0, #15
 80014b2:	4b04      	ldr	r3, [pc, #16]	; (80014c4 <HAL_NVIC_SetPriority+0x68>)
 80014b4:	541a      	strb	r2, [r3, r0]
 80014b6:	bc30      	pop	{r4, r5}
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	e000ed00 	.word	0xe000ed00
 80014c0:	e000e400 	.word	0xe000e400
 80014c4:	e000ed14 	.word	0xe000ed14

080014c8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80014c8:	2800      	cmp	r0, #0
 80014ca:	db07      	blt.n	80014dc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014cc:	f000 011f 	and.w	r1, r0, #31
 80014d0:	2301      	movs	r3, #1
 80014d2:	0940      	lsrs	r0, r0, #5
 80014d4:	4a02      	ldr	r2, [pc, #8]	; (80014e0 <HAL_NVIC_EnableIRQ+0x18>)
 80014d6:	408b      	lsls	r3, r1
 80014d8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	e000e100 	.word	0xe000e100

080014e4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014e4:	3801      	subs	r0, #1
 80014e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80014ea:	d20d      	bcs.n	8001508 <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ec:	4b07      	ldr	r3, [pc, #28]	; (800150c <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014ee:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014f0:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014f2:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f4:	25f0      	movs	r5, #240	; 0xf0
 80014f6:	4c06      	ldr	r4, [pc, #24]	; (8001510 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014f8:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014fa:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014fc:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001500:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001502:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8001504:	bc30      	pop	{r4, r5}
 8001506:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001508:	2001      	movs	r0, #1
 800150a:	4770      	bx	lr
 800150c:	e000e010 	.word	0xe000e010
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001514:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001516:	f004 f891 	bl	800563c <HAL_SYSTICK_Callback>
}
 800151a:	bd08      	pop	{r3, pc}

0800151c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800151c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800151e:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8001520:	f7ff fcfc 	bl	8000f1c <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001524:	2c00      	cmp	r4, #0
 8001526:	d053      	beq.n	80015d0 <HAL_DMA_Init+0xb4>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001528:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800152a:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 800152c:	2100      	movs	r1, #0
 800152e:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8001530:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8001534:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 8001536:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 800153a:	f022 0201 	bic.w	r2, r2, #1
 800153e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001540:	e005      	b.n	800154e <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001542:	f7ff fceb 	bl	8000f1c <HAL_GetTick>
 8001546:	1b40      	subs	r0, r0, r5
 8001548:	2805      	cmp	r0, #5
 800154a:	d83a      	bhi.n	80015c2 <HAL_DMA_Init+0xa6>
 800154c:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	07d1      	lsls	r1, r2, #31
 8001552:	d4f6      	bmi.n	8001542 <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001554:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8001558:	68e1      	ldr	r1, [r4, #12]
 800155a:	4302      	orrs	r2, r0
  tmp = hdma->Instance->CR;
 800155c:	681f      	ldr	r7, [r3, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800155e:	e9d4 0504 	ldrd	r0, r5, [r4, #16]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001562:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001564:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;
 8001566:	6a20      	ldr	r0, [r4, #32]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001568:	e9d4 6106 	ldrd	r6, r1, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800156c:	432a      	orrs	r2, r5
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800156e:	4d35      	ldr	r5, [pc, #212]	; (8001644 <HAL_DMA_Init+0x128>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001570:	4332      	orrs	r2, r6
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001572:	403d      	ands	r5, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001574:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001576:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hdma->Init.Mode                | hdma->Init.Priority;
 8001578:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800157a:	2904      	cmp	r1, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800157c:	ea42 0205 	orr.w	r2, r2, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001580:	d028      	beq.n	80015d4 <HAL_DMA_Init+0xb8>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001582:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001584:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001586:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800158a:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800158c:	b2da      	uxtb	r2, r3
 800158e:	4d2e      	ldr	r5, [pc, #184]	; (8001648 <HAL_DMA_Init+0x12c>)
  hdma->Instance->FCR = tmp;
 8001590:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001592:	3a10      	subs	r2, #16
 8001594:	492d      	ldr	r1, [pc, #180]	; (800164c <HAL_DMA_Init+0x130>)
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001596:	482e      	ldr	r0, [pc, #184]	; (8001650 <HAL_DMA_Init+0x134>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001598:	fba5 5202 	umull	r5, r2, r5, r2
 800159c:	4019      	ands	r1, r3
  hdma->State = HAL_DMA_STATE_READY;
 800159e:	2501      	movs	r5, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80015a0:	0913      	lsrs	r3, r2, #4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015a2:	2200      	movs	r2, #0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80015a4:	5cc0      	ldrb	r0, [r0, r3]
  
  if (stream_number > 3U)
 80015a6:	2b03      	cmp	r3, #3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015a8:	f04f 033f 	mov.w	r3, #63	; 0x3f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80015ac:	bf88      	it	hi
 80015ae:	3104      	addhi	r1, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80015b0:	65e0      	str	r0, [r4, #92]	; 0x5c
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015b2:	4083      	lsls	r3, r0
  return HAL_OK;
 80015b4:	4610      	mov	r0, r2
 80015b6:	65a1      	str	r1, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015b8:	608b      	str	r3, [r1, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015ba:	6562      	str	r2, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80015bc:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 80015c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015c4:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 80015c6:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015c8:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015ca:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80015ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80015d0:	2001      	movs	r0, #1
}
 80015d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015d4:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80015d8:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015da:	ea45 0001 	orr.w	r0, r5, r1
    tmp |= hdma->Init.FIFOThreshold;
 80015de:	f047 0104 	orr.w	r1, r7, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015e2:	4302      	orrs	r2, r0
  hdma->Instance->CR = tmp;  
 80015e4:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80015e6:	695a      	ldr	r2, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80015e8:	f022 0207 	bic.w	r2, r2, #7
    tmp |= hdma->Init.FIFOThreshold;
 80015ec:	4311      	orrs	r1, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80015ee:	2d00      	cmp	r5, #0
 80015f0:	d0cc      	beq.n	800158c <HAL_DMA_Init+0x70>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80015f2:	b17e      	cbz	r6, 8001614 <HAL_DMA_Init+0xf8>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80015f4:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 80015f8:	d016      	beq.n	8001628 <HAL_DMA_Init+0x10c>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80015fa:	2f02      	cmp	r7, #2
 80015fc:	d903      	bls.n	8001606 <HAL_DMA_Init+0xea>
 80015fe:	2f03      	cmp	r7, #3
 8001600:	d1c4      	bne.n	800158c <HAL_DMA_Init+0x70>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001602:	01ea      	lsls	r2, r5, #7
 8001604:	d5c2      	bpl.n	800158c <HAL_DMA_Init+0x70>
        hdma->State = HAL_DMA_STATE_READY;
 8001606:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001608:	2240      	movs	r2, #64	; 0x40
        return HAL_ERROR; 
 800160a:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800160c:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800160e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8001612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 8001614:	2f01      	cmp	r7, #1
 8001616:	d003      	beq.n	8001620 <HAL_DMA_Init+0x104>
 8001618:	d3f3      	bcc.n	8001602 <HAL_DMA_Init+0xe6>
 800161a:	2f02      	cmp	r7, #2
 800161c:	d1b6      	bne.n	800158c <HAL_DMA_Init+0x70>
 800161e:	e7f0      	b.n	8001602 <HAL_DMA_Init+0xe6>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001620:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8001624:	d1b2      	bne.n	800158c <HAL_DMA_Init+0x70>
 8001626:	e7ee      	b.n	8001606 <HAL_DMA_Init+0xea>
    switch (tmp)
 8001628:	2f03      	cmp	r7, #3
 800162a:	d8af      	bhi.n	800158c <HAL_DMA_Init+0x70>
 800162c:	a201      	add	r2, pc, #4	; (adr r2, 8001634 <HAL_DMA_Init+0x118>)
 800162e:	f852 f027 	ldr.w	pc, [r2, r7, lsl #2]
 8001632:	bf00      	nop
 8001634:	08001607 	.word	0x08001607
 8001638:	08001603 	.word	0x08001603
 800163c:	08001607 	.word	0x08001607
 8001640:	08001621 	.word	0x08001621
 8001644:	f010803f 	.word	0xf010803f
 8001648:	aaaaaaab 	.word	0xaaaaaaab
 800164c:	fffffc00 	.word	0xfffffc00
 8001650:	0800d878 	.word	0x0800d878

08001654 <HAL_DMA_Start_IT>:
{
 8001654:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 8001656:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800165a:	2c01      	cmp	r4, #1
 800165c:	d038      	beq.n	80016d0 <HAL_DMA_Start_IT+0x7c>
 800165e:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8001660:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001664:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 8001666:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 8001668:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800166c:	d129      	bne.n	80016c2 <HAL_DMA_Start_IT+0x6e>
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800166e:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8001670:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001672:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8001674:	f880 7035 	strb.w	r7, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001678:	6545      	str	r5, [r0, #84]	; 0x54
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800167a:	6887      	ldr	r7, [r0, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800167c:	6825      	ldr	r5, [r4, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800167e:	2f40      	cmp	r7, #64	; 0x40
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001680:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8001684:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8001686:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001688:	d026      	beq.n	80016d8 <HAL_DMA_Start_IT+0x84>
    hdma->Instance->PAR = SrcAddress;
 800168a:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 800168c:	60e2      	str	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800168e:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8001690:	233f      	movs	r3, #63	; 0x3f
    if(hdma->XferHalfCpltCallback != NULL)
 8001692:	6c02      	ldr	r2, [r0, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001694:	408b      	lsls	r3, r1
 8001696:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001698:	6823      	ldr	r3, [r4, #0]
 800169a:	f043 0316 	orr.w	r3, r3, #22
 800169e:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80016a0:	6963      	ldr	r3, [r4, #20]
 80016a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016a6:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 80016a8:	b11a      	cbz	r2, 80016b2 <HAL_DMA_Start_IT+0x5e>
      hdma->Instance->CR  |= DMA_IT_HT;
 80016aa:	6823      	ldr	r3, [r4, #0]
 80016ac:	f043 0308 	orr.w	r3, r3, #8
 80016b0:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80016b2:	6822      	ldr	r2, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016b4:	2300      	movs	r3, #0
    __HAL_DMA_ENABLE(hdma);
 80016b6:	f042 0201 	orr.w	r2, r2, #1
}
 80016ba:	4618      	mov	r0, r3
    __HAL_DMA_ENABLE(hdma);
 80016bc:	6022      	str	r2, [r4, #0]
}
 80016be:	bcf0      	pop	{r4, r5, r6, r7}
 80016c0:	4770      	bx	lr
    __HAL_UNLOCK(hdma);	  
 80016c2:	2200      	movs	r2, #0
    status = HAL_BUSY;
 80016c4:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);	  
 80016c6:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	bcf0      	pop	{r4, r5, r6, r7}
 80016ce:	4770      	bx	lr
  __HAL_LOCK(hdma);
 80016d0:	2302      	movs	r3, #2
}
 80016d2:	bcf0      	pop	{r4, r5, r6, r7}
 80016d4:	4618      	mov	r0, r3
 80016d6:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 80016d8:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 80016da:	60e1      	str	r1, [r4, #12]
 80016dc:	e7d7      	b.n	800168e <HAL_DMA_Start_IT+0x3a>
 80016de:	bf00      	nop

080016e0 <HAL_DMA_Abort>:
{
 80016e0:	b570      	push	{r4, r5, r6, lr}
 80016e2:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016e4:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 80016e6:	f7ff fc19 	bl	8000f1c <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016ea:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d006      	beq.n	8001700 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016f2:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 80016f4:	2300      	movs	r3, #0
    return HAL_ERROR;
 80016f6:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016f8:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80016fa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80016fe:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001700:	6823      	ldr	r3, [r4, #0]
 8001702:	4605      	mov	r5, r0
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001704:	6c21      	ldr	r1, [r4, #64]	; 0x40
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	f022 0216 	bic.w	r2, r2, #22
 800170c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800170e:	695a      	ldr	r2, [r3, #20]
 8001710:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001714:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001716:	b339      	cbz	r1, 8001768 <HAL_DMA_Abort+0x88>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	f022 0208 	bic.w	r2, r2, #8
 800171e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	f022 0201 	bic.w	r2, r2, #1
 8001726:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001728:	e005      	b.n	8001736 <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800172a:	f7ff fbf7 	bl	8000f1c <HAL_GetTick>
 800172e:	1b40      	subs	r0, r0, r5
 8001730:	2805      	cmp	r0, #5
 8001732:	d80f      	bhi.n	8001754 <HAL_DMA_Abort+0x74>
 8001734:	6823      	ldr	r3, [r4, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f013 0301 	ands.w	r3, r3, #1
 800173c:	d1f5      	bne.n	800172a <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800173e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001740:	223f      	movs	r2, #63	; 0x3f
  return HAL_OK;
 8001742:	4618      	mov	r0, r3
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001744:	408a      	lsls	r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 8001746:	2101      	movs	r1, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001748:	60b2      	str	r2, [r6, #8]
    __HAL_UNLOCK(hdma);
 800174a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 800174e:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
}
 8001752:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001754:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001756:	2120      	movs	r1, #32
        __HAL_UNLOCK(hdma);
 8001758:	2200      	movs	r2, #0
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800175a:	6561      	str	r1, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 800175c:	4618      	mov	r0, r3
        __HAL_UNLOCK(hdma);
 800175e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001762:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8001766:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001768:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800176a:	2a00      	cmp	r2, #0
 800176c:	d1d4      	bne.n	8001718 <HAL_DMA_Abort+0x38>
 800176e:	e7d7      	b.n	8001720 <HAL_DMA_Abort+0x40>

08001770 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001770:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
{
 8001774:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001776:	2a02      	cmp	r2, #2
 8001778:	d003      	beq.n	8001782 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800177a:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 800177c:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800177e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001780:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8001782:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8001784:	2105      	movs	r1, #5
  return HAL_OK;
 8001786:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_ABORT;
 8001788:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800178c:	6813      	ldr	r3, [r2, #0]
 800178e:	f023 0301 	bic.w	r3, r3, #1
 8001792:	6013      	str	r3, [r2, #0]
}
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop

08001798 <HAL_DMA_IRQHandler>:
{
 8001798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800179a:	4604      	mov	r4, r0
 800179c:	b083      	sub	sp, #12
  __IO uint32_t count = 0;
 800179e:	2000      	movs	r0, #0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80017a0:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 80017a2:	4966      	ldr	r1, [pc, #408]	; (800193c <HAL_DMA_IRQHandler+0x1a4>)
  __IO uint32_t count = 0;
 80017a4:	9001      	str	r0, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;
 80017a6:	680e      	ldr	r6, [r1, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80017a8:	e9d4 7316 	ldrd	r7, r3, [r4, #88]	; 0x58
 80017ac:	409a      	lsls	r2, r3
  tmpisr = regs->ISR;
 80017ae:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80017b0:	422a      	tst	r2, r5
 80017b2:	d003      	beq.n	80017bc <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80017b4:	6821      	ldr	r1, [r4, #0]
 80017b6:	6808      	ldr	r0, [r1, #0]
 80017b8:	0740      	lsls	r0, r0, #29
 80017ba:	d459      	bmi.n	8001870 <HAL_DMA_IRQHandler+0xd8>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80017bc:	2201      	movs	r2, #1
 80017be:	409a      	lsls	r2, r3
 80017c0:	422a      	tst	r2, r5
 80017c2:	d003      	beq.n	80017cc <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80017c4:	6821      	ldr	r1, [r4, #0]
 80017c6:	6949      	ldr	r1, [r1, #20]
 80017c8:	0608      	lsls	r0, r1, #24
 80017ca:	d474      	bmi.n	80018b6 <HAL_DMA_IRQHandler+0x11e>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80017cc:	2204      	movs	r2, #4
 80017ce:	409a      	lsls	r2, r3
 80017d0:	422a      	tst	r2, r5
 80017d2:	d003      	beq.n	80017dc <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80017d4:	6821      	ldr	r1, [r4, #0]
 80017d6:	6809      	ldr	r1, [r1, #0]
 80017d8:	0789      	lsls	r1, r1, #30
 80017da:	d466      	bmi.n	80018aa <HAL_DMA_IRQHandler+0x112>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80017dc:	2210      	movs	r2, #16
 80017de:	409a      	lsls	r2, r3
 80017e0:	422a      	tst	r2, r5
 80017e2:	d003      	beq.n	80017ec <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80017e4:	6821      	ldr	r1, [r4, #0]
 80017e6:	6808      	ldr	r0, [r1, #0]
 80017e8:	0700      	lsls	r0, r0, #28
 80017ea:	d44b      	bmi.n	8001884 <HAL_DMA_IRQHandler+0xec>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80017ec:	2220      	movs	r2, #32
 80017ee:	409a      	lsls	r2, r3
 80017f0:	422a      	tst	r2, r5
 80017f2:	d014      	beq.n	800181e <HAL_DMA_IRQHandler+0x86>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80017f4:	6821      	ldr	r1, [r4, #0]
 80017f6:	6808      	ldr	r0, [r1, #0]
 80017f8:	06c0      	lsls	r0, r0, #27
 80017fa:	d510      	bpl.n	800181e <HAL_DMA_IRQHandler+0x86>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80017fc:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80017fe:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8001802:	2a05      	cmp	r2, #5
 8001804:	d063      	beq.n	80018ce <HAL_DMA_IRQHandler+0x136>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001806:	680b      	ldr	r3, [r1, #0]
 8001808:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800180c:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800180e:	d07e      	beq.n	800190e <HAL_DMA_IRQHandler+0x176>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001810:	0319      	lsls	r1, r3, #12
 8001812:	f140 8089 	bpl.w	8001928 <HAL_DMA_IRQHandler+0x190>
        if(hdma->XferCpltCallback != NULL)
 8001816:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001818:	b10b      	cbz	r3, 800181e <HAL_DMA_IRQHandler+0x86>
          hdma->XferCpltCallback(hdma);
 800181a:	4620      	mov	r0, r4
 800181c:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800181e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001820:	b323      	cbz	r3, 800186c <HAL_DMA_IRQHandler+0xd4>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001822:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001824:	07da      	lsls	r2, r3, #31
 8001826:	d51a      	bpl.n	800185e <HAL_DMA_IRQHandler+0xc6>
      __HAL_DMA_DISABLE(hdma);
 8001828:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 800182a:	2105      	movs	r1, #5
  uint32_t timeout = SystemCoreClock / 9600;
 800182c:	4b44      	ldr	r3, [pc, #272]	; (8001940 <HAL_DMA_IRQHandler+0x1a8>)
      hdma->State = HAL_DMA_STATE_ABORT;
 800182e:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  uint32_t timeout = SystemCoreClock / 9600;
 8001832:	fba3 3606 	umull	r3, r6, r3, r6
      __HAL_DMA_DISABLE(hdma);
 8001836:	6813      	ldr	r3, [r2, #0]
 8001838:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600;
 800183c:	0ab6      	lsrs	r6, r6, #10
      __HAL_DMA_DISABLE(hdma);
 800183e:	6013      	str	r3, [r2, #0]
 8001840:	e002      	b.n	8001848 <HAL_DMA_IRQHandler+0xb0>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001842:	6813      	ldr	r3, [r2, #0]
 8001844:	07db      	lsls	r3, r3, #31
 8001846:	d504      	bpl.n	8001852 <HAL_DMA_IRQHandler+0xba>
        if (++count > timeout)
 8001848:	9b01      	ldr	r3, [sp, #4]
 800184a:	3301      	adds	r3, #1
 800184c:	42b3      	cmp	r3, r6
 800184e:	9301      	str	r3, [sp, #4]
 8001850:	d9f7      	bls.n	8001842 <HAL_DMA_IRQHandler+0xaa>
      __HAL_UNLOCK(hdma);
 8001852:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 8001854:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 8001856:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800185a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 800185e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001860:	b123      	cbz	r3, 800186c <HAL_DMA_IRQHandler+0xd4>
      hdma->XferErrorCallback(hdma);
 8001862:	4620      	mov	r0, r4
}
 8001864:	b003      	add	sp, #12
 8001866:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 800186a:	4718      	bx	r3
}
 800186c:	b003      	add	sp, #12
 800186e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001870:	6808      	ldr	r0, [r1, #0]
 8001872:	f020 0004 	bic.w	r0, r0, #4
 8001876:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001878:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800187a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800187c:	f042 0201 	orr.w	r2, r2, #1
 8001880:	6562      	str	r2, [r4, #84]	; 0x54
 8001882:	e79b      	b.n	80017bc <HAL_DMA_IRQHandler+0x24>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001884:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001886:	680a      	ldr	r2, [r1, #0]
 8001888:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800188c:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800188e:	d118      	bne.n	80018c2 <HAL_DMA_IRQHandler+0x12a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001890:	05d2      	lsls	r2, r2, #23
 8001892:	d403      	bmi.n	800189c <HAL_DMA_IRQHandler+0x104>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001894:	680a      	ldr	r2, [r1, #0]
 8001896:	f022 0208 	bic.w	r2, r2, #8
 800189a:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800189c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800189e:	2a00      	cmp	r2, #0
 80018a0:	d0a4      	beq.n	80017ec <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 80018a2:	4620      	mov	r0, r4
 80018a4:	4790      	blx	r2
 80018a6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80018a8:	e7a0      	b.n	80017ec <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80018aa:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80018ac:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80018ae:	f042 0204 	orr.w	r2, r2, #4
 80018b2:	6562      	str	r2, [r4, #84]	; 0x54
 80018b4:	e792      	b.n	80017dc <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80018b6:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80018b8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80018ba:	f042 0202 	orr.w	r2, r2, #2
 80018be:	6562      	str	r2, [r4, #84]	; 0x54
 80018c0:	e784      	b.n	80017cc <HAL_DMA_IRQHandler+0x34>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018c2:	0311      	lsls	r1, r2, #12
 80018c4:	d5ea      	bpl.n	800189c <HAL_DMA_IRQHandler+0x104>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80018c6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80018c8:	2a00      	cmp	r2, #0
 80018ca:	d1ea      	bne.n	80018a2 <HAL_DMA_IRQHandler+0x10a>
 80018cc:	e78e      	b.n	80017ec <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018ce:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018d0:	6c20      	ldr	r0, [r4, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018d2:	f022 0216 	bic.w	r2, r2, #22
 80018d6:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018d8:	694a      	ldr	r2, [r1, #20]
 80018da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018de:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018e0:	b338      	cbz	r0, 8001932 <HAL_DMA_IRQHandler+0x19a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018e2:	680a      	ldr	r2, [r1, #0]
 80018e4:	f022 0208 	bic.w	r2, r2, #8
 80018e8:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018ea:	223f      	movs	r2, #63	; 0x3f
        __HAL_UNLOCK(hdma);
 80018ec:	2000      	movs	r0, #0
        hdma->State = HAL_DMA_STATE_READY;
 80018ee:	2101      	movs	r1, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 80018f4:	6d22      	ldr	r2, [r4, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018f6:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 80018f8:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80018fc:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8001900:	2a00      	cmp	r2, #0
 8001902:	d0b3      	beq.n	800186c <HAL_DMA_IRQHandler+0xd4>
          hdma->XferAbortCallback(hdma);
 8001904:	4620      	mov	r0, r4
}
 8001906:	b003      	add	sp, #12
 8001908:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferAbortCallback(hdma);
 800190c:	4710      	bx	r2
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800190e:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8001912:	d180      	bne.n	8001816 <HAL_DMA_IRQHandler+0x7e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001914:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001916:	2001      	movs	r0, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001918:	f022 0210 	bic.w	r2, r2, #16
 800191c:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 800191e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8001922:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 8001926:	e776      	b.n	8001816 <HAL_DMA_IRQHandler+0x7e>
          if(hdma->XferM1CpltCallback != NULL)
 8001928:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800192a:	2b00      	cmp	r3, #0
 800192c:	f47f af75 	bne.w	800181a <HAL_DMA_IRQHandler+0x82>
 8001930:	e775      	b.n	800181e <HAL_DMA_IRQHandler+0x86>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001932:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001934:	2a00      	cmp	r2, #0
 8001936:	d1d4      	bne.n	80018e2 <HAL_DMA_IRQHandler+0x14a>
 8001938:	e7d7      	b.n	80018ea <HAL_DMA_IRQHandler+0x152>
 800193a:	bf00      	nop
 800193c:	20000008 	.word	0x20000008
 8001940:	1b4e81b5 	.word	0x1b4e81b5

08001944 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001948:	4688      	mov	r8, r1
 800194a:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800194c:	2400      	movs	r4, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800194e:	f8d1 9000 	ldr.w	r9, [r1]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001952:	f8df e1f8 	ldr.w	lr, [pc, #504]	; 8001b4c <HAL_GPIO_Init+0x208>
 8001956:	e003      	b.n	8001960 <HAL_GPIO_Init+0x1c>
  for(position = 0; position < GPIO_NUMBER; position++)
 8001958:	3401      	adds	r4, #1
 800195a:	2c10      	cmp	r4, #16
 800195c:	f000 80b6 	beq.w	8001acc <HAL_GPIO_Init+0x188>
    ioposition = ((uint32_t)0x01) << position;
 8001960:	2301      	movs	r3, #1
 8001962:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001964:	ea09 0203 	and.w	r2, r9, r3
    if(iocurrent == ioposition)
 8001968:	4293      	cmp	r3, r2
 800196a:	d1f5      	bne.n	8001958 <HAL_GPIO_Init+0x14>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800196c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8001970:	0067      	lsls	r7, r4, #1
 8001972:	2103      	movs	r1, #3
 8001974:	f025 0c10 	bic.w	ip, r5, #16
 8001978:	40b9      	lsls	r1, r7
 800197a:	f10c 33ff 	add.w	r3, ip, #4294967295
 800197e:	43c9      	mvns	r1, r1
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001980:	2b01      	cmp	r3, #1
 8001982:	d810      	bhi.n	80019a6 <HAL_GPIO_Init+0x62>
        temp = GPIOx->OSPEEDR; 
 8001984:	6886      	ldr	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001986:	f3c5 1300 	ubfx	r3, r5, #4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800198a:	ea06 0a01 	and.w	sl, r6, r1
        temp |= (GPIO_Init->Speed << (position * 2));
 800198e:	f8d8 600c 	ldr.w	r6, [r8, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001992:	40a3      	lsls	r3, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8001994:	40be      	lsls	r6, r7
 8001996:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 800199a:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800199c:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800199e:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80019a2:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 80019a4:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 80019a6:	68c3      	ldr	r3, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019a8:	f1bc 0f02 	cmp.w	ip, #2
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80019ac:	f8d8 6008 	ldr.w	r6, [r8, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80019b0:	ea03 0301 	and.w	r3, r3, r1
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80019b4:	fa06 f607 	lsl.w	r6, r6, r7
 80019b8:	ea46 0603 	orr.w	r6, r6, r3
      GPIOx->PUPDR = temp;
 80019bc:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019be:	d115      	bne.n	80019ec <HAL_GPIO_Init+0xa8>
        temp = GPIOx->AFR[position >> 3];
 80019c0:	08e3      	lsrs	r3, r4, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80019c2:	f004 0c07 	and.w	ip, r4, #7
 80019c6:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80019ca:	f8d8 6010 	ldr.w	r6, [r8, #16]
 80019ce:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80019d2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp = GPIOx->AFR[position >> 3];
 80019d6:	f8d3 a020 	ldr.w	sl, [r3, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80019da:	fa0b fb0c 	lsl.w	fp, fp, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80019de:	fa06 f60c 	lsl.w	r6, r6, ip
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80019e2:	ea2a 0a0b 	bic.w	sl, sl, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80019e6:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3] = temp;
 80019ea:	621e      	str	r6, [r3, #32]
      temp = GPIOx->MODER;
 80019ec:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80019ee:	f005 0303 	and.w	r3, r5, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80019f2:	4031      	ands	r1, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80019f4:	40bb      	lsls	r3, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019f6:	00ef      	lsls	r7, r5, #3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80019f8:	ea43 0301 	orr.w	r3, r3, r1
      GPIOx->MODER = temp;
 80019fc:	6003      	str	r3, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019fe:	d5ab      	bpl.n	8001958 <HAL_GPIO_Init+0x14>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a00:	4b48      	ldr	r3, [pc, #288]	; (8001b24 <HAL_GPIO_Init+0x1e0>)
 8001a02:	f024 0603 	bic.w	r6, r4, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a06:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a0a:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a12:	f004 0303 	and.w	r3, r4, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a16:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001a1a:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a1e:	009b      	lsls	r3, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a20:	644f      	str	r7, [r1, #68]	; 0x44
 8001a22:	6c4f      	ldr	r7, [r1, #68]	; 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a24:	fa0c f103 	lsl.w	r1, ip, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a28:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001a2c:	9701      	str	r7, [sp, #4]
 8001a2e:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001a30:	68b7      	ldr	r7, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a32:	ea27 0101 	bic.w	r1, r7, r1
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a36:	4f3c      	ldr	r7, [pc, #240]	; (8001b28 <HAL_GPIO_Init+0x1e4>)
 8001a38:	42b8      	cmp	r0, r7
 8001a3a:	d020      	beq.n	8001a7e <HAL_GPIO_Init+0x13a>
 8001a3c:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001a40:	42b8      	cmp	r0, r7
 8001a42:	d046      	beq.n	8001ad2 <HAL_GPIO_Init+0x18e>
 8001a44:	4f39      	ldr	r7, [pc, #228]	; (8001b2c <HAL_GPIO_Init+0x1e8>)
 8001a46:	42b8      	cmp	r0, r7
 8001a48:	d048      	beq.n	8001adc <HAL_GPIO_Init+0x198>
 8001a4a:	4f39      	ldr	r7, [pc, #228]	; (8001b30 <HAL_GPIO_Init+0x1ec>)
 8001a4c:	42b8      	cmp	r0, r7
 8001a4e:	d04a      	beq.n	8001ae6 <HAL_GPIO_Init+0x1a2>
 8001a50:	4f38      	ldr	r7, [pc, #224]	; (8001b34 <HAL_GPIO_Init+0x1f0>)
 8001a52:	42b8      	cmp	r0, r7
 8001a54:	d04c      	beq.n	8001af0 <HAL_GPIO_Init+0x1ac>
 8001a56:	4f38      	ldr	r7, [pc, #224]	; (8001b38 <HAL_GPIO_Init+0x1f4>)
 8001a58:	42b8      	cmp	r0, r7
 8001a5a:	d053      	beq.n	8001b04 <HAL_GPIO_Init+0x1c0>
 8001a5c:	4f37      	ldr	r7, [pc, #220]	; (8001b3c <HAL_GPIO_Init+0x1f8>)
 8001a5e:	42b8      	cmp	r0, r7
 8001a60:	d055      	beq.n	8001b0e <HAL_GPIO_Init+0x1ca>
 8001a62:	4f37      	ldr	r7, [pc, #220]	; (8001b40 <HAL_GPIO_Init+0x1fc>)
 8001a64:	42b8      	cmp	r0, r7
 8001a66:	d048      	beq.n	8001afa <HAL_GPIO_Init+0x1b6>
 8001a68:	4f36      	ldr	r7, [pc, #216]	; (8001b44 <HAL_GPIO_Init+0x200>)
 8001a6a:	42b8      	cmp	r0, r7
 8001a6c:	d054      	beq.n	8001b18 <HAL_GPIO_Init+0x1d4>
 8001a6e:	4f36      	ldr	r7, [pc, #216]	; (8001b48 <HAL_GPIO_Init+0x204>)
 8001a70:	42b8      	cmp	r0, r7
 8001a72:	bf0c      	ite	eq
 8001a74:	2709      	moveq	r7, #9
 8001a76:	270a      	movne	r7, #10
 8001a78:	fa07 f303 	lsl.w	r3, r7, r3
 8001a7c:	4319      	orrs	r1, r3
        SYSCFG->EXTICR[position >> 2] = temp;
 8001a7e:	60b1      	str	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8001a80:	43d1      	mvns	r1, r2
        temp = EXTI->IMR;
 8001a82:	f8de 3000 	ldr.w	r3, [lr]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a86:	03ee      	lsls	r6, r5, #15
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a88:	f104 0401 	add.w	r4, r4, #1
        temp &= ~((uint32_t)iocurrent);
 8001a8c:	bf54      	ite	pl
 8001a8e:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 8001a90:	4313      	orrmi	r3, r2
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a92:	03af      	lsls	r7, r5, #14
        EXTI->IMR = temp;
 8001a94:	f8ce 3000 	str.w	r3, [lr]
        temp = EXTI->EMR;
 8001a98:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
 8001a9c:	bf54      	ite	pl
 8001a9e:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 8001aa0:	4313      	orrmi	r3, r2
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001aa2:	02ee      	lsls	r6, r5, #11
        EXTI->EMR = temp;
 8001aa4:	f8ce 3004 	str.w	r3, [lr, #4]
        temp = EXTI->RTSR;
 8001aa8:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
 8001aac:	bf54      	ite	pl
 8001aae:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 8001ab0:	4313      	orrmi	r3, r2
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ab2:	02ad      	lsls	r5, r5, #10
        EXTI->RTSR = temp;
 8001ab4:	f8ce 3008 	str.w	r3, [lr, #8]
        temp = EXTI->FTSR;
 8001ab8:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
 8001abc:	bf54      	ite	pl
 8001abe:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 8001ac0:	4313      	orrmi	r3, r2
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ac2:	2c10      	cmp	r4, #16
        }
        EXTI->FTSR = temp;
 8001ac4:	f8ce 300c 	str.w	r3, [lr, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ac8:	f47f af4a 	bne.w	8001960 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001acc:	b003      	add	sp, #12
 8001ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ad2:	2701      	movs	r7, #1
 8001ad4:	fa07 f303 	lsl.w	r3, r7, r3
 8001ad8:	4319      	orrs	r1, r3
 8001ada:	e7d0      	b.n	8001a7e <HAL_GPIO_Init+0x13a>
 8001adc:	2702      	movs	r7, #2
 8001ade:	fa07 f303 	lsl.w	r3, r7, r3
 8001ae2:	4319      	orrs	r1, r3
 8001ae4:	e7cb      	b.n	8001a7e <HAL_GPIO_Init+0x13a>
 8001ae6:	2703      	movs	r7, #3
 8001ae8:	fa07 f303 	lsl.w	r3, r7, r3
 8001aec:	4319      	orrs	r1, r3
 8001aee:	e7c6      	b.n	8001a7e <HAL_GPIO_Init+0x13a>
 8001af0:	2704      	movs	r7, #4
 8001af2:	fa07 f303 	lsl.w	r3, r7, r3
 8001af6:	4319      	orrs	r1, r3
 8001af8:	e7c1      	b.n	8001a7e <HAL_GPIO_Init+0x13a>
 8001afa:	2707      	movs	r7, #7
 8001afc:	fa07 f303 	lsl.w	r3, r7, r3
 8001b00:	4319      	orrs	r1, r3
 8001b02:	e7bc      	b.n	8001a7e <HAL_GPIO_Init+0x13a>
 8001b04:	2705      	movs	r7, #5
 8001b06:	fa07 f303 	lsl.w	r3, r7, r3
 8001b0a:	4319      	orrs	r1, r3
 8001b0c:	e7b7      	b.n	8001a7e <HAL_GPIO_Init+0x13a>
 8001b0e:	2706      	movs	r7, #6
 8001b10:	fa07 f303 	lsl.w	r3, r7, r3
 8001b14:	4319      	orrs	r1, r3
 8001b16:	e7b2      	b.n	8001a7e <HAL_GPIO_Init+0x13a>
 8001b18:	2708      	movs	r7, #8
 8001b1a:	fa07 f303 	lsl.w	r3, r7, r3
 8001b1e:	4319      	orrs	r1, r3
 8001b20:	e7ad      	b.n	8001a7e <HAL_GPIO_Init+0x13a>
 8001b22:	bf00      	nop
 8001b24:	40023800 	.word	0x40023800
 8001b28:	40020000 	.word	0x40020000
 8001b2c:	40020800 	.word	0x40020800
 8001b30:	40020c00 	.word	0x40020c00
 8001b34:	40021000 	.word	0x40021000
 8001b38:	40021400 	.word	0x40021400
 8001b3c:	40021800 	.word	0x40021800
 8001b40:	40021c00 	.word	0x40021c00
 8001b44:	40022000 	.word	0x40022000
 8001b48:	40022400 	.word	0x40022400
 8001b4c:	40013c00 	.word	0x40013c00

08001b50 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b50:	b902      	cbnz	r2, 8001b54 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001b52:	0409      	lsls	r1, r1, #16
 8001b54:	6181      	str	r1, [r0, #24]
  }
}
 8001b56:	4770      	bx	lr

08001b58 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b58:	b570      	push	{r4, r5, r6, lr}
 8001b5a:	4604      	mov	r4, r0
 8001b5c:	460d      	mov	r5, r1
 8001b5e:	4616      	mov	r6, r2
 8001b60:	1c6a      	adds	r2, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b62:	6823      	ldr	r3, [r4, #0]
 8001b64:	d12c      	bne.n	8001bc0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
 8001b66:	699a      	ldr	r2, [r3, #24]
 8001b68:	0790      	lsls	r0, r2, #30
 8001b6a:	d427      	bmi.n	8001bbc <I2C_WaitOnTXISFlagUntilTimeout+0x64>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b6c:	699a      	ldr	r2, [r3, #24]
 8001b6e:	06d1      	lsls	r1, r2, #27
 8001b70:	d5f9      	bpl.n	8001b66 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b72:	699a      	ldr	r2, [r3, #24]
 8001b74:	0691      	lsls	r1, r2, #26
 8001b76:	d5fc      	bpl.n	8001b72 <I2C_WaitOnTXISFlagUntilTimeout+0x1a>

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b78:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b7a:	2110      	movs	r1, #16
 8001b7c:	61d9      	str	r1, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b7e:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001b80:	699a      	ldr	r2, [r3, #24]
 8001b82:	0790      	lsls	r0, r2, #30
 8001b84:	d501      	bpl.n	8001b8a <I2C_WaitOnTXISFlagUntilTimeout+0x32>
    hi2c->Instance->TXDR = 0x00U;
 8001b86:	2200      	movs	r2, #0
 8001b88:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b8a:	699a      	ldr	r2, [r3, #24]
 8001b8c:	07d1      	lsls	r1, r2, #31
 8001b8e:	d403      	bmi.n	8001b98 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001b90:	699a      	ldr	r2, [r3, #24]
 8001b92:	f042 0201 	orr.w	r2, r2, #1
 8001b96:	619a      	str	r2, [r3, #24]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b98:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b9a:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 8001b9c:	4e1b      	ldr	r6, [pc, #108]	; (8001c0c <I2C_WaitOnTXISFlagUntilTimeout+0xb4>)
    hi2c->State = HAL_I2C_STATE_READY;
 8001b9e:	2520      	movs	r5, #32
      return HAL_ERROR;
 8001ba0:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8001ba2:	4032      	ands	r2, r6
 8001ba4:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001ba6:	6c63      	ldr	r3, [r4, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ba8:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001bac:	f043 0304 	orr.w	r3, r3, #4
 8001bb0:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001bb2:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bb6:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 8001bba:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8001bbc:	2000      	movs	r0, #0
}
 8001bbe:	bd70      	pop	{r4, r5, r6, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001bc0:	699a      	ldr	r2, [r3, #24]
 8001bc2:	0792      	lsls	r2, r2, #30
 8001bc4:	d4fa      	bmi.n	8001bbc <I2C_WaitOnTXISFlagUntilTimeout+0x64>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001bc6:	699a      	ldr	r2, [r3, #24]
 8001bc8:	06d0      	lsls	r0, r2, #27
 8001bca:	d41b      	bmi.n	8001c04 <I2C_WaitOnTXISFlagUntilTimeout+0xac>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bcc:	f7ff f9a6 	bl	8000f1c <HAL_GetTick>
 8001bd0:	1b80      	subs	r0, r0, r6
 8001bd2:	42a8      	cmp	r0, r5
 8001bd4:	d801      	bhi.n	8001bda <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 8001bd6:	2d00      	cmp	r5, #0
 8001bd8:	d1c2      	bne.n	8001b60 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bda:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001bdc:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bde:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 8001be0:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001be2:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8001be4:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001be8:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001bea:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bee:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 8001bf2:	bd70      	pop	{r4, r5, r6, pc}
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bf4:	f7ff f992 	bl	8000f1c <HAL_GetTick>
 8001bf8:	1b80      	subs	r0, r0, r6
 8001bfa:	4285      	cmp	r5, r0
 8001bfc:	d3ed      	bcc.n	8001bda <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 8001bfe:	2d00      	cmp	r5, #0
 8001c00:	d0eb      	beq.n	8001bda <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 8001c02:	6823      	ldr	r3, [r4, #0]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c04:	699a      	ldr	r2, [r3, #24]
 8001c06:	0692      	lsls	r2, r2, #26
 8001c08:	d5f4      	bpl.n	8001bf4 <I2C_WaitOnTXISFlagUntilTimeout+0x9c>
 8001c0a:	e7b5      	b.n	8001b78 <I2C_WaitOnTXISFlagUntilTimeout+0x20>
 8001c0c:	fe00e800 	.word	0xfe00e800

08001c10 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001c10:	b570      	push	{r4, r5, r6, lr}
 8001c12:	4604      	mov	r4, r0
 8001c14:	460d      	mov	r5, r1
 8001c16:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c18:	6823      	ldr	r3, [r4, #0]
 8001c1a:	699a      	ldr	r2, [r3, #24]
 8001c1c:	0692      	lsls	r2, r2, #26
 8001c1e:	d449      	bmi.n	8001cb4 <I2C_WaitOnSTOPFlagUntilTimeout+0xa4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c20:	699a      	ldr	r2, [r3, #24]
 8001c22:	06d2      	lsls	r2, r2, #27
 8001c24:	d526      	bpl.n	8001c74 <I2C_WaitOnSTOPFlagUntilTimeout+0x64>
 8001c26:	1c68      	adds	r0, r5, #1
 8001c28:	d138      	bne.n	8001c9c <I2C_WaitOnSTOPFlagUntilTimeout+0x8c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c2a:	699a      	ldr	r2, [r3, #24]
 8001c2c:	0691      	lsls	r1, r2, #26
 8001c2e:	d5fc      	bpl.n	8001c2a <I2C_WaitOnSTOPFlagUntilTimeout+0x1a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c30:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c32:	2110      	movs	r1, #16
 8001c34:	61d9      	str	r1, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c36:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001c38:	699a      	ldr	r2, [r3, #24]
 8001c3a:	0790      	lsls	r0, r2, #30
 8001c3c:	d501      	bpl.n	8001c42 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
    hi2c->Instance->TXDR = 0x00U;
 8001c3e:	2200      	movs	r2, #0
 8001c40:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c42:	699a      	ldr	r2, [r3, #24]
 8001c44:	07d1      	lsls	r1, r2, #31
 8001c46:	d403      	bmi.n	8001c50 <I2C_WaitOnSTOPFlagUntilTimeout+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001c48:	699a      	ldr	r2, [r3, #24]
 8001c4a:	f042 0201 	orr.w	r2, r2, #1
 8001c4e:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 8001c50:	685a      	ldr	r2, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c52:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 8001c54:	4e18      	ldr	r6, [pc, #96]	; (8001cb8 <I2C_WaitOnSTOPFlagUntilTimeout+0xa8>)
    hi2c->State = HAL_I2C_STATE_READY;
 8001c56:	2520      	movs	r5, #32
      return HAL_ERROR;
 8001c58:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8001c5a:	4032      	ands	r2, r6
 8001c5c:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c5e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8001c60:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c64:	f043 0304 	orr.w	r3, r3, #4
 8001c68:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001c6a:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c6e:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 8001c72:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c74:	f7ff f952 	bl	8000f1c <HAL_GetTick>
 8001c78:	1b80      	subs	r0, r0, r6
 8001c7a:	42a8      	cmp	r0, r5
 8001c7c:	d801      	bhi.n	8001c82 <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
 8001c7e:	2d00      	cmp	r5, #0
 8001c80:	d1ca      	bne.n	8001c18 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c82:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c84:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c86:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 8001c88:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c8a:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8001c8c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c90:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c92:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c96:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 8001c9a:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c9c:	699a      	ldr	r2, [r3, #24]
 8001c9e:	0692      	lsls	r2, r2, #26
 8001ca0:	d4c6      	bmi.n	8001c30 <I2C_WaitOnSTOPFlagUntilTimeout+0x20>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ca2:	f7ff f93b 	bl	8000f1c <HAL_GetTick>
 8001ca6:	1b80      	subs	r0, r0, r6
 8001ca8:	4285      	cmp	r5, r0
 8001caa:	d3ea      	bcc.n	8001c82 <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
 8001cac:	2d00      	cmp	r5, #0
 8001cae:	d0e8      	beq.n	8001c82 <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
 8001cb0:	6823      	ldr	r3, [r4, #0]
 8001cb2:	e7b8      	b.n	8001c26 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8001cb4:	2000      	movs	r0, #0
}
 8001cb6:	bd70      	pop	{r4, r5, r6, pc}
 8001cb8:	fe00e800 	.word	0xfe00e800

08001cbc <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001cbc:	2800      	cmp	r0, #0
 8001cbe:	d04d      	beq.n	8001d5c <HAL_I2C_Init+0xa0>
{
 8001cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cc2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001cc6:	4604      	mov	r4, r0
 8001cc8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d040      	beq.n	8001d52 <HAL_I2C_Init+0x96>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cd0:	2124      	movs	r1, #36	; 0x24
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cd2:	68e5      	ldr	r5, [r4, #12]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001cd4:	e9d4 3200 	ldrd	r3, r2, [r4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cd8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cdc:	2d01      	cmp	r5, #1
  __HAL_I2C_DISABLE(hi2c);
 8001cde:	6818      	ldr	r0, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ce0:	f022 6170 	bic.w	r1, r2, #251658240	; 0xf000000
 8001ce4:	68a2      	ldr	r2, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8001ce6:	f020 0001 	bic.w	r0, r0, #1
 8001cea:	6018      	str	r0, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001cec:	6119      	str	r1, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001cee:	6899      	ldr	r1, [r3, #8]
 8001cf0:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8001cf4:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cf6:	d028      	beq.n	8001d4a <HAL_I2C_Init+0x8e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001cf8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001cfc:	2d02      	cmp	r5, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001cfe:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d00:	d102      	bne.n	8001d08 <HAL_I2C_Init+0x4c>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d06:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d08:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d0a:	2100      	movs	r1, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d0c:	4814      	ldr	r0, [pc, #80]	; (8001d60 <HAL_I2C_Init+0xa4>)
  hi2c->State = HAL_I2C_STATE_READY;
 8001d0e:	2720      	movs	r7, #32
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001d10:	69a6      	ldr	r6, [r4, #24]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d12:	4310      	orrs	r0, r2
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001d14:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d18:	6058      	str	r0, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001d1a:	432a      	orrs	r2, r5
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d1c:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d1e:	69e5      	ldr	r5, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001d20:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d24:	6a26      	ldr	r6, [r4, #32]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d26:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d2a:	4335      	orrs	r5, r6
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d2c:	60d8      	str	r0, [r3, #12]
  return HAL_OK;
 8001d2e:	4608      	mov	r0, r1
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001d30:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d32:	601d      	str	r5, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	f042 0201 	orr.w	r2, r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d3c:	6461      	str	r1, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d3e:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d42:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d44:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 8001d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	e7da      	b.n	8001d08 <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 8001d52:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001d56:	f004 f815 	bl	8005d84 <HAL_I2C_MspInit>
 8001d5a:	e7b9      	b.n	8001cd0 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8001d5c:	2001      	movs	r0, #1
}
 8001d5e:	4770      	bx	lr
 8001d60:	02008000 	.word	0x02008000

08001d64 <HAL_I2C_Master_Transmit>:
{
 8001d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d68:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
{
 8001d6c:	9e08      	ldr	r6, [sp, #32]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d6e:	2c20      	cmp	r4, #32
 8001d70:	d16f      	bne.n	8001e52 <HAL_I2C_Master_Transmit+0xee>
    __HAL_LOCK(hi2c);
 8001d72:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8001d76:	2c01      	cmp	r4, #1
 8001d78:	d06b      	beq.n	8001e52 <HAL_I2C_Master_Transmit+0xee>
 8001d7a:	4698      	mov	r8, r3
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	4691      	mov	r9, r2
 8001d80:	460f      	mov	r7, r1
 8001d82:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8001d86:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 8001d88:	f7ff f8c8 	bl	8000f1c <HAL_GetTick>
 8001d8c:	4605      	mov	r5, r0
 8001d8e:	e004      	b.n	8001d9a <HAL_I2C_Master_Transmit+0x36>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d90:	f7ff f8c4 	bl	8000f1c <HAL_GetTick>
 8001d94:	1b40      	subs	r0, r0, r5
 8001d96:	2819      	cmp	r0, #25
 8001d98:	d875      	bhi.n	8001e86 <HAL_I2C_Master_Transmit+0x122>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d9a:	6823      	ldr	r3, [r4, #0]
 8001d9c:	6998      	ldr	r0, [r3, #24]
 8001d9e:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 8001da2:	d1f5      	bne.n	8001d90 <HAL_I2C_Master_Transmit+0x2c>
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001da4:	2210      	movs	r2, #16
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001da6:	2121      	movs	r1, #33	; 0x21
    hi2c->pBuffPtr  = pData;
 8001da8:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 8001dac:	f3c7 0709 	ubfx	r7, r7, #0, #10
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001db0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001db4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001db8:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8001dba:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dbe:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001dc0:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dc2:	2aff      	cmp	r2, #255	; 0xff
 8001dc4:	d848      	bhi.n	8001e58 <HAL_I2C_Master_Transmit+0xf4>
      hi2c->XferSize = hi2c->XferCount;
 8001dc6:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001dc8:	4a48      	ldr	r2, [pc, #288]	; (8001eec <HAL_I2C_Master_Transmit+0x188>)
      hi2c->XferSize = hi2c->XferCount;
 8001dca:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2,
 8001dcc:	6858      	ldr	r0, [r3, #4]
 8001dce:	433a      	orrs	r2, r7
 8001dd0:	f8df e124 	ldr.w	lr, [pc, #292]	; 8001ef8 <HAL_I2C_Master_Transmit+0x194>
 8001dd4:	fa5f fc81 	uxtb.w	ip, r1
      hi2c->XferSize = hi2c->XferCount;
 8001dd8:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8001dda:	ea00 010e 	and.w	r1, r0, lr
 8001dde:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8001de2:	430a      	orrs	r2, r1
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8001efc <HAL_I2C_Master_Transmit+0x198>
 8001dea:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8001f00 <HAL_I2C_Master_Transmit+0x19c>
 8001dee:	ea47 0808 	orr.w	r8, r7, r8
    while (hi2c->XferCount > 0U)
 8001df2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001df4:	462a      	mov	r2, r5
 8001df6:	4631      	mov	r1, r6
 8001df8:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d062      	beq.n	8001ec6 <HAL_I2C_Master_Transmit+0x162>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e00:	f7ff feaa 	bl	8001b58 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e04:	2800      	cmp	r0, #0
 8001e06:	d15b      	bne.n	8001ec0 <HAL_I2C_Master_Transmit+0x15c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e08:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001e0a:	6821      	ldr	r1, [r4, #0]
 8001e0c:	f810 2b01 	ldrb.w	r2, [r0], #1
      hi2c->XferSize--;
 8001e10:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e12:	628a      	str	r2, [r1, #40]	; 0x28
      hi2c->XferCount--;
 8001e14:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001e16:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 8001e18:	6260      	str	r0, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001e1a:	3a01      	subs	r2, #1
      hi2c->XferSize--;
 8001e1c:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 8001e1e:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 8001e20:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001e22:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e24:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001e26:	b292      	uxth	r2, r2
 8001e28:	2a00      	cmp	r2, #0
 8001e2a:	d0e2      	beq.n	8001df2 <HAL_I2C_Master_Transmit+0x8e>
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1e0      	bne.n	8001df2 <HAL_I2C_Master_Transmit+0x8e>
 8001e30:	1c70      	adds	r0, r6, #1
 8001e32:	d11d      	bne.n	8001e70 <HAL_I2C_Master_Transmit+0x10c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e34:	698b      	ldr	r3, [r1, #24]
 8001e36:	061a      	lsls	r2, r3, #24
 8001e38:	d5fc      	bpl.n	8001e34 <HAL_I2C_Master_Transmit+0xd0>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e3a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e3c:	2bff      	cmp	r3, #255	; 0xff
 8001e3e:	d930      	bls.n	8001ea2 <HAL_I2C_Master_Transmit+0x13e>
  MODIFY_REG(hi2c->Instance->CR2,
 8001e40:	684b      	ldr	r3, [r1, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e42:	22ff      	movs	r2, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2,
 8001e44:	ea03 0309 	and.w	r3, r3, r9
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e48:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8001e4a:	ea43 0308 	orr.w	r3, r3, r8
 8001e4e:	604b      	str	r3, [r1, #4]
 8001e50:	e7cf      	b.n	8001df2 <HAL_I2C_Master_Transmit+0x8e>
    return HAL_BUSY;
 8001e52:	2002      	movs	r0, #2
}
 8001e54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  MODIFY_REG(hi2c->Instance->CR2,
 8001e58:	685a      	ldr	r2, [r3, #4]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e5a:	20ff      	movs	r0, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2,
 8001e5c:	f8df c098 	ldr.w	ip, [pc, #152]	; 8001ef8 <HAL_I2C_Master_Transmit+0x194>
 8001e60:	4923      	ldr	r1, [pc, #140]	; (8001ef0 <HAL_I2C_Master_Transmit+0x18c>)
 8001e62:	ea02 020c 	and.w	r2, r2, ip
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e66:	8520      	strh	r0, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8001e68:	4339      	orrs	r1, r7
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	e7ba      	b.n	8001de6 <HAL_I2C_Master_Transmit+0x82>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e70:	698b      	ldr	r3, [r1, #24]
 8001e72:	061b      	lsls	r3, r3, #24
 8001e74:	d4e1      	bmi.n	8001e3a <HAL_I2C_Master_Transmit+0xd6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e76:	f7ff f851 	bl	8000f1c <HAL_GetTick>
 8001e7a:	1b40      	subs	r0, r0, r5
 8001e7c:	4286      	cmp	r6, r0
 8001e7e:	d302      	bcc.n	8001e86 <HAL_I2C_Master_Transmit+0x122>
 8001e80:	b10e      	cbz	r6, 8001e86 <HAL_I2C_Master_Transmit+0x122>
 8001e82:	6821      	ldr	r1, [r4, #0]
 8001e84:	e7d4      	b.n	8001e30 <HAL_I2C_Master_Transmit+0xcc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e86:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e88:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e8a:	2200      	movs	r2, #0
          return HAL_ERROR;
 8001e8c:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e8e:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8001e90:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e94:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e96:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e9a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 8001e9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          hi2c->XferSize = hi2c->XferCount;
 8001ea2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 8001ea4:	f047 7300 	orr.w	r3, r7, #33554432	; 0x2000000
 8001ea8:	6848      	ldr	r0, [r1, #4]
          hi2c->XferSize = hi2c->XferCount;
 8001eaa:	b292      	uxth	r2, r2
  MODIFY_REG(hi2c->Instance->CR2,
 8001eac:	ea00 0009 	and.w	r0, r0, r9
 8001eb0:	fa5f fc82 	uxtb.w	ip, r2
          hi2c->XferSize = hi2c->XferCount;
 8001eb4:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8001eb6:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8001eba:	4303      	orrs	r3, r0
 8001ebc:	604b      	str	r3, [r1, #4]
 8001ebe:	e798      	b.n	8001df2 <HAL_I2C_Master_Transmit+0x8e>
        return HAL_ERROR;
 8001ec0:	2001      	movs	r0, #1
}
 8001ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ec6:	f7ff fea3 	bl	8001c10 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001eca:	2800      	cmp	r0, #0
 8001ecc:	d1f8      	bne.n	8001ec0 <HAL_I2C_Master_Transmit+0x15c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ece:	6823      	ldr	r3, [r4, #0]
 8001ed0:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 8001ed2:	4d08      	ldr	r5, [pc, #32]	; (8001ef4 <HAL_I2C_Master_Transmit+0x190>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ed4:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	402a      	ands	r2, r5
 8001eda:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001edc:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001ee0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ee4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8001ee8:	e7b4      	b.n	8001e54 <HAL_I2C_Master_Transmit+0xf0>
 8001eea:	bf00      	nop
 8001eec:	82002000 	.word	0x82002000
 8001ef0:	81ff2000 	.word	0x81ff2000
 8001ef4:	fe00e800 	.word	0xfe00e800
 8001ef8:	fc009800 	.word	0xfc009800
 8001efc:	01ff0000 	.word	0x01ff0000
 8001f00:	fc009c00 	.word	0xfc009c00

08001f04 <HAL_I2C_Master_Receive>:
{
 8001f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f08:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
{
 8001f0c:	9d08      	ldr	r5, [sp, #32]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f0e:	2c20      	cmp	r4, #32
 8001f10:	d17f      	bne.n	8002012 <HAL_I2C_Master_Receive+0x10e>
    __HAL_LOCK(hi2c);
 8001f12:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8001f16:	2c01      	cmp	r4, #1
 8001f18:	d07b      	beq.n	8002012 <HAL_I2C_Master_Receive+0x10e>
 8001f1a:	4698      	mov	r8, r3
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	4691      	mov	r9, r2
 8001f20:	460f      	mov	r7, r1
 8001f22:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8001f26:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 8001f28:	f7fe fff8 	bl	8000f1c <HAL_GetTick>
 8001f2c:	4606      	mov	r6, r0
 8001f2e:	e004      	b.n	8001f3a <HAL_I2C_Master_Receive+0x36>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f30:	f7fe fff4 	bl	8000f1c <HAL_GetTick>
 8001f34:	1b80      	subs	r0, r0, r6
 8001f36:	2819      	cmp	r0, #25
 8001f38:	d878      	bhi.n	800202c <HAL_I2C_Master_Receive+0x128>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f3a:	6823      	ldr	r3, [r4, #0]
 8001f3c:	6998      	ldr	r0, [r3, #24]
 8001f3e:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 8001f42:	d1f5      	bne.n	8001f30 <HAL_I2C_Master_Receive+0x2c>
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001f44:	2210      	movs	r2, #16
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001f46:	2122      	movs	r1, #34	; 0x22
    hi2c->pBuffPtr  = pData;
 8001f48:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 8001f4c:	f3c7 0709 	ubfx	r7, r7, #0, #10
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001f50:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001f54:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f58:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8001f5a:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f5e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f60:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f62:	2aff      	cmp	r2, #255	; 0xff
 8001f64:	d86f      	bhi.n	8002046 <HAL_I2C_Master_Receive+0x142>
      hi2c->XferSize = hi2c->XferCount;
 8001f66:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 8001f68:	4a7c      	ldr	r2, [pc, #496]	; (800215c <HAL_I2C_Master_Receive+0x258>)
      hi2c->XferSize = hi2c->XferCount;
 8001f6a:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2,
 8001f6c:	6858      	ldr	r0, [r3, #4]
 8001f6e:	433a      	orrs	r2, r7
 8001f70:	f8df e1f4 	ldr.w	lr, [pc, #500]	; 8002168 <HAL_I2C_Master_Receive+0x264>
 8001f74:	fa5f fc81 	uxtb.w	ip, r1
      hi2c->XferSize = hi2c->XferCount;
 8001f78:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8001f7a:	ea00 010e 	and.w	r1, r0, lr
 8001f7e:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8001f82:	430a      	orrs	r2, r1
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 800216c <HAL_I2C_Master_Receive+0x268>
 8001f8a:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 8002170 <HAL_I2C_Master_Receive+0x26c>
 8001f8e:	ea47 0808 	orr.w	r8, r7, r8
    while (hi2c->XferCount > 0U)
 8001f92:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	b96b      	cbnz	r3, 8001fb4 <HAL_I2C_Master_Receive+0xb0>
 8001f98:	e099      	b.n	80020ce <HAL_I2C_Master_Receive+0x1ca>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001f9a:	699a      	ldr	r2, [r3, #24]
 8001f9c:	0690      	lsls	r0, r2, #26
 8001f9e:	f100 80b6 	bmi.w	800210e <HAL_I2C_Master_Receive+0x20a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fa2:	f7fe ffbb 	bl	8000f1c <HAL_GetTick>
 8001fa6:	1b80      	subs	r0, r0, r6
 8001fa8:	4285      	cmp	r5, r0
 8001faa:	f0c0 80a5 	bcc.w	80020f8 <HAL_I2C_Master_Receive+0x1f4>
 8001fae:	2d00      	cmp	r5, #0
 8001fb0:	f000 80a2 	beq.w	80020f8 <HAL_I2C_Master_Receive+0x1f4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001fb4:	6823      	ldr	r3, [r4, #0]
 8001fb6:	699a      	ldr	r2, [r3, #24]
 8001fb8:	0752      	lsls	r2, r2, #29
 8001fba:	d45c      	bmi.n	8002076 <HAL_I2C_Master_Receive+0x172>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fbc:	699a      	ldr	r2, [r3, #24]
 8001fbe:	06d0      	lsls	r0, r2, #27
 8001fc0:	d5eb      	bpl.n	8001f9a <HAL_I2C_Master_Receive+0x96>
 8001fc2:	1c69      	adds	r1, r5, #1
 8001fc4:	d14b      	bne.n	800205e <HAL_I2C_Master_Receive+0x15a>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fc6:	699a      	ldr	r2, [r3, #24]
 8001fc8:	0692      	lsls	r2, r2, #26
 8001fca:	d5fc      	bpl.n	8001fc6 <HAL_I2C_Master_Receive+0xc2>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fcc:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fce:	2110      	movs	r1, #16
 8001fd0:	61d9      	str	r1, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fd2:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001fd4:	699a      	ldr	r2, [r3, #24]
 8001fd6:	0796      	lsls	r6, r2, #30
 8001fd8:	d501      	bpl.n	8001fde <HAL_I2C_Master_Receive+0xda>
    hi2c->Instance->TXDR = 0x00U;
 8001fda:	2200      	movs	r2, #0
 8001fdc:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fde:	699a      	ldr	r2, [r3, #24]
 8001fe0:	07d5      	lsls	r5, r2, #31
 8001fe2:	d403      	bmi.n	8001fec <HAL_I2C_Master_Receive+0xe8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001fe4:	699a      	ldr	r2, [r3, #24]
 8001fe6:	f042 0201 	orr.w	r2, r2, #1
 8001fea:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 8001fec:	685a      	ldr	r2, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fee:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 8001ff0:	4e5b      	ldr	r6, [pc, #364]	; (8002160 <HAL_I2C_Master_Receive+0x25c>)
    hi2c->State = HAL_I2C_STATE_READY;
 8001ff2:	2520      	movs	r5, #32
        return HAL_ERROR;
 8001ff4:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8001ff6:	4032      	ands	r2, r6
 8001ff8:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001ffa:	6c63      	ldr	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8001ffc:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002000:	f043 0304 	orr.w	r3, r3, #4
 8002004:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002006:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800200a:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 800200e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8002012:	2002      	movs	r0, #2
}
 8002014:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002018:	6993      	ldr	r3, [r2, #24]
 800201a:	061b      	lsls	r3, r3, #24
 800201c:	d447      	bmi.n	80020ae <HAL_I2C_Master_Receive+0x1aa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800201e:	f7fe ff7d 	bl	8000f1c <HAL_GetTick>
 8002022:	1b80      	subs	r0, r0, r6
 8002024:	4285      	cmp	r5, r0
 8002026:	d301      	bcc.n	800202c <HAL_I2C_Master_Receive+0x128>
 8002028:	2d00      	cmp	r5, #0
 800202a:	d13a      	bne.n	80020a2 <HAL_I2C_Master_Receive+0x19e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800202c:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800202e:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002030:	2200      	movs	r2, #0
          return HAL_ERROR;
 8002032:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002034:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8002036:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800203a:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800203c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002040:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002044:	e7e6      	b.n	8002014 <HAL_I2C_Master_Receive+0x110>
  MODIFY_REG(hi2c->Instance->CR2,
 8002046:	685a      	ldr	r2, [r3, #4]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002048:	20ff      	movs	r0, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2,
 800204a:	f8df c11c 	ldr.w	ip, [pc, #284]	; 8002168 <HAL_I2C_Master_Receive+0x264>
 800204e:	4945      	ldr	r1, [pc, #276]	; (8002164 <HAL_I2C_Master_Receive+0x260>)
 8002050:	ea02 020c 	and.w	r2, r2, ip
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002054:	8520      	strh	r0, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8002056:	4339      	orrs	r1, r7
 8002058:	430a      	orrs	r2, r1
 800205a:	605a      	str	r2, [r3, #4]
 800205c:	e793      	b.n	8001f86 <HAL_I2C_Master_Receive+0x82>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800205e:	699a      	ldr	r2, [r3, #24]
 8002060:	0697      	lsls	r7, r2, #26
 8002062:	d4b3      	bmi.n	8001fcc <HAL_I2C_Master_Receive+0xc8>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002064:	f7fe ff5a 	bl	8000f1c <HAL_GetTick>
 8002068:	1b80      	subs	r0, r0, r6
 800206a:	4285      	cmp	r5, r0
 800206c:	d3de      	bcc.n	800202c <HAL_I2C_Master_Receive+0x128>
 800206e:	2d00      	cmp	r5, #0
 8002070:	d0dc      	beq.n	800202c <HAL_I2C_Master_Receive+0x128>
 8002072:	6823      	ldr	r3, [r4, #0]
 8002074:	e7a5      	b.n	8001fc2 <HAL_I2C_Master_Receive+0xbe>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002076:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002078:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800207a:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800207c:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800207e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002080:	3901      	subs	r1, #1
      hi2c->pBuffPtr++;
 8002082:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002084:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 8002086:	b289      	uxth	r1, r1
      hi2c->pBuffPtr++;
 8002088:	3201      	adds	r2, #1
      hi2c->XferSize--;
 800208a:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800208c:	8561      	strh	r1, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800208e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002090:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002092:	b289      	uxth	r1, r1
      hi2c->pBuffPtr++;
 8002094:	6262      	str	r2, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002096:	2b00      	cmp	r3, #0
 8002098:	f47f af7b 	bne.w	8001f92 <HAL_I2C_Master_Receive+0x8e>
 800209c:	2900      	cmp	r1, #0
 800209e:	f43f af78 	beq.w	8001f92 <HAL_I2C_Master_Receive+0x8e>
 80020a2:	1c68      	adds	r0, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020a4:	6822      	ldr	r2, [r4, #0]
 80020a6:	d1b7      	bne.n	8002018 <HAL_I2C_Master_Receive+0x114>
 80020a8:	6993      	ldr	r3, [r2, #24]
 80020aa:	0619      	lsls	r1, r3, #24
 80020ac:	d5fc      	bpl.n	80020a8 <HAL_I2C_Master_Receive+0x1a4>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80020b0:	2bff      	cmp	r3, #255	; 0xff
 80020b2:	d942      	bls.n	800213a <HAL_I2C_Master_Receive+0x236>
  MODIFY_REG(hi2c->Instance->CR2,
 80020b4:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80020b6:	21ff      	movs	r1, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2,
 80020b8:	ea03 0309 	and.w	r3, r3, r9
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80020bc:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 80020be:	ea43 0308 	orr.w	r3, r3, r8
 80020c2:	6053      	str	r3, [r2, #4]
    while (hi2c->XferCount > 0U)
 80020c4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f47f af73 	bne.w	8001fb4 <HAL_I2C_Master_Receive+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020ce:	4632      	mov	r2, r6
 80020d0:	4629      	mov	r1, r5
 80020d2:	4620      	mov	r0, r4
 80020d4:	f7ff fd9c 	bl	8001c10 <I2C_WaitOnSTOPFlagUntilTimeout>
 80020d8:	2800      	cmp	r0, #0
 80020da:	d13d      	bne.n	8002158 <HAL_I2C_Master_Receive+0x254>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020dc:	6823      	ldr	r3, [r4, #0]
 80020de:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 80020e0:	4d1f      	ldr	r5, [pc, #124]	; (8002160 <HAL_I2C_Master_Receive+0x25c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020e2:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	402a      	ands	r2, r5
 80020e8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80020ea:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80020ee:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80020f2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80020f6:	e78d      	b.n	8002014 <HAL_I2C_Master_Receive+0x110>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80020fa:	2220      	movs	r2, #32
      __HAL_UNLOCK(hi2c);
 80020fc:	2100      	movs	r1, #0
        return HAL_ERROR;
 80020fe:	2001      	movs	r0, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002100:	4313      	orrs	r3, r2
      __HAL_UNLOCK(hi2c);
 8002102:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002106:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002108:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
 800210c:	e782      	b.n	8002014 <HAL_I2C_Master_Receive+0x110>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800210e:	699a      	ldr	r2, [r3, #24]
 8002110:	0751      	lsls	r1, r2, #29
 8002112:	d502      	bpl.n	800211a <HAL_I2C_Master_Receive+0x216>
 8002114:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002116:	2a00      	cmp	r2, #0
 8002118:	d1ad      	bne.n	8002076 <HAL_I2C_Master_Receive+0x172>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800211a:	2520      	movs	r5, #32
        I2C_RESET_CR2(hi2c);
 800211c:	4e10      	ldr	r6, [pc, #64]	; (8002160 <HAL_I2C_Master_Receive+0x25c>)
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800211e:	2200      	movs	r2, #0
        return HAL_ERROR;
 8002120:	2001      	movs	r0, #1
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002122:	61dd      	str	r5, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8002124:	6859      	ldr	r1, [r3, #4]
 8002126:	4031      	ands	r1, r6
 8002128:	6059      	str	r1, [r3, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800212a:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800212c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8002130:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002134:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002138:	e76c      	b.n	8002014 <HAL_I2C_Master_Receive+0x110>
          hi2c->XferSize = hi2c->XferCount;
 800213a:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 800213c:	f047 7300 	orr.w	r3, r7, #33554432	; 0x2000000
 8002140:	6850      	ldr	r0, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 8002142:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2,
 8002144:	ea00 0009 	and.w	r0, r0, r9
 8002148:	fa5f fc81 	uxtb.w	ip, r1
          hi2c->XferSize = hi2c->XferCount;
 800214c:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 800214e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8002152:	4303      	orrs	r3, r0
 8002154:	6053      	str	r3, [r2, #4]
 8002156:	e71c      	b.n	8001f92 <HAL_I2C_Master_Receive+0x8e>
      return HAL_ERROR;
 8002158:	2001      	movs	r0, #1
 800215a:	e75b      	b.n	8002014 <HAL_I2C_Master_Receive+0x110>
 800215c:	82002400 	.word	0x82002400
 8002160:	fe00e800 	.word	0xfe00e800
 8002164:	81ff2400 	.word	0x81ff2400
 8002168:	fc009800 	.word	0xfc009800
 800216c:	01ff0000 	.word	0x01ff0000
 8002170:	fc009c00 	.word	0xfc009c00

08002174 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002174:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b20      	cmp	r3, #32
{
 800217c:	b470      	push	{r4, r5, r6}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800217e:	d11f      	bne.n	80021c0 <HAL_I2CEx_ConfigAnalogFilter+0x4c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002180:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8002184:	2a01      	cmp	r2, #1
 8002186:	d01b      	beq.n	80021c0 <HAL_I2CEx_ConfigAnalogFilter+0x4c>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002188:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800218a:	2424      	movs	r4, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800218c:	2600      	movs	r6, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 800218e:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8002192:	6815      	ldr	r5, [r2, #0]

    return HAL_OK;
 8002194:	4634      	mov	r4, r6
    __HAL_I2C_DISABLE(hi2c);
 8002196:	f025 0501 	bic.w	r5, r5, #1
 800219a:	6015      	str	r5, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800219c:	6815      	ldr	r5, [r2, #0]
 800219e:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 80021a2:	6015      	str	r5, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 80021a4:	6815      	ldr	r5, [r2, #0]
 80021a6:	4329      	orrs	r1, r5
 80021a8:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 80021aa:	6811      	ldr	r1, [r2, #0]
 80021ac:	f041 0101 	orr.w	r1, r1, #1
 80021b0:	6011      	str	r1, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80021b2:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80021b6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  }
  else
  {
    return HAL_BUSY;
  }
}
 80021ba:	4620      	mov	r0, r4
 80021bc:	bc70      	pop	{r4, r5, r6}
 80021be:	4770      	bx	lr
    return HAL_BUSY;
 80021c0:	2402      	movs	r4, #2
}
 80021c2:	4620      	mov	r0, r4
 80021c4:	bc70      	pop	{r4, r5, r6}
 80021c6:	4770      	bx	lr

080021c8 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021c8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b20      	cmp	r3, #32
{
 80021d0:	b470      	push	{r4, r5, r6}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80021d2:	d11e      	bne.n	8002212 <HAL_I2CEx_ConfigDigitalFilter+0x4a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021d4:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 80021d8:	2a01      	cmp	r2, #1
 80021da:	d01a      	beq.n	8002212 <HAL_I2CEx_ConfigDigitalFilter+0x4a>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021dc:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80021de:	2424      	movs	r4, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021e0:	2600      	movs	r6, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 80021e2:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 80021e6:	6814      	ldr	r4, [r2, #0]

    return HAL_OK;
 80021e8:	4635      	mov	r5, r6
    __HAL_I2C_DISABLE(hi2c);
 80021ea:	f024 0401 	bic.w	r4, r4, #1
 80021ee:	6014      	str	r4, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 80021f0:	6814      	ldr	r4, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 80021f2:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 80021f6:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 80021fa:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 80021fc:	6811      	ldr	r1, [r2, #0]
 80021fe:	f041 0101 	orr.w	r1, r1, #1
 8002202:	6011      	str	r1, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8002204:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8002208:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  }
  else
  {
    return HAL_BUSY;
  }
}
 800220c:	4628      	mov	r0, r5
 800220e:	bc70      	pop	{r4, r5, r6}
 8002210:	4770      	bx	lr
    return HAL_BUSY;
 8002212:	2502      	movs	r5, #2
}
 8002214:	4628      	mov	r0, r5
 8002216:	bc70      	pop	{r4, r5, r6}
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop

0800221c <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800221c:	4a02      	ldr	r2, [pc, #8]	; (8002228 <HAL_PWR_EnableBkUpAccess+0xc>)
 800221e:	6813      	ldr	r3, [r2, #0]
 8002220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002224:	6013      	str	r3, [r2, #0]
}
 8002226:	4770      	bx	lr
 8002228:	40007000 	.word	0x40007000

0800222c <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800222c:	4a1b      	ldr	r2, [pc, #108]	; (800229c <HAL_PWREx_EnableOverDrive+0x70>)
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800222e:	4b1c      	ldr	r3, [pc, #112]	; (80022a0 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002230:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8002232:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
{
 8002236:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8002238:	6411      	str	r1, [r2, #64]	; 0x40
{
 800223a:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 800223c:	6c12      	ldr	r2, [r2, #64]	; 0x40

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800223e:	461c      	mov	r4, r3
  __HAL_RCC_PWR_CLK_ENABLE();
 8002240:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8002244:	9201      	str	r2, [sp, #4]
 8002246:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800224e:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8002250:	f7fe fe64 	bl	8000f1c <HAL_GetTick>
 8002254:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002256:	e005      	b.n	8002264 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002258:	f7fe fe60 	bl	8000f1c <HAL_GetTick>
 800225c:	1b40      	subs	r0, r0, r5
 800225e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002262:	d817      	bhi.n	8002294 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002264:	6863      	ldr	r3, [r4, #4]
 8002266:	03da      	lsls	r2, r3, #15
 8002268:	d5f6      	bpl.n	8002258 <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800226a:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800226c:	4d0c      	ldr	r5, [pc, #48]	; (80022a0 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800226e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002272:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002274:	f7fe fe52 	bl	8000f1c <HAL_GetTick>
 8002278:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800227a:	e005      	b.n	8002288 <HAL_PWREx_EnableOverDrive+0x5c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800227c:	f7fe fe4e 	bl	8000f1c <HAL_GetTick>
 8002280:	1b00      	subs	r0, r0, r4
 8002282:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002286:	d805      	bhi.n	8002294 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002288:	686b      	ldr	r3, [r5, #4]
 800228a:	039b      	lsls	r3, r3, #14
 800228c:	d5f6      	bpl.n	800227c <HAL_PWREx_EnableOverDrive+0x50>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800228e:	2000      	movs	r0, #0
}
 8002290:	b003      	add	sp, #12
 8002292:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 8002294:	2003      	movs	r0, #3
}
 8002296:	b003      	add	sp, #12
 8002298:	bd30      	pop	{r4, r5, pc}
 800229a:	bf00      	nop
 800229c:	40023800 	.word	0x40023800
 80022a0:	40007000 	.word	0x40007000

080022a4 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022a4:	2800      	cmp	r0, #0
 80022a6:	f000 814c 	beq.w	8002542 <HAL_RCC_OscConfig+0x29e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022aa:	6803      	ldr	r3, [r0, #0]
{
 80022ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022b0:	07dd      	lsls	r5, r3, #31
{
 80022b2:	b082      	sub	sp, #8
 80022b4:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022b6:	d535      	bpl.n	8002324 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022b8:	49ac      	ldr	r1, [pc, #688]	; (800256c <HAL_RCC_OscConfig+0x2c8>)
 80022ba:	688a      	ldr	r2, [r1, #8]
 80022bc:	f002 020c 	and.w	r2, r2, #12
 80022c0:	2a04      	cmp	r2, #4
 80022c2:	f000 80ff 	beq.w	80024c4 <HAL_RCC_OscConfig+0x220>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022c6:	688a      	ldr	r2, [r1, #8]
 80022c8:	f002 020c 	and.w	r2, r2, #12
 80022cc:	2a08      	cmp	r2, #8
 80022ce:	f000 80f5 	beq.w	80024bc <HAL_RCC_OscConfig+0x218>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022d2:	6863      	ldr	r3, [r4, #4]
 80022d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022d8:	d010      	beq.n	80022fc <HAL_RCC_OscConfig+0x58>
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f000 811a 	beq.w	8002514 <HAL_RCC_OscConfig+0x270>
 80022e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022e4:	4ba1      	ldr	r3, [pc, #644]	; (800256c <HAL_RCC_OscConfig+0x2c8>)
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	f000 8164 	beq.w	80025b4 <HAL_RCC_OscConfig+0x310>
 80022ec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	e004      	b.n	8002306 <HAL_RCC_OscConfig+0x62>
 80022fc:	4a9b      	ldr	r2, [pc, #620]	; (800256c <HAL_RCC_OscConfig+0x2c8>)
 80022fe:	6813      	ldr	r3, [r2, #0]
 8002300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002304:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002306:	f7fe fe09 	bl	8000f1c <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800230a:	4d98      	ldr	r5, [pc, #608]	; (800256c <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 800230c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800230e:	e005      	b.n	800231c <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002310:	f7fe fe04 	bl	8000f1c <HAL_GetTick>
 8002314:	1b80      	subs	r0, r0, r6
 8002316:	2864      	cmp	r0, #100	; 0x64
 8002318:	f200 80ef 	bhi.w	80024fa <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800231c:	682b      	ldr	r3, [r5, #0]
 800231e:	039a      	lsls	r2, r3, #14
 8002320:	d5f6      	bpl.n	8002310 <HAL_RCC_OscConfig+0x6c>
 8002322:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002324:	079f      	lsls	r7, r3, #30
 8002326:	d442      	bmi.n	80023ae <HAL_RCC_OscConfig+0x10a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002328:	071a      	lsls	r2, r3, #28
 800232a:	d517      	bpl.n	800235c <HAL_RCC_OscConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800232c:	6963      	ldr	r3, [r4, #20]
 800232e:	2b00      	cmp	r3, #0
 8002330:	f000 80b1 	beq.w	8002496 <HAL_RCC_OscConfig+0x1f2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002334:	4b8d      	ldr	r3, [pc, #564]	; (800256c <HAL_RCC_OscConfig+0x2c8>)
 8002336:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002338:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 800233a:	f042 0201 	orr.w	r2, r2, #1
 800233e:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8002340:	f7fe fdec 	bl	8000f1c <HAL_GetTick>
 8002344:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002346:	e005      	b.n	8002354 <HAL_RCC_OscConfig+0xb0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002348:	f7fe fde8 	bl	8000f1c <HAL_GetTick>
 800234c:	1b80      	subs	r0, r0, r6
 800234e:	2802      	cmp	r0, #2
 8002350:	f200 80d3 	bhi.w	80024fa <HAL_RCC_OscConfig+0x256>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002354:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002356:	079b      	lsls	r3, r3, #30
 8002358:	d5f6      	bpl.n	8002348 <HAL_RCC_OscConfig+0xa4>
 800235a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800235c:	075d      	lsls	r5, r3, #29
 800235e:	d56b      	bpl.n	8002438 <HAL_RCC_OscConfig+0x194>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002360:	4b82      	ldr	r3, [pc, #520]	; (800256c <HAL_RCC_OscConfig+0x2c8>)
 8002362:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002364:	00d0      	lsls	r0, r2, #3
 8002366:	f100 80ee 	bmi.w	8002546 <HAL_RCC_OscConfig+0x2a2>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800236a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 800236c:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800236e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002372:	641a      	str	r2, [r3, #64]	; 0x40
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237a:	9301      	str	r3, [sp, #4]
 800237c:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800237e:	4b7c      	ldr	r3, [pc, #496]	; (8002570 <HAL_RCC_OscConfig+0x2cc>)
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	05d1      	lsls	r1, r2, #23
 8002384:	f140 80a8 	bpl.w	80024d8 <HAL_RCC_OscConfig+0x234>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002388:	68a3      	ldr	r3, [r4, #8]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d039      	beq.n	8002402 <HAL_RCC_OscConfig+0x15e>
 800238e:	2b00      	cmp	r3, #0
 8002390:	f000 80db 	beq.w	800254a <HAL_RCC_OscConfig+0x2a6>
 8002394:	2b05      	cmp	r3, #5
 8002396:	4b75      	ldr	r3, [pc, #468]	; (800256c <HAL_RCC_OscConfig+0x2c8>)
 8002398:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800239a:	f000 8113 	beq.w	80025c4 <HAL_RCC_OscConfig+0x320>
 800239e:	f022 0201 	bic.w	r2, r2, #1
 80023a2:	671a      	str	r2, [r3, #112]	; 0x70
 80023a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80023a6:	f022 0204 	bic.w	r2, r2, #4
 80023aa:	671a      	str	r2, [r3, #112]	; 0x70
 80023ac:	e02e      	b.n	800240c <HAL_RCC_OscConfig+0x168>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023ae:	4a6f      	ldr	r2, [pc, #444]	; (800256c <HAL_RCC_OscConfig+0x2c8>)
 80023b0:	6891      	ldr	r1, [r2, #8]
 80023b2:	f011 0f0c 	tst.w	r1, #12
 80023b6:	d063      	beq.n	8002480 <HAL_RCC_OscConfig+0x1dc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023b8:	6891      	ldr	r1, [r2, #8]
 80023ba:	f001 010c 	and.w	r1, r1, #12
 80023be:	2908      	cmp	r1, #8
 80023c0:	d05b      	beq.n	800247a <HAL_RCC_OscConfig+0x1d6>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80023c2:	68e3      	ldr	r3, [r4, #12]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f000 80e1 	beq.w	800258c <HAL_RCC_OscConfig+0x2e8>
        __HAL_RCC_HSI_ENABLE();
 80023ca:	4b68      	ldr	r3, [pc, #416]	; (800256c <HAL_RCC_OscConfig+0x2c8>)
 80023cc:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ce:	461d      	mov	r5, r3
        __HAL_RCC_HSI_ENABLE();
 80023d0:	f042 0201 	orr.w	r2, r2, #1
 80023d4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80023d6:	f7fe fda1 	bl	8000f1c <HAL_GetTick>
 80023da:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023dc:	e005      	b.n	80023ea <HAL_RCC_OscConfig+0x146>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023de:	f7fe fd9d 	bl	8000f1c <HAL_GetTick>
 80023e2:	1b80      	subs	r0, r0, r6
 80023e4:	2802      	cmp	r0, #2
 80023e6:	f200 8088 	bhi.w	80024fa <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ea:	682b      	ldr	r3, [r5, #0]
 80023ec:	0798      	lsls	r0, r3, #30
 80023ee:	d5f6      	bpl.n	80023de <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f0:	682b      	ldr	r3, [r5, #0]
 80023f2:	6922      	ldr	r2, [r4, #16]
 80023f4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80023f8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80023fc:	602b      	str	r3, [r5, #0]
 80023fe:	6823      	ldr	r3, [r4, #0]
 8002400:	e792      	b.n	8002328 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002402:	4a5a      	ldr	r2, [pc, #360]	; (800256c <HAL_RCC_OscConfig+0x2c8>)
 8002404:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002406:	f043 0301 	orr.w	r3, r3, #1
 800240a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800240c:	f7fe fd86 	bl	8000f1c <HAL_GetTick>

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002410:	4e56      	ldr	r6, [pc, #344]	; (800256c <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8002412:	4680      	mov	r8, r0
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002414:	f241 3788 	movw	r7, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002418:	e005      	b.n	8002426 <HAL_RCC_OscConfig+0x182>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800241a:	f7fe fd7f 	bl	8000f1c <HAL_GetTick>
 800241e:	eba0 0008 	sub.w	r0, r0, r8
 8002422:	42b8      	cmp	r0, r7
 8002424:	d869      	bhi.n	80024fa <HAL_RCC_OscConfig+0x256>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002426:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8002428:	079b      	lsls	r3, r3, #30
 800242a:	d5f6      	bpl.n	800241a <HAL_RCC_OscConfig+0x176>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800242c:	b125      	cbz	r5, 8002438 <HAL_RCC_OscConfig+0x194>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800242e:	4a4f      	ldr	r2, [pc, #316]	; (800256c <HAL_RCC_OscConfig+0x2c8>)
 8002430:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002432:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002436:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002438:	69a0      	ldr	r0, [r4, #24]
 800243a:	b1d0      	cbz	r0, 8002472 <HAL_RCC_OscConfig+0x1ce>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800243c:	4b4b      	ldr	r3, [pc, #300]	; (800256c <HAL_RCC_OscConfig+0x2c8>)
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	f002 020c 	and.w	r2, r2, #12
 8002444:	2a08      	cmp	r2, #8
 8002446:	f000 80c5 	beq.w	80025d4 <HAL_RCC_OscConfig+0x330>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800244a:	2802      	cmp	r0, #2
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800244c:	681a      	ldr	r2, [r3, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800244e:	f000 80eb 	beq.w	8002628 <HAL_RCC_OscConfig+0x384>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002452:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002456:	461c      	mov	r4, r3
        __HAL_RCC_PLL_DISABLE();
 8002458:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800245a:	f7fe fd5f 	bl	8000f1c <HAL_GetTick>
 800245e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002460:	e004      	b.n	800246c <HAL_RCC_OscConfig+0x1c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002462:	f7fe fd5b 	bl	8000f1c <HAL_GetTick>
 8002466:	1b40      	subs	r0, r0, r5
 8002468:	2802      	cmp	r0, #2
 800246a:	d846      	bhi.n	80024fa <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800246c:	6823      	ldr	r3, [r4, #0]
 800246e:	019b      	lsls	r3, r3, #6
 8002470:	d4f7      	bmi.n	8002462 <HAL_RCC_OscConfig+0x1be>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8002472:	2000      	movs	r0, #0
}
 8002474:	b002      	add	sp, #8
 8002476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800247a:	6852      	ldr	r2, [r2, #4]
 800247c:	0256      	lsls	r6, r2, #9
 800247e:	d4a0      	bmi.n	80023c2 <HAL_RCC_OscConfig+0x11e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002480:	4a3a      	ldr	r2, [pc, #232]	; (800256c <HAL_RCC_OscConfig+0x2c8>)
 8002482:	6812      	ldr	r2, [r2, #0]
 8002484:	0795      	lsls	r5, r2, #30
 8002486:	d53c      	bpl.n	8002502 <HAL_RCC_OscConfig+0x25e>
 8002488:	68e2      	ldr	r2, [r4, #12]
 800248a:	2a01      	cmp	r2, #1
 800248c:	d039      	beq.n	8002502 <HAL_RCC_OscConfig+0x25e>
        return HAL_ERROR;
 800248e:	2001      	movs	r0, #1
}
 8002490:	b002      	add	sp, #8
 8002492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8002496:	4b35      	ldr	r3, [pc, #212]	; (800256c <HAL_RCC_OscConfig+0x2c8>)
 8002498:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800249a:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 800249c:	f022 0201 	bic.w	r2, r2, #1
 80024a0:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 80024a2:	f7fe fd3b 	bl	8000f1c <HAL_GetTick>
 80024a6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024a8:	e004      	b.n	80024b4 <HAL_RCC_OscConfig+0x210>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024aa:	f7fe fd37 	bl	8000f1c <HAL_GetTick>
 80024ae:	1b80      	subs	r0, r0, r6
 80024b0:	2802      	cmp	r0, #2
 80024b2:	d822      	bhi.n	80024fa <HAL_RCC_OscConfig+0x256>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024b4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80024b6:	079f      	lsls	r7, r3, #30
 80024b8:	d4f7      	bmi.n	80024aa <HAL_RCC_OscConfig+0x206>
 80024ba:	e74e      	b.n	800235a <HAL_RCC_OscConfig+0xb6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024bc:	684a      	ldr	r2, [r1, #4]
 80024be:	0250      	lsls	r0, r2, #9
 80024c0:	f57f af07 	bpl.w	80022d2 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c4:	4a29      	ldr	r2, [pc, #164]	; (800256c <HAL_RCC_OscConfig+0x2c8>)
 80024c6:	6812      	ldr	r2, [r2, #0]
 80024c8:	0391      	lsls	r1, r2, #14
 80024ca:	f57f af2b 	bpl.w	8002324 <HAL_RCC_OscConfig+0x80>
 80024ce:	6862      	ldr	r2, [r4, #4]
 80024d0:	2a00      	cmp	r2, #0
 80024d2:	f47f af27 	bne.w	8002324 <HAL_RCC_OscConfig+0x80>
 80024d6:	e7da      	b.n	800248e <HAL_RCC_OscConfig+0x1ea>
      PWR->CR1 |= PWR_CR1_DBP;
 80024d8:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024da:	461e      	mov	r6, r3
      PWR->CR1 |= PWR_CR1_DBP;
 80024dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024e0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80024e2:	f7fe fd1b 	bl	8000f1c <HAL_GetTick>
 80024e6:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024e8:	6833      	ldr	r3, [r6, #0]
 80024ea:	05da      	lsls	r2, r3, #23
 80024ec:	f53f af4c 	bmi.w	8002388 <HAL_RCC_OscConfig+0xe4>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024f0:	f7fe fd14 	bl	8000f1c <HAL_GetTick>
 80024f4:	1bc0      	subs	r0, r0, r7
 80024f6:	2864      	cmp	r0, #100	; 0x64
 80024f8:	d9f6      	bls.n	80024e8 <HAL_RCC_OscConfig+0x244>
            return HAL_TIMEOUT;
 80024fa:	2003      	movs	r0, #3
}
 80024fc:	b002      	add	sp, #8
 80024fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002502:	491a      	ldr	r1, [pc, #104]	; (800256c <HAL_RCC_OscConfig+0x2c8>)
 8002504:	6920      	ldr	r0, [r4, #16]
 8002506:	680a      	ldr	r2, [r1, #0]
 8002508:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800250c:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8002510:	600a      	str	r2, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002512:	e709      	b.n	8002328 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002514:	4b15      	ldr	r3, [pc, #84]	; (800256c <HAL_RCC_OscConfig+0x2c8>)
 8002516:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002518:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800251a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002526:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002528:	f7fe fcf8 	bl	8000f1c <HAL_GetTick>
 800252c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800252e:	e004      	b.n	800253a <HAL_RCC_OscConfig+0x296>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002530:	f7fe fcf4 	bl	8000f1c <HAL_GetTick>
 8002534:	1b80      	subs	r0, r0, r6
 8002536:	2864      	cmp	r0, #100	; 0x64
 8002538:	d8df      	bhi.n	80024fa <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800253a:	682b      	ldr	r3, [r5, #0]
 800253c:	039b      	lsls	r3, r3, #14
 800253e:	d4f7      	bmi.n	8002530 <HAL_RCC_OscConfig+0x28c>
 8002540:	e6ef      	b.n	8002322 <HAL_RCC_OscConfig+0x7e>
    return HAL_ERROR;
 8002542:	2001      	movs	r0, #1
}
 8002544:	4770      	bx	lr
  FlagStatus pwrclkchanged = RESET;
 8002546:	2500      	movs	r5, #0
 8002548:	e719      	b.n	800237e <HAL_RCC_OscConfig+0xda>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800254a:	4b08      	ldr	r3, [pc, #32]	; (800256c <HAL_RCC_OscConfig+0x2c8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800254c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002550:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002552:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002554:	f022 0201 	bic.w	r2, r2, #1
 8002558:	671a      	str	r2, [r3, #112]	; 0x70
 800255a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800255c:	f022 0204 	bic.w	r2, r2, #4
 8002560:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002562:	f7fe fcdb 	bl	8000f1c <HAL_GetTick>
 8002566:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002568:	e009      	b.n	800257e <HAL_RCC_OscConfig+0x2da>
 800256a:	bf00      	nop
 800256c:	40023800 	.word	0x40023800
 8002570:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002574:	f7fe fcd2 	bl	8000f1c <HAL_GetTick>
 8002578:	1bc0      	subs	r0, r0, r7
 800257a:	4540      	cmp	r0, r8
 800257c:	d8bd      	bhi.n	80024fa <HAL_RCC_OscConfig+0x256>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800257e:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8002580:	0798      	lsls	r0, r3, #30
 8002582:	d4f7      	bmi.n	8002574 <HAL_RCC_OscConfig+0x2d0>
    if (pwrclkchanged == SET)
 8002584:	2d00      	cmp	r5, #0
 8002586:	f43f af57 	beq.w	8002438 <HAL_RCC_OscConfig+0x194>
 800258a:	e750      	b.n	800242e <HAL_RCC_OscConfig+0x18a>
        __HAL_RCC_HSI_DISABLE();
 800258c:	4b41      	ldr	r3, [pc, #260]	; (8002694 <HAL_RCC_OscConfig+0x3f0>)
 800258e:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002590:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 8002592:	f022 0201 	bic.w	r2, r2, #1
 8002596:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002598:	f7fe fcc0 	bl	8000f1c <HAL_GetTick>
 800259c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800259e:	e004      	b.n	80025aa <HAL_RCC_OscConfig+0x306>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025a0:	f7fe fcbc 	bl	8000f1c <HAL_GetTick>
 80025a4:	1b80      	subs	r0, r0, r6
 80025a6:	2802      	cmp	r0, #2
 80025a8:	d8a7      	bhi.n	80024fa <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025aa:	682b      	ldr	r3, [r5, #0]
 80025ac:	0799      	lsls	r1, r3, #30
 80025ae:	d4f7      	bmi.n	80025a0 <HAL_RCC_OscConfig+0x2fc>
 80025b0:	6823      	ldr	r3, [r4, #0]
 80025b2:	e6b9      	b.n	8002328 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025b4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	e6a0      	b.n	8002306 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025c4:	f042 0204 	orr.w	r2, r2, #4
 80025c8:	671a      	str	r2, [r3, #112]	; 0x70
 80025ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80025cc:	f042 0201 	orr.w	r2, r2, #1
 80025d0:	671a      	str	r2, [r3, #112]	; 0x70
 80025d2:	e71b      	b.n	800240c <HAL_RCC_OscConfig+0x168>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025d4:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 80025d6:	685a      	ldr	r2, [r3, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025d8:	f43f af5a 	beq.w	8002490 <HAL_RCC_OscConfig+0x1ec>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025dc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025e0:	69e1      	ldr	r1, [r4, #28]
 80025e2:	428b      	cmp	r3, r1
 80025e4:	f47f af53 	bne.w	800248e <HAL_RCC_OscConfig+0x1ea>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025e8:	f002 033f 	and.w	r3, r2, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ec:	6a21      	ldr	r1, [r4, #32]
 80025ee:	428b      	cmp	r3, r1
 80025f0:	f47f af4d 	bne.w	800248e <HAL_RCC_OscConfig+0x1ea>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025f8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80025fa:	4013      	ands	r3, r2
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025fc:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 8002600:	f47f af45 	bne.w	800248e <HAL_RCC_OscConfig+0x1ea>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002604:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002606:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 800260a:	085b      	lsrs	r3, r3, #1
 800260c:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800260e:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 8002612:	f47f af3c 	bne.w	800248e <HAL_RCC_OscConfig+0x1ea>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002616:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002618:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800261c:	ebb2 6f03 	cmp.w	r2, r3, lsl #24
    return HAL_ERROR;
 8002620:	bf14      	ite	ne
 8002622:	2001      	movne	r0, #1
 8002624:	2000      	moveq	r0, #0
 8002626:	e733      	b.n	8002490 <HAL_RCC_OscConfig+0x1ec>
        __HAL_RCC_PLL_DISABLE();
 8002628:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800262c:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 800262e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002630:	f7fe fc74 	bl	8000f1c <HAL_GetTick>
 8002634:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002636:	e005      	b.n	8002644 <HAL_RCC_OscConfig+0x3a0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002638:	f7fe fc70 	bl	8000f1c <HAL_GetTick>
 800263c:	1b80      	subs	r0, r0, r6
 800263e:	2802      	cmp	r0, #2
 8002640:	f63f af5b 	bhi.w	80024fa <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002644:	682b      	ldr	r3, [r5, #0]
 8002646:	0199      	lsls	r1, r3, #6
 8002648:	d4f6      	bmi.n	8002638 <HAL_RCC_OscConfig+0x394>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800264a:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800264e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002650:	4313      	orrs	r3, r2
 8002652:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 8002656:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800265a:	4c0e      	ldr	r4, [pc, #56]	; (8002694 <HAL_RCC_OscConfig+0x3f0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800265c:	0852      	lsrs	r2, r2, #1
 800265e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002662:	3a01      	subs	r2, #1
 8002664:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002668:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800266c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800266e:	682b      	ldr	r3, [r5, #0]
 8002670:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002674:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002676:	f7fe fc51 	bl	8000f1c <HAL_GetTick>
 800267a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800267c:	e005      	b.n	800268a <HAL_RCC_OscConfig+0x3e6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800267e:	f7fe fc4d 	bl	8000f1c <HAL_GetTick>
 8002682:	1b40      	subs	r0, r0, r5
 8002684:	2802      	cmp	r0, #2
 8002686:	f63f af38 	bhi.w	80024fa <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800268a:	6823      	ldr	r3, [r4, #0]
 800268c:	019a      	lsls	r2, r3, #6
 800268e:	d5f6      	bpl.n	800267e <HAL_RCC_OscConfig+0x3da>
 8002690:	e6ef      	b.n	8002472 <HAL_RCC_OscConfig+0x1ce>
 8002692:	bf00      	nop
 8002694:	40023800 	.word	0x40023800

08002698 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002698:	b178      	cbz	r0, 80026ba <HAL_RCC_ClockConfig+0x22>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800269a:	4a5e      	ldr	r2, [pc, #376]	; (8002814 <HAL_RCC_ClockConfig+0x17c>)
 800269c:	6813      	ldr	r3, [r2, #0]
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	428b      	cmp	r3, r1
 80026a4:	d20b      	bcs.n	80026be <HAL_RCC_ClockConfig+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026a6:	6813      	ldr	r3, [r2, #0]
 80026a8:	f023 030f 	bic.w	r3, r3, #15
 80026ac:	430b      	orrs	r3, r1
 80026ae:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b0:	6813      	ldr	r3, [r2, #0]
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	428b      	cmp	r3, r1
 80026b8:	d001      	beq.n	80026be <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 80026ba:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);

  return HAL_OK;
}
 80026bc:	4770      	bx	lr
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026be:	6803      	ldr	r3, [r0, #0]
{
 80026c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026c4:	079d      	lsls	r5, r3, #30
 80026c6:	d514      	bpl.n	80026f2 <HAL_RCC_ClockConfig+0x5a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c8:	075c      	lsls	r4, r3, #29
 80026ca:	d504      	bpl.n	80026d6 <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026cc:	4c52      	ldr	r4, [pc, #328]	; (8002818 <HAL_RCC_ClockConfig+0x180>)
 80026ce:	68a2      	ldr	r2, [r4, #8]
 80026d0:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80026d4:	60a2      	str	r2, [r4, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d6:	071a      	lsls	r2, r3, #28
 80026d8:	d504      	bpl.n	80026e4 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026da:	4c4f      	ldr	r4, [pc, #316]	; (8002818 <HAL_RCC_ClockConfig+0x180>)
 80026dc:	68a2      	ldr	r2, [r4, #8]
 80026de:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80026e2:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026e4:	4c4c      	ldr	r4, [pc, #304]	; (8002818 <HAL_RCC_ClockConfig+0x180>)
 80026e6:	6885      	ldr	r5, [r0, #8]
 80026e8:	68a2      	ldr	r2, [r4, #8]
 80026ea:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80026ee:	432a      	orrs	r2, r5
 80026f0:	60a2      	str	r2, [r4, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026f2:	07df      	lsls	r7, r3, #31
 80026f4:	4604      	mov	r4, r0
 80026f6:	460d      	mov	r5, r1
 80026f8:	d521      	bpl.n	800273e <HAL_RCC_ClockConfig+0xa6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026fa:	6842      	ldr	r2, [r0, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fc:	4b46      	ldr	r3, [pc, #280]	; (8002818 <HAL_RCC_ClockConfig+0x180>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026fe:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002700:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002702:	d063      	beq.n	80027cc <HAL_RCC_ClockConfig+0x134>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002704:	2a02      	cmp	r2, #2
 8002706:	d079      	beq.n	80027fc <HAL_RCC_ClockConfig+0x164>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002708:	0799      	lsls	r1, r3, #30
 800270a:	d528      	bpl.n	800275e <HAL_RCC_ClockConfig+0xc6>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800270c:	4942      	ldr	r1, [pc, #264]	; (8002818 <HAL_RCC_ClockConfig+0x180>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800270e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002712:	688b      	ldr	r3, [r1, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002714:	460e      	mov	r6, r1
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002716:	f023 0303 	bic.w	r3, r3, #3
 800271a:	4313      	orrs	r3, r2
 800271c:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800271e:	f7fe fbfd 	bl	8000f1c <HAL_GetTick>
 8002722:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002724:	e004      	b.n	8002730 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002726:	f7fe fbf9 	bl	8000f1c <HAL_GetTick>
 800272a:	1bc0      	subs	r0, r0, r7
 800272c:	4540      	cmp	r0, r8
 800272e:	d863      	bhi.n	80027f8 <HAL_RCC_ClockConfig+0x160>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002730:	68b3      	ldr	r3, [r6, #8]
 8002732:	6862      	ldr	r2, [r4, #4]
 8002734:	f003 030c 	and.w	r3, r3, #12
 8002738:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800273c:	d1f3      	bne.n	8002726 <HAL_RCC_ClockConfig+0x8e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800273e:	4a35      	ldr	r2, [pc, #212]	; (8002814 <HAL_RCC_ClockConfig+0x17c>)
 8002740:	6813      	ldr	r3, [r2, #0]
 8002742:	f003 030f 	and.w	r3, r3, #15
 8002746:	42ab      	cmp	r3, r5
 8002748:	d90c      	bls.n	8002764 <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800274a:	6813      	ldr	r3, [r2, #0]
 800274c:	f023 030f 	bic.w	r3, r3, #15
 8002750:	432b      	orrs	r3, r5
 8002752:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002754:	6813      	ldr	r3, [r2, #0]
 8002756:	f003 030f 	and.w	r3, r3, #15
 800275a:	42ab      	cmp	r3, r5
 800275c:	d002      	beq.n	8002764 <HAL_RCC_ClockConfig+0xcc>
    return HAL_ERROR;
 800275e:	2001      	movs	r0, #1
}
 8002760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002764:	6823      	ldr	r3, [r4, #0]
 8002766:	075a      	lsls	r2, r3, #29
 8002768:	d506      	bpl.n	8002778 <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800276a:	492b      	ldr	r1, [pc, #172]	; (8002818 <HAL_RCC_ClockConfig+0x180>)
 800276c:	68e0      	ldr	r0, [r4, #12]
 800276e:	688a      	ldr	r2, [r1, #8]
 8002770:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8002774:	4302      	orrs	r2, r0
 8002776:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002778:	071b      	lsls	r3, r3, #28
 800277a:	d507      	bpl.n	800278c <HAL_RCC_ClockConfig+0xf4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800277c:	4a26      	ldr	r2, [pc, #152]	; (8002818 <HAL_RCC_ClockConfig+0x180>)
 800277e:	6921      	ldr	r1, [r4, #16]
 8002780:	6893      	ldr	r3, [r2, #8]
 8002782:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002786:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800278a:	6093      	str	r3, [r2, #8]
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800278c:	4922      	ldr	r1, [pc, #136]	; (8002818 <HAL_RCC_ClockConfig+0x180>)
 800278e:	688b      	ldr	r3, [r1, #8]
 8002790:	f003 030c 	and.w	r3, r3, #12
 8002794:	2b04      	cmp	r3, #4
 8002796:	d01c      	beq.n	80027d2 <HAL_RCC_ClockConfig+0x13a>
 8002798:	2b08      	cmp	r3, #8
 800279a:	d12b      	bne.n	80027f4 <HAL_RCC_ClockConfig+0x15c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800279c:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800279e:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027a0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027a4:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80027a6:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 80027aa:	d12a      	bne.n	8002802 <HAL_RCC_ClockConfig+0x16a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ac:	481b      	ldr	r0, [pc, #108]	; (800281c <HAL_RCC_ClockConfig+0x184>)
 80027ae:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80027b2:	fba1 0100 	umull	r0, r1, r1, r0
 80027b6:	f7fe f9f5 	bl	8000ba4 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80027ba:	4b17      	ldr	r3, [pc, #92]	; (8002818 <HAL_RCC_ClockConfig+0x180>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80027c2:	3301      	adds	r3, #1
 80027c4:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80027c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ca:	e003      	b.n	80027d4 <HAL_RCC_ClockConfig+0x13c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027cc:	039e      	lsls	r6, r3, #14
 80027ce:	d49d      	bmi.n	800270c <HAL_RCC_ClockConfig+0x74>
 80027d0:	e7c5      	b.n	800275e <HAL_RCC_ClockConfig+0xc6>
      sysclockfreq = HSE_VALUE;
 80027d2:	4b13      	ldr	r3, [pc, #76]	; (8002820 <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027d4:	4a10      	ldr	r2, [pc, #64]	; (8002818 <HAL_RCC_ClockConfig+0x180>)
 80027d6:	4c13      	ldr	r4, [pc, #76]	; (8002824 <HAL_RCC_ClockConfig+0x18c>)
 80027d8:	6892      	ldr	r2, [r2, #8]
  HAL_InitTick(uwTickPrio);
 80027da:	4813      	ldr	r0, [pc, #76]	; (8002828 <HAL_RCC_ClockConfig+0x190>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027dc:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80027e0:	4912      	ldr	r1, [pc, #72]	; (800282c <HAL_RCC_ClockConfig+0x194>)
  HAL_InitTick(uwTickPrio);
 80027e2:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027e4:	5ca2      	ldrb	r2, [r4, r2]
 80027e6:	40d3      	lsrs	r3, r2
 80027e8:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 80027ea:	f7fe fb5b 	bl	8000ea4 <HAL_InitTick>
  return HAL_OK;
 80027ee:	2000      	movs	r0, #0
}
 80027f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      sysclockfreq = HSI_VALUE;
 80027f4:	4b09      	ldr	r3, [pc, #36]	; (800281c <HAL_RCC_ClockConfig+0x184>)
 80027f6:	e7ed      	b.n	80027d4 <HAL_RCC_ClockConfig+0x13c>
        return HAL_TIMEOUT;
 80027f8:	2003      	movs	r0, #3
 80027fa:	e7b1      	b.n	8002760 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027fc:	0198      	lsls	r0, r3, #6
 80027fe:	d485      	bmi.n	800270c <HAL_RCC_ClockConfig+0x74>
 8002800:	e7ad      	b.n	800275e <HAL_RCC_ClockConfig+0xc6>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002802:	4807      	ldr	r0, [pc, #28]	; (8002820 <HAL_RCC_ClockConfig+0x188>)
 8002804:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002808:	2300      	movs	r3, #0
 800280a:	fba1 0100 	umull	r0, r1, r1, r0
 800280e:	f7fe f9c9 	bl	8000ba4 <__aeabi_uldivmod>
 8002812:	e7d2      	b.n	80027ba <HAL_RCC_ClockConfig+0x122>
 8002814:	40023c00 	.word	0x40023c00
 8002818:	40023800 	.word	0x40023800
 800281c:	00f42400 	.word	0x00f42400
 8002820:	017d7840 	.word	0x017d7840
 8002824:	0800d89c 	.word	0x0800d89c
 8002828:	20000004 	.word	0x20000004
 800282c:	20000008 	.word	0x20000008

08002830 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002830:	4916      	ldr	r1, [pc, #88]	; (800288c <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8002832:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002834:	688b      	ldr	r3, [r1, #8]
 8002836:	f003 030c 	and.w	r3, r3, #12
 800283a:	2b04      	cmp	r3, #4
 800283c:	d01b      	beq.n	8002876 <HAL_RCC_GetSysClockFreq+0x46>
 800283e:	2b08      	cmp	r3, #8
 8002840:	d117      	bne.n	8002872 <HAL_RCC_GetSysClockFreq+0x42>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002842:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002844:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002846:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800284a:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800284c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 8002850:	d113      	bne.n	800287a <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002852:	480f      	ldr	r0, [pc, #60]	; (8002890 <HAL_RCC_GetSysClockFreq+0x60>)
 8002854:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002858:	fba1 0100 	umull	r0, r1, r1, r0
 800285c:	f7fe f9a2 	bl	8000ba4 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002860:	4b0a      	ldr	r3, [pc, #40]	; (800288c <HAL_RCC_GetSysClockFreq+0x5c>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002868:	3301      	adds	r3, #1
 800286a:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 800286c:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002870:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8002872:	4807      	ldr	r0, [pc, #28]	; (8002890 <HAL_RCC_GetSysClockFreq+0x60>)
}
 8002874:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8002876:	4807      	ldr	r0, [pc, #28]	; (8002894 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8002878:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800287a:	4806      	ldr	r0, [pc, #24]	; (8002894 <HAL_RCC_GetSysClockFreq+0x64>)
 800287c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002880:	2300      	movs	r3, #0
 8002882:	fba1 0100 	umull	r0, r1, r1, r0
 8002886:	f7fe f98d 	bl	8000ba4 <__aeabi_uldivmod>
 800288a:	e7e9      	b.n	8002860 <HAL_RCC_GetSysClockFreq+0x30>
 800288c:	40023800 	.word	0x40023800
 8002890:	00f42400 	.word	0x00f42400
 8002894:	017d7840 	.word	0x017d7840

08002898 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002898:	4b04      	ldr	r3, [pc, #16]	; (80028ac <HAL_RCC_GetPCLK1Freq+0x14>)
 800289a:	4a05      	ldr	r2, [pc, #20]	; (80028b0 <HAL_RCC_GetPCLK1Freq+0x18>)
 800289c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800289e:	4905      	ldr	r1, [pc, #20]	; (80028b4 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028a0:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80028a4:	6808      	ldr	r0, [r1, #0]
 80028a6:	5cd3      	ldrb	r3, [r2, r3]
}
 80028a8:	40d8      	lsrs	r0, r3
 80028aa:	4770      	bx	lr
 80028ac:	40023800 	.word	0x40023800
 80028b0:	0800d8ac 	.word	0x0800d8ac
 80028b4:	20000008 	.word	0x20000008

080028b8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028b8:	4b04      	ldr	r3, [pc, #16]	; (80028cc <HAL_RCC_GetPCLK2Freq+0x14>)
 80028ba:	4a05      	ldr	r2, [pc, #20]	; (80028d0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80028bc:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80028be:	4905      	ldr	r1, [pc, #20]	; (80028d4 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028c0:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80028c4:	6808      	ldr	r0, [r1, #0]
 80028c6:	5cd3      	ldrb	r3, [r2, r3]
}
 80028c8:	40d8      	lsrs	r0, r3
 80028ca:	4770      	bx	lr
 80028cc:	40023800 	.word	0x40023800
 80028d0:	0800d8ac 	.word	0x0800d8ac
 80028d4:	20000008 	.word	0x20000008

080028d8 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80028d8:	6803      	ldr	r3, [r0, #0]
{
 80028da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80028de:	f013 0601 	ands.w	r6, r3, #1
{
 80028e2:	b083      	sub	sp, #12
 80028e4:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80028e6:	d00b      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028e8:	4ab6      	ldr	r2, [pc, #728]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80028ea:	6891      	ldr	r1, [r2, #8]
 80028ec:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 80028f0:	6091      	str	r1, [r2, #8]
 80028f2:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80028f4:	6891      	ldr	r1, [r2, #8]
 80028f6:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80028f8:	fab6 f686 	clz	r6, r6
 80028fc:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028fe:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002900:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 8002904:	d010      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x50>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002906:	49af      	ldr	r1, [pc, #700]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002908:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800290a:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800290e:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002912:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002916:	ea42 0205 	orr.w	r2, r2, r5
 800291a:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800291e:	f000 821a 	beq.w	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x47e>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002922:	fab5 f585 	clz	r5, r5
 8002926:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002928:	02d9      	lsls	r1, r3, #11
 800292a:	d510      	bpl.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800292c:	48a5      	ldr	r0, [pc, #660]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800292e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002930:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002934:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002938:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800293c:	ea42 0201 	orr.w	r2, r2, r1
 8002940:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002944:	f000 820a 	beq.w	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x484>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8002948:	2900      	cmp	r1, #0
 800294a:	bf08      	it	eq
 800294c:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 800294e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002952:	bf18      	it	ne
 8002954:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002956:	069a      	lsls	r2, r3, #26
 8002958:	f100 81b7 	bmi.w	8002cca <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800295c:	06d9      	lsls	r1, r3, #27
 800295e:	d50c      	bpl.n	800297a <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002960:	4a98      	ldr	r2, [pc, #608]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002962:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8002966:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800296a:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 800296e:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8002972:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002974:	4301      	orrs	r1, r0
 8002976:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800297a:	045a      	lsls	r2, r3, #17
 800297c:	d508      	bpl.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800297e:	4991      	ldr	r1, [pc, #580]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002980:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002982:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002986:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800298a:	4302      	orrs	r2, r0
 800298c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002990:	041f      	lsls	r7, r3, #16
 8002992:	d508      	bpl.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002994:	498b      	ldr	r1, [pc, #556]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002996:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8002998:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800299c:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80029a0:	4302      	orrs	r2, r0
 80029a2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029a6:	03d8      	lsls	r0, r3, #15
 80029a8:	d508      	bpl.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029aa:	4986      	ldr	r1, [pc, #536]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80029ac:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80029ae:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80029b2:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80029b6:	4302      	orrs	r2, r0
 80029b8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80029bc:	0399      	lsls	r1, r3, #14
 80029be:	d508      	bpl.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80029c0:	4980      	ldr	r1, [pc, #512]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80029c2:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80029c4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80029c8:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80029cc:	4302      	orrs	r2, r0
 80029ce:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029d2:	065a      	lsls	r2, r3, #25
 80029d4:	d508      	bpl.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029d6:	497b      	ldr	r1, [pc, #492]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80029d8:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80029da:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80029de:	f022 0203 	bic.w	r2, r2, #3
 80029e2:	4302      	orrs	r2, r0
 80029e4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029e8:	061f      	lsls	r7, r3, #24
 80029ea:	d508      	bpl.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029ec:	4975      	ldr	r1, [pc, #468]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80029ee:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80029f0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80029f4:	f022 020c 	bic.w	r2, r2, #12
 80029f8:	4302      	orrs	r2, r0
 80029fa:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029fe:	05d8      	lsls	r0, r3, #23
 8002a00:	d508      	bpl.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a02:	4970      	ldr	r1, [pc, #448]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002a04:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002a06:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002a0a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002a0e:	4302      	orrs	r2, r0
 8002a10:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a14:	0599      	lsls	r1, r3, #22
 8002a16:	d508      	bpl.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a18:	496a      	ldr	r1, [pc, #424]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002a1a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002a1c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002a20:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002a24:	4302      	orrs	r2, r0
 8002a26:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a2a:	055a      	lsls	r2, r3, #21
 8002a2c:	d508      	bpl.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a2e:	4965      	ldr	r1, [pc, #404]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002a30:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002a32:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002a36:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002a3a:	4302      	orrs	r2, r0
 8002a3c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002a40:	051f      	lsls	r7, r3, #20
 8002a42:	d508      	bpl.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002a44:	495f      	ldr	r1, [pc, #380]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002a46:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a48:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002a4c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002a50:	4302      	orrs	r2, r0
 8002a52:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002a56:	04d8      	lsls	r0, r3, #19
 8002a58:	d508      	bpl.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002a5a:	495a      	ldr	r1, [pc, #360]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002a5c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002a5e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002a62:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002a66:	4302      	orrs	r2, r0
 8002a68:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002a6c:	0499      	lsls	r1, r3, #18
 8002a6e:	d508      	bpl.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002a70:	4954      	ldr	r1, [pc, #336]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002a72:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002a74:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002a78:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002a7c:	4302      	orrs	r2, r0
 8002a7e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002a82:	025a      	lsls	r2, r3, #9
 8002a84:	d508      	bpl.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002a86:	494f      	ldr	r1, [pc, #316]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002a88:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8002a8a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002a8e:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002a92:	4302      	orrs	r2, r0
 8002a94:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002a98:	029f      	lsls	r7, r3, #10
 8002a9a:	d50c      	bpl.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002a9c:	4949      	ldr	r1, [pc, #292]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002a9e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002aa0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8002aa4:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002aa8:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8002aac:	bf08      	it	eq
 8002aae:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002ab0:	4302      	orrs	r2, r0
 8002ab2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8002ab6:	f013 0f08 	tst.w	r3, #8
 8002aba:	bf18      	it	ne
 8002abc:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002abe:	0358      	lsls	r0, r3, #13
 8002ac0:	d508      	bpl.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ac2:	4940      	ldr	r1, [pc, #256]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002ac4:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8002ac6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002aca:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002ace:	4302      	orrs	r2, r0
 8002ad0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002ad4:	0219      	lsls	r1, r3, #8
 8002ad6:	f100 80ed 	bmi.w	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002ada:	2e01      	cmp	r6, #1
 8002adc:	d001      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002ade:	019a      	lsls	r2, r3, #6
 8002ae0:	d560      	bpl.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ae2:	4b38      	ldr	r3, [pc, #224]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002ae4:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ae6:	461e      	mov	r6, r3
    __HAL_RCC_PLLI2S_DISABLE();
 8002ae8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002aec:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002aee:	f7fe fa15 	bl	8000f1c <HAL_GetTick>
 8002af2:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002af4:	e005      	b.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002af6:	f7fe fa11 	bl	8000f1c <HAL_GetTick>
 8002afa:	1bc0      	subs	r0, r0, r7
 8002afc:	2864      	cmp	r0, #100	; 0x64
 8002afe:	f200 80d5 	bhi.w	8002cac <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b02:	6833      	ldr	r3, [r6, #0]
 8002b04:	011b      	lsls	r3, r3, #4
 8002b06:	d4f6      	bmi.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x21e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002b08:	6823      	ldr	r3, [r4, #0]
 8002b0a:	07df      	lsls	r7, r3, #31
 8002b0c:	d512      	bpl.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x25c>
 8002b0e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002b10:	b982      	cbnz	r2, 8002b34 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b12:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b16:	f8d6 7084 	ldr.w	r7, [r6, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b1a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8002b1e:	6860      	ldr	r0, [r4, #4]
 8002b20:	f007 6770 	and.w	r7, r7, #251658240	; 0xf000000
 8002b24:	68a1      	ldr	r1, [r4, #8]
 8002b26:	433a      	orrs	r2, r7
 8002b28:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8002b2c:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8002b30:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b34:	031e      	lsls	r6, r3, #12
 8002b36:	d504      	bpl.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8002b38:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002b3a:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8002b3e:	f000 811e 	beq.w	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002b42:	02d8      	lsls	r0, r3, #11
 8002b44:	d504      	bpl.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x278>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b46:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002b48:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8002b4c:	f000 8117 	beq.w	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b50:	01d9      	lsls	r1, r3, #7
 8002b52:	d511      	bpl.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b54:	4e1b      	ldr	r6, [pc, #108]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002b56:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b58:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b5c:	f8d6 7084 	ldr.w	r7, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002b60:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8002b64:	6921      	ldr	r1, [r4, #16]
 8002b66:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 8002b6a:	433a      	orrs	r2, r7
 8002b6c:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8002b70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002b74:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002b78:	019a      	lsls	r2, r3, #6
 8002b7a:	f100 80f1 	bmi.w	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x488>
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002b7e:	4b11      	ldr	r3, [pc, #68]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002b80:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b82:	461e      	mov	r6, r3
    __HAL_RCC_PLLI2S_ENABLE();
 8002b84:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002b88:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002b8a:	f7fe f9c7 	bl	8000f1c <HAL_GetTick>
 8002b8e:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b90:	e005      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b92:	f7fe f9c3 	bl	8000f1c <HAL_GetTick>
 8002b96:	1bc0      	subs	r0, r0, r7
 8002b98:	2864      	cmp	r0, #100	; 0x64
 8002b9a:	f200 8087 	bhi.w	8002cac <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b9e:	6833      	ldr	r3, [r6, #0]
 8002ba0:	011b      	lsls	r3, r3, #4
 8002ba2:	d5f6      	bpl.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002ba4:	2d01      	cmp	r5, #1
 8002ba6:	d003      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002ba8:	2000      	movs	r0, #0
}
 8002baa:	b003      	add	sp, #12
 8002bac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 8002bb0:	4b04      	ldr	r3, [pc, #16]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002bb2:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002bb4:	461d      	mov	r5, r3
    __HAL_RCC_PLLSAI_DISABLE();
 8002bb6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002bba:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002bbc:	f7fe f9ae 	bl	8000f1c <HAL_GetTick>
 8002bc0:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002bc2:	e006      	b.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8002bc4:	40023800 	.word	0x40023800
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002bc8:	f7fe f9a8 	bl	8000f1c <HAL_GetTick>
 8002bcc:	1b80      	subs	r0, r0, r6
 8002bce:	2864      	cmp	r0, #100	; 0x64
 8002bd0:	d86c      	bhi.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002bd2:	682b      	ldr	r3, [r5, #0]
 8002bd4:	009f      	lsls	r7, r3, #2
 8002bd6:	d4f7      	bmi.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002bd8:	6823      	ldr	r3, [r4, #0]
 8002bda:	031d      	lsls	r5, r3, #12
 8002bdc:	d501      	bpl.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8002bde:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002be0:	b11a      	cbz	r2, 8002bea <HAL_RCCEx_PeriphCLKConfig+0x312>
 8002be2:	02d8      	lsls	r0, r3, #11
 8002be4:	d51d      	bpl.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x34a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002be6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002be8:	b9da      	cbnz	r2, 8002c22 <HAL_RCCEx_PeriphCLKConfig+0x34a>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002bea:	4982      	ldr	r1, [pc, #520]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002bec:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002bee:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002bf2:	f8d1 6088 	ldr.w	r6, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002bf6:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8002bfa:	69a0      	ldr	r0, [r4, #24]
 8002bfc:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 8002c00:	4332      	orrs	r2, r6
 8002c02:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 8002c06:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002c0a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002c0e:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8002c12:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002c14:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8002c18:	3801      	subs	r0, #1
 8002c1a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002c1e:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002c22:	0299      	lsls	r1, r3, #10
 8002c24:	d515      	bpl.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8002c26:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8002c28:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 8002c2c:	d111      	bne.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c2e:	4971      	ldr	r1, [pc, #452]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002c30:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c32:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c36:	f8d1 6088 	ldr.w	r6, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002c3a:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8002c3e:	6a20      	ldr	r0, [r4, #32]
 8002c40:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 8002c44:	4332      	orrs	r2, r6
 8002c46:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 8002c4a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8002c4e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002c52:	071a      	lsls	r2, r3, #28
 8002c54:	d519      	bpl.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c56:	4a67      	ldr	r2, [pc, #412]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002c58:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c5a:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002c5e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002c62:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8002c66:	69e0      	ldr	r0, [r4, #28]
 8002c68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c6c:	430b      	orrs	r3, r1
 8002c6e:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8002c72:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 8002c76:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002c7a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002c7e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002c80:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002c84:	430b      	orrs	r3, r1
 8002c86:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8002c8a:	4b5a      	ldr	r3, [pc, #360]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002c8c:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c8e:	461c      	mov	r4, r3
    __HAL_RCC_PLLSAI_ENABLE();
 8002c90:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c94:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002c96:	f7fe f941 	bl	8000f1c <HAL_GetTick>
 8002c9a:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c9c:	6823      	ldr	r3, [r4, #0]
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	d482      	bmi.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ca2:	f7fe f93b 	bl	8000f1c <HAL_GetTick>
 8002ca6:	1b40      	subs	r0, r0, r5
 8002ca8:	2864      	cmp	r0, #100	; 0x64
 8002caa:	d9f7      	bls.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x3c4>
        return HAL_TIMEOUT;
 8002cac:	2003      	movs	r0, #3
}
 8002cae:	b003      	add	sp, #12
 8002cb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002cb4:	494f      	ldr	r1, [pc, #316]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002cb6:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8002cba:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002cbe:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002cc2:	4302      	orrs	r2, r0
 8002cc4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
 8002cc8:	e707      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x202>
    __HAL_RCC_PWR_CLK_ENABLE();
 8002cca:	4a4a      	ldr	r2, [pc, #296]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
    PWR->CR1 |= PWR_CR1_DBP;
 8002ccc:	4b4a      	ldr	r3, [pc, #296]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x520>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8002cce:	6c11      	ldr	r1, [r2, #64]	; 0x40
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002cd0:	461f      	mov	r7, r3
    __HAL_RCC_PWR_CLK_ENABLE();
 8002cd2:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002cd6:	6411      	str	r1, [r2, #64]	; 0x40
 8002cd8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002cda:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8002cde:	9201      	str	r2, [sp, #4]
 8002ce0:	9a01      	ldr	r2, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ce8:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002cea:	f7fe f917 	bl	8000f1c <HAL_GetTick>
 8002cee:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002cf0:	e005      	b.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x426>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cf2:	f7fe f913 	bl	8000f1c <HAL_GetTick>
 8002cf6:	eba0 0008 	sub.w	r0, r0, r8
 8002cfa:	2864      	cmp	r0, #100	; 0x64
 8002cfc:	d8d6      	bhi.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	05db      	lsls	r3, r3, #23
 8002d02:	d5f6      	bpl.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d04:	4a3b      	ldr	r2, [pc, #236]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002d06:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002d08:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002d0a:	f403 7040 	and.w	r0, r3, #768	; 0x300
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d0e:	f411 7140 	ands.w	r1, r1, #768	; 0x300
 8002d12:	d010      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8002d14:	4281      	cmp	r1, r0
 8002d16:	d00e      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x45e>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d18:	6f11      	ldr	r1, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d1a:	6f17      	ldr	r7, [r2, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d1c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d20:	f447 3780 	orr.w	r7, r7, #65536	; 0x10000
 8002d24:	6717      	str	r7, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d26:	6f17      	ldr	r7, [r2, #112]	; 0x70
 8002d28:	f427 3780 	bic.w	r7, r7, #65536	; 0x10000
 8002d2c:	6717      	str	r7, [r2, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8002d2e:	6711      	str	r1, [r2, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d30:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002d32:	07cf      	lsls	r7, r1, #31
 8002d34:	d448      	bmi.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d36:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 8002d3a:	d03c      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002d3c:	492d      	ldr	r1, [pc, #180]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002d3e:	688a      	ldr	r2, [r1, #8]
 8002d40:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8002d44:	608a      	str	r2, [r1, #8]
 8002d46:	4a2b      	ldr	r2, [pc, #172]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002d48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d4c:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002d4e:	430b      	orrs	r3, r1
 8002d50:	6713      	str	r3, [r2, #112]	; 0x70
 8002d52:	6823      	ldr	r3, [r4, #0]
 8002d54:	e602      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x84>
  uint32_t pllsaiused = 0;
 8002d56:	2500      	movs	r5, #0
      plli2sused = 1;
 8002d58:	2601      	movs	r6, #1
 8002d5a:	e5e5      	b.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x50>
      plli2sused = 1;
 8002d5c:	2601      	movs	r6, #1
 8002d5e:	e5f6      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x76>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d60:	6923      	ldr	r3, [r4, #16]
 8002d62:	6862      	ldr	r2, [r4, #4]
 8002d64:	041b      	lsls	r3, r3, #16
 8002d66:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 8002d6a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002d6e:	4a21      	ldr	r2, [pc, #132]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002d70:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002d74:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002d78:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8002d7c:	e6ff      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d7e:	4e1d      	ldr	r6, [pc, #116]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002d80:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d82:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d86:	f8d6 7084 	ldr.w	r7, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002d8a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8002d8e:	68e1      	ldr	r1, [r4, #12]
 8002d90:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 8002d94:	433a      	orrs	r2, r7
 8002d96:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8002d9a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002d9e:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002da2:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 8002da6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002da8:	f021 011f 	bic.w	r1, r1, #31
 8002dac:	3a01      	subs	r2, #1
 8002dae:	430a      	orrs	r2, r1
 8002db0:	f8c6 208c 	str.w	r2, [r6, #140]	; 0x8c
 8002db4:	e6cc      	b.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002db6:	480f      	ldr	r0, [pc, #60]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002db8:	4910      	ldr	r1, [pc, #64]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x524>)
 8002dba:	6882      	ldr	r2, [r0, #8]
 8002dbc:	4019      	ands	r1, r3
 8002dbe:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	6082      	str	r2, [r0, #8]
 8002dc6:	e7be      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc8:	4617      	mov	r7, r2
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dca:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002dce:	f7fe f8a5 	bl	8000f1c <HAL_GetTick>
 8002dd2:	4681      	mov	r9, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd4:	e006      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dd6:	f7fe f8a1 	bl	8000f1c <HAL_GetTick>
 8002dda:	eba0 0009 	sub.w	r0, r0, r9
 8002dde:	4540      	cmp	r0, r8
 8002de0:	f63f af64 	bhi.w	8002cac <HAL_RCCEx_PeriphCLKConfig+0x3d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002de6:	0798      	lsls	r0, r3, #30
 8002de8:	d5f5      	bpl.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8002dea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002dec:	f403 7040 	and.w	r0, r3, #768	; 0x300
 8002df0:	e7a1      	b.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8002df2:	bf00      	nop
 8002df4:	40023800 	.word	0x40023800
 8002df8:	40007000 	.word	0x40007000
 8002dfc:	0ffffcff 	.word	0x0ffffcff

08002e00 <HAL_RTC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002e00:	2800      	cmp	r0, #0
 8002e02:	d066      	beq.n	8002ed2 <HAL_RTC_Init+0xd2>
{
 8002e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002e06:	7f43      	ldrb	r3, [r0, #29]
 8002e08:	4604      	mov	r4, r0
 8002e0a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d043      	beq.n	8002e9a <HAL_RTC_Init+0x9a>

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e12:	6823      	ldr	r3, [r4, #0]
 8002e14:	2253      	movs	r2, #83	; 0x53
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e16:	2002      	movs	r0, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e18:	21ca      	movs	r1, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e1a:	7760      	strb	r0, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e1c:	6259      	str	r1, [r3, #36]	; 0x24
 8002e1e:	625a      	str	r2, [r3, #36]	; 0x24
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002e20:	68da      	ldr	r2, [r3, #12]
 8002e22:	0655      	lsls	r5, r2, #25
 8002e24:	d527      	bpl.n	8002e76 <HAL_RTC_Init+0x76>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002e26:	6898      	ldr	r0, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002e28:	6925      	ldr	r5, [r4, #16]
 8002e2a:	6862      	ldr	r2, [r4, #4]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002e2c:	492a      	ldr	r1, [pc, #168]	; (8002ed8 <HAL_RTC_Init+0xd8>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002e2e:	432a      	orrs	r2, r5
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002e30:	4001      	ands	r1, r0
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002e32:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002e34:	6099      	str	r1, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002e36:	4302      	orrs	r2, r0
 8002e38:	689d      	ldr	r5, [r3, #8]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8002e3a:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002e3e:	432a      	orrs	r2, r5
 8002e40:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002e42:	6118      	str	r0, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8002e44:	691a      	ldr	r2, [r3, #16]
 8002e46:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002e4a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e52:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002e54:	689a      	ldr	r2, [r3, #8]
 8002e56:	0691      	lsls	r1, r2, #26
 8002e58:	d523      	bpl.n	8002ea2 <HAL_RTC_Init+0xa2>
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8002e5a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e5c:	26ff      	movs	r6, #255	; 0xff
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8002e5e:	69a7      	ldr	r7, [r4, #24]
    hrtc->State = HAL_RTC_STATE_READY;
 8002e60:	2501      	movs	r5, #1
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8002e62:	f021 0108 	bic.w	r1, r1, #8
    return HAL_OK;
 8002e66:	2000      	movs	r0, #0
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8002e68:	64d9      	str	r1, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8002e6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e6c:	433a      	orrs	r2, r7
 8002e6e:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e70:	625e      	str	r6, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8002e72:	7765      	strb	r5, [r4, #29]
}
 8002e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002e76:	f04f 32ff 	mov.w	r2, #4294967295
 8002e7a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e7c:	f7fe f84e 	bl	8000f1c <HAL_GetTick>
 8002e80:	4605      	mov	r5, r0
 8002e82:	e005      	b.n	8002e90 <HAL_RTC_Init+0x90>

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002e84:	f7fe f84a 	bl	8000f1c <HAL_GetTick>
 8002e88:	1b40      	subs	r0, r0, r5
 8002e8a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002e8e:	d819      	bhi.n	8002ec4 <HAL_RTC_Init+0xc4>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002e90:	6823      	ldr	r3, [r4, #0]
 8002e92:	68da      	ldr	r2, [r3, #12]
 8002e94:	0650      	lsls	r0, r2, #25
 8002e96:	d5f5      	bpl.n	8002e84 <HAL_RTC_Init+0x84>
 8002e98:	e7c5      	b.n	8002e26 <HAL_RTC_Init+0x26>
    hrtc->Lock = HAL_UNLOCKED;
 8002e9a:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8002e9c:	f002 ffd2 	bl	8005e44 <HAL_RTC_MspInit>
 8002ea0:	e7b7      	b.n	8002e12 <HAL_RTC_Init+0x12>
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002ea2:	68da      	ldr	r2, [r3, #12]
 8002ea4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ea8:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8002eaa:	f7fe f837 	bl	8000f1c <HAL_GetTick>
 8002eae:	4605      	mov	r5, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002eb0:	6823      	ldr	r3, [r4, #0]
 8002eb2:	68da      	ldr	r2, [r3, #12]
 8002eb4:	0692      	lsls	r2, r2, #26
 8002eb6:	d4d0      	bmi.n	8002e5a <HAL_RTC_Init+0x5a>
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002eb8:	f7fe f830 	bl	8000f1c <HAL_GetTick>
 8002ebc:	1b40      	subs	r0, r0, r5
 8002ebe:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002ec2:	d9f5      	bls.n	8002eb0 <HAL_RTC_Init+0xb0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ec4:	6822      	ldr	r2, [r4, #0]
 8002ec6:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002ec8:	2304      	movs	r3, #4
        return HAL_ERROR;
 8002eca:	2001      	movs	r0, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ecc:	6251      	str	r1, [r2, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002ece:	7763      	strb	r3, [r4, #29]
}
 8002ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     return HAL_ERROR;
 8002ed2:	2001      	movs	r0, #1
}
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	ff8fffbf 	.word	0xff8fffbf

08002edc <HAL_RTC_SetTime>:
{
 8002edc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(hrtc);
 8002ee0:	7f03      	ldrb	r3, [r0, #28]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	f000 808c 	beq.w	8003000 <HAL_RTC_SetTime+0x124>
 8002ee8:	460d      	mov	r5, r1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002eea:	2302      	movs	r3, #2
  __HAL_LOCK(hrtc);
 8002eec:	2101      	movs	r1, #1
 8002eee:	6806      	ldr	r6, [r0, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ef0:	7743      	strb	r3, [r0, #29]
 8002ef2:	4604      	mov	r4, r0
  __HAL_LOCK(hrtc);
 8002ef4:	7701      	strb	r1, [r0, #28]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002ef6:	68b7      	ldr	r7, [r6, #8]
  if(Format == RTC_FORMAT_BIN)
 8002ef8:	2a00      	cmp	r2, #0
 8002efa:	d030      	beq.n	8002f5e <HAL_RTC_SetTime+0x82>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002efc:	f017 0740 	ands.w	r7, r7, #64	; 0x40
 8002f00:	d07a      	beq.n	8002ff8 <HAL_RTC_SetTime+0x11c>
 8002f02:	7b2f      	ldrb	r7, [r5, #12]
 8002f04:	043f      	lsls	r7, r7, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8002f06:	7868      	ldrb	r0, [r5, #1]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8002f08:	782a      	ldrb	r2, [r5, #0]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8002f0a:	0200      	lsls	r0, r0, #8
              ((uint32_t)sTime->Seconds) | \
 8002f0c:	78ab      	ldrb	r3, [r5, #2]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8002f0e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8002f12:	4318      	orrs	r0, r3
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8002f14:	4307      	orrs	r7, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f16:	22ca      	movs	r2, #202	; 0xca
 8002f18:	2353      	movs	r3, #83	; 0x53
 8002f1a:	6272      	str	r2, [r6, #36]	; 0x24
 8002f1c:	6273      	str	r3, [r6, #36]	; 0x24
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002f1e:	68f3      	ldr	r3, [r6, #12]
 8002f20:	065a      	lsls	r2, r3, #25
 8002f22:	d54d      	bpl.n	8002fc0 <HAL_RTC_SetTime+0xe4>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002f24:	4a46      	ldr	r2, [pc, #280]	; (8003040 <HAL_RTC_SetTime+0x164>)
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002f26:	692b      	ldr	r3, [r5, #16]
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002f28:	403a      	ands	r2, r7
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002f2a:	6969      	ldr	r1, [r5, #20]
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002f2c:	6032      	str	r2, [r6, #0]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002f2e:	430b      	orrs	r3, r1
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002f30:	68b2      	ldr	r2, [r6, #8]
 8002f32:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f36:	60b2      	str	r2, [r6, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002f38:	68b2      	ldr	r2, [r6, #8]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	60b3      	str	r3, [r6, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002f3e:	68f3      	ldr	r3, [r6, #12]
 8002f40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f44:	60f3      	str	r3, [r6, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002f46:	68b3      	ldr	r3, [r6, #8]
 8002f48:	069b      	lsls	r3, r3, #26
 8002f4a:	d55c      	bpl.n	8003006 <HAL_RTC_SetTime+0x12a>
   __HAL_UNLOCK(hrtc);
 8002f4c:	2300      	movs	r3, #0
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f4e:	21ff      	movs	r1, #255	; 0xff
   hrtc->State = HAL_RTC_STATE_READY;
 8002f50:	2201      	movs	r2, #1
   return HAL_OK;
 8002f52:	4618      	mov	r0, r3
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f54:	6271      	str	r1, [r6, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8002f56:	7762      	strb	r2, [r4, #29]
   __HAL_UNLOCK(hrtc);
 8002f58:	7723      	strb	r3, [r4, #28]
}
 8002f5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002f5e:	f017 0740 	ands.w	r7, r7, #64	; 0x40
 8002f62:	d04b      	beq.n	8002ffc <HAL_RTC_SetTime+0x120>
 8002f64:	7b2f      	ldrb	r7, [r5, #12]
 8002f66:	043f      	lsls	r7, r7, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8002f68:	782b      	ldrb	r3, [r5, #0]
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 8002f6a:	2100      	movs	r1, #0

  while(Value >= 10)
 8002f6c:	2b09      	cmp	r3, #9
 8002f6e:	d906      	bls.n	8002f7e <HAL_RTC_SetTime+0xa2>
  {
    bcdhigh++;
    Value -= 10;
 8002f70:	3b0a      	subs	r3, #10
    bcdhigh++;
 8002f72:	3101      	adds	r1, #1
    Value -= 10;
 8002f74:	b2db      	uxtb	r3, r3
  while(Value >= 10)
 8002f76:	2b09      	cmp	r3, #9
 8002f78:	d8fa      	bhi.n	8002f70 <HAL_RTC_SetTime+0x94>
 8002f7a:	0109      	lsls	r1, r1, #4
 8002f7c:	b2c9      	uxtb	r1, r1
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8002f7e:	4319      	orrs	r1, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8002f80:	786b      	ldrb	r3, [r5, #1]
  uint32_t bcdhigh = 0;
 8002f82:	2000      	movs	r0, #0
  while(Value >= 10)
 8002f84:	2b09      	cmp	r3, #9
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8002f86:	ea4f 4101 	mov.w	r1, r1, lsl #16
  while(Value >= 10)
 8002f8a:	d906      	bls.n	8002f9a <HAL_RTC_SetTime+0xbe>
    Value -= 10;
 8002f8c:	3b0a      	subs	r3, #10
    bcdhigh++;
 8002f8e:	3001      	adds	r0, #1
    Value -= 10;
 8002f90:	b2db      	uxtb	r3, r3
  while(Value >= 10)
 8002f92:	2b09      	cmp	r3, #9
 8002f94:	d8fa      	bhi.n	8002f8c <HAL_RTC_SetTime+0xb0>
 8002f96:	0100      	lsls	r0, r0, #4
 8002f98:	b2c0      	uxtb	r0, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8002f9a:	4303      	orrs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002f9c:	78a8      	ldrb	r0, [r5, #2]
  while(Value >= 10)
 8002f9e:	2809      	cmp	r0, #9
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8002fa0:	ea4f 2303 	mov.w	r3, r3, lsl #8
  while(Value >= 10)
 8002fa4:	d949      	bls.n	800303a <HAL_RTC_SetTime+0x15e>
    Value -= 10;
 8002fa6:	380a      	subs	r0, #10
    bcdhigh++;
 8002fa8:	3201      	adds	r2, #1
    Value -= 10;
 8002faa:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 8002fac:	2809      	cmp	r0, #9
 8002fae:	d8fa      	bhi.n	8002fa6 <HAL_RTC_SetTime+0xca>
 8002fb0:	0112      	lsls	r2, r2, #4
 8002fb2:	b2d2      	uxtb	r2, r2
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8002fb4:	430f      	orrs	r7, r1
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002fb6:	4310      	orrs	r0, r2
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8002fb8:	433b      	orrs	r3, r7
 8002fba:	ea43 0700 	orr.w	r7, r3, r0
 8002fbe:	e7aa      	b.n	8002f16 <HAL_RTC_SetTime+0x3a>
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8002fc4:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8002fc6:	f7fd ffa9 	bl	8000f1c <HAL_GetTick>
 8002fca:	4681      	mov	r9, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002fcc:	6826      	ldr	r6, [r4, #0]
 8002fce:	68f3      	ldr	r3, [r6, #12]
 8002fd0:	f013 0840 	ands.w	r8, r3, #64	; 0x40
 8002fd4:	d1a6      	bne.n	8002f24 <HAL_RTC_SetTime+0x48>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002fd6:	f7fd ffa1 	bl	8000f1c <HAL_GetTick>
 8002fda:	eba0 0009 	sub.w	r0, r0, r9
 8002fde:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002fe2:	d9f3      	bls.n	8002fcc <HAL_RTC_SetTime+0xf0>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fe4:	6822      	ldr	r2, [r4, #0]
 8002fe6:	21ff      	movs	r1, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002fe8:	2304      	movs	r3, #4
    return HAL_ERROR;
 8002fea:	2001      	movs	r0, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fec:	6251      	str	r1, [r2, #36]	; 0x24
    __HAL_UNLOCK(hrtc);
 8002fee:	f884 801c 	strb.w	r8, [r4, #28]
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002ff2:	7763      	strb	r3, [r4, #29]
}
 8002ff4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      sTime->TimeFormat = 0x00;
 8002ff8:	732f      	strb	r7, [r5, #12]
 8002ffa:	e784      	b.n	8002f06 <HAL_RTC_SetTime+0x2a>
      sTime->TimeFormat = 0x00;
 8002ffc:	732f      	strb	r7, [r5, #12]
 8002ffe:	e7b3      	b.n	8002f68 <HAL_RTC_SetTime+0x8c>
  __HAL_LOCK(hrtc);
 8003000:	2002      	movs	r0, #2
}
 8003002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003006:	68f3      	ldr	r3, [r6, #12]
 8003008:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800300c:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 800300e:	f7fd ff85 	bl	8000f1c <HAL_GetTick>
 8003012:	4607      	mov	r7, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003014:	6826      	ldr	r6, [r4, #0]
 8003016:	68f5      	ldr	r5, [r6, #12]
 8003018:	f015 0520 	ands.w	r5, r5, #32
 800301c:	d196      	bne.n	8002f4c <HAL_RTC_SetTime+0x70>
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800301e:	f7fd ff7d 	bl	8000f1c <HAL_GetTick>
 8003022:	1bc0      	subs	r0, r0, r7
 8003024:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003028:	d9f4      	bls.n	8003014 <HAL_RTC_SetTime+0x138>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800302a:	6822      	ldr	r2, [r4, #0]
 800302c:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 800302e:	2304      	movs	r3, #4
        return HAL_ERROR;
 8003030:	2001      	movs	r0, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003032:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 8003034:	7725      	strb	r5, [r4, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003036:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 8003038:	e78f      	b.n	8002f5a <HAL_RTC_SetTime+0x7e>
  while(Value >= 10)
 800303a:	2200      	movs	r2, #0
 800303c:	e7ba      	b.n	8002fb4 <HAL_RTC_SetTime+0xd8>
 800303e:	bf00      	nop
 8003040:	007f7f7f 	.word	0x007f7f7f

08003044 <HAL_RTC_SetDate>:
{
 8003044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 8003046:	7f03      	ldrb	r3, [r0, #28]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d074      	beq.n	8003136 <HAL_RTC_SetDate+0xf2>
 800304c:	4605      	mov	r5, r0
  hrtc->State = HAL_RTC_STATE_BUSY;
 800304e:	2302      	movs	r3, #2
 __HAL_LOCK(hrtc);
 8003050:	2001      	movs	r0, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003052:	776b      	strb	r3, [r5, #29]
 __HAL_LOCK(hrtc);
 8003054:	7728      	strb	r0, [r5, #28]
 8003056:	780e      	ldrb	r6, [r1, #0]
 8003058:	78cb      	ldrb	r3, [r1, #3]
 800305a:	0376      	lsls	r6, r6, #13
 800305c:	7848      	ldrb	r0, [r1, #1]
 800305e:	788c      	ldrb	r4, [r1, #2]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003060:	bb8a      	cbnz	r2, 80030c6 <HAL_RTC_SetDate+0x82>
 8003062:	06c7      	lsls	r7, r0, #27
 8003064:	d504      	bpl.n	8003070 <HAL_RTC_SetDate+0x2c>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003066:	f020 0010 	bic.w	r0, r0, #16
 800306a:	300a      	adds	r0, #10
 800306c:	b2c0      	uxtb	r0, r0
 800306e:	7048      	strb	r0, [r1, #1]
  while(Value >= 10)
 8003070:	2b09      	cmp	r3, #9
  uint32_t bcdhigh = 0;
 8003072:	f04f 0100 	mov.w	r1, #0
  while(Value >= 10)
 8003076:	d906      	bls.n	8003086 <HAL_RTC_SetDate+0x42>
    Value -= 10;
 8003078:	3b0a      	subs	r3, #10
    bcdhigh++;
 800307a:	3101      	adds	r1, #1
    Value -= 10;
 800307c:	b2db      	uxtb	r3, r3
  while(Value >= 10)
 800307e:	2b09      	cmp	r3, #9
 8003080:	d8fa      	bhi.n	8003078 <HAL_RTC_SetDate+0x34>
 8003082:	0109      	lsls	r1, r1, #4
 8003084:	b2c9      	uxtb	r1, r1
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8003086:	430b      	orrs	r3, r1
  while(Value >= 10)
 8003088:	2809      	cmp	r0, #9
  uint32_t bcdhigh = 0;
 800308a:	f04f 0100 	mov.w	r1, #0
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800308e:	ea4f 4303 	mov.w	r3, r3, lsl #16
  while(Value >= 10)
 8003092:	d906      	bls.n	80030a2 <HAL_RTC_SetDate+0x5e>
    Value -= 10;
 8003094:	380a      	subs	r0, #10
    bcdhigh++;
 8003096:	3101      	adds	r1, #1
    Value -= 10;
 8003098:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 800309a:	2809      	cmp	r0, #9
 800309c:	d8fa      	bhi.n	8003094 <HAL_RTC_SetDate+0x50>
 800309e:	0109      	lsls	r1, r1, #4
 80030a0:	b2c9      	uxtb	r1, r1
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80030a2:	4308      	orrs	r0, r1
  while(Value >= 10)
 80030a4:	2c09      	cmp	r4, #9
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80030a6:	ea4f 2100 	mov.w	r1, r0, lsl #8
  while(Value >= 10)
 80030aa:	d960      	bls.n	800316e <HAL_RTC_SetDate+0x12a>
    Value -= 10;
 80030ac:	3c0a      	subs	r4, #10
    bcdhigh++;
 80030ae:	3201      	adds	r2, #1
    Value -= 10;
 80030b0:	b2e4      	uxtb	r4, r4
  while(Value >= 10)
 80030b2:	2c09      	cmp	r4, #9
 80030b4:	d8fa      	bhi.n	80030ac <HAL_RTC_SetDate+0x68>
 80030b6:	0112      	lsls	r2, r2, #4
 80030b8:	b2d0      	uxtb	r0, r2
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80030ba:	431e      	orrs	r6, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80030bc:	4304      	orrs	r4, r0
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80030be:	ea46 0001 	orr.w	r0, r6, r1
 80030c2:	4304      	orrs	r4, r0
 80030c4:	e004      	b.n	80030d0 <HAL_RTC_SetDate+0x8c>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80030c6:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
 80030ca:	431c      	orrs	r4, r3
 80030cc:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80030d0:	682b      	ldr	r3, [r5, #0]
 80030d2:	21ca      	movs	r1, #202	; 0xca
 80030d4:	2253      	movs	r2, #83	; 0x53
 80030d6:	6259      	str	r1, [r3, #36]	; 0x24
 80030d8:	625a      	str	r2, [r3, #36]	; 0x24
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80030da:	68da      	ldr	r2, [r3, #12]
 80030dc:	0651      	lsls	r1, r2, #25
 80030de:	d511      	bpl.n	8003104 <HAL_RTC_SetDate+0xc0>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80030e0:	4a24      	ldr	r2, [pc, #144]	; (8003174 <HAL_RTC_SetDate+0x130>)
 80030e2:	4022      	ands	r2, r4
 80030e4:	605a      	str	r2, [r3, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80030e6:	68da      	ldr	r2, [r3, #12]
 80030e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030ec:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	0692      	lsls	r2, r2, #26
 80030f2:	d522      	bpl.n	800313a <HAL_RTC_SetDate+0xf6>
    __HAL_UNLOCK(hrtc);
 80030f4:	2200      	movs	r2, #0
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030f6:	20ff      	movs	r0, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_READY ;
 80030f8:	2101      	movs	r1, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030fa:	6258      	str	r0, [r3, #36]	; 0x24
    return HAL_OK;
 80030fc:	4610      	mov	r0, r2
    hrtc->State = HAL_RTC_STATE_READY ;
 80030fe:	7769      	strb	r1, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8003100:	772a      	strb	r2, [r5, #28]
}
 8003102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003104:	f04f 32ff 	mov.w	r2, #4294967295
 8003108:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800310a:	f7fd ff07 	bl	8000f1c <HAL_GetTick>
 800310e:	4606      	mov	r6, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003110:	682b      	ldr	r3, [r5, #0]
 8003112:	68df      	ldr	r7, [r3, #12]
 8003114:	f017 0740 	ands.w	r7, r7, #64	; 0x40
 8003118:	d1e2      	bne.n	80030e0 <HAL_RTC_SetDate+0x9c>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800311a:	f7fd feff 	bl	8000f1c <HAL_GetTick>
 800311e:	1b80      	subs	r0, r0, r6
 8003120:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003124:	d9f4      	bls.n	8003110 <HAL_RTC_SetDate+0xcc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003126:	682a      	ldr	r2, [r5, #0]
 8003128:	21ff      	movs	r1, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 800312a:	2304      	movs	r3, #4
    return HAL_ERROR;
 800312c:	2001      	movs	r0, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800312e:	6251      	str	r1, [r2, #36]	; 0x24
    __HAL_UNLOCK(hrtc);
 8003130:	772f      	strb	r7, [r5, #28]
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003132:	776b      	strb	r3, [r5, #29]
}
 8003134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 __HAL_LOCK(hrtc);
 8003136:	2002      	movs	r0, #2
}
 8003138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800313a:	68da      	ldr	r2, [r3, #12]
 800313c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003140:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8003142:	f7fd feeb 	bl	8000f1c <HAL_GetTick>
 8003146:	4606      	mov	r6, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003148:	682b      	ldr	r3, [r5, #0]
 800314a:	68dc      	ldr	r4, [r3, #12]
 800314c:	f014 0420 	ands.w	r4, r4, #32
 8003150:	d1d0      	bne.n	80030f4 <HAL_RTC_SetDate+0xb0>
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003152:	f7fd fee3 	bl	8000f1c <HAL_GetTick>
 8003156:	1b80      	subs	r0, r0, r6
 8003158:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800315c:	d9f4      	bls.n	8003148 <HAL_RTC_SetDate+0x104>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800315e:	682a      	ldr	r2, [r5, #0]
 8003160:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003162:	2304      	movs	r3, #4
        return HAL_ERROR;
 8003164:	2001      	movs	r0, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003166:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 8003168:	772c      	strb	r4, [r5, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 800316a:	776b      	strb	r3, [r5, #29]
}
 800316c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while(Value >= 10)
 800316e:	2000      	movs	r0, #0
 8003170:	e7a3      	b.n	80030ba <HAL_RTC_SetDate+0x76>
 8003172:	bf00      	nop
 8003174:	00ffff3f 	.word	0x00ffff3f

08003178 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003178:	2800      	cmp	r0, #0
 800317a:	d07b      	beq.n	8003274 <HAL_TIM_Base_Init+0xfc>
{
 800317c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800317e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003182:	4604      	mov	r4, r0
 8003184:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003188:	2b00      	cmp	r3, #0
 800318a:	d03b      	beq.n	8003204 <HAL_TIM_Base_Init+0x8c>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800318c:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800318e:	2002      	movs	r0, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003190:	4e41      	ldr	r6, [pc, #260]	; (8003298 <HAL_TIM_Base_Init+0x120>)
 8003192:	4f42      	ldr	r7, [pc, #264]	; (800329c <HAL_TIM_Base_Init+0x124>)
 8003194:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003198:	eba2 0606 	sub.w	r6, r2, r6
  htim->State = HAL_TIM_STATE_BUSY;
 800319c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
 80031a0:	eba2 0707 	sub.w	r7, r2, r7
  tmpcr1 = TIMx->CR1;
 80031a4:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031a6:	fab6 f686 	clz	r6, r6
 80031aa:	fab7 f787 	clz	r7, r7
 80031ae:	ea4f 1656 	mov.w	r6, r6, lsr #5
 80031b2:	ea4f 1757 	mov.w	r7, r7, lsr #5
 80031b6:	d02a      	beq.n	800320e <HAL_TIM_Base_Init+0x96>
 80031b8:	bb4e      	cbnz	r6, 800320e <HAL_TIM_Base_Init+0x96>
 80031ba:	4939      	ldr	r1, [pc, #228]	; (80032a0 <HAL_TIM_Base_Init+0x128>)
 80031bc:	428a      	cmp	r2, r1
 80031be:	d05b      	beq.n	8003278 <HAL_TIM_Base_Init+0x100>
 80031c0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80031c4:	428a      	cmp	r2, r1
 80031c6:	d057      	beq.n	8003278 <HAL_TIM_Base_Init+0x100>
 80031c8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80031cc:	428a      	cmp	r2, r1
 80031ce:	d058      	beq.n	8003282 <HAL_TIM_Base_Init+0x10a>
 80031d0:	2f00      	cmp	r7, #0
 80031d2:	d156      	bne.n	8003282 <HAL_TIM_Base_Init+0x10a>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031d4:	4933      	ldr	r1, [pc, #204]	; (80032a4 <HAL_TIM_Base_Init+0x12c>)
 80031d6:	428a      	cmp	r2, r1
 80031d8:	d01e      	beq.n	8003218 <HAL_TIM_Base_Init+0xa0>
 80031da:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80031de:	428a      	cmp	r2, r1
 80031e0:	d01a      	beq.n	8003218 <HAL_TIM_Base_Init+0xa0>
 80031e2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80031e6:	428a      	cmp	r2, r1
 80031e8:	d016      	beq.n	8003218 <HAL_TIM_Base_Init+0xa0>
 80031ea:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 80031ee:	428a      	cmp	r2, r1
 80031f0:	d012      	beq.n	8003218 <HAL_TIM_Base_Init+0xa0>
 80031f2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80031f6:	428a      	cmp	r2, r1
 80031f8:	d00e      	beq.n	8003218 <HAL_TIM_Base_Init+0xa0>
 80031fa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80031fe:	428a      	cmp	r2, r1
 8003200:	d10e      	bne.n	8003220 <HAL_TIM_Base_Init+0xa8>
 8003202:	e009      	b.n	8003218 <HAL_TIM_Base_Init+0xa0>
    htim->Lock = HAL_UNLOCKED;
 8003204:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003208:	f002 fe2a 	bl	8005e60 <HAL_TIM_Base_MspInit>
 800320c:	e7be      	b.n	800318c <HAL_TIM_Base_Init+0x14>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800320e:	f023 0570 	bic.w	r5, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003212:	68a0      	ldr	r0, [r4, #8]
 8003214:	ea45 0300 	orr.w	r3, r5, r0
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003218:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800321c:	6920      	ldr	r0, [r4, #16]
 800321e:	4303      	orrs	r3, r0
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003220:	69a1      	ldr	r1, [r4, #24]
 8003222:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003226:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003228:	430b      	orrs	r3, r1

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800322a:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800322c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800322e:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003230:	6291      	str	r1, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003232:	b9e6      	cbnz	r6, 800326e <HAL_TIM_Base_Init+0xf6>
 8003234:	b9df      	cbnz	r7, 800326e <HAL_TIM_Base_Init+0xf6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003236:	2301      	movs	r3, #1
  return HAL_OK;
 8003238:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 800323a:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800323c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003240:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003244:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003248:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800324c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003250:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003258:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800325c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003260:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8003264:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003268:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800326c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIMx->RCR = Structure->RepetitionCounter;
 800326e:	6963      	ldr	r3, [r4, #20]
 8003270:	6313      	str	r3, [r2, #48]	; 0x30
 8003272:	e7e0      	b.n	8003236 <HAL_TIM_Base_Init+0xbe>
    return HAL_ERROR;
 8003274:	2001      	movs	r0, #1
}
 8003276:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800327c:	68a1      	ldr	r1, [r4, #8]
 800327e:	430b      	orrs	r3, r1
 8003280:	e7ca      	b.n	8003218 <HAL_TIM_Base_Init+0xa0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003282:	4909      	ldr	r1, [pc, #36]	; (80032a8 <HAL_TIM_Base_Init+0x130>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003284:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003288:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800328a:	428a      	cmp	r2, r1
    tmpcr1 |= Structure->CounterMode;
 800328c:	ea43 0300 	orr.w	r3, r3, r0
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003290:	d0c2      	beq.n	8003218 <HAL_TIM_Base_Init+0xa0>
 8003292:	2f00      	cmp	r7, #0
 8003294:	d1c0      	bne.n	8003218 <HAL_TIM_Base_Init+0xa0>
 8003296:	e79d      	b.n	80031d4 <HAL_TIM_Base_Init+0x5c>
 8003298:	40010000 	.word	0x40010000
 800329c:	40010400 	.word	0x40010400
 80032a0:	40000400 	.word	0x40000400
 80032a4:	40014000 	.word	0x40014000
 80032a8:	40000c00 	.word	0x40000c00

080032ac <HAL_TIM_PWM_MspInit>:
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop

080032b0 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80032b0:	2800      	cmp	r0, #0
 80032b2:	d07b      	beq.n	80033ac <HAL_TIM_PWM_Init+0xfc>
{
 80032b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80032b6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80032ba:	4604      	mov	r4, r0
 80032bc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d03b      	beq.n	800333c <HAL_TIM_PWM_Init+0x8c>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032c4:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80032c6:	2002      	movs	r0, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032c8:	4e41      	ldr	r6, [pc, #260]	; (80033d0 <HAL_TIM_PWM_Init+0x120>)
 80032ca:	4f42      	ldr	r7, [pc, #264]	; (80033d4 <HAL_TIM_PWM_Init+0x124>)
 80032cc:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80032d0:	eba2 0606 	sub.w	r6, r2, r6
  htim->State = HAL_TIM_STATE_BUSY;
 80032d4:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
 80032d8:	eba2 0707 	sub.w	r7, r2, r7
  tmpcr1 = TIMx->CR1;
 80032dc:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032de:	fab6 f686 	clz	r6, r6
 80032e2:	fab7 f787 	clz	r7, r7
 80032e6:	ea4f 1656 	mov.w	r6, r6, lsr #5
 80032ea:	ea4f 1757 	mov.w	r7, r7, lsr #5
 80032ee:	d02a      	beq.n	8003346 <HAL_TIM_PWM_Init+0x96>
 80032f0:	bb4e      	cbnz	r6, 8003346 <HAL_TIM_PWM_Init+0x96>
 80032f2:	4939      	ldr	r1, [pc, #228]	; (80033d8 <HAL_TIM_PWM_Init+0x128>)
 80032f4:	428a      	cmp	r2, r1
 80032f6:	d05b      	beq.n	80033b0 <HAL_TIM_PWM_Init+0x100>
 80032f8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80032fc:	428a      	cmp	r2, r1
 80032fe:	d057      	beq.n	80033b0 <HAL_TIM_PWM_Init+0x100>
 8003300:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003304:	428a      	cmp	r2, r1
 8003306:	d058      	beq.n	80033ba <HAL_TIM_PWM_Init+0x10a>
 8003308:	2f00      	cmp	r7, #0
 800330a:	d156      	bne.n	80033ba <HAL_TIM_PWM_Init+0x10a>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800330c:	4933      	ldr	r1, [pc, #204]	; (80033dc <HAL_TIM_PWM_Init+0x12c>)
 800330e:	428a      	cmp	r2, r1
 8003310:	d01e      	beq.n	8003350 <HAL_TIM_PWM_Init+0xa0>
 8003312:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003316:	428a      	cmp	r2, r1
 8003318:	d01a      	beq.n	8003350 <HAL_TIM_PWM_Init+0xa0>
 800331a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800331e:	428a      	cmp	r2, r1
 8003320:	d016      	beq.n	8003350 <HAL_TIM_PWM_Init+0xa0>
 8003322:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 8003326:	428a      	cmp	r2, r1
 8003328:	d012      	beq.n	8003350 <HAL_TIM_PWM_Init+0xa0>
 800332a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800332e:	428a      	cmp	r2, r1
 8003330:	d00e      	beq.n	8003350 <HAL_TIM_PWM_Init+0xa0>
 8003332:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003336:	428a      	cmp	r2, r1
 8003338:	d10e      	bne.n	8003358 <HAL_TIM_PWM_Init+0xa8>
 800333a:	e009      	b.n	8003350 <HAL_TIM_PWM_Init+0xa0>
    htim->Lock = HAL_UNLOCKED;
 800333c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003340:	f7ff ffb4 	bl	80032ac <HAL_TIM_PWM_MspInit>
 8003344:	e7be      	b.n	80032c4 <HAL_TIM_PWM_Init+0x14>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003346:	f023 0570 	bic.w	r5, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800334a:	68a0      	ldr	r0, [r4, #8]
 800334c:	ea45 0300 	orr.w	r3, r5, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8003350:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003354:	6920      	ldr	r0, [r4, #16]
 8003356:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003358:	69a1      	ldr	r1, [r4, #24]
 800335a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800335e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003360:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8003362:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8003364:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003366:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003368:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800336a:	b9e6      	cbnz	r6, 80033a6 <HAL_TIM_PWM_Init+0xf6>
 800336c:	b9df      	cbnz	r7, 80033a6 <HAL_TIM_PWM_Init+0xf6>
  TIMx->EGR = TIM_EGR_UG;
 800336e:	2301      	movs	r3, #1
  return HAL_OK;
 8003370:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8003372:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003374:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003378:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800337c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003380:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003384:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003388:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800338c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003390:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003394:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003398:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800339c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80033a0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80033a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIMx->RCR = Structure->RepetitionCounter;
 80033a6:	6963      	ldr	r3, [r4, #20]
 80033a8:	6313      	str	r3, [r2, #48]	; 0x30
 80033aa:	e7e0      	b.n	800336e <HAL_TIM_PWM_Init+0xbe>
    return HAL_ERROR;
 80033ac:	2001      	movs	r0, #1
}
 80033ae:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80033b4:	68a1      	ldr	r1, [r4, #8]
 80033b6:	430b      	orrs	r3, r1
 80033b8:	e7ca      	b.n	8003350 <HAL_TIM_PWM_Init+0xa0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033ba:	4909      	ldr	r1, [pc, #36]	; (80033e0 <HAL_TIM_PWM_Init+0x130>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80033c0:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033c2:	428a      	cmp	r2, r1
    tmpcr1 |= Structure->CounterMode;
 80033c4:	ea43 0300 	orr.w	r3, r3, r0
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033c8:	d0c2      	beq.n	8003350 <HAL_TIM_PWM_Init+0xa0>
 80033ca:	2f00      	cmp	r7, #0
 80033cc:	d1c0      	bne.n	8003350 <HAL_TIM_PWM_Init+0xa0>
 80033ce:	e79d      	b.n	800330c <HAL_TIM_PWM_Init+0x5c>
 80033d0:	40010000 	.word	0x40010000
 80033d4:	40010400 	.word	0x40010400
 80033d8:	40000400 	.word	0x40000400
 80033dc:	40014000 	.word	0x40014000
 80033e0:	40000c00 	.word	0x40000c00

080033e4 <HAL_TIM_PWM_Start>:
 80033e4:	2900      	cmp	r1, #0
 80033e6:	d14b      	bne.n	8003480 <HAL_TIM_PWM_Start+0x9c>
 80033e8:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d15b      	bne.n	80034a8 <HAL_TIM_PWM_Start+0xc4>
 80033f0:	2302      	movs	r3, #2
 80033f2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 80033f6:	6803      	ldr	r3, [r0, #0]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f001 011f 	and.w	r1, r1, #31
 80033fe:	6a18      	ldr	r0, [r3, #32]
 8003400:	fa02 f101 	lsl.w	r1, r2, r1
 8003404:	ea20 0001 	bic.w	r0, r0, r1
 8003408:	b410      	push	{r4}
 800340a:	6218      	str	r0, [r3, #32]
 800340c:	4c3e      	ldr	r4, [pc, #248]	; (8003508 <HAL_TIM_PWM_Start+0x124>)
 800340e:	6a1a      	ldr	r2, [r3, #32]
 8003410:	42a3      	cmp	r3, r4
 8003412:	ea41 0102 	orr.w	r1, r1, r2
 8003416:	6219      	str	r1, [r3, #32]
 8003418:	d048      	beq.n	80034ac <HAL_TIM_PWM_Start+0xc8>
 800341a:	4a3c      	ldr	r2, [pc, #240]	; (800350c <HAL_TIM_PWM_Start+0x128>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d045      	beq.n	80034ac <HAL_TIM_PWM_Start+0xc8>
 8003420:	4a3b      	ldr	r2, [pc, #236]	; (8003510 <HAL_TIM_PWM_Start+0x12c>)
 8003422:	4c3c      	ldr	r4, [pc, #240]	; (8003514 <HAL_TIM_PWM_Start+0x130>)
 8003424:	4293      	cmp	r3, r2
 8003426:	bf18      	it	ne
 8003428:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800342c:	483a      	ldr	r0, [pc, #232]	; (8003518 <HAL_TIM_PWM_Start+0x134>)
 800342e:	493b      	ldr	r1, [pc, #236]	; (800351c <HAL_TIM_PWM_Start+0x138>)
 8003430:	bf0c      	ite	eq
 8003432:	2201      	moveq	r2, #1
 8003434:	2200      	movne	r2, #0
 8003436:	42a3      	cmp	r3, r4
 8003438:	bf08      	it	eq
 800343a:	f042 0201 	orreq.w	r2, r2, #1
 800343e:	4283      	cmp	r3, r0
 8003440:	bf08      	it	eq
 8003442:	f042 0201 	orreq.w	r2, r2, #1
 8003446:	428b      	cmp	r3, r1
 8003448:	bf08      	it	eq
 800344a:	f042 0201 	orreq.w	r2, r2, #1
 800344e:	b93a      	cbnz	r2, 8003460 <HAL_TIM_PWM_Start+0x7c>
 8003450:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 8003454:	1a18      	subs	r0, r3, r0
 8003456:	fab0 f080 	clz	r0, r0
 800345a:	0940      	lsrs	r0, r0, #5
 800345c:	2800      	cmp	r0, #0
 800345e:	d046      	beq.n	80034ee <HAL_TIM_PWM_Start+0x10a>
 8003460:	6899      	ldr	r1, [r3, #8]
 8003462:	4a2f      	ldr	r2, [pc, #188]	; (8003520 <HAL_TIM_PWM_Start+0x13c>)
 8003464:	400a      	ands	r2, r1
 8003466:	2a06      	cmp	r2, #6
 8003468:	d029      	beq.n	80034be <HAL_TIM_PWM_Start+0xda>
 800346a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800346e:	d026      	beq.n	80034be <HAL_TIM_PWM_Start+0xda>
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	2000      	movs	r0, #0
 8003474:	f042 0201 	orr.w	r2, r2, #1
 8003478:	601a      	str	r2, [r3, #0]
 800347a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	2904      	cmp	r1, #4
 8003482:	d020      	beq.n	80034c6 <HAL_TIM_PWM_Start+0xe2>
 8003484:	2908      	cmp	r1, #8
 8003486:	d026      	beq.n	80034d6 <HAL_TIM_PWM_Start+0xf2>
 8003488:	290c      	cmp	r1, #12
 800348a:	d009      	beq.n	80034a0 <HAL_TIM_PWM_Start+0xbc>
 800348c:	2910      	cmp	r1, #16
 800348e:	d033      	beq.n	80034f8 <HAL_TIM_PWM_Start+0x114>
 8003490:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8003494:	2b01      	cmp	r3, #1
 8003496:	d107      	bne.n	80034a8 <HAL_TIM_PWM_Start+0xc4>
 8003498:	2302      	movs	r3, #2
 800349a:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 800349e:	e7aa      	b.n	80033f6 <HAL_TIM_PWM_Start+0x12>
 80034a0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d01e      	beq.n	80034e6 <HAL_TIM_PWM_Start+0x102>
 80034a8:	2001      	movs	r0, #1
 80034aa:	4770      	bx	lr
 80034ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034b2:	645a      	str	r2, [r3, #68]	; 0x44
 80034b4:	4a1a      	ldr	r2, [pc, #104]	; (8003520 <HAL_TIM_PWM_Start+0x13c>)
 80034b6:	6899      	ldr	r1, [r3, #8]
 80034b8:	400a      	ands	r2, r1
 80034ba:	2a06      	cmp	r2, #6
 80034bc:	d1d5      	bne.n	800346a <HAL_TIM_PWM_Start+0x86>
 80034be:	2000      	movs	r0, #0
 80034c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d1ec      	bne.n	80034a8 <HAL_TIM_PWM_Start+0xc4>
 80034ce:	2302      	movs	r3, #2
 80034d0:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 80034d4:	e78f      	b.n	80033f6 <HAL_TIM_PWM_Start+0x12>
 80034d6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d1e4      	bne.n	80034a8 <HAL_TIM_PWM_Start+0xc4>
 80034de:	2302      	movs	r3, #2
 80034e0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80034e4:	e787      	b.n	80033f6 <HAL_TIM_PWM_Start+0x12>
 80034e6:	2302      	movs	r3, #2
 80034e8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 80034ec:	e783      	b.n	80033f6 <HAL_TIM_PWM_Start+0x12>
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	f042 0201 	orr.w	r2, r2, #1
 80034f4:	601a      	str	r2, [r3, #0]
 80034f6:	e7c0      	b.n	800347a <HAL_TIM_PWM_Start+0x96>
 80034f8:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d1d3      	bne.n	80034a8 <HAL_TIM_PWM_Start+0xc4>
 8003500:	2302      	movs	r3, #2
 8003502:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8003506:	e776      	b.n	80033f6 <HAL_TIM_PWM_Start+0x12>
 8003508:	40010000 	.word	0x40010000
 800350c:	40010400 	.word	0x40010400
 8003510:	40000400 	.word	0x40000400
 8003514:	40000800 	.word	0x40000800
 8003518:	40000c00 	.word	0x40000c00
 800351c:	40014000 	.word	0x40014000
 8003520:	00010007 	.word	0x00010007

08003524 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8003524:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003528:	2b01      	cmp	r3, #1
 800352a:	f000 8153 	beq.w	80037d4 <HAL_TIM_PWM_ConfigChannel+0x2b0>
 800352e:	2301      	movs	r3, #1
{
 8003530:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 8003532:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8003536:	2a14      	cmp	r2, #20
 8003538:	d843      	bhi.n	80035c2 <HAL_TIM_PWM_ConfigChannel+0x9e>
 800353a:	e8df f012 	tbh	[pc, r2, lsl #1]
 800353e:	0015      	.short	0x0015
 8003540:	00420042 	.word	0x00420042
 8003544:	007d0042 	.word	0x007d0042
 8003548:	00420042 	.word	0x00420042
 800354c:	00e60042 	.word	0x00e60042
 8003550:	00420042 	.word	0x00420042
 8003554:	00b10042 	.word	0x00b10042
 8003558:	00420042 	.word	0x00420042
 800355c:	01190042 	.word	0x01190042
 8003560:	00420042 	.word	0x00420042
 8003564:	00480042 	.word	0x00480042
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003568:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800356a:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800356e:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8003570:	680f      	ldr	r7, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003572:	f025 0501 	bic.w	r5, r5, #1
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003576:	4cb0      	ldr	r4, [pc, #704]	; (8003838 <HAL_TIM_PWM_ConfigChannel+0x314>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003578:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 800357a:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800357c:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 800357e:	699d      	ldr	r5, [r3, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8003580:	f022 0202 	bic.w	r2, r2, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003584:	402c      	ands	r4, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003586:	4dad      	ldr	r5, [pc, #692]	; (800383c <HAL_TIM_PWM_ConfigChannel+0x318>)
  tmpccer |= OC_Config->OCPolarity;
 8003588:	ea42 020c 	orr.w	r2, r2, ip
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800358c:	42ab      	cmp	r3, r5
  tmpccmrx |= OC_Config->OCMode;
 800358e:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003592:	f000 812d 	beq.w	80037f0 <HAL_TIM_PWM_ConfigChannel+0x2cc>
 8003596:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800359a:	42ab      	cmp	r3, r5
 800359c:	f000 8128 	beq.w	80037f0 <HAL_TIM_PWM_ConfigChannel+0x2cc>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035a0:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80035a2:	605e      	str	r6, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80035a4:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80035a6:	635d      	str	r5, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035a8:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035aa:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035ac:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035ae:	f044 0408 	orr.w	r4, r4, #8
 80035b2:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035b4:	6999      	ldr	r1, [r3, #24]
 80035b6:	f021 0104 	bic.w	r1, r1, #4
 80035ba:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035bc:	699a      	ldr	r2, [r3, #24]
 80035be:	432a      	orrs	r2, r5
 80035c0:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	bcf0      	pop	{r4, r5, r6, r7}
  __HAL_UNLOCK(htim);
 80035c6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80035ca:	4618      	mov	r0, r3
}
 80035cc:	4770      	bx	lr
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80035ce:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80035d0:	688e      	ldr	r6, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80035d2:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035d4:	680f      	ldr	r7, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80035d6:	f425 1580 	bic.w	r5, r5, #1048576	; 0x100000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80035da:	4c99      	ldr	r4, [pc, #612]	; (8003840 <HAL_TIM_PWM_ConfigChannel+0x31c>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80035dc:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 80035de:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80035e0:	685d      	ldr	r5, [r3, #4]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80035e2:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx = TIMx->CCMR3;
 80035e6:	f8d3 c054 	ldr.w	ip, [r3, #84]	; 0x54
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80035ea:	ea42 5206 	orr.w	r2, r2, r6, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035ee:	4e93      	ldr	r6, [pc, #588]	; (800383c <HAL_TIM_PWM_ConfigChannel+0x318>)
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80035f0:	ea0c 0404 	and.w	r4, ip, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035f4:	42b3      	cmp	r3, r6
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035f6:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035fa:	f000 80ed 	beq.w	80037d8 <HAL_TIM_PWM_ConfigChannel+0x2b4>
 80035fe:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003602:	42b3      	cmp	r3, r6
 8003604:	f000 80e8 	beq.w	80037d8 <HAL_TIM_PWM_ConfigChannel+0x2b4>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003608:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800360a:	605d      	str	r5, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 800360c:	655c      	str	r4, [r3, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 800360e:	65de      	str	r6, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003610:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003612:	6d5c      	ldr	r4, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003614:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003616:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 800361a:	655c      	str	r4, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800361c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800361e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003622:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003624:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003626:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800362a:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(htim);
 800362c:	2300      	movs	r3, #0
}
 800362e:	bcf0      	pop	{r4, r5, r6, r7}
  __HAL_UNLOCK(htim);
 8003630:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8003634:	4618      	mov	r0, r3
}
 8003636:	4770      	bx	lr
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003638:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800363a:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800363e:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003640:	680f      	ldr	r7, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003642:	f025 0510 	bic.w	r5, r5, #16
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003646:	4c7f      	ldr	r4, [pc, #508]	; (8003844 <HAL_TIM_PWM_ConfigChannel+0x320>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003648:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 800364a:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800364c:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 800364e:	699d      	ldr	r5, [r3, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8003650:	f022 0220 	bic.w	r2, r2, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003654:	402c      	ands	r4, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003656:	4d79      	ldr	r5, [pc, #484]	; (800383c <HAL_TIM_PWM_ConfigChannel+0x318>)
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003658:	ea42 120c 	orr.w	r2, r2, ip, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800365c:	42ab      	cmp	r3, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800365e:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003662:	f000 80d9 	beq.w	8003818 <HAL_TIM_PWM_ConfigChannel+0x2f4>
 8003666:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800366a:	42ab      	cmp	r3, r5
 800366c:	f000 80d4 	beq.w	8003818 <HAL_TIM_PWM_ConfigChannel+0x2f4>
  TIMx->CCR2 = OC_Config->Pulse;
 8003670:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003672:	605e      	str	r6, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003674:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003676:	639d      	str	r5, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003678:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800367a:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800367c:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800367e:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8003682:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003684:	6999      	ldr	r1, [r3, #24]
 8003686:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800368a:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800368c:	699a      	ldr	r2, [r3, #24]
 800368e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8003692:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8003694:	2300      	movs	r3, #0
}
 8003696:	bcf0      	pop	{r4, r5, r6, r7}
  __HAL_UNLOCK(htim);
 8003698:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800369c:	4618      	mov	r0, r3
}
 800369e:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036a0:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036a2:	688e      	ldr	r6, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036a4:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036a6:	680f      	ldr	r7, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036a8:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036ac:	4c65      	ldr	r4, [pc, #404]	; (8003844 <HAL_TIM_PWM_ConfigChannel+0x320>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036ae:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 80036b0:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80036b2:	685d      	ldr	r5, [r3, #4]
  tmpccer &= ~TIM_CCER_CC4P;
 80036b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx = TIMx->CCMR2;
 80036b8:	f8d3 c01c 	ldr.w	ip, [r3, #28]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036bc:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036c0:	4e5e      	ldr	r6, [pc, #376]	; (800383c <HAL_TIM_PWM_ConfigChannel+0x318>)
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036c2:	ea0c 0404 	and.w	r4, ip, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036c6:	42b3      	cmp	r3, r6
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036c8:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036cc:	f000 809e 	beq.w	800380c <HAL_TIM_PWM_ConfigChannel+0x2e8>
 80036d0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80036d4:	42b3      	cmp	r3, r6
 80036d6:	f000 8099 	beq.w	800380c <HAL_TIM_PWM_ConfigChannel+0x2e8>
  TIMx->CCR4 = OC_Config->Pulse;
 80036da:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80036dc:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 80036de:	61dc      	str	r4, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80036e0:	641e      	str	r6, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 80036e2:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036e4:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036e6:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036e8:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 80036ec:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80036ee:	69d9      	ldr	r1, [r3, #28]
 80036f0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80036f4:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036f6:	69da      	ldr	r2, [r3, #28]
 80036f8:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80036fc:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 80036fe:	2300      	movs	r3, #0
}
 8003700:	bcf0      	pop	{r4, r5, r6, r7}
  __HAL_UNLOCK(htim);
 8003702:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8003706:	4618      	mov	r0, r3
}
 8003708:	4770      	bx	lr
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800370a:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800370c:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003710:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8003712:	680f      	ldr	r7, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003714:	f425 7580 	bic.w	r5, r5, #256	; 0x100
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003718:	4c47      	ldr	r4, [pc, #284]	; (8003838 <HAL_TIM_PWM_ConfigChannel+0x314>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800371a:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 800371c:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800371e:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8003720:	69dd      	ldr	r5, [r3, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8003722:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003726:	402c      	ands	r4, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003728:	4d44      	ldr	r5, [pc, #272]	; (800383c <HAL_TIM_PWM_ConfigChannel+0x318>)
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800372a:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800372e:	42ab      	cmp	r3, r5
  tmpccmrx |= OC_Config->OCMode;
 8003730:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003734:	f000 808a 	beq.w	800384c <HAL_TIM_PWM_ConfigChannel+0x328>
 8003738:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800373c:	42ab      	cmp	r3, r5
 800373e:	f000 8085 	beq.w	800384c <HAL_TIM_PWM_ConfigChannel+0x328>
  TIMx->CCR3 = OC_Config->Pulse;
 8003742:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003744:	605e      	str	r6, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003746:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8003748:	63dd      	str	r5, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800374a:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800374c:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800374e:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003750:	f044 0408 	orr.w	r4, r4, #8
 8003754:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003756:	69d9      	ldr	r1, [r3, #28]
 8003758:	f021 0104 	bic.w	r1, r1, #4
 800375c:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800375e:	69da      	ldr	r2, [r3, #28]
 8003760:	432a      	orrs	r2, r5
 8003762:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8003764:	2300      	movs	r3, #0
}
 8003766:	bcf0      	pop	{r4, r5, r6, r7}
  __HAL_UNLOCK(htim);
 8003768:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800376c:	4618      	mov	r0, r3
}
 800376e:	4770      	bx	lr
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003770:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003772:	688e      	ldr	r6, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003774:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8003776:	680f      	ldr	r7, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003778:	f425 3580 	bic.w	r5, r5, #65536	; 0x10000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800377c:	4c32      	ldr	r4, [pc, #200]	; (8003848 <HAL_TIM_PWM_ConfigChannel+0x324>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800377e:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8003780:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003782:	685d      	ldr	r5, [r3, #4]
  tmpccer &= ~TIM_CCER_CC5P;
 8003784:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx = TIMx->CCMR3;
 8003788:	f8d3 c054 	ldr.w	ip, [r3, #84]	; 0x54
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800378c:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003790:	4e2a      	ldr	r6, [pc, #168]	; (800383c <HAL_TIM_PWM_ConfigChannel+0x318>)
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003792:	ea0c 0404 	and.w	r4, ip, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003796:	42b3      	cmp	r3, r6
  tmpccmrx |= OC_Config->OCMode;
 8003798:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800379c:	d022      	beq.n	80037e4 <HAL_TIM_PWM_ConfigChannel+0x2c0>
 800379e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80037a2:	42b3      	cmp	r3, r6
 80037a4:	d01e      	beq.n	80037e4 <HAL_TIM_PWM_ConfigChannel+0x2c0>
  TIMx->CCR5 = OC_Config->Pulse;
 80037a6:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80037a8:	605d      	str	r5, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 80037aa:	655c      	str	r4, [r3, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 80037ac:	659e      	str	r6, [r3, #88]	; 0x58
  TIMx->CCER = tmpccer;
 80037ae:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80037b0:	6d5c      	ldr	r4, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80037b2:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80037b4:	f044 0408 	orr.w	r4, r4, #8
 80037b8:	655c      	str	r4, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80037ba:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80037bc:	f021 0104 	bic.w	r1, r1, #4
 80037c0:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80037c2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037c4:	432a      	orrs	r2, r5
 80037c6:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(htim);
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	bcf0      	pop	{r4, r5, r6, r7}
  __HAL_UNLOCK(htim);
 80037cc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80037d0:	4618      	mov	r0, r3
}
 80037d2:	4770      	bx	lr
  __HAL_LOCK(htim);
 80037d4:	2002      	movs	r0, #2
}
 80037d6:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS6;
 80037d8:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80037dc:	694e      	ldr	r6, [r1, #20]
 80037de:	ea45 2586 	orr.w	r5, r5, r6, lsl #10
 80037e2:	e711      	b.n	8003608 <HAL_TIM_PWM_ConfigChannel+0xe4>
    tmpcr2 &= ~TIM_CR2_OIS5;
 80037e4:	f425 3580 	bic.w	r5, r5, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80037e8:	694e      	ldr	r6, [r1, #20]
 80037ea:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 80037ee:	e7da      	b.n	80037a6 <HAL_TIM_PWM_ConfigChannel+0x282>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80037f0:	f426 7c40 	bic.w	ip, r6, #768	; 0x300
    tmpccer &= ~TIM_CCER_CC1NP;
 80037f4:	f022 0208 	bic.w	r2, r2, #8
    tmpcr2 |= OC_Config->OCNIdleState;
 80037f8:	698e      	ldr	r6, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 80037fa:	68cf      	ldr	r7, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 80037fc:	694d      	ldr	r5, [r1, #20]
    tmpccer |= OC_Config->OCNPolarity;
 80037fe:	433a      	orrs	r2, r7
    tmpcr2 |= OC_Config->OCNIdleState;
 8003800:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8003802:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8003806:	ea45 060c 	orr.w	r6, r5, ip
 800380a:	e6c9      	b.n	80035a0 <HAL_TIM_PWM_ConfigChannel+0x7c>
    tmpcr2 &= ~TIM_CR2_OIS4;
 800380c:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003810:	694e      	ldr	r6, [r1, #20]
 8003812:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 8003816:	e760      	b.n	80036da <HAL_TIM_PWM_ConfigChannel+0x1b6>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003818:	f426 6c40 	bic.w	ip, r6, #3072	; 0xc00
    tmpccer &= ~TIM_CCER_CC2NP;
 800381c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003820:	698e      	ldr	r6, [r1, #24]
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003822:	68cf      	ldr	r7, [r1, #12]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003824:	694d      	ldr	r5, [r1, #20]
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003826:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800382a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 800382c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003830:	ea4c 0685 	orr.w	r6, ip, r5, lsl #2
 8003834:	e71c      	b.n	8003670 <HAL_TIM_PWM_ConfigChannel+0x14c>
 8003836:	bf00      	nop
 8003838:	fffeff8c 	.word	0xfffeff8c
 800383c:	40010000 	.word	0x40010000
 8003840:	feff8fff 	.word	0xfeff8fff
 8003844:	feff8cff 	.word	0xfeff8cff
 8003848:	fffeff8f 	.word	0xfffeff8f
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800384c:	f426 5c40 	bic.w	ip, r6, #12288	; 0x3000
    tmpccer &= ~TIM_CCER_CC3NP;
 8003850:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003854:	698e      	ldr	r6, [r1, #24]
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003856:	68cf      	ldr	r7, [r1, #12]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003858:	694d      	ldr	r5, [r1, #20]
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800385a:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800385e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8003860:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003864:	ea4c 1605 	orr.w	r6, ip, r5, lsl #4
 8003868:	e76b      	b.n	8003742 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800386a:	bf00      	nop

0800386c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800386c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003870:	2b01      	cmp	r3, #1
 8003872:	d05b      	beq.n	800392c <HAL_TIM_ConfigClockSource+0xc0>
 8003874:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8003876:	2002      	movs	r0, #2
  tmpsmcr = htim->Instance->SMCR;
 8003878:	6813      	ldr	r3, [r2, #0]
{
 800387a:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 800387c:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 8003880:	2501      	movs	r5, #1
  tmpsmcr = htim->Instance->SMCR;
 8003882:	6898      	ldr	r0, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003884:	4c4c      	ldr	r4, [pc, #304]	; (80039b8 <HAL_TIM_ConfigClockSource+0x14c>)
  __HAL_LOCK(htim);
 8003886:	f882 503c 	strb.w	r5, [r2, #60]	; 0x3c
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800388a:	4004      	ands	r4, r0
  switch (sClockSourceConfig->ClockSource)
 800388c:	6808      	ldr	r0, [r1, #0]
 800388e:	2840      	cmp	r0, #64	; 0x40
  htim->Instance->SMCR = tmpsmcr;
 8003890:	609c      	str	r4, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8003892:	d076      	beq.n	8003982 <HAL_TIM_ConfigClockSource+0x116>
 8003894:	d94c      	bls.n	8003930 <HAL_TIM_ConfigClockSource+0xc4>
 8003896:	2860      	cmp	r0, #96	; 0x60
 8003898:	d02f      	beq.n	80038fa <HAL_TIM_ConfigClockSource+0x8e>
 800389a:	d958      	bls.n	800394e <HAL_TIM_ConfigClockSource+0xe2>
 800389c:	2870      	cmp	r0, #112	; 0x70
 800389e:	d01b      	beq.n	80038d8 <HAL_TIM_ConfigClockSource+0x6c>
 80038a0:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80038a4:	d10f      	bne.n	80038c6 <HAL_TIM_ConfigClockSource+0x5a>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038a6:	68cc      	ldr	r4, [r1, #12]
 80038a8:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
 80038ac:	ea40 0105 	orr.w	r1, r0, r5
  tmpsmcr = TIMx->SMCR;
 80038b0:	6898      	ldr	r0, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038b2:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038b6:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038ba:	4301      	orrs	r1, r0

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038bc:	6099      	str	r1, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038be:	6899      	ldr	r1, [r3, #8]
 80038c0:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80038c4:	6099      	str	r1, [r3, #8]
  __HAL_UNLOCK(htim);
 80038c6:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80038c8:	2101      	movs	r1, #1
  return HAL_OK;
 80038ca:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 80038cc:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80038d0:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 80038d4:	bc70      	pop	{r4, r5, r6}
 80038d6:	4770      	bx	lr
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038d8:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
 80038dc:	68cc      	ldr	r4, [r1, #12]
 80038de:	ea40 0105 	orr.w	r1, r0, r5
  tmpsmcr = TIMx->SMCR;
 80038e2:	6898      	ldr	r0, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038e4:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038e8:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038ec:	4301      	orrs	r1, r0
  TIMx->SMCR = tmpsmcr;
 80038ee:	6099      	str	r1, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 80038f0:	6899      	ldr	r1, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038f2:	f041 0177 	orr.w	r1, r1, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80038f6:	6099      	str	r1, [r3, #8]
      break;
 80038f8:	e7e5      	b.n	80038c6 <HAL_TIM_ConfigClockSource+0x5a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038fa:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038fc:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038fe:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003902:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003904:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003906:	6998      	ldr	r0, [r3, #24]
  tmpccer = TIMx->CCER;
 8003908:	6a19      	ldr	r1, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800390a:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800390e:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003912:	ea40 3006 	orr.w	r0, r0, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8003916:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800391a:	6198      	str	r0, [r3, #24]
  TIMx->CCER = tmpccer;
 800391c:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800391e:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003920:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003924:	f041 0167 	orr.w	r1, r1, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8003928:	6099      	str	r1, [r3, #8]
 800392a:	e7cc      	b.n	80038c6 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 800392c:	2002      	movs	r0, #2
}
 800392e:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8003930:	2810      	cmp	r0, #16
 8003932:	d004      	beq.n	800393e <HAL_TIM_ConfigClockSource+0xd2>
 8003934:	d93d      	bls.n	80039b2 <HAL_TIM_ConfigClockSource+0x146>
 8003936:	2820      	cmp	r0, #32
 8003938:	d001      	beq.n	800393e <HAL_TIM_ConfigClockSource+0xd2>
 800393a:	2830      	cmp	r0, #48	; 0x30
 800393c:	d1c3      	bne.n	80038c6 <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr = TIMx->SMCR;
 800393e:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003940:	f040 0007 	orr.w	r0, r0, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8003944:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003948:	4308      	orrs	r0, r1
  TIMx->SMCR = tmpsmcr;
 800394a:	6098      	str	r0, [r3, #8]
 800394c:	e7bb      	b.n	80038c6 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 800394e:	2850      	cmp	r0, #80	; 0x50
 8003950:	d1b9      	bne.n	80038c6 <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 8003952:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003954:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003956:	6848      	ldr	r0, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003958:	f025 050a 	bic.w	r5, r5, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800395c:	f024 0401 	bic.w	r4, r4, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003960:	68ce      	ldr	r6, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 8003962:	4328      	orrs	r0, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003964:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003966:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003968:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800396c:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003970:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8003972:	6218      	str	r0, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8003974:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003976:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800397a:	f041 0157 	orr.w	r1, r1, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800397e:	6099      	str	r1, [r3, #8]
 8003980:	e7a1      	b.n	80038c6 <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 8003982:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003984:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003986:	6848      	ldr	r0, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003988:	f025 050a 	bic.w	r5, r5, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800398c:	f024 0401 	bic.w	r4, r4, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003990:	68ce      	ldr	r6, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 8003992:	4328      	orrs	r0, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003994:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003996:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003998:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800399c:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80039a0:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80039a2:	6218      	str	r0, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 80039a4:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80039a6:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039aa:	f041 0147 	orr.w	r1, r1, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80039ae:	6099      	str	r1, [r3, #8]
 80039b0:	e789      	b.n	80038c6 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80039b2:	2800      	cmp	r0, #0
 80039b4:	d0c3      	beq.n	800393e <HAL_TIM_ConfigClockSource+0xd2>
 80039b6:	e786      	b.n	80038c6 <HAL_TIM_ConfigClockSource+0x5a>
 80039b8:	fffe0088 	.word	0xfffe0088

080039bc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039bc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d04b      	beq.n	8003a5c <HAL_TIMEx_MasterConfigSynchronization+0xa0>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039c4:	6803      	ldr	r3, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80039c6:	4a27      	ldr	r2, [pc, #156]	; (8003a64 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
{
 80039c8:	b4f0      	push	{r4, r5, r6, r7}
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80039ca:	4e27      	ldr	r6, [pc, #156]	; (8003a68 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->State = HAL_TIM_STATE_BUSY;
 80039cc:	2502      	movs	r5, #2
  __HAL_LOCK(htim);
 80039ce:	2401      	movs	r4, #1
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80039d0:	4293      	cmp	r3, r2
 80039d2:	bf18      	it	ne
 80039d4:	42b3      	cmpne	r3, r6
  htim->State = HAL_TIM_STATE_BUSY;
 80039d6:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 80039da:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80039de:	bf08      	it	eq
 80039e0:	2601      	moveq	r6, #1
  tmpcr2 = htim->Instance->CR2;
 80039e2:	685c      	ldr	r4, [r3, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80039e4:	bf18      	it	ne
 80039e6:	2600      	movne	r6, #0
  tmpsmcr = htim->Instance->SMCR;
 80039e8:	689d      	ldr	r5, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80039ea:	d103      	bne.n	80039f4 <HAL_TIMEx_MasterConfigSynchronization+0x38>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80039ec:	f424 0470 	bic.w	r4, r4, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80039f0:	684a      	ldr	r2, [r1, #4]
 80039f2:	4314      	orrs	r4, r2
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039f4:	4a1d      	ldr	r2, [pc, #116]	; (8003a6c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
  tmpcr2 &= ~TIM_CR2_MMS;
 80039f6:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039fa:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039fc:	4293      	cmp	r3, r2
 80039fe:	bf18      	it	ne
 8003a00:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8003a04:	f8df c070 	ldr.w	ip, [pc, #112]	; 8003a78 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a08:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a0c:	4f18      	ldr	r7, [pc, #96]	; (8003a70 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003a0e:	bf0c      	ite	eq
 8003a10:	2201      	moveq	r2, #1
 8003a12:	2200      	movne	r2, #0
  htim->Instance->CR2 = tmpcr2;
 8003a14:	605c      	str	r4, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a16:	4563      	cmp	r3, ip
 8003a18:	bf08      	it	eq
 8003a1a:	f042 0201 	orreq.w	r2, r2, #1
 8003a1e:	4c15      	ldr	r4, [pc, #84]	; (8003a74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003a20:	42bb      	cmp	r3, r7
 8003a22:	bf08      	it	eq
 8003a24:	f042 0201 	orreq.w	r2, r2, #1
 8003a28:	f507 379a 	add.w	r7, r7, #78848	; 0x13400
 8003a2c:	42bb      	cmp	r3, r7
 8003a2e:	bf08      	it	eq
 8003a30:	f042 0201 	orreq.w	r2, r2, #1
 8003a34:	42a3      	cmp	r3, r4
 8003a36:	bf08      	it	eq
 8003a38:	f042 0201 	orreq.w	r2, r2, #1
 8003a3c:	b902      	cbnz	r2, 8003a40 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8003a3e:	b126      	cbz	r6, 8003a4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a40:	688a      	ldr	r2, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a42:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a46:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a48:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8003a4a:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8003a4c:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8003a4e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8003a52:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  return HAL_OK;
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	bcf0      	pop	{r4, r5, r6, r7}
 8003a5a:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003a5c:	2202      	movs	r2, #2
}
 8003a5e:	4610      	mov	r0, r2
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	40010400 	.word	0x40010400
 8003a68:	40010000 	.word	0x40010000
 8003a6c:	40000400 	.word	0x40000400
 8003a70:	40000c00 	.word	0x40000c00
 8003a74:	40001800 	.word	0x40001800
 8003a78:	40000800 	.word	0x40000800

08003a7c <HAL_UART_TxCpltCallback>:
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop

08003a80 <HAL_UART_ErrorCallback>:
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop

08003a84 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a84:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
  huart->RxXferCount = 0U;
 8003a86:	2200      	movs	r2, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003a88:	6b83      	ldr	r3, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8003a8a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a8e:	4618      	mov	r0, r3
  huart->TxXferCount = 0U;
 8003a90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8003a94:	f7ff fff4 	bl	8003a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a98:	bd08      	pop	{r3, pc}
 8003a9a:	bf00      	nop

08003a9c <HAL_UARTEx_RxEventCallback>:
}
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop

08003aa0 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003aa0:	6803      	ldr	r3, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003aa2:	f640 010f 	movw	r1, #2063	; 0x80f
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003aa6:	69da      	ldr	r2, [r3, #28]
  if (errorflags == 0U)
 8003aa8:	420a      	tst	r2, r1
{
 8003aaa:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003aac:	681e      	ldr	r6, [r3, #0]
{
 8003aae:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ab0:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 8003ab2:	d068      	beq.n	8003b86 <HAL_UART_IRQHandler+0xe6>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003ab4:	f015 0501 	ands.w	r5, r5, #1
 8003ab8:	d06c      	beq.n	8003b94 <HAL_UART_IRQHandler+0xf4>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003aba:	07d1      	lsls	r1, r2, #31
 8003abc:	d509      	bpl.n	8003ad2 <HAL_UART_IRQHandler+0x32>
 8003abe:	05f0      	lsls	r0, r6, #23
 8003ac0:	d507      	bpl.n	8003ad2 <HAL_UART_IRQHandler+0x32>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003ac2:	2101      	movs	r1, #1
 8003ac4:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ac6:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8003aca:	f041 0101 	orr.w	r1, r1, #1
 8003ace:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ad2:	0791      	lsls	r1, r2, #30
 8003ad4:	f100 80b9 	bmi.w	8003c4a <HAL_UART_IRQHandler+0x1aa>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ad8:	0751      	lsls	r1, r2, #29
 8003ada:	d502      	bpl.n	8003ae2 <HAL_UART_IRQHandler+0x42>
 8003adc:	2d00      	cmp	r5, #0
 8003ade:	f040 80c2 	bne.w	8003c66 <HAL_UART_IRQHandler+0x1c6>
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003ae2:	0710      	lsls	r0, r2, #28
 8003ae4:	d505      	bpl.n	8003af2 <HAL_UART_IRQHandler+0x52>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ae6:	06b1      	lsls	r1, r6, #26
 8003ae8:	f100 80c6 	bmi.w	8003c78 <HAL_UART_IRQHandler+0x1d8>
 8003aec:	2d00      	cmp	r5, #0
 8003aee:	f040 80c3 	bne.w	8003c78 <HAL_UART_IRQHandler+0x1d8>
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003af2:	0515      	lsls	r5, r2, #20
 8003af4:	d50a      	bpl.n	8003b0c <HAL_UART_IRQHandler+0x6c>
 8003af6:	0170      	lsls	r0, r6, #5
 8003af8:	d508      	bpl.n	8003b0c <HAL_UART_IRQHandler+0x6c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003afa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003afe:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003b00:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8003b04:	f041 0120 	orr.w	r1, r1, #32
 8003b08:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b0c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8003b10:	2900      	cmp	r1, #0
 8003b12:	d03e      	beq.n	8003b92 <HAL_UART_IRQHandler+0xf2>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b14:	0691      	lsls	r1, r2, #26
 8003b16:	d502      	bpl.n	8003b1e <HAL_UART_IRQHandler+0x7e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b18:	06b2      	lsls	r2, r6, #26
 8003b1a:	f100 80ba 	bmi.w	8003c92 <HAL_UART_IRQHandler+0x1f2>
      errorcode = huart->ErrorCode;
 8003b1e:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b22:	6899      	ldr	r1, [r3, #8]
 8003b24:	064e      	lsls	r6, r1, #25
 8003b26:	d403      	bmi.n	8003b30 <HAL_UART_IRQHandler+0x90>
 8003b28:	f015 0528 	ands.w	r5, r5, #40	; 0x28
 8003b2c:	f000 80b9 	beq.w	8003ca2 <HAL_UART_IRQHandler+0x202>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b36:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b38:	689a      	ldr	r2, [r3, #8]
 8003b3a:	f022 0201 	bic.w	r2, r2, #1
 8003b3e:	609a      	str	r2, [r3, #8]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b40:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003b42:	2a01      	cmp	r2, #1
 8003b44:	d103      	bne.n	8003b4e <HAL_UART_IRQHandler+0xae>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	f022 0210 	bic.w	r2, r2, #16
 8003b4c:	601a      	str	r2, [r3, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8003b4e:	2120      	movs	r1, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b50:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8003b52:	67e1      	str	r1, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b54:	6622      	str	r2, [r4, #96]	; 0x60
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b56:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 8003b58:	6662      	str	r2, [r4, #100]	; 0x64
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b5a:	064d      	lsls	r5, r1, #25
 8003b5c:	f140 8095 	bpl.w	8003c8a <HAL_UART_IRQHandler+0x1ea>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b60:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8003b62:	6f21      	ldr	r1, [r4, #112]	; 0x70
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b68:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8003b6a:	2900      	cmp	r1, #0
 8003b6c:	f000 808d 	beq.w	8003c8a <HAL_UART_IRQHandler+0x1ea>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b70:	4b60      	ldr	r3, [pc, #384]	; (8003cf4 <HAL_UART_IRQHandler+0x254>)
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b72:	4608      	mov	r0, r1
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b74:	650b      	str	r3, [r1, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b76:	f7fd fdfb 	bl	8001770 <HAL_DMA_Abort_IT>
 8003b7a:	b150      	cbz	r0, 8003b92 <HAL_UART_IRQHandler+0xf2>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b7c:	6f20      	ldr	r0, [r4, #112]	; 0x70
}
 8003b7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b82:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003b84:	4718      	bx	r3
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b86:	0691      	lsls	r1, r2, #26
 8003b88:	d507      	bpl.n	8003b9a <HAL_UART_IRQHandler+0xfa>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b8a:	06b5      	lsls	r5, r6, #26
 8003b8c:	d505      	bpl.n	8003b9a <HAL_UART_IRQHandler+0xfa>
      if (huart->RxISR != NULL)
 8003b8e:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8003b90:	b9f3      	cbnz	r3, 8003bd0 <HAL_UART_IRQHandler+0x130>
}
 8003b92:	bd70      	pop	{r4, r5, r6, pc}
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003b94:	4958      	ldr	r1, [pc, #352]	; (8003cf8 <HAL_UART_IRQHandler+0x258>)
 8003b96:	420e      	tst	r6, r1
 8003b98:	d18f      	bne.n	8003aba <HAL_UART_IRQHandler+0x1a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b9a:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8003b9c:	2901      	cmp	r1, #1
 8003b9e:	d01a      	beq.n	8003bd6 <HAL_UART_IRQHandler+0x136>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003ba0:	0615      	lsls	r5, r2, #24
 8003ba2:	d40f      	bmi.n	8003bc4 <HAL_UART_IRQHandler+0x124>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003ba4:	0651      	lsls	r1, r2, #25
 8003ba6:	d5f4      	bpl.n	8003b92 <HAL_UART_IRQHandler+0xf2>
 8003ba8:	0672      	lsls	r2, r6, #25
 8003baa:	d5f2      	bpl.n	8003b92 <HAL_UART_IRQHandler+0xf2>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003bac:	681a      	ldr	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bae:	2520      	movs	r5, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003bb0:	2100      	movs	r1, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003bb2:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003bb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bb8:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003bba:	67a5      	str	r5, [r4, #120]	; 0x78
  huart->TxISR = NULL;
 8003bbc:	66a1      	str	r1, [r4, #104]	; 0x68
  HAL_UART_TxCpltCallback(huart);
 8003bbe:	f7ff ff5d 	bl	8003a7c <HAL_UART_TxCpltCallback>
}
 8003bc2:	bd70      	pop	{r4, r5, r6, pc}
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003bc4:	0630      	lsls	r0, r6, #24
 8003bc6:	d5ed      	bpl.n	8003ba4 <HAL_UART_IRQHandler+0x104>
    if (huart->TxISR != NULL)
 8003bc8:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d0e1      	beq.n	8003b92 <HAL_UART_IRQHandler+0xf2>
      huart->TxISR(huart);
 8003bce:	4620      	mov	r0, r4
}
 8003bd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8003bd4:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003bd6:	06d0      	lsls	r0, r2, #27
 8003bd8:	d5e2      	bpl.n	8003ba0 <HAL_UART_IRQHandler+0x100>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003bda:	06f1      	lsls	r1, r6, #27
 8003bdc:	d5e0      	bpl.n	8003ba0 <HAL_UART_IRQHandler+0x100>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003bde:	2210      	movs	r2, #16
 8003be0:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003be2:	689a      	ldr	r2, [r3, #8]
 8003be4:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8003be8:	d061      	beq.n	8003cae <HAL_UART_IRQHandler+0x20e>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003bea:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8003bec:	6802      	ldr	r2, [r0, #0]
 8003bee:	6852      	ldr	r2, [r2, #4]
 8003bf0:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8003bf2:	2a00      	cmp	r2, #0
 8003bf4:	d0cd      	beq.n	8003b92 <HAL_UART_IRQHandler+0xf2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003bf6:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8003bfa:	4291      	cmp	r1, r2
 8003bfc:	d9c9      	bls.n	8003b92 <HAL_UART_IRQHandler+0xf2>
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003bfe:	69c5      	ldr	r5, [r0, #28]
        huart->RxXferCount = nb_remaining_rx_data;
 8003c00:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c04:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8003c08:	d017      	beq.n	8003c3a <HAL_UART_IRQHandler+0x19a>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c0a:	681a      	ldr	r2, [r3, #0]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c0c:	2100      	movs	r1, #0
          huart->RxState = HAL_UART_STATE_READY;
 8003c0e:	2520      	movs	r5, #32
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c14:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c16:	689a      	ldr	r2, [r3, #8]
 8003c18:	f022 0201 	bic.w	r2, r2, #1
 8003c1c:	609a      	str	r2, [r3, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c24:	609a      	str	r2, [r3, #8]
          huart->RxState = HAL_UART_STATE_READY;
 8003c26:	67e5      	str	r5, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c28:	6621      	str	r1, [r4, #96]	; 0x60
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	f022 0210 	bic.w	r2, r2, #16
 8003c30:	601a      	str	r2, [r3, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c32:	f7fd fd55 	bl	80016e0 <HAL_DMA_Abort>
 8003c36:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c3a:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8003c3e:	4620      	mov	r0, r4
 8003c40:	1ac9      	subs	r1, r1, r3
 8003c42:	b289      	uxth	r1, r1
 8003c44:	f7ff ff2a 	bl	8003a9c <HAL_UARTEx_RxEventCallback>
}
 8003c48:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c4a:	2d00      	cmp	r5, #0
 8003c4c:	f43f af49 	beq.w	8003ae2 <HAL_UART_IRQHandler+0x42>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003c50:	2102      	movs	r1, #2
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c52:	0750      	lsls	r0, r2, #29
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003c54:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c56:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8003c5a:	f041 0104 	orr.w	r1, r1, #4
 8003c5e:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c62:	f57f af3e 	bpl.w	8003ae2 <HAL_UART_IRQHandler+0x42>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003c66:	2104      	movs	r1, #4
 8003c68:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c6a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8003c6e:	f041 0102 	orr.w	r1, r1, #2
 8003c72:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
 8003c76:	e734      	b.n	8003ae2 <HAL_UART_IRQHandler+0x42>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c78:	2108      	movs	r1, #8
 8003c7a:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c7c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8003c80:	f041 0108 	orr.w	r1, r1, #8
 8003c84:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
 8003c88:	e733      	b.n	8003af2 <HAL_UART_IRQHandler+0x52>
            HAL_UART_ErrorCallback(huart);
 8003c8a:	4620      	mov	r0, r4
 8003c8c:	f7ff fef8 	bl	8003a80 <HAL_UART_ErrorCallback>
}
 8003c90:	bd70      	pop	{r4, r5, r6, pc}
        if (huart->RxISR != NULL)
 8003c92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003c94:	2a00      	cmp	r2, #0
 8003c96:	f43f af42 	beq.w	8003b1e <HAL_UART_IRQHandler+0x7e>
          huart->RxISR(huart);
 8003c9a:	4620      	mov	r0, r4
 8003c9c:	4790      	blx	r2
 8003c9e:	6823      	ldr	r3, [r4, #0]
 8003ca0:	e73d      	b.n	8003b1e <HAL_UART_IRQHandler+0x7e>
        HAL_UART_ErrorCallback(huart);
 8003ca2:	4620      	mov	r0, r4
 8003ca4:	f7ff feec 	bl	8003a80 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ca8:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 8003cac:	bd70      	pop	{r4, r5, r6, pc}
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003cae:	f8b4 505a 	ldrh.w	r5, [r4, #90]	; 0x5a
 8003cb2:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
      if ((huart->RxXferCount > 0U)
 8003cb6:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003cba:	1b49      	subs	r1, r1, r5
      if ((huart->RxXferCount > 0U)
 8003cbc:	b280      	uxth	r0, r0
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003cbe:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8003cc0:	2800      	cmp	r0, #0
 8003cc2:	f43f af66 	beq.w	8003b92 <HAL_UART_IRQHandler+0xf2>
 8003cc6:	2900      	cmp	r1, #0
 8003cc8:	f43f af63 	beq.w	8003b92 <HAL_UART_IRQHandler+0xf2>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ccc:	681d      	ldr	r5, [r3, #0]
        huart->RxState = HAL_UART_STATE_READY;
 8003cce:	2620      	movs	r6, #32
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003cd0:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cd2:	f425 7590 	bic.w	r5, r5, #288	; 0x120
 8003cd6:	601d      	str	r5, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cd8:	689d      	ldr	r5, [r3, #8]
 8003cda:	f025 0501 	bic.w	r5, r5, #1
 8003cde:	609d      	str	r5, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8003ce0:	67e6      	str	r6, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ce2:	6622      	str	r2, [r4, #96]	; 0x60
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ce4:	681d      	ldr	r5, [r3, #0]
        huart->RxISR = NULL;
 8003ce6:	6662      	str	r2, [r4, #100]	; 0x64
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ce8:	f025 0510 	bic.w	r5, r5, #16
 8003cec:	601d      	str	r5, [r3, #0]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003cee:	f7ff fed5 	bl	8003a9c <HAL_UARTEx_RxEventCallback>
}
 8003cf2:	bd70      	pop	{r4, r5, r6, pc}
 8003cf4:	08003a85 	.word	0x08003a85
 8003cf8:	04000120 	.word	0x04000120

08003cfc <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cfc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003cfe:	07da      	lsls	r2, r3, #31
{
 8003d00:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d02:	d506      	bpl.n	8003d12 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d04:	6801      	ldr	r1, [r0, #0]
 8003d06:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8003d08:	684a      	ldr	r2, [r1, #4]
 8003d0a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003d0e:	4322      	orrs	r2, r4
 8003d10:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d12:	079c      	lsls	r4, r3, #30
 8003d14:	d506      	bpl.n	8003d24 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d16:	6801      	ldr	r1, [r0, #0]
 8003d18:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003d1a:	684a      	ldr	r2, [r1, #4]
 8003d1c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003d20:	4322      	orrs	r2, r4
 8003d22:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d24:	0759      	lsls	r1, r3, #29
 8003d26:	d506      	bpl.n	8003d36 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d28:	6801      	ldr	r1, [r0, #0]
 8003d2a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003d2c:	684a      	ldr	r2, [r1, #4]
 8003d2e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d32:	4322      	orrs	r2, r4
 8003d34:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d36:	071a      	lsls	r2, r3, #28
 8003d38:	d506      	bpl.n	8003d48 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d3a:	6801      	ldr	r1, [r0, #0]
 8003d3c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003d3e:	684a      	ldr	r2, [r1, #4]
 8003d40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d44:	4322      	orrs	r2, r4
 8003d46:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d48:	06dc      	lsls	r4, r3, #27
 8003d4a:	d506      	bpl.n	8003d5a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d4c:	6801      	ldr	r1, [r0, #0]
 8003d4e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003d50:	688a      	ldr	r2, [r1, #8]
 8003d52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d56:	4322      	orrs	r2, r4
 8003d58:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d5a:	0699      	lsls	r1, r3, #26
 8003d5c:	d506      	bpl.n	8003d6c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d5e:	6801      	ldr	r1, [r0, #0]
 8003d60:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003d62:	688a      	ldr	r2, [r1, #8]
 8003d64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d68:	4322      	orrs	r2, r4
 8003d6a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d6c:	065a      	lsls	r2, r3, #25
 8003d6e:	d50a      	bpl.n	8003d86 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d70:	6801      	ldr	r1, [r0, #0]
 8003d72:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003d74:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d76:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d7a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003d7e:	ea42 0204 	orr.w	r2, r2, r4
 8003d82:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d84:	d00b      	beq.n	8003d9e <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d86:	061b      	lsls	r3, r3, #24
 8003d88:	d506      	bpl.n	8003d98 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d8a:	6802      	ldr	r2, [r0, #0]
 8003d8c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003d8e:	6853      	ldr	r3, [r2, #4]
 8003d90:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003d94:	430b      	orrs	r3, r1
 8003d96:	6053      	str	r3, [r2, #4]
}
 8003d98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d9c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d9e:	684a      	ldr	r2, [r1, #4]
 8003da0:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003da2:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8003da6:	4322      	orrs	r2, r4
 8003da8:	604a      	str	r2, [r1, #4]
 8003daa:	e7ec      	b.n	8003d86 <UART_AdvFeatureConfig+0x8a>

08003dac <HAL_UART_Init>:
  if (huart == NULL)
 8003dac:	2800      	cmp	r0, #0
 8003dae:	d04f      	beq.n	8003e50 <HAL_UART_Init+0xa4>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003db0:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 8003db2:	b570      	push	{r4, r5, r6, lr}
 8003db4:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d045      	beq.n	8003e46 <HAL_UART_Init+0x9a>
  __HAL_UART_DISABLE(huart);
 8003dba:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003dbc:	2124      	movs	r1, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003dbe:	6920      	ldr	r0, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 8003dc0:	67a1      	str	r1, [r4, #120]	; 0x78
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003dc2:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8003dc4:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003dc6:	4302      	orrs	r2, r0
 8003dc8:	6960      	ldr	r0, [r4, #20]
  __HAL_UART_DISABLE(huart);
 8003dca:	f021 0101 	bic.w	r1, r1, #1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003dce:	4dba      	ldr	r5, [pc, #744]	; (80040b8 <HAL_UART_Init+0x30c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003dd0:	4302      	orrs	r2, r0
 8003dd2:	69e0      	ldr	r0, [r4, #28]
  __HAL_UART_DISABLE(huart);
 8003dd4:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003dd6:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003dd8:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dda:	68e6      	ldr	r6, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ddc:	400d      	ands	r5, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003dde:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003de0:	432a      	orrs	r2, r5
  tmpreg |= huart->Init.OneBitSampling;
 8003de2:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003de4:	601a      	str	r2, [r3, #0]
  tmpreg |= huart->Init.OneBitSampling;
 8003de6:	ea41 0205 	orr.w	r2, r1, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dea:	6859      	ldr	r1, [r3, #4]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003dec:	4db3      	ldr	r5, [pc, #716]	; (80040bc <HAL_UART_Init+0x310>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dee:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003df2:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003df4:	ea41 0106 	orr.w	r1, r1, r6
 8003df8:	6059      	str	r1, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003dfa:	6899      	ldr	r1, [r3, #8]
 8003dfc:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8003e00:	ea42 0201 	orr.w	r2, r2, r1
 8003e04:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e06:	d025      	beq.n	8003e54 <HAL_UART_Init+0xa8>
 8003e08:	4aad      	ldr	r2, [pc, #692]	; (80040c0 <HAL_UART_Init+0x314>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d044      	beq.n	8003e98 <HAL_UART_Init+0xec>
 8003e0e:	4aad      	ldr	r2, [pc, #692]	; (80040c4 <HAL_UART_Init+0x318>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	f000 80e9 	beq.w	8003fe8 <HAL_UART_Init+0x23c>
 8003e16:	4aac      	ldr	r2, [pc, #688]	; (80040c8 <HAL_UART_Init+0x31c>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d045      	beq.n	8003ea8 <HAL_UART_Init+0xfc>
 8003e1c:	4aab      	ldr	r2, [pc, #684]	; (80040cc <HAL_UART_Init+0x320>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	f000 80f1 	beq.w	8004006 <HAL_UART_Init+0x25a>
 8003e24:	4aaa      	ldr	r2, [pc, #680]	; (80040d0 <HAL_UART_Init+0x324>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	f000 8171 	beq.w	800410e <HAL_UART_Init+0x362>
 8003e2c:	4aa9      	ldr	r2, [pc, #676]	; (80040d4 <HAL_UART_Init+0x328>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	f000 8180 	beq.w	8004134 <HAL_UART_Init+0x388>
 8003e34:	4aa8      	ldr	r2, [pc, #672]	; (80040d8 <HAL_UART_Init+0x32c>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	f000 812d 	beq.w	8004096 <HAL_UART_Init+0x2ea>
  huart->RxISR = NULL;
 8003e3c:	2300      	movs	r3, #0
    return HAL_ERROR;
 8003e3e:	2001      	movs	r0, #1
  huart->TxISR = NULL;
 8003e40:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 8003e44:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 8003e46:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8003e4a:	f002 f847 	bl	8005edc <HAL_UART_MspInit>
 8003e4e:	e7b4      	b.n	8003dba <HAL_UART_Init+0xe>
    return HAL_ERROR;
 8003e50:	2001      	movs	r0, #1
}
 8003e52:	4770      	bx	lr
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e54:	4ba1      	ldr	r3, [pc, #644]	; (80040dc <HAL_UART_Init+0x330>)
 8003e56:	4aa2      	ldr	r2, [pc, #648]	; (80040e0 <HAL_UART_Init+0x334>)
 8003e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e5c:	f003 0303 	and.w	r3, r3, #3
 8003e60:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e62:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003e66:	d030      	beq.n	8003eca <HAL_UART_Init+0x11e>
    switch (clocksource)
 8003e68:	2b08      	cmp	r3, #8
 8003e6a:	d8e7      	bhi.n	8003e3c <HAL_UART_Init+0x90>
 8003e6c:	a201      	add	r2, pc, #4	; (adr r2, 8003e74 <HAL_UART_Init+0xc8>)
 8003e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e72:	bf00      	nop
 8003e74:	08003fcd 	.word	0x08003fcd
 8003e78:	08003f05 	.word	0x08003f05
 8003e7c:	08004003 	.word	0x08004003
 8003e80:	08003e3d 	.word	0x08003e3d
 8003e84:	0800401d 	.word	0x0800401d
 8003e88:	08003e3d 	.word	0x08003e3d
 8003e8c:	08003e3d 	.word	0x08003e3d
 8003e90:	08003e3d 	.word	0x08003e3d
 8003e94:	08004023 	.word	0x08004023
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e98:	4b90      	ldr	r3, [pc, #576]	; (80040dc <HAL_UART_Init+0x330>)
 8003e9a:	4a92      	ldr	r2, [pc, #584]	; (80040e4 <HAL_UART_Init+0x338>)
 8003e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea0:	f003 030c 	and.w	r3, r3, #12
 8003ea4:	5cd3      	ldrb	r3, [r2, r3]
 8003ea6:	e7dc      	b.n	8003e62 <HAL_UART_Init+0xb6>
 8003ea8:	4b8c      	ldr	r3, [pc, #560]	; (80040dc <HAL_UART_Init+0x330>)
 8003eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003eb2:	2b40      	cmp	r3, #64	; 0x40
 8003eb4:	f000 80af 	beq.w	8004016 <HAL_UART_Init+0x26a>
 8003eb8:	f240 8082 	bls.w	8003fc0 <HAL_UART_Init+0x214>
 8003ebc:	2b80      	cmp	r3, #128	; 0x80
 8003ebe:	f000 809d 	beq.w	8003ffc <HAL_UART_Init+0x250>
 8003ec2:	2bc0      	cmp	r3, #192	; 0xc0
 8003ec4:	f000 80b8 	beq.w	8004038 <HAL_UART_Init+0x28c>
 8003ec8:	e7b8      	b.n	8003e3c <HAL_UART_Init+0x90>
    switch (clocksource)
 8003eca:	2b08      	cmp	r3, #8
 8003ecc:	d8b6      	bhi.n	8003e3c <HAL_UART_Init+0x90>
 8003ece:	a201      	add	r2, pc, #4	; (adr r2, 8003ed4 <HAL_UART_Init+0x128>)
 8003ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed4:	08004091 	.word	0x08004091
 8003ed8:	0800407b 	.word	0x0800407b
 8003edc:	0800408d 	.word	0x0800408d
 8003ee0:	08003e3d 	.word	0x08003e3d
 8003ee4:	08004087 	.word	0x08004087
 8003ee8:	08003e3d 	.word	0x08003e3d
 8003eec:	08003e3d 	.word	0x08003e3d
 8003ef0:	08003e3d 	.word	0x08003e3d
 8003ef4:	0800403f 	.word	0x0800403f
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d19f      	bne.n	8003e3c <HAL_UART_Init+0x90>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003efc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003f00:	f000 80bb 	beq.w	800407a <HAL_UART_Init+0x2ce>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f04:	f7fe fcd8 	bl	80028b8 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8003f08:	2800      	cmp	r0, #0
 8003f0a:	d063      	beq.n	8003fd4 <HAL_UART_Init+0x228>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f0c:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f0e:	f64f 72ef 	movw	r2, #65519	; 0xffef
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f12:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003f16:	fbb0 f0f3 	udiv	r0, r0, r3
 8003f1a:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f1c:	f1a0 0310 	sub.w	r3, r0, #16
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d88b      	bhi.n	8003e3c <HAL_UART_Init+0x90>
        huart->Instance->BRR = usartdiv;
 8003f24:	6822      	ldr	r2, [r4, #0]
  huart->RxISR = NULL;
 8003f26:	2300      	movs	r3, #0
        huart->Instance->BRR = usartdiv;
 8003f28:	60d0      	str	r0, [r2, #12]
  huart->TxISR = NULL;
 8003f2a:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d155      	bne.n	8003fe0 <HAL_UART_Init+0x234>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f34:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f36:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f38:	685a      	ldr	r2, [r3, #4]
 8003f3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f40:	689a      	ldr	r2, [r3, #8]
 8003f42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f46:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	f042 0201 	orr.w	r2, r2, #1
 8003f4e:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f50:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
  tickstart = HAL_GetTick();
 8003f54:	f7fc ffe2 	bl	8000f1c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f58:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003f5a:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	0710      	lsls	r0, r2, #28
 8003f60:	d408      	bmi.n	8003f74 <HAL_UART_Init+0x1c8>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f62:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8003f64:	2220      	movs	r2, #32
  return HAL_OK;
 8003f66:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8003f68:	67a2      	str	r2, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8003f6a:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003f6e:	67e2      	str	r2, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f70:	6623      	str	r3, [r4, #96]	; 0x60
}
 8003f72:	bd70      	pop	{r4, r5, r6, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f74:	69dd      	ldr	r5, [r3, #28]
 8003f76:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 8003f7a:	d1f2      	bne.n	8003f62 <HAL_UART_Init+0x1b6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f7c:	f7fc ffce 	bl	8000f1c <HAL_GetTick>
 8003f80:	1b80      	subs	r0, r0, r6
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f82:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f84:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8003f88:	f080 80b2 	bcs.w	80040f0 <HAL_UART_Init+0x344>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	0751      	lsls	r1, r2, #29
 8003f90:	d5f0      	bpl.n	8003f74 <HAL_UART_Init+0x1c8>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f92:	69da      	ldr	r2, [r3, #28]
 8003f94:	0512      	lsls	r2, r2, #20
 8003f96:	d5ed      	bpl.n	8003f74 <HAL_UART_Init+0x1c8>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f98:	f44f 6100 	mov.w	r1, #2048	; 0x800
          huart->gState = HAL_UART_STATE_READY;
 8003f9c:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8003f9e:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fa0:	6219      	str	r1, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fa2:	6819      	ldr	r1, [r3, #0]
 8003fa4:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 8003fa8:	6019      	str	r1, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003faa:	6899      	ldr	r1, [r3, #8]
 8003fac:	f021 0101 	bic.w	r1, r1, #1
 8003fb0:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8003fb2:	67a2      	str	r2, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8003fb4:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003fb8:	67e2      	str	r2, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fba:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
}
 8003fbe:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f47f af3b 	bne.w	8003e3c <HAL_UART_Init+0x90>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fc6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003fca:	d061      	beq.n	8004090 <HAL_UART_Init+0x2e4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fcc:	f7fe fc64 	bl	8002898 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003fd0:	2800      	cmp	r0, #0
 8003fd2:	d19b      	bne.n	8003f0c <HAL_UART_Init+0x160>
  huart->RxISR = NULL;
 8003fd4:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8003fd6:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d0a9      	beq.n	8003f34 <HAL_UART_Init+0x188>
    UART_AdvFeatureConfig(huart);
 8003fe0:	4620      	mov	r0, r4
 8003fe2:	f7ff fe8b 	bl	8003cfc <UART_AdvFeatureConfig>
 8003fe6:	e7a5      	b.n	8003f34 <HAL_UART_Init+0x188>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fe8:	4b3c      	ldr	r3, [pc, #240]	; (80040dc <HAL_UART_Init+0x330>)
 8003fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003ff2:	2b10      	cmp	r3, #16
 8003ff4:	d00f      	beq.n	8004016 <HAL_UART_Init+0x26a>
 8003ff6:	d9e3      	bls.n	8003fc0 <HAL_UART_Init+0x214>
 8003ff8:	2b20      	cmp	r3, #32
 8003ffa:	d13b      	bne.n	8004074 <HAL_UART_Init+0x2c8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ffc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004000:	d044      	beq.n	800408c <HAL_UART_Init+0x2e0>
        pclk = (uint32_t) HSI_VALUE;
 8004002:	4839      	ldr	r0, [pc, #228]	; (80040e8 <HAL_UART_Init+0x33c>)
 8004004:	e782      	b.n	8003f0c <HAL_UART_Init+0x160>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004006:	4b35      	ldr	r3, [pc, #212]	; (80040dc <HAL_UART_Init+0x330>)
 8004008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004010:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004014:	d108      	bne.n	8004028 <HAL_UART_Init+0x27c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004016:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800401a:	d034      	beq.n	8004086 <HAL_UART_Init+0x2da>
        pclk = HAL_RCC_GetSysClockFreq();
 800401c:	f7fe fc08 	bl	8002830 <HAL_RCC_GetSysClockFreq>
 8004020:	e772      	b.n	8003f08 <HAL_UART_Init+0x15c>
        pclk = (uint32_t) LSE_VALUE;
 8004022:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004026:	e771      	b.n	8003f0c <HAL_UART_Init+0x160>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004028:	d9ca      	bls.n	8003fc0 <HAL_UART_Init+0x214>
 800402a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800402e:	d0e5      	beq.n	8003ffc <HAL_UART_Init+0x250>
 8004030:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004034:	f47f af02 	bne.w	8003e3c <HAL_UART_Init+0x90>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004038:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800403c:	d1f1      	bne.n	8004022 <HAL_UART_Init+0x276>
 800403e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004042:	6862      	ldr	r2, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004044:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004048:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800404c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004050:	b29a      	uxth	r2, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004052:	f1a2 0010 	sub.w	r0, r2, #16
 8004056:	4288      	cmp	r0, r1
 8004058:	f63f aef0 	bhi.w	8003e3c <HAL_UART_Init+0x90>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800405c:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004060:	f3c2 0242 	ubfx	r2, r2, #1, #3
        huart->Instance->BRR = brrtemp;
 8004064:	6820      	ldr	r0, [r4, #0]
  huart->RxISR = NULL;
 8004066:	2100      	movs	r1, #0
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004068:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 800406a:	4313      	orrs	r3, r2
 800406c:	60c3      	str	r3, [r0, #12]
  huart->TxISR = NULL;
 800406e:	e9c4 1119 	strd	r1, r1, [r4, #100]	; 0x64
 8004072:	e75c      	b.n	8003f2e <HAL_UART_Init+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004074:	2b30      	cmp	r3, #48	; 0x30
 8004076:	d0df      	beq.n	8004038 <HAL_UART_Init+0x28c>
 8004078:	e6e0      	b.n	8003e3c <HAL_UART_Init+0x90>
        pclk = HAL_RCC_GetPCLK2Freq();
 800407a:	f7fe fc1d 	bl	80028b8 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 800407e:	2800      	cmp	r0, #0
 8004080:	d0a8      	beq.n	8003fd4 <HAL_UART_Init+0x228>
 8004082:	0043      	lsls	r3, r0, #1
 8004084:	e7dd      	b.n	8004042 <HAL_UART_Init+0x296>
        pclk = HAL_RCC_GetSysClockFreq();
 8004086:	f7fe fbd3 	bl	8002830 <HAL_RCC_GetSysClockFreq>
 800408a:	e7f8      	b.n	800407e <HAL_UART_Init+0x2d2>
    switch (clocksource)
 800408c:	4b17      	ldr	r3, [pc, #92]	; (80040ec <HAL_UART_Init+0x340>)
 800408e:	e7d8      	b.n	8004042 <HAL_UART_Init+0x296>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004090:	f7fe fc02 	bl	8002898 <HAL_RCC_GetPCLK1Freq>
 8004094:	e7f3      	b.n	800407e <HAL_UART_Init+0x2d2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004096:	4b11      	ldr	r3, [pc, #68]	; (80040dc <HAL_UART_Init+0x330>)
 8004098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800409c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80040a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040a4:	d0b7      	beq.n	8004016 <HAL_UART_Init+0x26a>
 80040a6:	d98b      	bls.n	8003fc0 <HAL_UART_Init+0x214>
 80040a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040ac:	d0a6      	beq.n	8003ffc <HAL_UART_Init+0x250>
 80040ae:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80040b2:	d0c1      	beq.n	8004038 <HAL_UART_Init+0x28c>
 80040b4:	e6c2      	b.n	8003e3c <HAL_UART_Init+0x90>
 80040b6:	bf00      	nop
 80040b8:	efff69f3 	.word	0xefff69f3
 80040bc:	40011000 	.word	0x40011000
 80040c0:	40004400 	.word	0x40004400
 80040c4:	40004800 	.word	0x40004800
 80040c8:	40004c00 	.word	0x40004c00
 80040cc:	40005000 	.word	0x40005000
 80040d0:	40011400 	.word	0x40011400
 80040d4:	40007800 	.word	0x40007800
 80040d8:	40007c00 	.word	0x40007c00
 80040dc:	40023800 	.word	0x40023800
 80040e0:	0800d880 	.word	0x0800d880
 80040e4:	0800d884 	.word	0x0800d884
 80040e8:	00f42400 	.word	0x00f42400
 80040ec:	01e84800 	.word	0x01e84800
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040f0:	681a      	ldr	r2, [r3, #0]
        huart->gState = HAL_UART_STATE_READY;
 80040f2:	2120      	movs	r1, #32
      return HAL_TIMEOUT;
 80040f4:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040f6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80040fa:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040fc:	689a      	ldr	r2, [r3, #8]
 80040fe:	f022 0201 	bic.w	r2, r2, #1
 8004102:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8004104:	67a1      	str	r1, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8004106:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800410a:	67e1      	str	r1, [r4, #124]	; 0x7c
}
 800410c:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800410e:	4b13      	ldr	r3, [pc, #76]	; (800415c <HAL_UART_Init+0x3b0>)
 8004110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004114:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004118:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800411c:	f43f af7b 	beq.w	8004016 <HAL_UART_Init+0x26a>
 8004120:	f67f aeea 	bls.w	8003ef8 <HAL_UART_Init+0x14c>
 8004124:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004128:	f43f af68 	beq.w	8003ffc <HAL_UART_Init+0x250>
 800412c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004130:	d082      	beq.n	8004038 <HAL_UART_Init+0x28c>
 8004132:	e683      	b.n	8003e3c <HAL_UART_Init+0x90>
 8004134:	4b09      	ldr	r3, [pc, #36]	; (800415c <HAL_UART_Init+0x3b0>)
 8004136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800413e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004142:	f43f af68 	beq.w	8004016 <HAL_UART_Init+0x26a>
 8004146:	f67f af3b 	bls.w	8003fc0 <HAL_UART_Init+0x214>
 800414a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800414e:	f43f af55 	beq.w	8003ffc <HAL_UART_Init+0x250>
 8004152:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004156:	f43f af6f 	beq.w	8004038 <HAL_UART_Init+0x28c>
 800415a:	e66f      	b.n	8003e3c <HAL_UART_Init+0x90>
 800415c:	40023800 	.word	0x40023800

08004160 <Init_LCD_GPIO>:
//=============================================================================
void Init_LCD_GPIO(void)
{
	  GPIO_InitTypeDef GPIO_InitStruct;

	  __HAL_RCC_CRC_CLK_ENABLE();
 8004160:	4b37      	ldr	r3, [pc, #220]	; (8004240 <Init_LCD_GPIO+0xe0>)
	  __HAL_RCC_GPIOE_CLK_ENABLE();
	  __HAL_RCC_GPIOF_CLK_ENABLE();
	  __HAL_RCC_GPIOG_CLK_ENABLE();


	  HAL_GPIO_WritePin(GDISP_CMD_PORT, GCMD, GPIO_PIN_RESET);
 8004162:	2200      	movs	r2, #0
 8004164:	f44f 4178 	mov.w	r1, #63488	; 0xf800
{
 8004168:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	  __HAL_RCC_CRC_CLK_ENABLE();
 800416c:	6b1d      	ldr	r5, [r3, #48]	; 0x30
{
 800416e:	b08b      	sub	sp, #44	; 0x2c
	  HAL_GPIO_WritePin(GDISP_CMD_PORT, GCMD, GPIO_PIN_RESET);
 8004170:	4c34      	ldr	r4, [pc, #208]	; (8004244 <Init_LCD_GPIO+0xe4>)
	  HAL_GPIO_WritePin(GDISP_DATA_LO_PORT, GDATA_LO, GPIO_PIN_RESET);
	  HAL_GPIO_WritePin(GDISP_DATA_HI_PORT, GDATA_HI, GPIO_PIN_RESET);

	  GPIO_InitStruct.Pin = GCMD;
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004172:	4616      	mov	r6, r2
	  __HAL_RCC_CRC_CLK_ENABLE();
 8004174:	f445 5580 	orr.w	r5, r5, #4096	; 0x1000
	  HAL_GPIO_WritePin(GDISP_DATA_LO_PORT, GDATA_LO, GPIO_PIN_RESET);
 8004178:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8004248 <Init_LCD_GPIO+0xe8>
	  HAL_GPIO_WritePin(GDISP_CMD_PORT, GCMD, GPIO_PIN_RESET);
 800417c:	4620      	mov	r0, r4
	  HAL_GPIO_WritePin(GDISP_DATA_HI_PORT, GDATA_HI, GPIO_PIN_RESET);
 800417e:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 800424c <Init_LCD_GPIO+0xec>
	  __HAL_RCC_CRC_CLK_ENABLE();
 8004182:	631d      	str	r5, [r3, #48]	; 0x30
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004184:	2701      	movs	r7, #1
	  __HAL_RCC_CRC_CLK_ENABLE();
 8004186:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8004188:	f405 5580 	and.w	r5, r5, #4096	; 0x1000
 800418c:	9501      	str	r5, [sp, #4]
 800418e:	9d01      	ldr	r5, [sp, #4]
	  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004190:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8004192:	f045 0510 	orr.w	r5, r5, #16
 8004196:	631d      	str	r5, [r3, #48]	; 0x30
 8004198:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 800419a:	f005 0510 	and.w	r5, r5, #16
 800419e:	9502      	str	r5, [sp, #8]
 80041a0:	9d02      	ldr	r5, [sp, #8]
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 80041a2:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 80041a4:	f045 0520 	orr.w	r5, r5, #32
 80041a8:	631d      	str	r5, [r3, #48]	; 0x30
 80041aa:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 80041ac:	f005 0520 	and.w	r5, r5, #32
 80041b0:	9503      	str	r5, [sp, #12]
 80041b2:	9d03      	ldr	r5, [sp, #12]
	  __HAL_RCC_GPIOG_CLK_ENABLE();
 80041b4:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 80041b6:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 80041ba:	631d      	str	r5, [r3, #48]	; 0x30
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041bc:	2503      	movs	r5, #3
	  __HAL_RCC_GPIOG_CLK_ENABLE();
 80041be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c4:	9304      	str	r3, [sp, #16]
 80041c6:	9b04      	ldr	r3, [sp, #16]
	  HAL_GPIO_WritePin(GDISP_CMD_PORT, GCMD, GPIO_PIN_RESET);
 80041c8:	f7fd fcc2 	bl	8001b50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GDISP_DATA_LO_PORT, GDATA_LO, GPIO_PIN_RESET);
 80041cc:	4648      	mov	r0, r9
 80041ce:	4632      	mov	r2, r6
 80041d0:	21ff      	movs	r1, #255	; 0xff
 80041d2:	f7fd fcbd 	bl	8001b50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GDISP_DATA_HI_PORT, GDATA_HI, GPIO_PIN_RESET);
 80041d6:	4632      	mov	r2, r6
 80041d8:	4640      	mov	r0, r8
 80041da:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80041de:	f7fd fcb7 	bl	8001b50 <HAL_GPIO_WritePin>
	  GPIO_InitStruct.Pin = GCMD;
 80041e2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
	  HAL_GPIO_Init(GDISP_CMD_PORT, &GPIO_InitStruct);
 80041e6:	4620      	mov	r0, r4
 80041e8:	a905      	add	r1, sp, #20
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041ea:	e9cd 3705 	strd	r3, r7, [sp, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041ee:	e9cd 6507 	strd	r6, r5, [sp, #28]
	  HAL_GPIO_Init(GDISP_CMD_PORT, &GPIO_InitStruct);
 80041f2:	f7fd fba7 	bl	8001944 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GDATA_LO;
 80041f6:	23ff      	movs	r3, #255	; 0xff
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	  HAL_GPIO_Init(GDISP_DATA_LO_PORT, &GPIO_InitStruct);
 80041f8:	4648      	mov	r0, r9
 80041fa:	a905      	add	r1, sp, #20
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041fc:	9508      	str	r5, [sp, #32]
	  GPIO_InitStruct.Pin = GDATA_LO;
 80041fe:	9305      	str	r3, [sp, #20]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004200:	e9cd 7606 	strd	r7, r6, [sp, #24]
	  HAL_GPIO_Init(GDISP_DATA_LO_PORT, &GPIO_InitStruct);
 8004204:	f7fd fb9e 	bl	8001944 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GDATA_HI;
 8004208:	f44f 437f 	mov.w	r3, #65280	; 0xff00
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	  HAL_GPIO_Init(GDISP_DATA_HI_PORT, &GPIO_InitStruct);
 800420c:	a905      	add	r1, sp, #20
 800420e:	4640      	mov	r0, r8
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004210:	9508      	str	r5, [sp, #32]

	  SET_CS; SET_WR; SET_RD; SET_DC; SET_RST;
 8004212:	f44f 5500 	mov.w	r5, #8192	; 0x2000
	  GPIO_InitStruct.Pin = GDATA_HI;
 8004216:	9305      	str	r3, [sp, #20]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004218:	e9cd 7606 	strd	r7, r6, [sp, #24]
	  HAL_GPIO_Init(GDISP_DATA_HI_PORT, &GPIO_InitStruct);
 800421c:	f7fd fb92 	bl	8001944 <HAL_GPIO_Init>
	  SET_CS; SET_WR; SET_RD; SET_DC; SET_RST;
 8004220:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004224:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004228:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800422c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004230:	61a5      	str	r5, [r4, #24]
 8004232:	61a0      	str	r0, [r4, #24]
 8004234:	61a1      	str	r1, [r4, #24]
 8004236:	61a2      	str	r2, [r4, #24]
 8004238:	61a3      	str	r3, [r4, #24]
}
 800423a:	b00b      	add	sp, #44	; 0x2c
 800423c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004240:	40023800 	.word	0x40023800
 8004244:	40021400 	.word	0x40021400
 8004248:	40021800 	.word	0x40021800
 800424c:	40021000 	.word	0x40021000

08004250 <SSD1963_WriteCommand>:
//=============================================================================
// Write command to display
//=============================================================================
void SSD1963_WriteCommand(uint16_t Data)
{
	uint16_t _Data=~Data;
 8004250:	43c3      	mvns	r3, r0

	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8004252:	4911      	ldr	r1, [pc, #68]	; (8004298 <SSD1963_WriteCommand+0x48>)

	CLR_CS;
 8004254:	4a11      	ldr	r2, [pc, #68]	; (800429c <SSD1963_WriteCommand+0x4c>)
	CLR_DC;
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004256:	041b      	lsls	r3, r3, #16
{
 8004258:	b470      	push	{r4, r5, r6}
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 800425a:	f04f 457f 	mov.w	r5, #4278190080	; 0xff000000
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800425e:	b2c4      	uxtb	r4, r0
 8004260:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004264:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8004268:	618d      	str	r5, [r1, #24]
	CLR_CS;
 800426a:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800426e:	4323      	orrs	r3, r4
 8004270:	4c0b      	ldr	r4, [pc, #44]	; (80042a0 <SSD1963_WriteCommand+0x50>)
	CLR_CS;
 8004272:	6195      	str	r5, [r2, #24]
	CLR_DC;
 8004274:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8004278:	6195      	str	r5, [r2, #24]
	writeStrobe;
 800427a:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800427e:	61a3      	str	r3, [r4, #24]
	writeStrobe;
 8004280:	f44f 6400 	mov.w	r4, #2048	; 0x800
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004284:	694e      	ldr	r6, [r1, #20]
	SET_CS;
 8004286:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 800428a:	4330      	orrs	r0, r6
 800428c:	6148      	str	r0, [r1, #20]
	writeStrobe;
 800428e:	6195      	str	r5, [r2, #24]
 8004290:	6194      	str	r4, [r2, #24]
	SET_CS;
 8004292:	6193      	str	r3, [r2, #24]
}
 8004294:	bc70      	pop	{r4, r5, r6}
 8004296:	4770      	bx	lr
 8004298:	40021000 	.word	0x40021000
 800429c:	40021400 	.word	0x40021400
 80042a0:	40021800 	.word	0x40021800

080042a4 <SSD1963_WriteData>:
// Write data to display
//=============================================================================

void SSD1963_WriteData(uint16_t Data)
{
	uint16_t _Data=~Data;
 80042a4:	43c3      	mvns	r3, r0

	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80042a6:	4911      	ldr	r1, [pc, #68]	; (80042ec <SSD1963_WriteData+0x48>)

	CLR_CS;
 80042a8:	4a11      	ldr	r2, [pc, #68]	; (80042f0 <SSD1963_WriteData+0x4c>)
	SET_DC;
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80042aa:	041b      	lsls	r3, r3, #16
{
 80042ac:	b470      	push	{r4, r5, r6}
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80042ae:	f04f 457f 	mov.w	r5, #4278190080	; 0xff000000
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80042b2:	b2c4      	uxtb	r4, r0
 80042b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80042b8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80042bc:	618d      	str	r5, [r1, #24]
	CLR_CS;
 80042be:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80042c2:	4323      	orrs	r3, r4
 80042c4:	4c0b      	ldr	r4, [pc, #44]	; (80042f4 <SSD1963_WriteData+0x50>)
	CLR_CS;
 80042c6:	6195      	str	r5, [r2, #24]
	SET_DC;
 80042c8:	f44f 4500 	mov.w	r5, #32768	; 0x8000
 80042cc:	6195      	str	r5, [r2, #24]
	writeStrobe;
 80042ce:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80042d2:	61a3      	str	r3, [r4, #24]
	writeStrobe;
 80042d4:	f44f 6400 	mov.w	r4, #2048	; 0x800
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80042d8:	694e      	ldr	r6, [r1, #20]
	SET_CS;
 80042da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80042de:	4330      	orrs	r0, r6
 80042e0:	6148      	str	r0, [r1, #20]
	writeStrobe;
 80042e2:	6195      	str	r5, [r2, #24]
 80042e4:	6194      	str	r4, [r2, #24]
	SET_CS;
 80042e6:	6193      	str	r3, [r2, #24]

}
 80042e8:	bc70      	pop	{r4, r5, r6}
 80042ea:	4770      	bx	lr
 80042ec:	40021000 	.word	0x40021000
 80042f0:	40021400 	.word	0x40021400
 80042f4:	40021800 	.word	0x40021800

080042f8 <SSD1963_WriteDataMultiple>:
//=============================================================================
// Write multiple data to display
//=============================================================================
void SSD1963_WriteDataMultiple(uint16_t * Data, int NumItems)
{
  while (NumItems)
 80042f8:	b399      	cbz	r1, 8004362 <SSD1963_WriteDataMultiple+0x6a>
 80042fa:	eb00 0141 	add.w	r1, r0, r1, lsl #1
	writeStrobe;
 80042fe:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
{
 8004302:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8004306:	4d17      	ldr	r5, [pc, #92]	; (8004364 <SSD1963_WriteDataMultiple+0x6c>)
 8004308:	f04f 4a7f 	mov.w	sl, #4278190080	; 0xff000000
	CLR_CS;
 800430c:	4c16      	ldr	r4, [pc, #88]	; (8004368 <SSD1963_WriteDataMultiple+0x70>)
 800430e:	f04f 5900 	mov.w	r9, #536870912	; 0x20000000
	SET_DC;
 8004312:	f44f 4800 	mov.w	r8, #32768	; 0x8000
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004316:	f8df e054 	ldr.w	lr, [pc, #84]	; 800436c <SSD1963_WriteDataMultiple+0x74>
	writeStrobe;
 800431a:	f44f 6700 	mov.w	r7, #2048	; 0x800
	SET_CS;
 800431e:	f44f 5600 	mov.w	r6, #8192	; 0x2000
  {
	  SSD1963_WriteData(*Data);
 8004322:	f830 3b02 	ldrh.w	r3, [r0], #2
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8004326:	f8c5 a018 	str.w	sl, [r5, #24]
	uint16_t _Data=~Data;
 800432a:	43da      	mvns	r2, r3
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800432c:	fa5f fb83 	uxtb.w	fp, r3
	CLR_CS;
 8004330:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004334:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004338:	0412      	lsls	r2, r2, #16
	SET_DC;
 800433a:	f8c4 8018 	str.w	r8, [r4, #24]
  while (NumItems)
 800433e:	4288      	cmp	r0, r1
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004340:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8004344:	ea42 020b 	orr.w	r2, r2, fp
 8004348:	f8ce 2018 	str.w	r2, [lr, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 800434c:	696a      	ldr	r2, [r5, #20]
 800434e:	ea43 0302 	orr.w	r3, r3, r2
 8004352:	616b      	str	r3, [r5, #20]
	writeStrobe;
 8004354:	f8c4 c018 	str.w	ip, [r4, #24]
 8004358:	61a7      	str	r7, [r4, #24]
	SET_CS;
 800435a:	61a6      	str	r6, [r4, #24]
  while (NumItems)
 800435c:	d1e1      	bne.n	8004322 <SSD1963_WriteDataMultiple+0x2a>
	  Data++;
	  NumItems--;
  }
}
 800435e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004362:	4770      	bx	lr
 8004364:	40021000 	.word	0x40021000
 8004368:	40021400 	.word	0x40021400
 800436c:	40021800 	.word	0x40021800

08004370 <SSD1963_Init>:
//=============================================================================
// Display initialization
//=============================================================================

void SSD1963_Init (void)
{
 8004370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	CLR_RST;  // reset
 8004374:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004378:	4cbd      	ldr	r4, [pc, #756]	; (8004670 <SSD1963_Init+0x300>)
{
 800437a:	b083      	sub	sp, #12
	HAL_Delay(500);
 800437c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
	CLR_RST;  // reset
 8004380:	61a3      	str	r3, [r4, #24]
	SET_RST;
 8004382:	f44f 4680 	mov.w	r6, #16384	; 0x4000
	HAL_Delay(500);
 8004386:	f7fc fdcf 	bl	8000f28 <HAL_Delay>
	CLR_CS;
 800438a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
	writeStrobe;
 800438e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
	HAL_Delay(100);
 8004392:	2064      	movs	r0, #100	; 0x64
	CLR_CS;
 8004394:	9201      	str	r2, [sp, #4]
	CLR_DC;
 8004396:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
	writeStrobe;
 800439a:	9300      	str	r3, [sp, #0]
 800439c:	f44f 6700 	mov.w	r7, #2048	; 0x800
	SET_RST;
 80043a0:	61a6      	str	r6, [r4, #24]
	SET_CS;
 80043a2:	f44f 5600 	mov.w	r6, #8192	; 0x2000
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80043a6:	4db3      	ldr	r5, [pc, #716]	; (8004674 <SSD1963_Init+0x304>)
	HAL_Delay(100);
 80043a8:	f7fc fdbe 	bl	8000f28 <HAL_Delay>
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80043ac:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80043b0:	f8df 82d4 	ldr.w	r8, [pc, #724]	; 8004688 <SSD1963_Init+0x318>
	CLR_CS;
 80043b4:	9a01      	ldr	r2, [sp, #4]

	SSD1963_WriteCommand(SSD1963_SOFT_RESET);
	HAL_Delay(10);
 80043b6:	200a      	movs	r0, #10
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80043b8:	61ab      	str	r3, [r5, #24]
	SET_DC;
 80043ba:	f44f 4900 	mov.w	r9, #32768	; 0x8000
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80043be:	4bae      	ldr	r3, [pc, #696]	; (8004678 <SSD1963_Init+0x308>)
	CLR_CS;
 80043c0:	61a2      	str	r2, [r4, #24]
 80043c2:	9201      	str	r2, [sp, #4]
	CLR_DC;
 80043c4:	f8c4 a018 	str.w	sl, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80043c8:	f8c8 3018 	str.w	r3, [r8, #24]
	writeStrobe;
 80043cc:	9b00      	ldr	r3, [sp, #0]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80043ce:	f8d5 c014 	ldr.w	ip, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80043d2:	f8df b2b8 	ldr.w	fp, [pc, #696]	; 800468c <SSD1963_Init+0x31c>
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80043d6:	f8c5 c014 	str.w	ip, [r5, #20]
	writeStrobe;
 80043da:	61a3      	str	r3, [r4, #24]
 80043dc:	9300      	str	r3, [sp, #0]
 80043de:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80043e0:	61a6      	str	r6, [r4, #24]
	HAL_Delay(10);
 80043e2:	f7fc fda1 	bl	8000f28 <HAL_Delay>
	CLR_CS;
 80043e6:	9a01      	ldr	r2, [sp, #4]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80043e8:	f8df e2a4 	ldr.w	lr, [pc, #676]	; 8004690 <SSD1963_Init+0x320>
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80043ec:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80043f0:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80043f4:	f8df c29c 	ldr.w	ip, [pc, #668]	; 8004694 <SSD1963_Init+0x324>
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80043f8:	61ab      	str	r3, [r5, #24]
	SSD1963_WriteData(4);  	// dummy

	SSD1963_WriteCommand(SSD1963_SET_PLL);
	SSD1963_WriteData(0x0001);

	HAL_Delay(100);
 80043fa:	2064      	movs	r0, #100	; 0x64
	CLR_CS;
 80043fc:	61a2      	str	r2, [r4, #24]
	writeStrobe;
 80043fe:	9b00      	ldr	r3, [sp, #0]
	CLR_DC;
 8004400:	f8c4 a018 	str.w	sl, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004404:	f8c8 e018 	str.w	lr, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004408:	f8d5 e014 	ldr.w	lr, [r5, #20]
 800440c:	f8c5 e014 	str.w	lr, [r5, #20]
	writeStrobe;
 8004410:	61a3      	str	r3, [r4, #24]
 8004412:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8004414:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8004416:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 8004418:	61a2      	str	r2, [r4, #24]
	SET_DC;
 800441a:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800441e:	f8c8 c018 	str.w	ip, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004422:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8004426:	f8c5 c014 	str.w	ip, [r5, #20]
	writeStrobe;
 800442a:	61a3      	str	r3, [r4, #24]
 800442c:	61a7      	str	r7, [r4, #24]
	SET_CS;
 800442e:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8004430:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 8004432:	61a2      	str	r2, [r4, #24]
	SET_DC;
 8004434:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004438:	f8c8 b018 	str.w	fp, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 800443c:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8004440:	f8c5 c014 	str.w	ip, [r5, #20]
	writeStrobe;
 8004444:	61a3      	str	r3, [r4, #24]
 8004446:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8004448:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 800444a:	61a9      	str	r1, [r5, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800444c:	498b      	ldr	r1, [pc, #556]	; (800467c <SSD1963_Init+0x30c>)
	CLR_CS;
 800444e:	61a2      	str	r2, [r4, #24]
	SET_DC;
 8004450:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004454:	f8c8 1018 	str.w	r1, [r8, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8004458:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 800445c:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8004460:	f8c5 c014 	str.w	ip, [r5, #20]
	writeStrobe;
 8004464:	61a3      	str	r3, [r4, #24]
 8004466:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8004468:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 800446a:	61a9      	str	r1, [r5, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800446c:	4984      	ldr	r1, [pc, #528]	; (8004680 <SSD1963_Init+0x310>)
	CLR_CS;
 800446e:	61a2      	str	r2, [r4, #24]
	CLR_DC;
 8004470:	f8c4 a018 	str.w	sl, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004474:	f8c8 1018 	str.w	r1, [r8, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8004478:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 800447c:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8004480:	f8c5 c014 	str.w	ip, [r5, #20]
	writeStrobe;
 8004484:	61a3      	str	r3, [r4, #24]
 8004486:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8004488:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 800448a:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 800448c:	61a2      	str	r2, [r4, #24]
 800448e:	9201      	str	r2, [sp, #4]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004490:	4a79      	ldr	r2, [pc, #484]	; (8004678 <SSD1963_Init+0x308>)
	SET_DC;
 8004492:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004496:	f8c8 2018 	str.w	r2, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 800449a:	f8d5 c014 	ldr.w	ip, [r5, #20]
 800449e:	f8c5 c014 	str.w	ip, [r5, #20]
	writeStrobe;
 80044a2:	61a3      	str	r3, [r4, #24]
 80044a4:	9300      	str	r3, [sp, #0]
 80044a6:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80044a8:	61a6      	str	r6, [r4, #24]
	HAL_Delay(100);
 80044aa:	f7fc fd3d 	bl	8000f28 <HAL_Delay>
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80044ae:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
	CLR_CS;
 80044b2:	9a01      	ldr	r2, [sp, #4]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80044b4:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80044b8:	61ab      	str	r3, [r5, #24]
	SSD1963_WriteData(0x0000);
	SSD1963_WriteData(0x0000);

	SSD1963_WriteCommand(SSD1963_SET_DISPLAY_ON);//SET display on

	HAL_Delay(10);
 80044ba:	200a      	movs	r0, #10
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80044bc:	4b70      	ldr	r3, [pc, #448]	; (8004680 <SSD1963_Init+0x310>)
	CLR_CS;
 80044be:	61a2      	str	r2, [r4, #24]
	CLR_DC;
 80044c0:	f8c4 a018 	str.w	sl, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80044c4:	f8c8 3018 	str.w	r3, [r8, #24]
	writeStrobe;
 80044c8:	9b00      	ldr	r3, [sp, #0]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80044ca:	f8d5 c014 	ldr.w	ip, [r5, #20]
 80044ce:	f8c5 c014 	str.w	ip, [r5, #20]
	writeStrobe;
 80044d2:	61a3      	str	r3, [r4, #24]
 80044d4:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80044d6:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80044d8:	61a9      	str	r1, [r5, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80044da:	496a      	ldr	r1, [pc, #424]	; (8004684 <SSD1963_Init+0x314>)
	CLR_CS;
 80044dc:	61a2      	str	r2, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80044de:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 8004698 <SSD1963_Init+0x328>
	SET_DC;
 80044e2:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80044e6:	f8c8 1018 	str.w	r1, [r8, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80044ea:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80044ee:	f8d5 e014 	ldr.w	lr, [r5, #20]
 80044f2:	f8c5 e014 	str.w	lr, [r5, #20]
	writeStrobe;
 80044f6:	61a3      	str	r3, [r4, #24]
 80044f8:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80044fa:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80044fc:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 80044fe:	61a2      	str	r2, [r4, #24]
	CLR_DC;
 8004500:	f8c4 a018 	str.w	sl, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004504:	f8c8 c018 	str.w	ip, [r8, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004508:	f8df c190 	ldr.w	ip, [pc, #400]	; 800469c <SSD1963_Init+0x32c>
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 800450c:	f8d5 e014 	ldr.w	lr, [r5, #20]
 8004510:	f8c5 e014 	str.w	lr, [r5, #20]
	writeStrobe;
 8004514:	61a3      	str	r3, [r4, #24]
 8004516:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8004518:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 800451a:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 800451c:	61a2      	str	r2, [r4, #24]
	SET_DC;
 800451e:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004522:	f8c8 c018 	str.w	ip, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004526:	f8d5 c014 	ldr.w	ip, [r5, #20]
 800452a:	f8c5 c014 	str.w	ip, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800452e:	f44f 0c7f 	mov.w	ip, #16711680	; 0xff0000
	writeStrobe;
 8004532:	61a3      	str	r3, [r4, #24]
 8004534:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8004536:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8004538:	61a9      	str	r1, [r5, #24]
 800453a:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	CLR_CS;
 800453e:	61a2      	str	r2, [r4, #24]
	SET_DC;
 8004540:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004544:	f8c8 c018 	str.w	ip, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004548:	f8d5 c014 	ldr.w	ip, [r5, #20]
 800454c:	f8c5 c014 	str.w	ip, [r5, #20]
	writeStrobe;
 8004550:	61a3      	str	r3, [r4, #24]
 8004552:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8004554:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8004556:	61a9      	str	r1, [r5, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004558:	4947      	ldr	r1, [pc, #284]	; (8004678 <SSD1963_Init+0x308>)
	CLR_CS;
 800455a:	61a2      	str	r2, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800455c:	f8df c140 	ldr.w	ip, [pc, #320]	; 80046a0 <SSD1963_Init+0x330>
	SET_DC;
 8004560:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004564:	f8c8 1018 	str.w	r1, [r8, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8004568:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 800456c:	f8d5 e014 	ldr.w	lr, [r5, #20]
 8004570:	f8c5 e014 	str.w	lr, [r5, #20]
	writeStrobe;
 8004574:	61a3      	str	r3, [r4, #24]
 8004576:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8004578:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 800457a:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 800457c:	61a2      	str	r2, [r4, #24]
	SET_DC;
 800457e:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004582:	f8c8 c018 	str.w	ip, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004586:	f8d5 c014 	ldr.w	ip, [r5, #20]
 800458a:	f8c5 c014 	str.w	ip, [r5, #20]
	writeStrobe;
 800458e:	61a3      	str	r3, [r4, #24]
 8004590:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8004592:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8004594:	61a9      	str	r1, [r5, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004596:	4938      	ldr	r1, [pc, #224]	; (8004678 <SSD1963_Init+0x308>)
	CLR_CS;
 8004598:	61a2      	str	r2, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800459a:	f8df c108 	ldr.w	ip, [pc, #264]	; 80046a4 <SSD1963_Init+0x334>
	SET_DC;
 800459e:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80045a2:	f8c8 1018 	str.w	r1, [r8, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80045a6:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80045aa:	f8d5 e014 	ldr.w	lr, [r5, #20]
 80045ae:	f8c5 e014 	str.w	lr, [r5, #20]
	writeStrobe;
 80045b2:	61a3      	str	r3, [r4, #24]
 80045b4:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80045b6:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80045b8:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 80045ba:	61a2      	str	r2, [r4, #24]
	SET_DC;
 80045bc:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80045c0:	f8c8 c018 	str.w	ip, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80045c4:	f8d5 c014 	ldr.w	ip, [r5, #20]
 80045c8:	f8c5 c014 	str.w	ip, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80045cc:	f44f 0c7f 	mov.w	ip, #16711680	; 0xff0000
	writeStrobe;
 80045d0:	61a3      	str	r3, [r4, #24]
 80045d2:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80045d4:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80045d6:	61a9      	str	r1, [r5, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80045d8:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	CLR_CS;
 80045dc:	61a2      	str	r2, [r4, #24]
	SET_DC;
 80045de:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80045e2:	f8c8 c018 	str.w	ip, [r8, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80045e6:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 80046a8 <SSD1963_Init+0x338>
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80045ea:	f8d5 e014 	ldr.w	lr, [r5, #20]
 80045ee:	f8c5 e014 	str.w	lr, [r5, #20]
	writeStrobe;
 80045f2:	61a3      	str	r3, [r4, #24]
 80045f4:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80045f6:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80045f8:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 80045fa:	61a2      	str	r2, [r4, #24]
	CLR_DC;
 80045fc:	f8c4 a018 	str.w	sl, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004600:	f8c8 c018 	str.w	ip, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004604:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8004608:	f8c5 c014 	str.w	ip, [r5, #20]
	writeStrobe;
 800460c:	61a3      	str	r3, [r4, #24]
 800460e:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8004610:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8004612:	61a9      	str	r1, [r5, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004614:	491b      	ldr	r1, [pc, #108]	; (8004684 <SSD1963_Init+0x314>)
	CLR_CS;
 8004616:	61a2      	str	r2, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004618:	f8df c090 	ldr.w	ip, [pc, #144]	; 80046ac <SSD1963_Init+0x33c>
	SET_DC;
 800461c:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004620:	f8c8 1018 	str.w	r1, [r8, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8004624:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004628:	f8d5 e014 	ldr.w	lr, [r5, #20]
 800462c:	f8c5 e014 	str.w	lr, [r5, #20]
	writeStrobe;
 8004630:	61a3      	str	r3, [r4, #24]
 8004632:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8004634:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8004636:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 8004638:	61a2      	str	r2, [r4, #24]
	CLR_DC;
 800463a:	f8c4 a018 	str.w	sl, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800463e:	f8c8 c018 	str.w	ip, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004642:	f8d5 e014 	ldr.w	lr, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004646:	f8df c068 	ldr.w	ip, [pc, #104]	; 80046b0 <SSD1963_Init+0x340>
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 800464a:	f8c5 e014 	str.w	lr, [r5, #20]
	writeStrobe;
 800464e:	61a3      	str	r3, [r4, #24]
 8004650:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8004652:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8004654:	61a9      	str	r1, [r5, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004656:	4908      	ldr	r1, [pc, #32]	; (8004678 <SSD1963_Init+0x308>)
	CLR_CS;
 8004658:	61a2      	str	r2, [r4, #24]
	SET_DC;
 800465a:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800465e:	f8c8 1018 	str.w	r1, [r8, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8004662:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004666:	f8d5 e014 	ldr.w	lr, [r5, #20]
 800466a:	f8c5 e014 	str.w	lr, [r5, #20]
 800466e:	e021      	b.n	80046b4 <SSD1963_Init+0x344>
 8004670:	40021400 	.word	0x40021400
 8004674:	40021000 	.word	0x40021000
 8004678:	00fe0001 	.word	0x00fe0001
 800467c:	00fb0004 	.word	0x00fb0004
 8004680:	001f00e0 	.word	0x001f00e0
 8004684:	00fc0003 	.word	0x00fc0003
 8004688:	40021800 	.word	0x40021800
 800468c:	00fd0002 	.word	0x00fd0002
 8004690:	001d00e2 	.word	0x001d00e2
 8004694:	00e2001d 	.word	0x00e2001d
 8004698:	004f00b0 	.word	0x004f00b0
 800469c:	00df0020 	.word	0x00df0020
 80046a0:	002000df 	.word	0x002000df
 80046a4:	00f0000f 	.word	0x00f0000f
 80046a8:	000f00f0 	.word	0x000f00f0
 80046ac:	001900e6 	.word	0x001900e6
 80046b0:	008a0075 	.word	0x008a0075
	writeStrobe;
 80046b4:	61a3      	str	r3, [r4, #24]
 80046b6:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80046b8:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80046ba:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 80046bc:	61a2      	str	r2, [r4, #24]
	SET_DC;
 80046be:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80046c2:	f8c8 c018 	str.w	ip, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80046c6:	f8d5 e014 	ldr.w	lr, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80046ca:	f8df c344 	ldr.w	ip, [pc, #836]	; 8004a10 <SSD1963_Init+0x6a0>
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80046ce:	f8c5 e014 	str.w	lr, [r5, #20]
	writeStrobe;
 80046d2:	61a3      	str	r3, [r4, #24]
 80046d4:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80046d6:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80046d8:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 80046da:	61a2      	str	r2, [r4, #24]
	SET_DC;
 80046dc:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80046e0:	f8c8 c018 	str.w	ip, [r8, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80046e4:	f8df c32c 	ldr.w	ip, [pc, #812]	; 8004a14 <SSD1963_Init+0x6a4>
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80046e8:	f8d5 e014 	ldr.w	lr, [r5, #20]
 80046ec:	f8c5 e014 	str.w	lr, [r5, #20]
	writeStrobe;
 80046f0:	61a3      	str	r3, [r4, #24]
 80046f2:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80046f4:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80046f6:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 80046f8:	61a2      	str	r2, [r4, #24]
	CLR_DC;
 80046fa:	f8c4 a018 	str.w	sl, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80046fe:	f8c8 c018 	str.w	ip, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004702:	f8d5 e014 	ldr.w	lr, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004706:	f8df c310 	ldr.w	ip, [pc, #784]	; 8004a18 <SSD1963_Init+0x6a8>
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 800470a:	f8c5 e014 	str.w	lr, [r5, #20]
	writeStrobe;
 800470e:	61a3      	str	r3, [r4, #24]
 8004710:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8004712:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8004714:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 8004716:	61a2      	str	r2, [r4, #24]
	SET_DC;
 8004718:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800471c:	f8c8 b018 	str.w	fp, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004720:	f8d5 e014 	ldr.w	lr, [r5, #20]
 8004724:	f8c5 e014 	str.w	lr, [r5, #20]
	writeStrobe;
 8004728:	61a3      	str	r3, [r4, #24]
 800472a:	61a7      	str	r7, [r4, #24]
	SET_CS;
 800472c:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 800472e:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 8004730:	61a2      	str	r2, [r4, #24]
	SET_DC;
 8004732:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004736:	f8c8 c018 	str.w	ip, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 800473a:	f8d5 e014 	ldr.w	lr, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800473e:	f8df c2dc 	ldr.w	ip, [pc, #732]	; 8004a1c <SSD1963_Init+0x6ac>
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004742:	f8c5 e014 	str.w	lr, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004746:	f44f 0e7f 	mov.w	lr, #16711680	; 0xff0000
	writeStrobe;
 800474a:	61a3      	str	r3, [r4, #24]
 800474c:	61a7      	str	r7, [r4, #24]
	SET_CS;
 800474e:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8004750:	61a9      	str	r1, [r5, #24]
 8004752:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	CLR_CS;
 8004756:	61a2      	str	r2, [r4, #24]
	SET_DC;
 8004758:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800475c:	f8c8 e018 	str.w	lr, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004760:	f8d5 e014 	ldr.w	lr, [r5, #20]
 8004764:	f8c5 e014 	str.w	lr, [r5, #20]
	writeStrobe;
 8004768:	61a3      	str	r3, [r4, #24]
 800476a:	61a7      	str	r7, [r4, #24]
	SET_CS;
 800476c:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 800476e:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 8004770:	61a2      	str	r2, [r4, #24]
	SET_DC;
 8004772:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004776:	f8c8 c018 	str.w	ip, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 800477a:	f8d5 e014 	ldr.w	lr, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800477e:	f8df c2a0 	ldr.w	ip, [pc, #672]	; 8004a20 <SSD1963_Init+0x6b0>
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004782:	f8c5 e014 	str.w	lr, [r5, #20]
	writeStrobe;
 8004786:	61a3      	str	r3, [r4, #24]
 8004788:	61a7      	str	r7, [r4, #24]
	SET_CS;
 800478a:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 800478c:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 800478e:	61a2      	str	r2, [r4, #24]
	SET_DC;
 8004790:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004794:	f8c8 b018 	str.w	fp, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004798:	f8d5 b014 	ldr.w	fp, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800479c:	f8df e284 	ldr.w	lr, [pc, #644]	; 8004a24 <SSD1963_Init+0x6b4>
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80047a0:	f8c5 b014 	str.w	fp, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80047a4:	f44f 0b7f 	mov.w	fp, #16711680	; 0xff0000
	writeStrobe;
 80047a8:	61a3      	str	r3, [r4, #24]
 80047aa:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80047ac:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80047ae:	61a9      	str	r1, [r5, #24]
 80047b0:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	CLR_CS;
 80047b4:	61a2      	str	r2, [r4, #24]
	SET_DC;
 80047b6:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80047ba:	f8c8 b018 	str.w	fp, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80047be:	f8d5 b014 	ldr.w	fp, [r5, #20]
 80047c2:	f8c5 b014 	str.w	fp, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80047c6:	f44f 0b7f 	mov.w	fp, #16711680	; 0xff0000
	writeStrobe;
 80047ca:	61a3      	str	r3, [r4, #24]
 80047cc:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80047ce:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80047d0:	61a9      	str	r1, [r5, #24]
 80047d2:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	CLR_CS;
 80047d6:	61a2      	str	r2, [r4, #24]
	SET_DC;
 80047d8:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80047dc:	f8c8 b018 	str.w	fp, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80047e0:	f8d5 b014 	ldr.w	fp, [r5, #20]
 80047e4:	f8c5 b014 	str.w	fp, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80047e8:	f44f 0b7f 	mov.w	fp, #16711680	; 0xff0000
	writeStrobe;
 80047ec:	61a3      	str	r3, [r4, #24]
 80047ee:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80047f0:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80047f2:	61a9      	str	r1, [r5, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80047f4:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	CLR_CS;
 80047f8:	61a2      	str	r2, [r4, #24]
	SET_DC;
 80047fa:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80047fe:	f8c8 b018 	str.w	fp, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004802:	f8d5 b014 	ldr.w	fp, [r5, #20]
 8004806:	f8c5 b014 	str.w	fp, [r5, #20]
	writeStrobe;
 800480a:	61a3      	str	r3, [r4, #24]
 800480c:	61a7      	str	r7, [r4, #24]
	SET_CS;
 800480e:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8004810:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 8004812:	61a2      	str	r2, [r4, #24]
	CLR_DC;
 8004814:	f8c4 a018 	str.w	sl, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004818:	f8c8 c018 	str.w	ip, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 800481c:	f8d5 b014 	ldr.w	fp, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004820:	f8df c204 	ldr.w	ip, [pc, #516]	; 8004a28 <SSD1963_Init+0x6b8>
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004824:	f8c5 b014 	str.w	fp, [r5, #20]
	writeStrobe;
 8004828:	61a3      	str	r3, [r4, #24]
 800482a:	61a7      	str	r7, [r4, #24]
	SET_CS;
 800482c:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 800482e:	61a9      	str	r1, [r5, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004830:	4973      	ldr	r1, [pc, #460]	; (8004a00 <SSD1963_Init+0x690>)
	CLR_CS;
 8004832:	61a2      	str	r2, [r4, #24]
	SET_DC;
 8004834:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004838:	f8c8 1018 	str.w	r1, [r8, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 800483c:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004840:	f8d5 b014 	ldr.w	fp, [r5, #20]
 8004844:	f8c5 b014 	str.w	fp, [r5, #20]
	writeStrobe;
 8004848:	61a3      	str	r3, [r4, #24]
 800484a:	61a7      	str	r7, [r4, #24]
	SET_CS;
 800484c:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 800484e:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 8004850:	61a2      	str	r2, [r4, #24]
	SET_DC;
 8004852:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004856:	f8c8 e018 	str.w	lr, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 800485a:	f8d5 b014 	ldr.w	fp, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800485e:	f8df e1cc 	ldr.w	lr, [pc, #460]	; 8004a2c <SSD1963_Init+0x6bc>
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004862:	f8c5 b014 	str.w	fp, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004866:	f44f 0b7f 	mov.w	fp, #16711680	; 0xff0000
	writeStrobe;
 800486a:	61a3      	str	r3, [r4, #24]
 800486c:	61a7      	str	r7, [r4, #24]
	SET_CS;
 800486e:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8004870:	61a9      	str	r1, [r5, #24]
 8004872:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	CLR_CS;
 8004876:	61a2      	str	r2, [r4, #24]
	SET_DC;
 8004878:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800487c:	f8c8 b018 	str.w	fp, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004880:	f8d5 b014 	ldr.w	fp, [r5, #20]
 8004884:	f8c5 b014 	str.w	fp, [r5, #20]
	writeStrobe;
 8004888:	61a3      	str	r3, [r4, #24]
 800488a:	61a7      	str	r7, [r4, #24]
	SET_CS;
 800488c:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 800488e:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 8004890:	61a2      	str	r2, [r4, #24]
	SET_DC;
 8004892:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004896:	f8c8 c018 	str.w	ip, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 800489a:	f8d5 b014 	ldr.w	fp, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800489e:	f8df c190 	ldr.w	ip, [pc, #400]	; 8004a30 <SSD1963_Init+0x6c0>
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80048a2:	f8c5 b014 	str.w	fp, [r5, #20]
	writeStrobe;
 80048a6:	61a3      	str	r3, [r4, #24]
 80048a8:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80048aa:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80048ac:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 80048ae:	61a2      	str	r2, [r4, #24]
	SET_DC;
 80048b0:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80048b4:	f8c8 e018 	str.w	lr, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80048b8:	f8d5 e014 	ldr.w	lr, [r5, #20]
 80048bc:	f8c5 e014 	str.w	lr, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80048c0:	f44f 0e7f 	mov.w	lr, #16711680	; 0xff0000
	writeStrobe;
 80048c4:	61a3      	str	r3, [r4, #24]
 80048c6:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80048c8:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80048ca:	61a9      	str	r1, [r5, #24]
 80048cc:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	CLR_CS;
 80048d0:	61a2      	str	r2, [r4, #24]
	SET_DC;
 80048d2:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80048d6:	f8c8 e018 	str.w	lr, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80048da:	f8d5 e014 	ldr.w	lr, [r5, #20]
 80048de:	f8c5 e014 	str.w	lr, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80048e2:	f44f 0e7f 	mov.w	lr, #16711680	; 0xff0000
	writeStrobe;
 80048e6:	61a3      	str	r3, [r4, #24]
 80048e8:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80048ea:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80048ec:	61a9      	str	r1, [r5, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80048ee:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	CLR_CS;
 80048f2:	61a2      	str	r2, [r4, #24]
	SET_DC;
 80048f4:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80048f8:	f8c8 e018 	str.w	lr, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80048fc:	f8d5 e014 	ldr.w	lr, [r5, #20]
 8004900:	f8c5 e014 	str.w	lr, [r5, #20]
	writeStrobe;
 8004904:	61a3      	str	r3, [r4, #24]
 8004906:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8004908:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 800490a:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 800490c:	61a2      	str	r2, [r4, #24]
 800490e:	9201      	str	r2, [sp, #4]
	CLR_DC;
 8004910:	f8c4 a018 	str.w	sl, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004914:	f8c8 c018 	str.w	ip, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004918:	f8d5 c014 	ldr.w	ip, [r5, #20]
 800491c:	f8c5 c014 	str.w	ip, [r5, #20]
	writeStrobe;
 8004920:	61a3      	str	r3, [r4, #24]
 8004922:	9300      	str	r3, [sp, #0]
 8004924:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8004926:	61a6      	str	r6, [r4, #24]
	HAL_Delay(10);
 8004928:	f7fc fafe 	bl	8000f28 <HAL_Delay>
	CLR_CS;
 800492c:	9a01      	ldr	r2, [sp, #4]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800492e:	4835      	ldr	r0, [pc, #212]	; (8004a04 <SSD1963_Init+0x694>)
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8004930:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8004934:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004938:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8004a34 <SSD1963_Init+0x6c4>
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 800493c:	61ab      	str	r3, [r5, #24]
	CLR_CS;
 800493e:	61a2      	str	r2, [r4, #24]
	CLR_DC;
 8004940:	f8c4 a018 	str.w	sl, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004944:	f8c8 0018 	str.w	r0, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004948:	6968      	ldr	r0, [r5, #20]
	writeStrobe;
 800494a:	9b00      	ldr	r3, [sp, #0]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 800494c:	6168      	str	r0, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800494e:	482e      	ldr	r0, [pc, #184]	; (8004a08 <SSD1963_Init+0x698>)
	writeStrobe;
 8004950:	61a3      	str	r3, [r4, #24]
 8004952:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8004954:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8004956:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 8004958:	61a2      	str	r2, [r4, #24]
	SET_DC;
 800495a:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800495e:	f8c8 0018 	str.w	r0, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004962:	f8d5 e014 	ldr.w	lr, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004966:	4829      	ldr	r0, [pc, #164]	; (8004a0c <SSD1963_Init+0x69c>)
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004968:	f8c5 e014 	str.w	lr, [r5, #20]
	writeStrobe;
 800496c:	61a3      	str	r3, [r4, #24]
 800496e:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8004970:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8004972:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 8004974:	61a2      	str	r2, [r4, #24]
	SET_DC;
 8004976:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800497a:	f8c8 c018 	str.w	ip, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 800497e:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8004982:	f8c5 c014 	str.w	ip, [r5, #20]
	writeStrobe;
 8004986:	61a3      	str	r3, [r4, #24]
 8004988:	61a7      	str	r7, [r4, #24]
	SET_CS;
 800498a:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 800498c:	61a9      	str	r1, [r5, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800498e:	491c      	ldr	r1, [pc, #112]	; (8004a00 <SSD1963_Init+0x690>)
	CLR_CS;
 8004990:	61a2      	str	r2, [r4, #24]
	SET_DC;
 8004992:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004996:	f8c8 1018 	str.w	r1, [r8, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 800499a:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 800499e:	f8d5 c014 	ldr.w	ip, [r5, #20]
 80049a2:	f8c5 c014 	str.w	ip, [r5, #20]
	writeStrobe;
 80049a6:	61a3      	str	r3, [r4, #24]
 80049a8:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80049aa:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80049ac:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 80049ae:	61a2      	str	r2, [r4, #24]
	SET_DC;
 80049b0:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80049b4:	f8c8 0018 	str.w	r0, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80049b8:	6968      	ldr	r0, [r5, #20]
 80049ba:	6168      	str	r0, [r5, #20]
	writeStrobe;
 80049bc:	61a3      	str	r3, [r4, #24]
 80049be:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80049c0:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80049c2:	61a9      	str	r1, [r5, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80049c4:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
	CLR_CS;
 80049c8:	61a2      	str	r2, [r4, #24]
	SET_DC;
 80049ca:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80049ce:	f8c8 1018 	str.w	r1, [r8, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80049d2:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80049d6:	6968      	ldr	r0, [r5, #20]
 80049d8:	6168      	str	r0, [r5, #20]
	writeStrobe;
 80049da:	61a3      	str	r3, [r4, #24]
 80049dc:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80049de:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80049e0:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 80049e2:	61a2      	str	r2, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80049e4:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
	SET_DC;
 80049e8:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80049ec:	f8c8 2018 	str.w	r2, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80049f0:	696a      	ldr	r2, [r5, #20]
 80049f2:	616a      	str	r2, [r5, #20]
	writeStrobe;
 80049f4:	61a3      	str	r3, [r4, #24]
 80049f6:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80049f8:	61a6      	str	r6, [r4, #24]
	SSD1963_WriteData(0x0040); 					// brightness level 0x00 - 0xFF
	SSD1963_WriteData(0x0000); 					// minimum brightness level =  0x00 - 0xFF
	SSD1963_WriteData(0x0000);					// brightness prescalar 0x0 - 0xF


}
 80049fa:	b003      	add	sp, #12
 80049fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a00:	00fe0001 	.word	0x00fe0001
 8004a04:	004100be 	.word	0x004100be
 8004a08:	00fb0004 	.word	0x00fb0004
 8004a0c:	00bf0040 	.word	0x00bf0040
 8004a10:	001200ed 	.word	0x001200ed
 8004a14:	004b00b4 	.word	0x004b00b4
 8004a18:	00eb0014 	.word	0x00eb0014
 8004a1c:	00d3002c 	.word	0x00d3002c
 8004a20:	004900b6 	.word	0x004900b6
 8004a24:	00e1001e 	.word	0x00e1001e
 8004a28:	00f3000c 	.word	0x00f3000c
 8004a2c:	00f90006 	.word	0x00f90006
 8004a30:	00d60029 	.word	0x00d60029
 8004a34:	003f00c0 	.word	0x003f00c0

08004a38 <Init_TOUCH_GPIO>:

I2C_HandleTypeDef hi2c;


void Init_TOUCH_GPIO(I2C_HandleTypeDef i2c_handle)
{
 8004a38:	b084      	sub	sp, #16
 8004a3a:	b508      	push	{r3, lr}
 8004a3c:	f10d 0c08 	add.w	ip, sp, #8
 8004a40:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	hi2c=i2c_handle;
 8004a44:	224c      	movs	r2, #76	; 0x4c
 8004a46:	4661      	mov	r1, ip
 8004a48:	4803      	ldr	r0, [pc, #12]	; (8004a58 <Init_TOUCH_GPIO+0x20>)
 8004a4a:	f007 fe61 	bl	800c710 <memcpy>
}
 8004a4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004a52:	b004      	add	sp, #16
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	200191c8 	.word	0x200191c8

08004a5c <STMPE610_Init>:

	return (((uint16_t)rxbuf[0]) << 8) | rxbuf[1];
}

void STMPE610_Init(void)
{
 8004a5c:	b570      	push	{r4, r5, r6, lr}
 8004a5e:	b084      	sub	sp, #16
	txbuf[0]=reg;
 8004a60:	f240 2303 	movw	r3, #515	; 0x203
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004a64:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 8004a68:	4d81      	ldr	r5, [pc, #516]	; (8004c70 <STMPE610_Init+0x214>)
	txbuf[0]=reg;
 8004a6a:	ac04      	add	r4, sp, #16
 8004a6c:	f824 3d04 	strh.w	r3, [r4, #-4]!
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004a70:	9600      	str	r6, [sp, #0]
 8004a72:	2302      	movs	r3, #2
 8004a74:	4622      	mov	r2, r4
 8004a76:	2188      	movs	r1, #136	; 0x88
 8004a78:	4628      	mov	r0, r5
 8004a7a:	f7fd f973 	bl	8001d64 <HAL_I2C_Master_Transmit>
 8004a7e:	2800      	cmp	r0, #0
 8004a80:	d1f6      	bne.n	8004a70 <STMPE610_Init+0x14>
	STMPE610_Write(STMPE610_REG_SYS_CTRL1, 0x02);		// Software chip reset
	HAL_Delay(10);
 8004a82:	200a      	movs	r0, #10
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004a84:	f44f 5640 	mov.w	r6, #12288	; 0x3000
	HAL_Delay(10);
 8004a88:	f7fc fa4e 	bl	8000f28 <HAL_Delay>
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004a8c:	4d78      	ldr	r5, [pc, #480]	; (8004c70 <STMPE610_Init+0x214>)
	txbuf[0]=reg;
 8004a8e:	f240 4304 	movw	r3, #1028	; 0x404
 8004a92:	f8ad 300c 	strh.w	r3, [sp, #12]
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004a96:	9600      	str	r6, [sp, #0]
 8004a98:	2302      	movs	r3, #2
 8004a9a:	4622      	mov	r2, r4
 8004a9c:	2188      	movs	r1, #136	; 0x88
 8004a9e:	4628      	mov	r0, r5
 8004aa0:	f7fd f960 	bl	8001d64 <HAL_I2C_Master_Transmit>
 8004aa4:	2800      	cmp	r0, #0
 8004aa6:	d1f6      	bne.n	8004a96 <STMPE610_Init+0x3a>
	txbuf[0]=reg;
 8004aa8:	f240 330a 	movw	r3, #778	; 0x30a
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004aac:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 8004ab0:	4d6f      	ldr	r5, [pc, #444]	; (8004c70 <STMPE610_Init+0x214>)
	txbuf[0]=reg;
 8004ab2:	f8ad 300c 	strh.w	r3, [sp, #12]
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004ab6:	9600      	str	r6, [sp, #0]
 8004ab8:	2302      	movs	r3, #2
 8004aba:	4622      	mov	r2, r4
 8004abc:	2188      	movs	r1, #136	; 0x88
 8004abe:	4628      	mov	r0, r5
 8004ac0:	f7fd f950 	bl	8001d64 <HAL_I2C_Master_Transmit>
 8004ac4:	2800      	cmp	r0, #0
 8004ac6:	d1f6      	bne.n	8004ab6 <STMPE610_Init+0x5a>
	txbuf[0]=reg;
 8004ac8:	f644 0320 	movw	r3, #18464	; 0x4820
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004acc:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 8004ad0:	4d67      	ldr	r5, [pc, #412]	; (8004c70 <STMPE610_Init+0x214>)
	txbuf[0]=reg;
 8004ad2:	f8ad 300c 	strh.w	r3, [sp, #12]
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004ad6:	9600      	str	r6, [sp, #0]
 8004ad8:	2302      	movs	r3, #2
 8004ada:	4622      	mov	r2, r4
 8004adc:	2188      	movs	r1, #136	; 0x88
 8004ade:	4628      	mov	r0, r5
 8004ae0:	f7fd f940 	bl	8001d64 <HAL_I2C_Master_Transmit>
 8004ae4:	2800      	cmp	r0, #0
 8004ae6:	d1f6      	bne.n	8004ad6 <STMPE610_Init+0x7a>
	
	STMPE610_Write(STMPE610_REG_SYS_CTRL2, 0x04);		// Temperature sensor clock off, GPIO clock off, touch clock on, ADC clock on
	STMPE610_Write(STMPE610_REG_INT_EN, 0x03);			// Interrupt on INT pin when there is a sample or a touch transition.
	//STMPE610_write_reg(STMPE610_REG_INT_EN, 0x00);						// Don't Interrupt on INT pin
	STMPE610_Write(STMPE610_REG_ADC_CTRL1, 0x48);		// ADC conversion time = 80 clock ticks, 12-bit ADC, internal voltage refernce
	HAL_Delay(2);
 8004ae8:	2002      	movs	r0, #2
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004aea:	f44f 5640 	mov.w	r6, #12288	; 0x3000
	HAL_Delay(2);
 8004aee:	f7fc fa1b 	bl	8000f28 <HAL_Delay>
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004af2:	4d5f      	ldr	r5, [pc, #380]	; (8004c70 <STMPE610_Init+0x214>)
	txbuf[0]=reg;
 8004af4:	f240 1321 	movw	r3, #289	; 0x121
 8004af8:	f8ad 300c 	strh.w	r3, [sp, #12]
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004afc:	9600      	str	r6, [sp, #0]
 8004afe:	2302      	movs	r3, #2
 8004b00:	4622      	mov	r2, r4
 8004b02:	2188      	movs	r1, #136	; 0x88
 8004b04:	4628      	mov	r0, r5
 8004b06:	f7fd f92d 	bl	8001d64 <HAL_I2C_Master_Transmit>
 8004b0a:	2800      	cmp	r0, #0
 8004b0c:	d1f6      	bne.n	8004afc <STMPE610_Init+0xa0>
	txbuf[0]=reg;
 8004b0e:	2317      	movs	r3, #23
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004b10:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 8004b14:	4d56      	ldr	r5, [pc, #344]	; (8004c70 <STMPE610_Init+0x214>)
	txbuf[0]=reg;
 8004b16:	f8ad 300c 	strh.w	r3, [sp, #12]
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004b1a:	9600      	str	r6, [sp, #0]
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	4622      	mov	r2, r4
 8004b20:	2188      	movs	r1, #136	; 0x88
 8004b22:	4628      	mov	r0, r5
 8004b24:	f7fd f91e 	bl	8001d64 <HAL_I2C_Master_Transmit>
 8004b28:	2800      	cmp	r0, #0
 8004b2a:	d1f6      	bne.n	8004b1a <STMPE610_Init+0xbe>
	txbuf[0]=reg;
 8004b2c:	f24a 3341 	movw	r3, #41793	; 0xa341
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004b30:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 8004b34:	4d4e      	ldr	r5, [pc, #312]	; (8004c70 <STMPE610_Init+0x214>)
	txbuf[0]=reg;
 8004b36:	f8ad 300c 	strh.w	r3, [sp, #12]
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004b3a:	9600      	str	r6, [sp, #0]
 8004b3c:	2302      	movs	r3, #2
 8004b3e:	4622      	mov	r2, r4
 8004b40:	2188      	movs	r1, #136	; 0x88
 8004b42:	4628      	mov	r0, r5
 8004b44:	f7fd f90e 	bl	8001d64 <HAL_I2C_Master_Transmit>
 8004b48:	2800      	cmp	r0, #0
 8004b4a:	d1f6      	bne.n	8004b3a <STMPE610_Init+0xde>
	txbuf[0]=reg;
 8004b4c:	f44f 73a5 	mov.w	r3, #330	; 0x14a
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004b50:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 8004b54:	4d46      	ldr	r5, [pc, #280]	; (8004c70 <STMPE610_Init+0x214>)
	txbuf[0]=reg;
 8004b56:	f8ad 300c 	strh.w	r3, [sp, #12]
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004b5a:	9600      	str	r6, [sp, #0]
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	4622      	mov	r2, r4
 8004b60:	2188      	movs	r1, #136	; 0x88
 8004b62:	4628      	mov	r0, r5
 8004b64:	f7fd f8fe 	bl	8001d64 <HAL_I2C_Master_Transmit>
 8004b68:	2800      	cmp	r0, #0
 8004b6a:	d1f6      	bne.n	8004b5a <STMPE610_Init+0xfe>
	txbuf[0]=reg;
 8004b6c:	f240 134b 	movw	r3, #331	; 0x14b
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004b70:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 8004b74:	4d3e      	ldr	r5, [pc, #248]	; (8004c70 <STMPE610_Init+0x214>)
	txbuf[0]=reg;
 8004b76:	f8ad 300c 	strh.w	r3, [sp, #12]
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004b7a:	9600      	str	r6, [sp, #0]
 8004b7c:	2302      	movs	r3, #2
 8004b7e:	4622      	mov	r2, r4
 8004b80:	2188      	movs	r1, #136	; 0x88
 8004b82:	4628      	mov	r0, r5
 8004b84:	f7fd f8ee 	bl	8001d64 <HAL_I2C_Master_Transmit>
 8004b88:	2800      	cmp	r0, #0
 8004b8a:	d1f6      	bne.n	8004b7a <STMPE610_Init+0x11e>
	txbuf[0]=reg;
 8004b8c:	234b      	movs	r3, #75	; 0x4b
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004b8e:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 8004b92:	4d37      	ldr	r5, [pc, #220]	; (8004c70 <STMPE610_Init+0x214>)
	txbuf[0]=reg;
 8004b94:	f8ad 300c 	strh.w	r3, [sp, #12]
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004b98:	9600      	str	r6, [sp, #0]
 8004b9a:	2302      	movs	r3, #2
 8004b9c:	4622      	mov	r2, r4
 8004b9e:	2188      	movs	r1, #136	; 0x88
 8004ba0:	4628      	mov	r0, r5
 8004ba2:	f7fd f8df 	bl	8001d64 <HAL_I2C_Master_Transmit>
 8004ba6:	2800      	cmp	r0, #0
 8004ba8:	d1f6      	bne.n	8004b98 <STMPE610_Init+0x13c>
	txbuf[0]=reg;
 8004baa:	f240 7356 	movw	r3, #1878	; 0x756
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004bae:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 8004bb2:	4d2f      	ldr	r5, [pc, #188]	; (8004c70 <STMPE610_Init+0x214>)
	txbuf[0]=reg;
 8004bb4:	f8ad 300c 	strh.w	r3, [sp, #12]
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004bb8:	9600      	str	r6, [sp, #0]
 8004bba:	2302      	movs	r3, #2
 8004bbc:	4622      	mov	r2, r4
 8004bbe:	2188      	movs	r1, #136	; 0x88
 8004bc0:	4628      	mov	r0, r5
 8004bc2:	f7fd f8cf 	bl	8001d64 <HAL_I2C_Master_Transmit>
 8004bc6:	2800      	cmp	r0, #0
 8004bc8:	d1f6      	bne.n	8004bb8 <STMPE610_Init+0x15c>
	txbuf[0]=reg;
 8004bca:	f44f 73ac 	mov.w	r3, #344	; 0x158
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004bce:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 8004bd2:	4d27      	ldr	r5, [pc, #156]	; (8004c70 <STMPE610_Init+0x214>)
	txbuf[0]=reg;
 8004bd4:	f8ad 300c 	strh.w	r3, [sp, #12]
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004bd8:	9600      	str	r6, [sp, #0]
 8004bda:	2302      	movs	r3, #2
 8004bdc:	4622      	mov	r2, r4
 8004bde:	2188      	movs	r1, #136	; 0x88
 8004be0:	4628      	mov	r0, r5
 8004be2:	f7fd f8bf 	bl	8001d64 <HAL_I2C_Master_Transmit>
 8004be6:	2800      	cmp	r0, #0
 8004be8:	d1f6      	bne.n	8004bd8 <STMPE610_Init+0x17c>
	txbuf[0]=reg;
 8004bea:	f44f 5341 	mov.w	r3, #12352	; 0x3040
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004bee:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 8004bf2:	4d1f      	ldr	r5, [pc, #124]	; (8004c70 <STMPE610_Init+0x214>)
	txbuf[0]=reg;
 8004bf4:	f8ad 300c 	strh.w	r3, [sp, #12]
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004bf8:	9600      	str	r6, [sp, #0]
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	4622      	mov	r2, r4
 8004bfe:	2188      	movs	r1, #136	; 0x88
 8004c00:	4628      	mov	r0, r5
 8004c02:	f7fd f8af 	bl	8001d64 <HAL_I2C_Master_Transmit>
 8004c06:	2800      	cmp	r0, #0
 8004c08:	d1f6      	bne.n	8004bf8 <STMPE610_Init+0x19c>
	txbuf[0]=reg;
 8004c0a:	f44f 5345 	mov.w	r3, #12608	; 0x3140
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004c0e:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 8004c12:	4d17      	ldr	r5, [pc, #92]	; (8004c70 <STMPE610_Init+0x214>)
	txbuf[0]=reg;
 8004c14:	f8ad 300c 	strh.w	r3, [sp, #12]
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004c18:	9600      	str	r6, [sp, #0]
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	4622      	mov	r2, r4
 8004c1e:	2188      	movs	r1, #136	; 0x88
 8004c20:	4628      	mov	r0, r5
 8004c22:	f7fd f89f 	bl	8001d64 <HAL_I2C_Master_Transmit>
 8004c26:	2800      	cmp	r0, #0
 8004c28:	d1f6      	bne.n	8004c18 <STMPE610_Init+0x1bc>
	txbuf[0]=reg;
 8004c2a:	f64f 730b 	movw	r3, #65291	; 0xff0b
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004c2e:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 8004c32:	4d0f      	ldr	r5, [pc, #60]	; (8004c70 <STMPE610_Init+0x214>)
	txbuf[0]=reg;
 8004c34:	f8ad 300c 	strh.w	r3, [sp, #12]
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004c38:	9600      	str	r6, [sp, #0]
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	4622      	mov	r2, r4
 8004c3e:	2188      	movs	r1, #136	; 0x88
 8004c40:	4628      	mov	r0, r5
 8004c42:	f7fd f88f 	bl	8001d64 <HAL_I2C_Master_Transmit>
 8004c46:	2800      	cmp	r0, #0
 8004c48:	d1f6      	bne.n	8004c38 <STMPE610_Init+0x1dc>
	txbuf[0]=reg;
 8004c4a:	f240 1309 	movw	r3, #265	; 0x109
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004c4e:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 8004c52:	4d07      	ldr	r5, [pc, #28]	; (8004c70 <STMPE610_Init+0x214>)
	txbuf[0]=reg;
 8004c54:	f8ad 300c 	strh.w	r3, [sp, #12]
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004c58:	9600      	str	r6, [sp, #0]
 8004c5a:	2302      	movs	r3, #2
 8004c5c:	4622      	mov	r2, r4
 8004c5e:	2188      	movs	r1, #136	; 0x88
 8004c60:	4628      	mov	r0, r5
 8004c62:	f7fd f87f 	bl	8001d64 <HAL_I2C_Master_Transmit>
 8004c66:	2800      	cmp	r0, #0
 8004c68:	d1f6      	bne.n	8004c58 <STMPE610_Init+0x1fc>
	//STMPE610_write_reg(STMPE610_REG_TSC_CTRL, 0x32);						// X&Y, 16 reading window
	//STMPE610_write_reg(TMPE610_REG_TSC_CTRL, 0x33);						// X&Y, 16 reading window, TSC enable

	STMPE610_Write(STMPE610_REG_INT_STA, 0xFF);		// Clear all interrupts
	STMPE610_Write(STMPE610_REG_INT_CTRL, 0x01);		// Level interrupt, enable interrupts
}
 8004c6a:	b004      	add	sp, #16
 8004c6c:	bd70      	pop	{r4, r5, r6, pc}
 8004c6e:	bf00      	nop
 8004c70:	200191c8 	.word	0x200191c8

08004c74 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8004c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c78:	460e      	mov	r6, r1
 8004c7a:	b082      	sub	sp, #8
	VL53L0X_DeviceModes *pDeviceMode)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8004c7c:	7c03      	ldrb	r3, [r0, #16]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8004c7e:	21f8      	movs	r1, #248	; 0xf8
 8004c80:	f10d 0202 	add.w	r2, sp, #2
{
 8004c84:	4605      	mov	r5, r0
	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8004c86:	7033      	strb	r3, [r6, #0]
	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8004c88:	f000 fbfe 	bl	8005488 <VL53L0X_RdWord>
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8004c8c:	b110      	cbz	r0, 8004c94 <VL53L0X_GetDeviceParameters+0x20>
}
 8004c8e:	b002      	add	sp, #8
 8004c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		Status = VL53L0X_RdDWord(Dev,
 8004c94:	2104      	movs	r1, #4
 8004c96:	4628      	mov	r0, r5
 8004c98:	eb0d 0201 	add.w	r2, sp, r1
 8004c9c:	f000 fc22 	bl	80054e4 <VL53L0X_RdDWord>
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004ca0:	2800      	cmp	r0, #0
 8004ca2:	d1f4      	bne.n	8004c8e <VL53L0X_GetDeviceParameters+0x1a>
		if (osc_calibrate_val != 0) {
 8004ca4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8004ca8:	bb42      	cbnz	r2, 8004cfc <VL53L0X_GetDeviceParameters+0x88>
 8004caa:	68b3      	ldr	r3, [r6, #8]
		pDeviceParameters->XTalkCompensationEnable = 0;
 8004cac:	2000      	movs	r0, #0
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8004cae:	61ab      	str	r3, [r5, #24]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8004cb0:	aa01      	add	r2, sp, #4
 8004cb2:	2120      	movs	r1, #32
		pDeviceParameters->XTalkCompensationEnable = 0;
 8004cb4:	7330      	strb	r0, [r6, #12]
	Status = VL53L0X_RdWord(Dev,
 8004cb6:	4628      	mov	r0, r5
 8004cb8:	f000 fbe6 	bl	8005488 <VL53L0X_RdWord>
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8004cbc:	2800      	cmp	r0, #0
 8004cbe:	d1e6      	bne.n	8004c8e <VL53L0X_GetDeviceParameters+0x1a>
		if (Value == 0) {
 8004cc0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d05e      	beq.n	8004d86 <VL53L0X_GetDeviceParameters+0x112>
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8004cc8:	00db      	lsls	r3, r3, #3
			*pXTalkCompensationRateMegaCps = TempFix1616;
			VL53L0X_SETPARAMETERFIELD(Dev,
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8004cca:	2201      	movs	r2, #1
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8004ccc:	6133      	str	r3, [r6, #16]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8004cce:	622b      	str	r3, [r5, #32]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8004cd0:	772a      	strb	r2, [r5, #28]
	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8004cd2:	f106 0114 	add.w	r1, r6, #20
 8004cd6:	4628      	mov	r0, r5
 8004cd8:	f000 f98c 	bl	8004ff4 <VL53L0X_get_offset_calibration_data_micro_meter>
	if (Status == VL53L0X_ERROR_NONE) {
 8004cdc:	2800      	cmp	r0, #0
 8004cde:	d1d6      	bne.n	8004c8e <VL53L0X_GetDeviceParameters+0x1a>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004ce0:	4604      	mov	r4, r0
 8004ce2:	f106 0718 	add.w	r7, r6, #24
			} else {
				*pLimitCheckValue = TempFix1616;
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8004ce6:	f04f 0801 	mov.w	r8, #1
	switch (LimitCheckId) {
 8004cea:	b2a3      	uxth	r3, r4
 8004cec:	3b01      	subs	r3, #1
 8004cee:	2b04      	cmp	r3, #4
 8004cf0:	d847      	bhi.n	8004d82 <VL53L0X_GetDeviceParameters+0x10e>
 8004cf2:	e8df f003 	tbb	[pc, r3]
 8004cf6:	2b2d      	.short	0x2b2d
 8004cf8:	4c08      	.short	0x4c08
 8004cfa:	4c          	.byte	0x4c
 8004cfb:	00          	.byte	0x00
				IMPeriodMilliSeconds / osc_calibrate_val;
 8004cfc:	9b01      	ldr	r3, [sp, #4]
 8004cfe:	fbb3 f3f2 	udiv	r3, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8004d02:	60b3      	str	r3, [r6, #8]
 8004d04:	e7d2      	b.n	8004cac <VL53L0X_GetDeviceParameters+0x38>
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004d06:	6c29      	ldr	r1, [r5, #64]	; 0x40
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8004d08:	eb06 0284 	add.w	r2, r6, r4, lsl #2
 8004d0c:	192b      	adds	r3, r5, r4
 8004d0e:	6251      	str	r1, [r2, #36]	; 0x24
 8004d10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004d14:	3401      	adds	r4, #1
		*pLimitCheckEnable = Temp8;
 8004d16:	f807 3b01 	strb.w	r3, [r7], #1
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004d1a:	2c06      	cmp	r4, #6
 8004d1c:	d1e5      	bne.n	8004cea <VL53L0X_GetDeviceParameters+0x76>
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8004d1e:	aa01      	add	r2, sp, #4
 8004d20:	2101      	movs	r1, #1
 8004d22:	4628      	mov	r0, r5
 8004d24:	f000 fb8c 	bl	8005440 <VL53L0X_RdByte>
	if (Status == VL53L0X_ERROR_NONE) {
 8004d28:	2800      	cmp	r0, #0
 8004d2a:	d1b0      	bne.n	8004c8e <VL53L0X_GetDeviceParameters+0x1a>
		PALDevDataSet(Dev, SequenceConfig, data);
 8004d2c:	f89d 2004 	ldrb.w	r2, [sp, #4]
	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8004d30:	1d31      	adds	r1, r6, #4
 8004d32:	4628      	mov	r0, r5
		if (data & (0x01 << 7))
			*pWrapAroundCheckEnable = 0x01;
		else
			*pWrapAroundCheckEnable = 0x00;
 8004d34:	09d3      	lsrs	r3, r2, #7
		PALDevDataSet(Dev, SequenceConfig, data);
 8004d36:	f885 2130 	strb.w	r2, [r5, #304]	; 0x130
 8004d3a:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
	}
	if (Status == VL53L0X_ERROR_NONE) {
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8004d3e:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8004d42:	f000 fa4b 	bl	80051dc <VL53L0X_get_measurement_timing_budget_micro_seconds>
}
 8004d46:	b002      	add	sp, #8
 8004d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004d4c:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8004d4e:	e7db      	b.n	8004d08 <VL53L0X_GetDeviceParameters+0x94>
		Status = VL53L0X_RdWord(Dev,
 8004d50:	aa01      	add	r2, sp, #4
 8004d52:	2144      	movs	r1, #68	; 0x44
 8004d54:	4628      	mov	r0, r5
 8004d56:	f000 fb97 	bl	8005488 <VL53L0X_RdWord>
		if (Status == VL53L0X_ERROR_NONE)
 8004d5a:	2800      	cmp	r0, #0
 8004d5c:	d197      	bne.n	8004c8e <VL53L0X_GetDeviceParameters+0x1a>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8004d5e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
			if (TempFix1616 == 0) {
 8004d62:	0258      	lsls	r0, r3, #9
 8004d64:	b9fb      	cbnz	r3, 8004da6 <VL53L0X_GetDeviceParameters+0x132>
 8004d66:	00a2      	lsls	r2, r4, #2
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8004d68:	4603      	mov	r3, r0
 8004d6a:	eb05 0c02 	add.w	ip, r5, r2
 8004d6e:	eba4 0e02 	sub.w	lr, r4, r2
				*pLimitCheckValue = TempFix1616;
 8004d72:	4432      	add	r2, r6
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8004d74:	f8dc 1034 	ldr.w	r1, [ip, #52]	; 0x34
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8004d78:	44f4      	add	ip, lr
				*pLimitCheckValue = TempFix1616;
 8004d7a:	6251      	str	r1, [r2, #36]	; 0x24
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8004d7c:	f88c 0028 	strb.w	r0, [ip, #40]	; 0x28
 8004d80:	e7c8      	b.n	8004d14 <VL53L0X_GetDeviceParameters+0xa0>
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004d82:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8004d84:	e7c0      	b.n	8004d08 <VL53L0X_GetDeviceParameters+0x94>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8004d86:	6a2a      	ldr	r2, [r5, #32]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8004d88:	6132      	str	r2, [r6, #16]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8004d8a:	772b      	strb	r3, [r5, #28]
 8004d8c:	e7a1      	b.n	8004cd2 <VL53L0X_GetDeviceParameters+0x5e>
		Status = VL53L0X_RdWord(Dev,
 8004d8e:	aa01      	add	r2, sp, #4
 8004d90:	2164      	movs	r1, #100	; 0x64
 8004d92:	4628      	mov	r0, r5
 8004d94:	f000 fb78 	bl	8005488 <VL53L0X_RdWord>
		if (Status == VL53L0X_ERROR_NONE)
 8004d98:	2800      	cmp	r0, #0
 8004d9a:	f47f af78 	bne.w	8004c8e <VL53L0X_GetDeviceParameters+0x1a>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8004d9e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8004da2:	0249      	lsls	r1, r1, #9
 8004da4:	e7b0      	b.n	8004d08 <VL53L0X_GetDeviceParameters+0x94>
 8004da6:	00a2      	lsls	r2, r4, #2
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8004da8:	2301      	movs	r3, #1
 8004daa:	18a9      	adds	r1, r5, r2
				*pLimitCheckValue = TempFix1616;
 8004dac:	eb06 0c02 	add.w	ip, r6, r2
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8004db0:	1aa2      	subs	r2, r4, r2
				*pLimitCheckValue = TempFix1616;
 8004db2:	f8cc 0024 	str.w	r0, [ip, #36]	; 0x24
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8004db6:	440a      	add	r2, r1
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8004db8:	6348      	str	r0, [r1, #52]	; 0x34
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8004dba:	f882 8028 	strb.w	r8, [r2, #40]	; 0x28
 8004dbe:	e7a9      	b.n	8004d14 <VL53L0X_GetDeviceParameters+0xa0>

08004dc0 <VL53L0X_DataInit>:
{
 8004dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8004dc2:	2200      	movs	r2, #0
{
 8004dc4:	b093      	sub	sp, #76	; 0x4c
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8004dc6:	2188      	movs	r1, #136	; 0x88
{
 8004dc8:	4605      	mov	r5, r0
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8004dca:	f000 fac1 	bl	8005350 <VL53L0X_WrByte>
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8004dce:	2300      	movs	r3, #0
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8004dd0:	4871      	ldr	r0, [pc, #452]	; (8004f98 <VL53L0X_DataInit+0x1d8>)
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8004dd2:	4972      	ldr	r1, [pc, #456]	; (8004f9c <VL53L0X_DataInit+0x1dc>)
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8004dd4:	4a72      	ldr	r2, [pc, #456]	; (8004fa0 <VL53L0X_DataInit+0x1e0>)
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8004dd6:	f8c5 0152 	str.w	r0, [r5, #338]	; 0x152
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8004dda:	4628      	mov	r0, r5
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8004ddc:	f8c5 1158 	str.w	r1, [r5, #344]	; 0x158
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8004de0:	a902      	add	r1, sp, #8
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8004de2:	f8c5 20d4 	str.w	r2, [r5, #212]	; 0xd4
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8004de6:	f885 30f0 	strb.w	r3, [r5, #240]	; 0xf0
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8004dea:	622b      	str	r3, [r5, #32]
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8004dec:	f7ff ff42 	bl	8004c74 <VL53L0X_GetDeviceParameters>
	if (Status == VL53L0X_ERROR_NONE) {
 8004df0:	4604      	mov	r4, r0
 8004df2:	b970      	cbnz	r0, 8004e12 <VL53L0X_DataInit+0x52>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8004df4:	ae02      	add	r6, sp, #8
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8004df6:	f8ad 0008 	strh.w	r0, [sp, #8]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8004dfa:	f105 0710 	add.w	r7, r5, #16
 8004dfe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004e00:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8004e02:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004e04:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8004e06:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004e08:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8004e0a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004e0e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8004e12:	f44f 6320 	mov.w	r3, #2560	; 0xa00
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8004e16:	2601      	movs	r6, #1
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8004e18:	4962      	ldr	r1, [pc, #392]	; (8004fa4 <VL53L0X_DataInit+0x1e4>)
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8004e1a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8004e1e:	f8a5 313c 	strh.w	r3, [r5, #316]	; 0x13c
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004e22:	4628      	mov	r0, r5
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8004e24:	f8c5 1134 	str.w	r1, [r5, #308]	; 0x134
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004e28:	2180      	movs	r1, #128	; 0x80
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8004e2a:	f8a5 2138 	strh.w	r2, [r5, #312]	; 0x138
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004e2e:	4632      	mov	r2, r6
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8004e30:	f885 6150 	strb.w	r6, [r5, #336]	; 0x150
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004e34:	f000 fa8c 	bl	8005350 <VL53L0X_WrByte>
 8004e38:	4607      	mov	r7, r0
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004e3a:	4632      	mov	r2, r6
 8004e3c:	21ff      	movs	r1, #255	; 0xff
 8004e3e:	4628      	mov	r0, r5
 8004e40:	f000 fa86 	bl	8005350 <VL53L0X_WrByte>
 8004e44:	4307      	orrs	r7, r0
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004e46:	2200      	movs	r2, #0
 8004e48:	4628      	mov	r0, r5
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004e4a:	433c      	orrs	r4, r7
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004e4c:	4611      	mov	r1, r2
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004e4e:	b264      	sxtb	r4, r4
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004e50:	f000 fa7e 	bl	8005350 <VL53L0X_WrByte>
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8004e54:	f10d 0207 	add.w	r2, sp, #7
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004e58:	4304      	orrs	r4, r0
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8004e5a:	2191      	movs	r1, #145	; 0x91
 8004e5c:	4628      	mov	r0, r5
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004e5e:	b264      	sxtb	r4, r4
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8004e60:	f000 faee 	bl	8005440 <VL53L0X_RdByte>
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8004e64:	f89d 3007 	ldrb.w	r3, [sp, #7]
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8004e68:	4304      	orrs	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8004e6a:	4632      	mov	r2, r6
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8004e6c:	f885 313a 	strb.w	r3, [r5, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8004e70:	2100      	movs	r1, #0
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8004e72:	b264      	sxtb	r4, r4
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8004e74:	4628      	mov	r0, r5
 8004e76:	f000 fa6b 	bl	8005350 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004e7a:	2200      	movs	r2, #0
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8004e7c:	4304      	orrs	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004e7e:	21ff      	movs	r1, #255	; 0xff
 8004e80:	4628      	mov	r0, r5
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8004e82:	b264      	sxtb	r4, r4
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004e84:	f000 fa64 	bl	8005350 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8004e88:	2200      	movs	r2, #0
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004e8a:	4304      	orrs	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8004e8c:	2180      	movs	r1, #128	; 0x80
 8004e8e:	4628      	mov	r0, r5
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004e90:	b264      	sxtb	r4, r4
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8004e92:	f000 fa5d 	bl	8005350 <VL53L0X_WrByte>
 8004e96:	4320      	orrs	r0, r4
 8004e98:	b240      	sxtb	r0, r0
		if (Status == VL53L0X_ERROR_NONE)
 8004e9a:	2800      	cmp	r0, #0
 8004e9c:	d150      	bne.n	8004f40 <VL53L0X_DataInit+0x180>
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004e9e:	4604      	mov	r4, r0
		switch (LimitCheckId) {
 8004ea0:	b2a3      	uxth	r3, r4
 8004ea2:	1c67      	adds	r7, r4, #1
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	2b04      	cmp	r3, #4
 8004ea8:	d804      	bhi.n	8004eb4 <VL53L0X_DataInit+0xf4>
 8004eaa:	e8df f003 	tbb	[pc, r3]
 8004eae:	4b54      	.short	0x4b54
 8004eb0:	660c      	.short	0x660c
 8004eb2:	6d          	.byte	0x6d
 8004eb3:	00          	.byte	0x00
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004eb4:	19eb      	adds	r3, r5, r7
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004eb6:	2f06      	cmp	r7, #6
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004eb8:	f885 6028 	strb.w	r6, [r5, #40]	; 0x28
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004ebc:	f883 6027 	strb.w	r6, [r3, #39]	; 0x27
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004ec0:	d008      	beq.n	8004ed4 <VL53L0X_DataInit+0x114>
 8004ec2:	463c      	mov	r4, r7
 8004ec4:	e7ec      	b.n	8004ea0 <VL53L0X_DataInit+0xe0>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004ec6:	19eb      	adds	r3, r5, r7
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004ec8:	2f06      	cmp	r7, #6
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004eca:	f885 602b 	strb.w	r6, [r5, #43]	; 0x2b
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004ece:	f883 6027 	strb.w	r6, [r3, #39]	; 0x27
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004ed2:	d1f6      	bne.n	8004ec2 <VL53L0X_DataInit+0x102>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004ed4:	2000      	movs	r0, #0
			Status = VL53L0X_UpdateByte(Dev,
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	22fe      	movs	r2, #254	; 0xfe
 8004eda:	2160      	movs	r1, #96	; 0x60
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004edc:	8568      	strh	r0, [r5, #42]	; 0x2a
			Status = VL53L0X_UpdateByte(Dev,
 8004ede:	4628      	mov	r0, r5
 8004ee0:	f000 fa6c 	bl	80053bc <VL53L0X_UpdateByte>
	if (Status == VL53L0X_ERROR_NONE) {
 8004ee4:	bb60      	cbnz	r0, 8004f40 <VL53L0X_DataInit+0x180>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004ee6:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
			Status = VL53L0X_UpdateByte(Dev,
 8004eea:	2310      	movs	r3, #16
 8004eec:	22ef      	movs	r2, #239	; 0xef
 8004eee:	2160      	movs	r1, #96	; 0x60
 8004ef0:	4628      	mov	r0, r5
 8004ef2:	f000 fa63 	bl	80053bc <VL53L0X_UpdateByte>
	if (Status == VL53L0X_ERROR_NONE) {
 8004ef6:	bb18      	cbnz	r0, 8004f40 <VL53L0X_DataInit+0x180>
 8004ef8:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
	if (Temp8 == 0) { /* disabled write only internal value */
 8004efc:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004f00:	f885 002d 	strb.w	r0, [r5, #45]	; 0x2d
 8004f04:	636a      	str	r2, [r5, #52]	; 0x34
	if (Temp8 == 0) { /* disabled write only internal value */
 8004f06:	b12b      	cbz	r3, 8004f14 <VL53L0X_DataInit+0x154>
			Status = VL53L0X_WrWord(Dev,
 8004f08:	2220      	movs	r2, #32
 8004f0a:	2144      	movs	r1, #68	; 0x44
 8004f0c:	4628      	mov	r0, r5
 8004f0e:	f000 fa39 	bl	8005384 <VL53L0X_WrWord>
		if (Status == VL53L0X_ERROR_NONE) {
 8004f12:	b9a8      	cbnz	r0, 8004f40 <VL53L0X_DataInit+0x180>
		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8004f14:	23ff      	movs	r3, #255	; 0xff
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004f16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004f1a:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8004f1e:	2000      	movs	r0, #0
 8004f20:	63a9      	str	r1, [r5, #56]	; 0x38
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004f22:	2101      	movs	r1, #1
 8004f24:	63ea      	str	r2, [r5, #60]	; 0x3c
 8004f26:	461a      	mov	r2, r3
 8004f28:	6428      	str	r0, [r5, #64]	; 0x40
 8004f2a:	4628      	mov	r0, r5
		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8004f2c:	f885 3130 	strb.w	r3, [r5, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004f30:	f000 fa0e 	bl	8005350 <VL53L0X_WrByte>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8004f34:	2301      	movs	r3, #1
 8004f36:	f885 3132 	strb.w	r3, [r5, #306]	; 0x132
	if (Status == VL53L0X_ERROR_NONE)
 8004f3a:	b908      	cbnz	r0, 8004f40 <VL53L0X_DataInit+0x180>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8004f3c:	f885 0115 	strb.w	r0, [r5, #277]	; 0x115
}
 8004f40:	b013      	add	sp, #76	; 0x4c
 8004f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004f44:	19eb      	adds	r3, r5, r7
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004f46:	2f06      	cmp	r7, #6
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004f48:	f885 602a 	strb.w	r6, [r5, #42]	; 0x2a
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004f4c:	f883 6027 	strb.w	r6, [r3, #39]	; 0x27
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004f50:	d0c0      	beq.n	8004ed4 <VL53L0X_DataInit+0x114>
 8004f52:	463c      	mov	r4, r7
 8004f54:	e7a4      	b.n	8004ea0 <VL53L0X_DataInit+0xe0>
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004f56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
			Status = VL53L0X_WrWord(Dev,
 8004f5a:	2144      	movs	r1, #68	; 0x44
 8004f5c:	4628      	mov	r0, r5
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8004f5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
			Status = VL53L0X_WrWord(Dev,
 8004f60:	f3c2 224f 	ubfx	r2, r2, #9, #16
 8004f64:	f000 fa0e 	bl	8005384 <VL53L0X_WrWord>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004f68:	192b      	adds	r3, r5, r4
 8004f6a:	463c      	mov	r4, r7
	if (Status == VL53L0X_ERROR_NONE) {
 8004f6c:	2800      	cmp	r0, #0
 8004f6e:	d1e7      	bne.n	8004f40 <VL53L0X_DataInit+0x180>
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004f70:	2f06      	cmp	r7, #6
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004f72:	f883 6028 	strb.w	r6, [r3, #40]	; 0x28
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004f76:	d193      	bne.n	8004ea0 <VL53L0X_DataInit+0xe0>
 8004f78:	e7ac      	b.n	8004ed4 <VL53L0X_DataInit+0x114>
			Status = VL53L0X_UpdateByte(Dev,
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	22fe      	movs	r2, #254	; 0xfe
 8004f7e:	2160      	movs	r1, #96	; 0x60
 8004f80:	4628      	mov	r0, r5
 8004f82:	f000 fa1b 	bl	80053bc <VL53L0X_UpdateByte>
 8004f86:	e7ef      	b.n	8004f68 <VL53L0X_DataInit+0x1a8>
			Status = VL53L0X_UpdateByte(Dev,
 8004f88:	2300      	movs	r3, #0
 8004f8a:	22ef      	movs	r2, #239	; 0xef
 8004f8c:	2160      	movs	r1, #96	; 0x60
 8004f8e:	4628      	mov	r0, r5
 8004f90:	f000 fa14 	bl	80053bc <VL53L0X_UpdateByte>
 8004f94:	e7e8      	b.n	8004f68 <VL53L0X_DataInit+0x1a8>
 8004f96:	bf00      	nop
 8004f98:	019003e8 	.word	0x019003e8
 8004f9c:	00016b85 	.word	0x00016b85
 8004fa0:	000970a4 	.word	0x000970a4
 8004fa4:	03840064 	.word	0x03840064

08004fa8 <VL53L0X_GetVcselPulsePeriod>:
	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8004fa8:	f000 b8fa 	b.w	80051a0 <VL53L0X_get_vcsel_pulse_period>

08004fac <VL53L0X_GetSequenceStepEnables>:
{
 8004fac:	b530      	push	{r4, r5, lr}
 8004fae:	b083      	sub	sp, #12
	uint8_t SequenceConfig = 0;
 8004fb0:	2300      	movs	r3, #0
{
 8004fb2:	460c      	mov	r4, r1
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004fb4:	2101      	movs	r1, #1
	uint8_t SequenceConfig = 0;
 8004fb6:	aa02      	add	r2, sp, #8
 8004fb8:	f802 3d01 	strb.w	r3, [r2, #-1]!
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004fbc:	f000 fa40 	bl	8005440 <VL53L0X_RdByte>
	if (Status == VL53L0X_ERROR_NONE) {
 8004fc0:	b9a8      	cbnz	r0, 8004fee <VL53L0X_GetSequenceStepEnables+0x42>
		Status = sequence_step_enabled(Dev,
 8004fc2:	f89d 3007 	ldrb.w	r3, [sp, #7]
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	f3c3 1500 	ubfx	r5, r3, #4, #1
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8004fcc:	f3c3 0180 	ubfx	r1, r3, #2, #1
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8004fd0:	f365 0207 	bfi	r2, r5, #0, #8
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8004fd4:	f3c3 05c0 	ubfx	r5, r3, #3, #1
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8004fd8:	f361 220f 	bfi	r2, r1, #8, #8
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8004fdc:	f3c3 1180 	ubfx	r1, r3, #6, #1
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8004fe0:	09db      	lsrs	r3, r3, #7
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8004fe2:	f365 4217 	bfi	r2, r5, #16, #8
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8004fe6:	7123      	strb	r3, [r4, #4]
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8004fe8:	f361 621f 	bfi	r2, r1, #24, #8
 8004fec:	6022      	str	r2, [r4, #0]
}
 8004fee:	b003      	add	sp, #12
 8004ff0:	bd30      	pop	{r4, r5, pc}
 8004ff2:	bf00      	nop

08004ff4 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8004ff4:	b510      	push	{r4, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	460c      	mov	r4, r1
	int16_t cMaxOffset = 2047;
	int16_t cOffsetRange = 4096;

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8004ffa:	2128      	movs	r1, #40	; 0x28
 8004ffc:	f10d 0206 	add.w	r2, sp, #6
 8005000:	f000 fa42 	bl	8005488 <VL53L0X_RdWord>
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8005004:	b950      	cbnz	r0, 800501c <VL53L0X_get_offset_calibration_data_micro_meter+0x28>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8005006:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800500a:	f3c3 030b 	ubfx	r3, r3, #0, #12

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800500e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005012:	d205      	bcs.n	8005020 <VL53L0X_get_offset_calibration_data_micro_meter+0x2c>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
					* 250;
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8005014:	22fa      	movs	r2, #250	; 0xfa
 8005016:	fb02 f303 	mul.w	r3, r2, r3
			*pOffsetCalibrationDataMicroMeter =
 800501a:	6023      	str	r3, [r4, #0]

	}

	return Status;
}
 800501c:	b002      	add	sp, #8
 800501e:	bd10      	pop	{r4, pc}
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8005020:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
					* 250;
 8005024:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8005028:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800502c:	005b      	lsls	r3, r3, #1
			*pOffsetCalibrationDataMicroMeter =
 800502e:	6023      	str	r3, [r4, #0]
}
 8005030:	b002      	add	sp, #8
 8005032:	bd10      	pop	{r4, pc}

08005034 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8005034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8005038:	2902      	cmp	r1, #2
{
 800503a:	b084      	sub	sp, #16
	uint8_t EncodedTimeOutByte = 0;
 800503c:	f04f 0400 	mov.w	r4, #0
{
 8005040:	4615      	mov	r5, r2
 8005042:	4606      	mov	r6, r0
	uint8_t EncodedTimeOutByte = 0;
 8005044:	f88d 4003 	strb.w	r4, [sp, #3]
	uint16_t PreRangeEncodedTimeOut = 0;
 8005048:	f8ad 4004 	strh.w	r4, [sp, #4]
	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800504c:	d908      	bls.n	8005060 <get_sequence_step_timeout+0x2c>
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800504e:	2903      	cmp	r1, #3
 8005050:	d050      	beq.n	80050f4 <get_sequence_step_timeout+0xc0>

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8005052:	2904      	cmp	r1, #4
 8005054:	d028      	beq.n	80050a8 <get_sequence_step_timeout+0x74>
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005056:	4620      	mov	r0, r4
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8005058:	602c      	str	r4, [r5, #0]

	return Status;
}
 800505a:	b004      	add	sp, #16
 800505c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005060:	4621      	mov	r1, r4
 8005062:	f10d 0202 	add.w	r2, sp, #2
 8005066:	f7ff ff9f 	bl	8004fa8 <VL53L0X_GetVcselPulsePeriod>
		if (Status == VL53L0X_ERROR_NONE) {
 800506a:	b928      	cbnz	r0, 8005078 <get_sequence_step_timeout+0x44>
			Status = VL53L0X_RdByte(Dev,
 800506c:	4630      	mov	r0, r6
 800506e:	f10d 0203 	add.w	r2, sp, #3
 8005072:	2146      	movs	r1, #70	; 0x46
 8005074:	f000 f9e4 	bl	8005440 <VL53L0X_RdByte>
			* vcsel_period_pclks * PLL_period_ps);
 8005078:	f89d 1002 	ldrb.w	r1, [sp, #2]
	macro_period_ps = (uint32_t)(macro_period_vclks
 800507c:	4b46      	ldr	r3, [pc, #280]	; (8005198 <get_sequence_step_timeout+0x164>)
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800507e:	4a47      	ldr	r2, [pc, #284]	; (800519c <get_sequence_step_timeout+0x168>)
	macro_period_ps = (uint32_t)(macro_period_vclks
 8005080:	fb03 f301 	mul.w	r3, r3, r1
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8005084:	f89d 4003 	ldrb.w	r4, [sp, #3]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8005088:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800508c:	fba2 1303 	umull	r1, r3, r2, r3
 8005090:	099b      	lsrs	r3, r3, #6
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8005092:	fb04 3303 	mla	r3, r4, r3, r3
 8005096:	f503 74fa 	add.w	r4, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800509a:	fba2 3404 	umull	r3, r4, r2, r4
 800509e:	09a4      	lsrs	r4, r4, #6
	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 80050a0:	602c      	str	r4, [r5, #0]
}
 80050a2:	b004      	add	sp, #16
 80050a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80050a8:	a902      	add	r1, sp, #8
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80050aa:	f10d 0802 	add.w	r8, sp, #2
		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80050ae:	f7ff ff7d 	bl	8004fac <VL53L0X_GetSequenceStepEnables>
		if (SchedulerSequenceSteps.PreRangeOn) {
 80050b2:	f89d 700b 	ldrb.w	r7, [sp, #11]
 80050b6:	2f00      	cmp	r7, #0
 80050b8:	d056      	beq.n	8005168 <get_sequence_step_timeout+0x134>
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80050ba:	4621      	mov	r1, r4
 80050bc:	4630      	mov	r0, r6
 80050be:	4642      	mov	r2, r8
 80050c0:	f7ff ff72 	bl	8004fa8 <VL53L0X_GetVcselPulsePeriod>
			if (Status == VL53L0X_ERROR_NONE) {
 80050c4:	2800      	cmp	r0, #0
 80050c6:	d042      	beq.n	800514e <get_sequence_step_timeout+0x11a>
			* vcsel_period_pclks * PLL_period_ps);
 80050c8:	f89d 1002 	ldrb.w	r1, [sp, #2]
	macro_period_ps = (uint32_t)(macro_period_vclks
 80050cc:	4b32      	ldr	r3, [pc, #200]	; (8005198 <get_sequence_step_timeout+0x164>)
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80050ce:	4a33      	ldr	r2, [pc, #204]	; (800519c <get_sequence_step_timeout+0x168>)
	macro_period_ps = (uint32_t)(macro_period_vclks
 80050d0:	fb03 f301 	mul.w	r3, r3, r1
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80050d4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80050d8:	fba2 1303 	umull	r1, r3, r2, r3
 80050dc:	099b      	lsrs	r3, r3, #6
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 80050de:	fb04 f403 	mul.w	r4, r4, r3
 80050e2:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
	actual_timeout_period_us =
 80050e6:	fba2 3404 	umull	r3, r4, r2, r4
 80050ea:	09a4      	lsrs	r4, r4, #6
	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 80050ec:	602c      	str	r4, [r5, #0]
}
 80050ee:	b004      	add	sp, #16
 80050f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80050f4:	4621      	mov	r1, r4
 80050f6:	f10d 0202 	add.w	r2, sp, #2
 80050fa:	f7ff ff55 	bl	8004fa8 <VL53L0X_GetVcselPulsePeriod>
		if (Status == VL53L0X_ERROR_NONE) {
 80050fe:	2800      	cmp	r0, #0
 8005100:	d1aa      	bne.n	8005058 <get_sequence_step_timeout+0x24>
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005102:	4601      	mov	r1, r0
 8005104:	f10d 0202 	add.w	r2, sp, #2
 8005108:	4630      	mov	r0, r6
 800510a:	f7ff ff4d 	bl	8004fa8 <VL53L0X_GetVcselPulsePeriod>
			if (Status == VL53L0X_ERROR_NONE) {
 800510e:	b920      	cbnz	r0, 800511a <get_sequence_step_timeout+0xe6>
				Status = VL53L0X_RdWord(Dev,
 8005110:	4630      	mov	r0, r6
 8005112:	aa01      	add	r2, sp, #4
 8005114:	2151      	movs	r1, #81	; 0x51
 8005116:	f000 f9b7 	bl	8005488 <VL53L0X_RdWord>
			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800511a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			* vcsel_period_pclks * PLL_period_ps);
 800511e:	f89d 1002 	ldrb.w	r1, [sp, #2]
	macro_period_ps = (uint32_t)(macro_period_vclks
 8005122:	4c1d      	ldr	r4, [pc, #116]	; (8005198 <get_sequence_step_timeout+0x164>)
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8005124:	b2d3      	uxtb	r3, r2
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8005126:	0a12      	lsrs	r2, r2, #8
	macro_period_ps = (uint32_t)(macro_period_vclks
 8005128:	fb04 f401 	mul.w	r4, r4, r1
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800512c:	491b      	ldr	r1, [pc, #108]	; (800519c <get_sequence_step_timeout+0x168>)
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800512e:	4093      	lsls	r3, r2
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8005130:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8005134:	3301      	adds	r3, #1
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8005136:	fba1 2404 	umull	r2, r4, r1, r4
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800513a:	b29b      	uxth	r3, r3
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800513c:	09a4      	lsrs	r4, r4, #6
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800513e:	fb04 f403 	mul.w	r4, r4, r3
 8005142:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
	actual_timeout_period_us =
 8005146:	fba1 3404 	umull	r3, r4, r1, r4
 800514a:	09a4      	lsrs	r4, r4, #6
 800514c:	e784      	b.n	8005058 <get_sequence_step_timeout+0x24>
				Status = VL53L0X_RdWord(Dev,
 800514e:	aa01      	add	r2, sp, #4
 8005150:	2151      	movs	r1, #81	; 0x51
 8005152:	4630      	mov	r0, r6
 8005154:	f000 f998 	bl	8005488 <VL53L0X_RdWord>
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8005158:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800515c:	b2dc      	uxtb	r4, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800515e:	0a1b      	lsrs	r3, r3, #8
 8005160:	409c      	lsls	r4, r3
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8005162:	3401      	adds	r4, #1
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8005164:	b2a7      	uxth	r7, r4
		if (Status == VL53L0X_ERROR_NONE) {
 8005166:	b928      	cbnz	r0, 8005174 <get_sequence_step_timeout+0x140>
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005168:	4642      	mov	r2, r8
 800516a:	2101      	movs	r1, #1
 800516c:	4630      	mov	r0, r6
 800516e:	f7ff ff1b 	bl	8004fa8 <VL53L0X_GetVcselPulsePeriod>
		if (Status == VL53L0X_ERROR_NONE) {
 8005172:	b110      	cbz	r0, 800517a <get_sequence_step_timeout+0x146>
 8005174:	427c      	negs	r4, r7
 8005176:	b2a4      	uxth	r4, r4
 8005178:	e7a6      	b.n	80050c8 <get_sequence_step_timeout+0x94>
			Status = VL53L0X_RdWord(Dev,
 800517a:	4630      	mov	r0, r6
 800517c:	f10d 0206 	add.w	r2, sp, #6
 8005180:	2171      	movs	r1, #113	; 0x71
 8005182:	f000 f981 	bl	8005488 <VL53L0X_RdWord>
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8005186:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800518a:	b2dc      	uxtb	r4, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800518c:	0a1b      	lsrs	r3, r3, #8
 800518e:	409c      	lsls	r4, r3
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8005190:	3401      	adds	r4, #1
 8005192:	1be4      	subs	r4, r4, r7
 8005194:	b2a4      	uxth	r4, r4
 8005196:	e797      	b.n	80050c8 <get_sequence_step_timeout+0x94>
 8005198:	003a2f00 	.word	0x003a2f00
 800519c:	10624dd3 	.word	0x10624dd3

080051a0 <VL53L0X_get_vcsel_pulse_period>:
	return Status;
}

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80051a0:	b510      	push	{r4, lr}
 80051a2:	4614      	mov	r4, r2
 80051a4:	b082      	sub	sp, #8
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 80051a6:	b199      	cbz	r1, 80051d0 <VL53L0X_get_vcsel_pulse_period+0x30>
 80051a8:	2901      	cmp	r1, #1
 80051aa:	d003      	beq.n	80051b4 <VL53L0X_get_vcsel_pulse_period+0x14>
		Status = VL53L0X_RdByte(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80051ac:	f06f 0003 	mvn.w	r0, #3
	if (Status == VL53L0X_ERROR_NONE)
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);

	return Status;
}
 80051b0:	b002      	add	sp, #8
 80051b2:	bd10      	pop	{r4, pc}
		Status = VL53L0X_RdByte(Dev,
 80051b4:	f10d 0207 	add.w	r2, sp, #7
 80051b8:	2170      	movs	r1, #112	; 0x70
 80051ba:	f000 f941 	bl	8005440 <VL53L0X_RdByte>
	if (Status == VL53L0X_ERROR_NONE)
 80051be:	2800      	cmp	r0, #0
 80051c0:	d1f6      	bne.n	80051b0 <VL53L0X_get_vcsel_pulse_period+0x10>
	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 80051c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80051c6:	3301      	adds	r3, #1
 80051c8:	005b      	lsls	r3, r3, #1
		*pVCSELPulsePeriodPCLK =
 80051ca:	7023      	strb	r3, [r4, #0]
}
 80051cc:	b002      	add	sp, #8
 80051ce:	bd10      	pop	{r4, pc}
		Status = VL53L0X_RdByte(Dev,
 80051d0:	f10d 0207 	add.w	r2, sp, #7
 80051d4:	2150      	movs	r1, #80	; 0x50
 80051d6:	f000 f933 	bl	8005440 <VL53L0X_RdByte>
	break;
 80051da:	e7f0      	b.n	80051be <VL53L0X_get_vcsel_pulse_period+0x1e>

080051dc <VL53L0X_get_measurement_timing_budget_micro_seconds>:
	return Status;
}

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80051dc:	b5f0      	push	{r4, r5, r6, r7, lr}

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 80051de:	f640 3336 	movw	r3, #2870	; 0xb36
{
 80051e2:	b085      	sub	sp, #20
 80051e4:	460c      	mov	r4, r1
 80051e6:	4605      	mov	r5, r0

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80051e8:	a902      	add	r1, sp, #8
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 80051ea:	6023      	str	r3, [r4, #0]
	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80051ec:	f7ff fede 	bl	8004fac <VL53L0X_GetSequenceStepEnables>

	if (Status != VL53L0X_ERROR_NONE) {
 80051f0:	4606      	mov	r6, r0
 80051f2:	b9e0      	cbnz	r0, 800522e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x52>
		LOG_FUNCTION_END(Status);
		return Status;
	}


	if (SchedulerSequenceSteps.TccOn  ||
 80051f4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80051f8:	b9e3      	cbnz	r3, 8005234 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x58>
 80051fa:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80051fe:	b9cb      	cbnz	r3, 8005234 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x58>
		SchedulerSequenceSteps.MsrcOn ||
 8005200:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8005204:	b9b3      	cbnz	r3, 8005234 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x58>
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
		if (SchedulerSequenceSteps.PreRangeOn) {
 8005206:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d07a      	beq.n	8005304 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x128>
	uint16_t PreRangeEncodedTimeOut = 0;
 800520e:	2300      	movs	r3, #0
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005210:	4628      	mov	r0, r5
 8005212:	f10d 0203 	add.w	r2, sp, #3
 8005216:	4619      	mov	r1, r3
	uint16_t PreRangeEncodedTimeOut = 0;
 8005218:	f8ad 3004 	strh.w	r3, [sp, #4]
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800521c:	f7ff fec4 	bl	8004fa8 <VL53L0X_GetVcselPulsePeriod>
		if (Status == VL53L0X_ERROR_NONE) {
 8005220:	2800      	cmp	r0, #0
 8005222:	d043      	beq.n	80052ac <VL53L0X_get_measurement_timing_budget_micro_seconds+0xd0>
			Status = get_sequence_step_timeout(Dev,
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8005224:	6823      	ldr	r3, [r4, #0]
 8005226:	4606      	mov	r6, r0
 8005228:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800522c:	6023      	str	r3, [r4, #0]
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 800522e:	4630      	mov	r0, r6
 8005230:	b005      	add	sp, #20
 8005232:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t EncodedTimeOutByte = 0;
 8005234:	2300      	movs	r3, #0
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005236:	f10d 0203 	add.w	r2, sp, #3
 800523a:	4628      	mov	r0, r5
 800523c:	4619      	mov	r1, r3
	uint8_t EncodedTimeOutByte = 0;
 800523e:	f88d 3004 	strb.w	r3, [sp, #4]
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005242:	f7ff feb1 	bl	8004fa8 <VL53L0X_GetVcselPulsePeriod>
		if (Status == VL53L0X_ERROR_NONE) {
 8005246:	b118      	cbz	r0, 8005250 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x74>
 8005248:	4606      	mov	r6, r0
}
 800524a:	4630      	mov	r0, r6
 800524c:	b005      	add	sp, #20
 800524e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			Status = VL53L0X_RdByte(Dev,
 8005250:	aa01      	add	r2, sp, #4
 8005252:	2146      	movs	r1, #70	; 0x46
 8005254:	4628      	mov	r0, r5
 8005256:	f000 f8f3 	bl	8005440 <VL53L0X_RdByte>
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800525a:	f89d 7004 	ldrb.w	r7, [sp, #4]
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800525e:	f89d 3003 	ldrb.w	r3, [sp, #3]
		if (Status == VL53L0X_ERROR_NONE) {
 8005262:	2800      	cmp	r0, #0
 8005264:	d1f0      	bne.n	8005248 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6c>
	macro_period_ps = (uint32_t)(macro_period_vclks
 8005266:	4a38      	ldr	r2, [pc, #224]	; (8005348 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x16c>)
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8005268:	4938      	ldr	r1, [pc, #224]	; (800534c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x170>)
	macro_period_ps = (uint32_t)(macro_period_vclks
 800526a:	fb02 f203 	mul.w	r2, r2, r3
			if (SchedulerSequenceSteps.TccOn) {
 800526e:	f89d 0008 	ldrb.w	r0, [sp, #8]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8005272:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
 8005276:	fba1 3202 	umull	r3, r2, r1, r2
 800527a:	0993      	lsrs	r3, r2, #6
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800527c:	fb07 3303 	mla	r3, r7, r3, r3
 8005280:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8005284:	fba1 2303 	umull	r2, r3, r1, r3
 8005288:	099b      	lsrs	r3, r3, #6
			if (SchedulerSequenceSteps.TccOn) {
 800528a:	b120      	cbz	r0, 8005296 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xba>
				*pMeasurementTimingBudgetMicroSeconds +=
 800528c:	6822      	ldr	r2, [r4, #0]
 800528e:	f203 214e 	addw	r1, r3, #590	; 0x24e
 8005292:	440a      	add	r2, r1
 8005294:	6022      	str	r2, [r4, #0]
			if (SchedulerSequenceSteps.DssOn) {
 8005296:	f89d 200a 	ldrb.w	r2, [sp, #10]
 800529a:	2a00      	cmp	r2, #0
 800529c:	d03a      	beq.n	8005314 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x138>
				*pMeasurementTimingBudgetMicroSeconds +=
 800529e:	6822      	ldr	r2, [r4, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 80052a0:	f203 23b2 	addw	r3, r3, #690	; 0x2b2
				*pMeasurementTimingBudgetMicroSeconds +=
 80052a4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80052a8:	6023      	str	r3, [r4, #0]
 80052aa:	e7ac      	b.n	8005206 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x2a>
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80052ac:	4601      	mov	r1, r0
 80052ae:	f10d 0203 	add.w	r2, sp, #3
 80052b2:	4628      	mov	r0, r5
 80052b4:	f7ff fe78 	bl	8004fa8 <VL53L0X_GetVcselPulsePeriod>
			if (Status == VL53L0X_ERROR_NONE) {
 80052b8:	b920      	cbnz	r0, 80052c4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe8>
				Status = VL53L0X_RdWord(Dev,
 80052ba:	aa01      	add	r2, sp, #4
 80052bc:	2151      	movs	r1, #81	; 0x51
 80052be:	4628      	mov	r0, r5
 80052c0:	f000 f8e2 	bl	8005488 <VL53L0X_RdWord>
			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 80052c4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			* vcsel_period_pclks * PLL_period_ps);
 80052c8:	f89d 7003 	ldrb.w	r7, [sp, #3]
	macro_period_ps = (uint32_t)(macro_period_vclks
 80052cc:	4b1e      	ldr	r3, [pc, #120]	; (8005348 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x16c>)
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80052ce:	b2d1      	uxtb	r1, r2
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 80052d0:	0a12      	lsrs	r2, r2, #8
	macro_period_ps = (uint32_t)(macro_period_vclks
 80052d2:	fb03 f307 	mul.w	r3, r3, r7
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80052d6:	4f1d      	ldr	r7, [pc, #116]	; (800534c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x170>)
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 80052d8:	4091      	lsls	r1, r2
			*pMeasurementTimingBudgetMicroSeconds +=
 80052da:	6822      	ldr	r2, [r4, #0]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80052dc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80052e0:	3101      	adds	r1, #1
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80052e2:	fba7 c303 	umull	ip, r3, r7, r3
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 80052e6:	b289      	uxth	r1, r1
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80052e8:	099b      	lsrs	r3, r3, #6
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 80052ea:	fb03 f301 	mul.w	r3, r3, r1
 80052ee:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 80052f2:	fba7 1303 	umull	r1, r3, r7, r3
			*pMeasurementTimingBudgetMicroSeconds +=
 80052f6:	eb02 1393 	add.w	r3, r2, r3, lsr #6
 80052fa:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80052fe:	6023      	str	r3, [r4, #0]
	if (Status == VL53L0X_ERROR_NONE) {
 8005300:	2800      	cmp	r0, #0
 8005302:	d1a1      	bne.n	8005248 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6c>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8005304:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8005308:	b97b      	cbnz	r3, 800532a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x14e>
 800530a:	6822      	ldr	r2, [r4, #0]
}
 800530c:	4630      	mov	r0, r6
		VL53L0X_SETPARAMETERFIELD(Dev,
 800530e:	616a      	str	r2, [r5, #20]
}
 8005310:	b005      	add	sp, #20
 8005312:	bdf0      	pop	{r4, r5, r6, r7, pc}
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8005314:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8005318:	2a00      	cmp	r2, #0
 800531a:	f43f af74 	beq.w	8005206 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x2a>
				*pMeasurementTimingBudgetMicroSeconds +=
 800531e:	6822      	ldr	r2, [r4, #0]
 8005320:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005324:	4413      	add	r3, r2
 8005326:	6023      	str	r3, [r4, #0]
 8005328:	e76d      	b.n	8005206 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x2a>
			Status = get_sequence_step_timeout(Dev,
 800532a:	aa01      	add	r2, sp, #4
 800532c:	2104      	movs	r1, #4
 800532e:	4628      	mov	r0, r5
 8005330:	f7ff fe80 	bl	8005034 <get_sequence_step_timeout>
				(FinalRangeTimeoutMicroSeconds +
 8005334:	9b01      	ldr	r3, [sp, #4]
			*pMeasurementTimingBudgetMicroSeconds +=
 8005336:	6822      	ldr	r2, [r4, #0]
				(FinalRangeTimeoutMicroSeconds +
 8005338:	f203 2326 	addw	r3, r3, #550	; 0x226
			*pMeasurementTimingBudgetMicroSeconds +=
 800533c:	441a      	add	r2, r3
 800533e:	6022      	str	r2, [r4, #0]
	if (Status == VL53L0X_ERROR_NONE) {
 8005340:	2800      	cmp	r0, #0
 8005342:	d0e3      	beq.n	800530c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x130>
 8005344:	4606      	mov	r6, r0
 8005346:	e780      	b.n	800524a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
 8005348:	003a2f00 	.word	0x003a2f00
 800534c:	10624dd3 	.word	0x10624dd3

08005350 <VL53L0X_WrByte>:
done:
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8005350:	b530      	push	{r4, r5, lr}
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index;
 8005352:	4b0b      	ldr	r3, [pc, #44]	; (8005380 <VL53L0X_WrByte+0x30>)
VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8005354:	b083      	sub	sp, #12
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8005356:	f890 5160 	ldrb.w	r5, [r0, #352]	; 0x160
 800535a:	240c      	movs	r4, #12
    _I2CBuffer[0] = index;
 800535c:	7019      	strb	r1, [r3, #0]
    _I2CBuffer[1] = data;
 800535e:	705a      	strb	r2, [r3, #1]
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8005360:	4629      	mov	r1, r5
 8005362:	461a      	mov	r2, r3
 8005364:	f8d0 015c 	ldr.w	r0, [r0, #348]	; 0x15c
 8005368:	2302      	movs	r3, #2
 800536a:	9400      	str	r4, [sp, #0]
 800536c:	f7fc fcfa 	bl	8001d64 <HAL_I2C_Master_Transmit>

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
    if (status_int != 0) {
 8005370:	2800      	cmp	r0, #0
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
    }
    VL53L0X_PutI2cBus();
    return Status;
}
 8005372:	bf14      	ite	ne
 8005374:	f06f 0013 	mvnne.w	r0, #19
 8005378:	2000      	moveq	r0, #0
 800537a:	b003      	add	sp, #12
 800537c:	bd30      	pop	{r4, r5, pc}
 800537e:	bf00      	nop
 8005380:	20019214 	.word	0x20019214

08005384 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8005384:	4613      	mov	r3, r2
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8005386:	220d      	movs	r2, #13
VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8005388:	b570      	push	{r4, r5, r6, lr}
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index;
 800538a:	4c0b      	ldr	r4, [pc, #44]	; (80053b8 <VL53L0X_WrWord+0x34>)
VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800538c:	b082      	sub	sp, #8
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800538e:	f890 6160 	ldrb.w	r6, [r0, #352]	; 0x160
    _I2CBuffer[1] = data >> 8;
 8005392:	0a1d      	lsrs	r5, r3, #8
    _I2CBuffer[0] = index;
 8005394:	7021      	strb	r1, [r4, #0]
    _I2CBuffer[2] = data & 0x00FF;
 8005396:	70a3      	strb	r3, [r4, #2]
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8005398:	4631      	mov	r1, r6
 800539a:	f8d0 015c 	ldr.w	r0, [r0, #348]	; 0x15c
 800539e:	2303      	movs	r3, #3
 80053a0:	9200      	str	r2, [sp, #0]
 80053a2:	4622      	mov	r2, r4
    _I2CBuffer[1] = data >> 8;
 80053a4:	7065      	strb	r5, [r4, #1]
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 80053a6:	f7fc fcdd 	bl	8001d64 <HAL_I2C_Master_Transmit>

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
    if (status_int != 0) {
 80053aa:	2800      	cmp	r0, #0
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
    }
    VL53L0X_PutI2cBus();
    return Status;
}
 80053ac:	bf14      	ite	ne
 80053ae:	f06f 0013 	mvnne.w	r0, #19
 80053b2:	2000      	moveq	r0, #0
 80053b4:	b002      	add	sp, #8
 80053b6:	bd70      	pop	{r4, r5, r6, pc}
 80053b8:	20019214 	.word	0x20019214

080053bc <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 80053bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80053c0:	b085      	sub	sp, #20
 80053c2:	4688      	mov	r8, r1
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 80053c4:	f04f 090b 	mov.w	r9, #11
 80053c8:	f890 1160 	ldrb.w	r1, [r0, #352]	; 0x160
 80053cc:	ae04      	add	r6, sp, #16
VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 80053ce:	4604      	mov	r4, r0
 80053d0:	4617      	mov	r7, r2
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 80053d2:	f8d0 015c 	ldr.w	r0, [r0, #348]	; 0x15c
 80053d6:	f806 8d01 	strb.w	r8, [r6, #-1]!
VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 80053da:	461d      	mov	r5, r3
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 80053dc:	4632      	mov	r2, r6
 80053de:	f8cd 9000 	str.w	r9, [sp]
 80053e2:	2301      	movs	r3, #1
 80053e4:	f7fc fcbe 	bl	8001d64 <HAL_I2C_Master_Transmit>
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
    if( status_int ){
 80053e8:	bb20      	cbnz	r0, 8005434 <VL53L0X_UpdateByte+0x78>
    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 80053ea:	f894 1160 	ldrb.w	r1, [r4, #352]	; 0x160
 80053ee:	2301      	movs	r3, #1
 80053f0:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
 80053f4:	f10d 020e 	add.w	r2, sp, #14
 80053f8:	f8cd 9000 	str.w	r9, [sp]
 80053fc:	4319      	orrs	r1, r3
 80053fe:	f7fc fd81 	bl	8001f04 <HAL_I2C_Master_Receive>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
        goto done;
    }
    status_int = _I2CRead(Dev, data, 1);
    if (status_int != 0) {
 8005402:	b9b8      	cbnz	r0, 8005434 <VL53L0X_UpdateByte+0x78>
    data = (data & AndData) | OrData;
 8005404:	f89d 200e 	ldrb.w	r2, [sp, #14]
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8005408:	230c      	movs	r3, #12
    _I2CBuffer[0] = index;
 800540a:	4e0c      	ldr	r6, [pc, #48]	; (800543c <VL53L0X_UpdateByte+0x80>)
    data = (data & AndData) | OrData;
 800540c:	4017      	ands	r7, r2
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800540e:	9300      	str	r3, [sp, #0]
 8005410:	4632      	mov	r2, r6
 8005412:	2302      	movs	r3, #2
    data = (data & AndData) | OrData;
 8005414:	433d      	orrs	r5, r7
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8005416:	f894 1160 	ldrb.w	r1, [r4, #352]	; 0x160
 800541a:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
    _I2CBuffer[1] = data;
 800541e:	7075      	strb	r5, [r6, #1]
    _I2CBuffer[0] = index;
 8005420:	f886 8000 	strb.w	r8, [r6]
    data = (data & AndData) | OrData;
 8005424:	f88d 500e 	strb.w	r5, [sp, #14]
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8005428:	f7fc fc9c 	bl	8001d64 <HAL_I2C_Master_Transmit>
    if (status_int != 0) {
 800542c:	b910      	cbnz	r0, 8005434 <VL53L0X_UpdateByte+0x78>
}
 800542e:	b005      	add	sp, #20
 8005430:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005434:	f06f 0013 	mvn.w	r0, #19
 8005438:	e7f9      	b.n	800542e <VL53L0X_UpdateByte+0x72>
 800543a:	bf00      	nop
 800543c:	20019214 	.word	0x20019214

08005440 <VL53L0X_RdByte>:
VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8005440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005442:	b085      	sub	sp, #20
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8005444:	260b      	movs	r6, #11
VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8005446:	4617      	mov	r7, r2
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8005448:	f890 2160 	ldrb.w	r2, [r0, #352]	; 0x160
VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800544c:	ad04      	add	r5, sp, #16
 800544e:	4604      	mov	r4, r0
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8005450:	2301      	movs	r3, #1
 8005452:	f8d0 015c 	ldr.w	r0, [r0, #348]	; 0x15c
VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8005456:	f805 1d01 	strb.w	r1, [r5, #-1]!
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800545a:	4611      	mov	r1, r2
 800545c:	9600      	str	r6, [sp, #0]
 800545e:	462a      	mov	r2, r5
 8005460:	f7fc fc80 	bl	8001d64 <HAL_I2C_Master_Transmit>
    if( status_int ){
 8005464:	b960      	cbnz	r0, 8005480 <VL53L0X_RdByte+0x40>
    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8005466:	f894 1160 	ldrb.w	r1, [r4, #352]	; 0x160
 800546a:	2301      	movs	r3, #1
 800546c:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
 8005470:	463a      	mov	r2, r7
 8005472:	9600      	str	r6, [sp, #0]
 8005474:	4319      	orrs	r1, r3
 8005476:	f7fc fd45 	bl	8001f04 <HAL_I2C_Master_Receive>
    if (status_int != 0) {
 800547a:	b908      	cbnz	r0, 8005480 <VL53L0X_RdByte+0x40>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
    }
done:
    VL53L0X_PutI2cBus();
    return Status;
}
 800547c:	b005      	add	sp, #20
 800547e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005480:	f06f 0013 	mvn.w	r0, #19
 8005484:	e7fa      	b.n	800547c <VL53L0X_RdByte+0x3c>
 8005486:	bf00      	nop

08005488 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8005488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800548a:	4604      	mov	r4, r0
 800548c:	b085      	sub	sp, #20
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800548e:	250b      	movs	r5, #11
VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8005490:	4616      	mov	r6, r2
 8005492:	a804      	add	r0, sp, #16
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8005494:	f894 7160 	ldrb.w	r7, [r4, #352]	; 0x160
 8005498:	2301      	movs	r3, #1
VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800549a:	f800 1d01 	strb.w	r1, [r0, #-1]!
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800549e:	4639      	mov	r1, r7
 80054a0:	4602      	mov	r2, r0
 80054a2:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
 80054a6:	9500      	str	r5, [sp, #0]
 80054a8:	f7fc fc5c 	bl	8001d64 <HAL_I2C_Master_Transmit>
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);

    if( status_int ){
 80054ac:	b9a0      	cbnz	r0, 80054d8 <VL53L0X_RdWord+0x50>
    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 80054ae:	f894 1160 	ldrb.w	r1, [r4, #352]	; 0x160
 80054b2:	270c      	movs	r7, #12
 80054b4:	4d0a      	ldr	r5, [pc, #40]	; (80054e0 <VL53L0X_RdWord+0x58>)
 80054b6:	2302      	movs	r3, #2
 80054b8:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
 80054bc:	f041 0101 	orr.w	r1, r1, #1
 80054c0:	462a      	mov	r2, r5
 80054c2:	9700      	str	r7, [sp, #0]
 80054c4:	f7fc fd1e 	bl	8001f04 <HAL_I2C_Master_Receive>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
        goto done;
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
    if (status_int != 0) {
 80054c8:	b930      	cbnz	r0, 80054d8 <VL53L0X_RdWord+0x50>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
        goto done;
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 80054ca:	782a      	ldrb	r2, [r5, #0]
 80054cc:	786b      	ldrb	r3, [r5, #1]
 80054ce:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80054d2:	8033      	strh	r3, [r6, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
}
 80054d4:	b005      	add	sp, #20
 80054d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80054d8:	f06f 0013 	mvn.w	r0, #19
 80054dc:	e7fa      	b.n	80054d4 <VL53L0X_RdWord+0x4c>
 80054de:	bf00      	nop
 80054e0:	20019214 	.word	0x20019214

080054e4 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 80054e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054e6:	4605      	mov	r5, r0
 80054e8:	b085      	sub	sp, #20
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 80054ea:	240b      	movs	r4, #11
VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 80054ec:	4616      	mov	r6, r2
 80054ee:	a804      	add	r0, sp, #16
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 80054f0:	f895 7160 	ldrb.w	r7, [r5, #352]	; 0x160
 80054f4:	2301      	movs	r3, #1
VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 80054f6:	f800 1d01 	strb.w	r1, [r0, #-1]!
    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 80054fa:	4639      	mov	r1, r7
 80054fc:	4602      	mov	r2, r0
 80054fe:	f8d5 015c 	ldr.w	r0, [r5, #348]	; 0x15c
 8005502:	9400      	str	r4, [sp, #0]
 8005504:	f7fc fc2e 	bl	8001d64 <HAL_I2C_Master_Transmit>
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
    if (status_int != 0) {
 8005508:	b9d0      	cbnz	r0, 8005540 <VL53L0X_RdDWord+0x5c>
    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800550a:	f895 1160 	ldrb.w	r1, [r5, #352]	; 0x160
 800550e:	270e      	movs	r7, #14
 8005510:	4c0d      	ldr	r4, [pc, #52]	; (8005548 <VL53L0X_RdDWord+0x64>)
 8005512:	2304      	movs	r3, #4
 8005514:	f8d5 015c 	ldr.w	r0, [r5, #348]	; 0x15c
 8005518:	f041 0101 	orr.w	r1, r1, #1
 800551c:	4622      	mov	r2, r4
 800551e:	9700      	str	r7, [sp, #0]
 8005520:	f7fc fcf0 	bl	8001f04 <HAL_I2C_Master_Receive>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
        goto done;
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
    if (status_int != 0) {
 8005524:	b960      	cbnz	r0, 8005540 <VL53L0X_RdDWord+0x5c>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
        goto done;
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8005526:	7863      	ldrb	r3, [r4, #1]
 8005528:	7825      	ldrb	r5, [r4, #0]
 800552a:	041b      	lsls	r3, r3, #16
 800552c:	78e1      	ldrb	r1, [r4, #3]
 800552e:	78a2      	ldrb	r2, [r4, #2]
 8005530:	eb03 6305 	add.w	r3, r3, r5, lsl #24
 8005534:	440b      	add	r3, r1
 8005536:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800553a:	6033      	str	r3, [r6, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
}
 800553c:	b005      	add	sp, #20
 800553e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8005540:	f06f 0013 	mvn.w	r0, #19
 8005544:	e7fa      	b.n	800553c <VL53L0X_RdDWord+0x58>
 8005546:	bf00      	nop
 8005548:	20019214 	.word	0x20019214

0800554c <GUI_X_Config>:
*
* Purpose:
*   Called during the initialization process in order to set up the
*   available memory for the GUI.
*/
void GUI_X_Config(void) {
 800554c:	b508      	push	{r3, lr}
  //
  static U32 aMemory[GUI_NUMBYTES / 4];
  //
  // Assign memory to emWin
  //
  GUI_ALLOC_AssignMemory(aMemory, GUI_NUMBYTES);
 800554e:	4805      	ldr	r0, [pc, #20]	; (8005564 <GUI_X_Config+0x18>)
 8005550:	f44f 31c8 	mov.w	r1, #102400	; 0x19000
 8005554:	f004 ffe6 	bl	800a524 <GUI_ALLOC_AssignMemory>
  //
  // Set default font
  //
  GUI_SetDefaultFont(GUI_FONT_6X8);
 8005558:	4803      	ldr	r0, [pc, #12]	; (8005568 <GUI_X_Config+0x1c>)
}
 800555a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  GUI_SetDefaultFont(GUI_FONT_6X8);
 800555e:	f004 bb53 	b.w	8009c08 <GUI_SetDefaultFont>
 8005562:	bf00      	nop
 8005564:	20000044 	.word	0x20000044
 8005568:	0800d8c8 	.word	0x0800d8c8

0800556c <GUI_X_Init>:
*     GUI_X_Init() is called from GUI_Init is a possibility to init
*     some hardware which needs to be up and running before the GUI.
*     If not required, leave this routine blank.
*/

void GUI_X_Init(void) {}
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop

08005570 <LCD_X_Config>:
* Function description:
*   Called during the initialization process in order to set up the
*   display driver configuration.
*
*/
void LCD_X_Config(void) {
 8005570:	b5f0      	push	{r4, r5, r6, r7, lr}
  GUI_DEVICE * pDevice;
  CONFIG_FLEXCOLOR Config = {0};
 8005572:	2400      	movs	r4, #0
void LCD_X_Config(void) {
 8005574:	b0a3      	sub	sp, #140	; 0x8c
  GUI_PORT_API PortAPI = {0};
 8005576:	2268      	movs	r2, #104	; 0x68
  GUIDRV_FlexColor_Config(pDevice, &Config);
  //
  // Set controller and operation mode
  //
  PortAPI.pfWrite16_A0  = SSD1963_WriteCommand;
  PortAPI.pfWrite16_A1  = SSD1963_WriteData;
 8005578:	4f23      	ldr	r7, [pc, #140]	; (8005608 <LCD_X_Config+0x98>)
  GUI_PORT_API PortAPI = {0};
 800557a:	4621      	mov	r1, r4
 800557c:	a808      	add	r0, sp, #32
  CONFIG_FLEXCOLOR Config = {0};
 800557e:	9407      	str	r4, [sp, #28]
  PortAPI.pfWriteM16_A1 = SSD1963_WriteDataMultiple;
 8005580:	4e22      	ldr	r6, [pc, #136]	; (800560c <LCD_X_Config+0x9c>)
  CONFIG_FLEXCOLOR Config = {0};
 8005582:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8005586:	e9cd 4405 	strd	r4, r4, [sp, #20]
  GUI_PORT_API PortAPI = {0};
 800558a:	f007 f8e5 	bl	800c758 <memset>
  pDevice = GUI_DEVICE_CreateAndLink(GUIDRV_FLEXCOLOR, GUICC_M565, 0, 0);
 800558e:	4623      	mov	r3, r4
 8005590:	4622      	mov	r2, r4
 8005592:	491f      	ldr	r1, [pc, #124]	; (8005610 <LCD_X_Config+0xa0>)
 8005594:	481f      	ldr	r0, [pc, #124]	; (8005614 <LCD_X_Config+0xa4>)
 8005596:	f004 facd 	bl	8009b34 <GUI_DEVICE_CreateAndLink>
  LCD_SetSizeEx (0, XSIZE_PHYS , YSIZE_PHYS);
 800559a:	f44f 7288 	mov.w	r2, #272	; 0x110
  pDevice = GUI_DEVICE_CreateAndLink(GUIDRV_FLEXCOLOR, GUICC_M565, 0, 0);
 800559e:	4605      	mov	r5, r0
  LCD_SetSizeEx (0, XSIZE_PHYS , YSIZE_PHYS);
 80055a0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80055a4:	4620      	mov	r0, r4
 80055a6:	f002 fe2b 	bl	8008200 <LCD_SetSizeEx>
  LCD_SetVSizeEx(0, XSIZE_PHYS, YSIZE_PHYS);
 80055aa:	f44f 7288 	mov.w	r2, #272	; 0x110
 80055ae:	4620      	mov	r0, r4
 80055b0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80055b4:	f002 fe0c 	bl	80081d0 <LCD_SetVSizeEx>
  GUIDRV_FlexColor_Config(pDevice, &Config);
 80055b8:	a903      	add	r1, sp, #12
 80055ba:	4628      	mov	r0, r5
  Config.Orientation = 0;
 80055bc:	9405      	str	r4, [sp, #20]
  GUIDRV_FlexColor_Config(pDevice, &Config);
 80055be:	f002 fda6 	bl	800810e <GUIDRV_FlexColor_Config>
  PortAPI.pfWrite16_A0  = SSD1963_WriteCommand;
 80055c2:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8005620 <LCD_X_Config+0xb0>
 // PortAPI.pfReadM16_A1  = SSD1963_ReadData;
  GUIDRV_FlexColor_SetFunc(pDevice, &PortAPI, GUIDRV_FLEXCOLOR_F66720, GUIDRV_FLEXCOLOR_M16C0B16);
 80055c6:	a908      	add	r1, sp, #32
 80055c8:	4628      	mov	r0, r5
 80055ca:	4b13      	ldr	r3, [pc, #76]	; (8005618 <LCD_X_Config+0xa8>)
 80055cc:	4a13      	ldr	r2, [pc, #76]	; (800561c <LCD_X_Config+0xac>)
  PortAPI.pfWriteM16_A1 = SSD1963_WriteDataMultiple;
 80055ce:	9613      	str	r6, [sp, #76]	; 0x4c
  PortAPI.pfWrite16_A1  = SSD1963_WriteData;
 80055d0:	e9cd c710 	strd	ip, r7, [sp, #64]	; 0x40
  GUIDRV_FlexColor_SetFunc(pDevice, &PortAPI, GUIDRV_FLEXCOLOR_F66720, GUIDRV_FLEXCOLOR_M16C0B16);
 80055d4:	f002 fdb9 	bl	800814a <GUIDRV_FlexColor_SetFunc>

  GUI_TOUCH_Calibrate(GUI_COORD_X, 0, 480, GUI_TOUCH_AD_LEFT , GUI_TOUCH_AD_RIGHT);
 80055d8:	f640 7274 	movw	r2, #3956	; 0xf74
 80055dc:	4621      	mov	r1, r4
 80055de:	4620      	mov	r0, r4
 80055e0:	9200      	str	r2, [sp, #0]
 80055e2:	2392      	movs	r3, #146	; 0x92
 80055e4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80055e8:	f003 fbcc 	bl	8008d84 <GUI_TOUCH_Calibrate>
  GUI_TOUCH_Calibrate(GUI_COORD_Y, 0, 272, GUI_TOUCH_AD_TOP, GUI_TOUCH_AD_BOTTOM);
 80055ec:	f640 7203 	movw	r2, #3843	; 0xf03
 80055f0:	4621      	mov	r1, r4
 80055f2:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80055f6:	9200      	str	r2, [sp, #0]
 80055f8:	f44f 7288 	mov.w	r2, #272	; 0x110
 80055fc:	2001      	movs	r0, #1
 80055fe:	f003 fbc1 	bl	8008d84 <GUI_TOUCH_Calibrate>

}
 8005602:	b023      	add	sp, #140	; 0x8c
 8005604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005606:	bf00      	nop
 8005608:	080042a5 	.word	0x080042a5
 800560c:	080042f9 	.word	0x080042f9
 8005610:	0800f458 	.word	0x0800f458
 8005614:	0800f2cc 	.word	0x0800f2cc
 8005618:	08007b15 	.word	0x08007b15
 800561c:	08007479 	.word	0x08007479
 8005620:	08004251 	.word	0x08004251

08005624 <LCD_X_DisplayDriver>:
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData) {
  int r;
  (void) LayerIndex;
  (void) pData;
  
  switch (Cmd) {
 8005624:	2901      	cmp	r1, #1
 8005626:	d106      	bne.n	8005636 <LCD_X_DisplayDriver+0x12>
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData) {
 8005628:	b508      	push	{r3, lr}
    // display controller and put it into operation. If the display
    // controller is not initialized by any external routine this needs
    // to be adapted by the customer...
    //
    // ...
	  SSD1963_Init();
 800562a:	f7fe fea1 	bl	8004370 <SSD1963_Init>
	  STMPE610_Init();
 800562e:	f7ff fa15 	bl	8004a5c <STMPE610_Init>
    return 0;
 8005632:	2000      	movs	r0, #0
  }
  default:
    r = -1;
  }
  return r;
}
 8005634:	bd08      	pop	{r3, pc}
  return r;
 8005636:	f04f 30ff 	mov.w	r0, #4294967295
}
 800563a:	4770      	bx	lr

0800563c <HAL_SYSTICK_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_SYSTICK_Callback(void)
{
	OS_TimeMS++;
 800563c:	4a02      	ldr	r2, [pc, #8]	; (8005648 <HAL_SYSTICK_Callback+0xc>)
 800563e:	6813      	ldr	r3, [r2, #0]
 8005640:	3301      	adds	r3, #1
 8005642:	6013      	str	r3, [r2, #0]
}
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	20019254 	.word	0x20019254

0800564c <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)  //ova fja se pozove kad se izvrsi jedna konverzija
{
	if(hadc->Instance == ADC3)
 800564c:	6802      	ldr	r2, [r0, #0]
 800564e:	4b05      	ldr	r3, [pc, #20]	; (8005664 <HAL_ADC_ConvCpltCallback+0x18>)
 8005650:	429a      	cmp	r2, r3
 8005652:	d106      	bne.n	8005662 <HAL_ADC_ConvCpltCallback+0x16>
	{
		//CDC_Transmit_FS((uint8_t *)probni,strlen((const char *)probni));
		pin_dioda_sirovo = ADC_BUF[1];
 8005654:	4b04      	ldr	r3, [pc, #16]	; (8005668 <HAL_ADC_ConvCpltCallback+0x1c>)
 8005656:	4905      	ldr	r1, [pc, #20]	; (800566c <HAL_ADC_ConvCpltCallback+0x20>)
		temperatura_ADC_sirovo = ADC_BUF[0];
 8005658:	e9d3 2000 	ldrd	r2, r0, [r3]
 800565c:	4b04      	ldr	r3, [pc, #16]	; (8005670 <HAL_ADC_ConvCpltCallback+0x24>)
		pin_dioda_sirovo = ADC_BUF[1];
 800565e:	6008      	str	r0, [r1, #0]
		temperatura_ADC_sirovo = ADC_BUF[0];
 8005660:	601a      	str	r2, [r3, #0]
	}
}
 8005662:	4770      	bx	lr
 8005664:	40012200 	.word	0x40012200
 8005668:	20019598 	.word	0x20019598
 800566c:	20019424 	.word	0x20019424
 8005670:	20019590 	.word	0x20019590

08005674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005674:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005676:	2400      	movs	r4, #0
{
 8005678:	b0b4      	sub	sp, #208	; 0xd0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800567a:	2230      	movs	r2, #48	; 0x30
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800567c:	2609      	movs	r6, #9
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800567e:	4621      	mov	r1, r4
 8005680:	a807      	add	r0, sp, #28
 8005682:	f007 f869 	bl	800c758 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005686:	4621      	mov	r1, r4
 8005688:	2284      	movs	r2, #132	; 0x84
 800568a:	a813      	add	r0, sp, #76	; 0x4c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800568c:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800568e:	2502      	movs	r5, #2
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005690:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8005694:	e9cd 4404 	strd	r4, r4, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005698:	f007 f85e 	bl	800c758 <memset>
  HAL_PWR_EnableBkUpAccess();
 800569c:	f7fc fdbe 	bl	800221c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 80056a0:	4a23      	ldr	r2, [pc, #140]	; (8005730 <SystemClock_Config+0xbc>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80056a2:	4b24      	ldr	r3, [pc, #144]	; (8005734 <SystemClock_Config+0xc0>)
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 384;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 8;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80056a4:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 80056a6:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80056a8:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80056ac:	6411      	str	r1, [r2, #64]	; 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80056ae:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  __HAL_RCC_PWR_CLK_ENABLE();
 80056b2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80056b4:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80056b8:	9200      	str	r2, [sp, #0]
 80056ba:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80056c2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80056c4:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80056c6:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80056c8:	9607      	str	r6, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80056ca:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80056ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80056d2:	9108      	str	r1, [sp, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80056d4:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 25;
 80056d6:	2119      	movs	r1, #25
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80056d8:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLN = 384;
 80056da:	f44f 72c0 	mov.w	r2, #384	; 0x180
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80056de:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80056e0:	2308      	movs	r3, #8
  RCC_OscInitStruct.PLL.PLLN = 384;
 80056e2:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80056e4:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80056e6:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80056e8:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 25;
 80056ea:	e9cd 610e 	strd	r6, r1, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80056ee:	f7fc fdd9 	bl	80022a4 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80056f2:	260f      	movs	r6, #15
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80056f4:	f7fc fd9a 	bl	800222c <HAL_PWREx_EnableOverDrive>
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80056f8:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80056fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8005700:	2106      	movs	r1, #6
 8005702:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005704:	9602      	str	r6, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005706:	e9cd 2305 	strd	r2, r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800570a:	e9cd 5403 	strd	r5, r4, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800570e:	f7fc ffc3 	bl	8002698 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_UART8
 8005712:	f24e 0220 	movw	r2, #57376	; 0xe020
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8005716:	f44f 7300 	mov.w	r3, #512	; 0x200
  PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800571a:	a813      	add	r0, sp, #76	; 0x4c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800571c:	942d      	str	r4, [sp, #180]	; 0xb4
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_UART8
 800571e:	9213      	str	r2, [sp, #76]	; 0x4c
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8005720:	931f      	str	r3, [sp, #124]	; 0x7c
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005722:	e9cd 442b 	strd	r4, r4, [sp, #172]	; 0xac
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005726:	f7fd f8d7 	bl	80028d8 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800572a:	b034      	add	sp, #208	; 0xd0
 800572c:	bd70      	pop	{r4, r5, r6, pc}
 800572e:	bf00      	nop
 8005730:	40023800 	.word	0x40023800
 8005734:	40007000 	.word	0x40007000

08005738 <main>:
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005738:	2500      	movs	r5, #0
  hadc3.Init.NbrOfConversion = 2;
 800573a:	f04f 0a02 	mov.w	sl, #2
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);

  /*Configure GPIO pin : PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800573e:	f04f 0901 	mov.w	r9, #1
  hi2c1.Instance = I2C1;
 8005742:	f8df 83b0 	ldr.w	r8, [pc, #944]	; 8005af4 <main+0x3bc>
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8005746:	2407      	movs	r4, #7
	  angle = 0;
 8005748:	ed9f 9ad6 	vldr	s18, [pc, #856]	; 8005aa4 <main+0x36c>
{
 800574c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005750:	f8df b3a4 	ldr.w	fp, [pc, #932]	; 8005af8 <main+0x3c0>
{
 8005754:	b0a9      	sub	sp, #164	; 0xa4
  HAL_Init();
 8005756:	f7fb fbc9 	bl	8000eec <HAL_Init>
  htim3.Instance = TIM3;
 800575a:	4fd3      	ldr	r7, [pc, #844]	; (8005aa8 <main+0x370>)
  SystemClock_Config();
 800575c:	f7ff ff8a 	bl	8005674 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005760:	9522      	str	r5, [sp, #136]	; 0x88
 8005762:	9523      	str	r5, [sp, #140]	; 0x8c
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_15, GPIO_PIN_RESET);
 8005764:	462a      	mov	r2, r5
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005766:	9524      	str	r5, [sp, #144]	; 0x90
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_15, GPIO_PIN_RESET);
 8005768:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800576c:	48cf      	ldr	r0, [pc, #828]	; (8005aac <main+0x374>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800576e:	e9cd 5520 	strd	r5, r5, [sp, #128]	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005772:	f8db 6030 	ldr.w	r6, [fp, #48]	; 0x30
 8005776:	f046 0604 	orr.w	r6, r6, #4
 800577a:	f8cb 6030 	str.w	r6, [fp, #48]	; 0x30
 800577e:	f8db 3030 	ldr.w	r3, [fp, #48]	; 0x30
  hadc3.Instance = ADC3;
 8005782:	4ecb      	ldr	r6, [pc, #812]	; (8005ab0 <main+0x378>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005784:	f003 0304 	and.w	r3, r3, #4
 8005788:	9313      	str	r3, [sp, #76]	; 0x4c
 800578a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800578c:	f8db c030 	ldr.w	ip, [fp, #48]	; 0x30
 8005790:	f04c 0c20 	orr.w	ip, ip, #32
 8005794:	f8cb c030 	str.w	ip, [fp, #48]	; 0x30
 8005798:	f8db c030 	ldr.w	ip, [fp, #48]	; 0x30
 800579c:	f00c 0c20 	and.w	ip, ip, #32
 80057a0:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 80057a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80057a6:	f8db c030 	ldr.w	ip, [fp, #48]	; 0x30
 80057aa:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 80057ae:	f8cb c030 	str.w	ip, [fp, #48]	; 0x30
 80057b2:	f8db c030 	ldr.w	ip, [fp, #48]	; 0x30
 80057b6:	f00c 0c80 	and.w	ip, ip, #128	; 0x80
 80057ba:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 80057be:	9b15      	ldr	r3, [sp, #84]	; 0x54
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80057c0:	f8db c030 	ldr.w	ip, [fp, #48]	; 0x30
 80057c4:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
 80057c8:	f8cb c030 	str.w	ip, [fp, #48]	; 0x30
 80057cc:	f8db c030 	ldr.w	ip, [fp, #48]	; 0x30
 80057d0:	f00c 0c40 	and.w	ip, ip, #64	; 0x40
 80057d4:	f8cd c058 	str.w	ip, [sp, #88]	; 0x58
 80057d8:	9b16      	ldr	r3, [sp, #88]	; 0x58
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80057da:	f8db c030 	ldr.w	ip, [fp, #48]	; 0x30
 80057de:	ea4c 0c0a 	orr.w	ip, ip, sl
 80057e2:	f8cb c030 	str.w	ip, [fp, #48]	; 0x30
 80057e6:	f8db c030 	ldr.w	ip, [fp, #48]	; 0x30
 80057ea:	ea0c 0c0a 	and.w	ip, ip, sl
 80057ee:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 80057f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80057f4:	f8db c030 	ldr.w	ip, [fp, #48]	; 0x30
 80057f8:	f04c 0c10 	orr.w	ip, ip, #16
 80057fc:	f8cb c030 	str.w	ip, [fp, #48]	; 0x30
 8005800:	f8db c030 	ldr.w	ip, [fp, #48]	; 0x30
 8005804:	f00c 0c10 	and.w	ip, ip, #16
 8005808:	f8cd c060 	str.w	ip, [sp, #96]	; 0x60
 800580c:	9b18      	ldr	r3, [sp, #96]	; 0x60
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_15, GPIO_PIN_RESET);
 800580e:	f7fc f99f 	bl	8001b50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8005812:	462a      	mov	r2, r5
 8005814:	2108      	movs	r1, #8
 8005816:	48a7      	ldr	r0, [pc, #668]	; (8005ab4 <main+0x37c>)
 8005818:	f7fc f99a 	bl	8001b50 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800581c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005820:	a920      	add	r1, sp, #128	; 0x80
 8005822:	48a2      	ldr	r0, [pc, #648]	; (8005aac <main+0x374>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005824:	e9cd 2920 	strd	r2, r9, [sp, #128]	; 0x80
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005828:	e9cd 5522 	strd	r5, r5, [sp, #136]	; 0x88
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800582c:	f7fc f88a 	bl	8001944 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005830:	2208      	movs	r2, #8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005832:	a920      	add	r1, sp, #128	; 0x80
 8005834:	489f      	ldr	r0, [pc, #636]	; (8005ab4 <main+0x37c>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005836:	9523      	str	r5, [sp, #140]	; 0x8c
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005838:	9220      	str	r2, [sp, #128]	; 0x80
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800583a:	e9cd 9521 	strd	r9, r5, [sp, #132]	; 0x84
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800583e:	f7fc f881 	bl	8001944 <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005842:	f8db 3030 	ldr.w	r3, [fp, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8005846:	462a      	mov	r2, r5
 8005848:	4629      	mov	r1, r5
  __HAL_RCC_DMA2_CLK_ENABLE();
 800584a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800584e:	200b      	movs	r0, #11
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005850:	f8cb 3030 	str.w	r3, [fp, #48]	; 0x30
 8005854:	f8db c030 	ldr.w	ip, [fp, #48]	; 0x30
 8005858:	f40c 0c80 	and.w	ip, ip, #4194304	; 0x400000
 800585c:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
 8005860:	9b11      	ldr	r3, [sp, #68]	; 0x44
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005862:	f8db c030 	ldr.w	ip, [fp, #48]	; 0x30
 8005866:	f44c 1c00 	orr.w	ip, ip, #2097152	; 0x200000
 800586a:	f8cb c030 	str.w	ip, [fp, #48]	; 0x30
 800586e:	f8db 3030 	ldr.w	r3, [fp, #48]	; 0x30
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8005872:	f04f 0b00 	mov.w	fp, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005876:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800587a:	9312      	str	r3, [sp, #72]	; 0x48
 800587c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800587e:	f7fb fded 	bl	800145c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8005882:	200b      	movs	r0, #11
 8005884:	f7fb fe20 	bl	80014c8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8005888:	462a      	mov	r2, r5
 800588a:	4629      	mov	r1, r5
 800588c:	2011      	movs	r0, #17
 800588e:	f7fb fde5 	bl	800145c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8005892:	2011      	movs	r0, #17
 8005894:	f7fb fe18 	bl	80014c8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8005898:	462a      	mov	r2, r5
 800589a:	4629      	mov	r1, r5
 800589c:	2038      	movs	r0, #56	; 0x38
 800589e:	f7fb fddd 	bl	800145c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80058a2:	2038      	movs	r0, #56	; 0x38
 80058a4:	f7fb fe10 	bl	80014c8 <HAL_NVIC_EnableIRQ>
  hi2c1.Instance = I2C1;
 80058a8:	4b83      	ldr	r3, [pc, #524]	; (8005ab8 <main+0x380>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80058aa:	4640      	mov	r0, r8
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80058ac:	f8c8 5020 	str.w	r5, [r8, #32]
  hi2c1.Instance = I2C1;
 80058b0:	f8c8 3000 	str.w	r3, [r8]
  hi2c1.Init.Timing = 0x20303E5D;
 80058b4:	4b81      	ldr	r3, [pc, #516]	; (8005abc <main+0x384>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80058b6:	e9c8 5902 	strd	r5, r9, [r8, #8]
  hi2c1.Init.Timing = 0x20303E5D;
 80058ba:	f8c8 3004 	str.w	r3, [r8, #4]
  hi2c1.Init.OwnAddress2 = 0;
 80058be:	e9c8 5504 	strd	r5, r5, [r8, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80058c2:	e9c8 5506 	strd	r5, r5, [r8, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80058c6:	f7fc f9f9 	bl	8001cbc <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80058ca:	4629      	mov	r1, r5
 80058cc:	4640      	mov	r0, r8
 80058ce:	f7fc fc51 	bl	8002174 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80058d2:	4629      	mov	r1, r5
 80058d4:	4640      	mov	r0, r8
 80058d6:	f7fc fc77 	bl	80021c8 <HAL_I2CEx_ConfigDigitalFilter>
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80058da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  hadc3.Instance = ADC3;
 80058de:	4978      	ldr	r1, [pc, #480]	; (8005ac0 <main+0x388>)
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80058e0:	4630      	mov	r0, r6
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80058e2:	4b78      	ldr	r3, [pc, #480]	; (8005ac4 <main+0x38c>)
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80058e4:	60b5      	str	r5, [r6, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80058e6:	f8c6 9010 	str.w	r9, [r6, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80058ea:	f8c6 9018 	str.w	r9, [r6, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80058ee:	f886 5020 	strb.w	r5, [r6, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80058f2:	62f5      	str	r5, [r6, #44]	; 0x2c
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80058f4:	60f5      	str	r5, [r6, #12]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80058f6:	f886 9030 	strb.w	r9, [r6, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80058fa:	6175      	str	r5, [r6, #20]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80058fc:	62b3      	str	r3, [r6, #40]	; 0x28
  hadc3.Init.NbrOfConversion = 2;
 80058fe:	f8c6 a01c 	str.w	sl, [r6, #28]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005902:	e9c6 1200 	strd	r1, r2, [r6]
  ADC_ChannelConfTypeDef sConfig = {0};
 8005906:	e9cd 5520 	strd	r5, r5, [sp, #128]	; 0x80
 800590a:	e9cd 5522 	strd	r5, r5, [sp, #136]	; 0x88
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800590e:	f7fb fb1d 	bl	8000f4c <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_6;
 8005912:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8005914:	a920      	add	r1, sp, #128	; 0x80
 8005916:	4630      	mov	r0, r6
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8005918:	9422      	str	r4, [sp, #136]	; 0x88
  sConfig.Channel = ADC_CHANNEL_6;
 800591a:	e9cd 3920 	strd	r3, r9, [sp, #128]	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800591e:	f7fb fcc9 	bl	80012b4 <HAL_ADC_ConfigChannel>
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8005922:	a920      	add	r1, sp, #128	; 0x80
 8005924:	4630      	mov	r0, r6
  sConfig.Channel = ADC_CHANNEL_7;
 8005926:	e9cd 4a20 	strd	r4, sl, [sp, #128]	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800592a:	f7fb fcc3 	bl	80012b4 <HAL_ADC_ConfigChannel>
  htim3.Init.Period = 1920;
 800592e:	f44f 63f0 	mov.w	r3, #1920	; 0x780
  htim3.Instance = TIM3;
 8005932:	4965      	ldr	r1, [pc, #404]	; (8005ac8 <main+0x390>)
  htim3.Init.Prescaler = 25;
 8005934:	2219      	movs	r2, #25
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005936:	4638      	mov	r0, r7
  htim3.Init.Period = 1920;
 8005938:	60fb      	str	r3, [r7, #12]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800593a:	60bd      	str	r5, [r7, #8]
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800593c:	2460      	movs	r4, #96	; 0x60
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800593e:	613d      	str	r5, [r7, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005940:	61bd      	str	r5, [r7, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005942:	951c      	str	r5, [sp, #112]	; 0x70
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005944:	9519      	str	r5, [sp, #100]	; 0x64
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005946:	9526      	str	r5, [sp, #152]	; 0x98
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005948:	951f      	str	r5, [sp, #124]	; 0x7c
 800594a:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 8005afc <main+0x3c4>
  htim3.Init.Prescaler = 25;
 800594e:	e9c7 1200 	strd	r1, r2, [r7]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005952:	e9cd 5520 	strd	r5, r5, [sp, #128]	; 0x80
 8005956:	e9cd 5522 	strd	r5, r5, [sp, #136]	; 0x88
 800595a:	e9cd 5524 	strd	r5, r5, [sp, #144]	; 0x90
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800595e:	e9cd 551d 	strd	r5, r5, [sp, #116]	; 0x74
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005962:	e9cd 551a 	strd	r5, r5, [sp, #104]	; 0x68
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005966:	f7fd fc07 	bl	8003178 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800596a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800596e:	a91c      	add	r1, sp, #112	; 0x70
 8005970:	4638      	mov	r0, r7
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005972:	921c      	str	r2, [sp, #112]	; 0x70
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005974:	f7fd ff7a 	bl	800386c <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005978:	4638      	mov	r0, r7
 800597a:	f7fd fc99 	bl	80032b0 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800597e:	a919      	add	r1, sp, #100	; 0x64
 8005980:	4638      	mov	r0, r7
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005982:	9519      	str	r5, [sp, #100]	; 0x64
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005984:	951b      	str	r5, [sp, #108]	; 0x6c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005986:	f7fe f819 	bl	80039bc <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800598a:	462a      	mov	r2, r5
 800598c:	a920      	add	r1, sp, #128	; 0x80
 800598e:	4638      	mov	r0, r7
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005990:	9524      	str	r5, [sp, #144]	; 0x90
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005992:	9420      	str	r4, [sp, #128]	; 0x80
  huart8.Init.BaudRate = 115200;
 8005994:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005998:	e9cd 5521 	strd	r5, r5, [sp, #132]	; 0x84
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800599c:	f7fd fdc2 	bl	8003524 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 80059a0:	4638      	mov	r0, r7
 80059a2:	f000 fa73 	bl	8005e8c <HAL_TIM_MspPostInit>
  huart8.Instance = UART8;
 80059a6:	4a49      	ldr	r2, [pc, #292]	; (8005acc <main+0x394>)
 80059a8:	4b49      	ldr	r3, [pc, #292]	; (8005ad0 <main+0x398>)
  huart8.Init.Mode = UART_MODE_TX_RX;
 80059aa:	210c      	movs	r1, #12
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80059ac:	4610      	mov	r0, r2
  huart8.Init.Parity = UART_PARITY_NONE;
 80059ae:	6115      	str	r5, [r2, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80059b0:	6151      	str	r1, [r2, #20]
  huart8.Init.BaudRate = 115200;
 80059b2:	e9c2 3400 	strd	r3, r4, [r2]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80059b6:	e9c2 5502 	strd	r5, r5, [r2, #8]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80059ba:	e9c2 5506 	strd	r5, r5, [r2, #24]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80059be:	e9c2 5508 	strd	r5, r5, [r2, #32]
  hrtc.Instance = RTC;
 80059c2:	4c44      	ldr	r4, [pc, #272]	; (8005ad4 <main+0x39c>)
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80059c4:	f7fe f9f2 	bl	8003dac <HAL_UART_Init>
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80059c8:	4843      	ldr	r0, [pc, #268]	; (8005ad8 <main+0x3a0>)
  hrtc.Init.AsynchPrediv = 127;
 80059ca:	217f      	movs	r1, #127	; 0x7f
  hrtc.Init.SynchPrediv = 255;
 80059cc:	22ff      	movs	r2, #255	; 0xff
  RTC_DateTypeDef sDate = {0};
 80059ce:	951c      	str	r5, [sp, #112]	; 0x70
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80059d0:	6045      	str	r5, [r0, #4]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80059d2:	6185      	str	r5, [r0, #24]
  hrtc.Instance = RTC;
 80059d4:	6004      	str	r4, [r0, #0]
  sTime.Hours = 0x18;
 80059d6:	2418      	movs	r4, #24
  hrtc.Init.SynchPrediv = 255;
 80059d8:	e9c0 1202 	strd	r1, r2, [r0, #8]
  RTC_TimeTypeDef sTime = {0};
 80059dc:	e9cd 5520 	strd	r5, r5, [sp, #128]	; 0x80
 80059e0:	e9cd 5522 	strd	r5, r5, [sp, #136]	; 0x88
 80059e4:	e9cd 5524 	strd	r5, r5, [sp, #144]	; 0x90
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80059e8:	e9c0 5504 	strd	r5, r5, [r0, #16]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80059ec:	f7fd fa08 	bl	8002e00 <HAL_RTC_Init>
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80059f0:	f04f 0c00 	mov.w	ip, #0
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80059f4:	464a      	mov	r2, r9
 80059f6:	a920      	add	r1, sp, #128	; 0x80
 80059f8:	4837      	ldr	r0, [pc, #220]	; (8005ad8 <main+0x3a0>)
  sTime.Minutes = 0x0;
 80059fa:	f88d 5082 	strb.w	r5, [sp, #130]	; 0x82
  sTime.Hours = 0x18;
 80059fe:	f8ad 4080 	strh.w	r4, [sp, #128]	; 0x80
  hi2c2.Instance = I2C2;
 8005a02:	4c36      	ldr	r4, [pc, #216]	; (8005adc <main+0x3a4>)
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8005a04:	e9cd bc24 	strd	fp, ip, [sp, #144]	; 0x90
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8005a08:	f7fd fa68 	bl	8002edc <HAL_RTC_SetTime>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8005a0c:	f8df c0f0 	ldr.w	ip, [pc, #240]	; 8005b00 <main+0x3c8>
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8005a10:	a91c      	add	r1, sp, #112	; 0x70
 8005a12:	464a      	mov	r2, r9
 8005a14:	4830      	ldr	r0, [pc, #192]	; (8005ad8 <main+0x3a0>)
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8005a16:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8005a1a:	f7fd fb13 	bl	8003044 <HAL_RTC_SetDate>
  hi2c2.Instance = I2C2;
 8005a1e:	4b30      	ldr	r3, [pc, #192]	; (8005ae0 <main+0x3a8>)
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005a20:	4620      	mov	r0, r4
  hi2c2.Init.Timing = 0x20303E5D;
 8005a22:	4a26      	ldr	r2, [pc, #152]	; (8005abc <main+0x384>)
  hi2c2.Instance = I2C2;
 8005a24:	6023      	str	r3, [r4, #0]
	  GUI_SetFont(&GUI_Font24B_ASCII);
 8005a26:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 8005b04 <main+0x3cc>
  hi2c2.Init.OwnAddress1 = 0;
 8005a2a:	e9c4 2501 	strd	r2, r5, [r4, #4]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005a2e:	e9c4 9503 	strd	r9, r5, [r4, #12]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005a32:	e9c4 5505 	strd	r5, r5, [r4, #20]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005a36:	e9c4 5507 	strd	r5, r5, [r4, #28]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005a3a:	f7fc f93f 	bl	8001cbc <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005a3e:	4629      	mov	r1, r5
 8005a40:	4620      	mov	r0, r4
 8005a42:	f7fc fb97 	bl	8002174 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8005a46:	4629      	mov	r1, r5
 8005a48:	4620      	mov	r0, r4
 8005a4a:	f7fc fbbd 	bl	80021c8 <HAL_I2CEx_ConfigDigitalFilter>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);   //mora da se ukljuci da bi se pokreuo PWM
 8005a4e:	4629      	mov	r1, r5
 8005a50:	4638      	mov	r0, r7
 8005a52:	4d24      	ldr	r5, [pc, #144]	; (8005ae4 <main+0x3ac>)
 8005a54:	f7fd fcc6 	bl	80033e4 <HAL_TIM_PWM_Start>
  HAL_ADC_Start_DMA(&hadc3,ADC_BUF,1);
 8005a58:	464a      	mov	r2, r9
 8005a5a:	4923      	ldr	r1, [pc, #140]	; (8005ae8 <main+0x3b0>)
 8005a5c:	4630      	mov	r0, r6
 8005a5e:	f7fb fb2b 	bl	80010b8 <HAL_ADC_Start_DMA>
 8005a62:	4f22      	ldr	r7, [pc, #136]	; (8005aec <main+0x3b4>)
  Init_LCD_GPIO();
 8005a64:	f7fe fb7c 	bl	8004160 <Init_LCD_GPIO>
  Init_TOUCH_GPIO(hi2c1);
 8005a68:	f108 0e10 	add.w	lr, r8, #16
 8005a6c:	46ec      	mov	ip, sp
 8005a6e:	4e20      	ldr	r6, [pc, #128]	; (8005af0 <main+0x3b8>)
	  x_coordinate=(136+(sin(angle)*80));
 8005a70:	f8df 9094 	ldr.w	r9, [pc, #148]	; 8005b08 <main+0x3d0>
  Init_TOUCH_GPIO(hi2c1);
 8005a74:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005a78:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005a7c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005a80:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005a84:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005a88:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005a8c:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8005a90:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8005a94:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8005a98:	f7fe ffce 	bl	8004a38 <Init_TOUCH_GPIO>
	  x_coordinate=(136+(sin(angle)*80));
 8005a9c:	f04f 0800 	mov.w	r8, #0
 8005aa0:	e034      	b.n	8005b0c <main+0x3d4>
 8005aa2:	bf00      	nop
 8005aa4:	00000000 	.word	0x00000000
 8005aa8:	20019378 	.word	0x20019378
 8005aac:	40021800 	.word	0x40021800
 8005ab0:	200193dc 	.word	0x200193dc
 8005ab4:	40020400 	.word	0x40020400
 8005ab8:	40005400 	.word	0x40005400
 8005abc:	20303e5d 	.word	0x20303e5d
 8005ac0:	40012200 	.word	0x40012200
 8005ac4:	0f000001 	.word	0x0f000001
 8005ac8:	40000400 	.word	0x40000400
 8005acc:	2001950c 	.word	0x2001950c
 8005ad0:	40007c00 	.word	0x40007c00
 8005ad4:	40002800 	.word	0x40002800
 8005ad8:	200194e8 	.word	0x200194e8
 8005adc:	200192ac 	.word	0x200192ac
 8005ae0:	40005800 	.word	0x40005800
 8005ae4:	2001904c 	.word	0x2001904c
 8005ae8:	20019598 	.word	0x20019598
 8005aec:	20019044 	.word	0x20019044
 8005af0:	20019048 	.word	0x20019048
 8005af4:	2001925c 	.word	0x2001925c
 8005af8:	40023800 	.word	0x40023800
 8005afc:	200192a8 	.word	0x200192a8
 8005b00:	00010101 	.word	0x00010101
 8005b04:	0800e734 	.word	0x0800e734
 8005b08:	40610000 	.word	0x40610000
  STMPE610_Init();
 8005b0c:	f7fe ffa6 	bl	8004a5c <STMPE610_Init>
  GUI_Init();
 8005b10:	f004 f8ec 	bl	8009cec <GUI_Init>
  tof_sens->I2cHandle = &hi2c2;
 8005b14:	4b5e      	ldr	r3, [pc, #376]	; (8005c90 <main+0x558>)
 8005b16:	6818      	ldr	r0, [r3, #0]
 8005b18:	f8c0 415c 	str.w	r4, [r0, #348]	; 0x15c
  VL53L0X_DataInit(tof_sens);
 8005b1c:	f7ff f950 	bl	8004dc0 <VL53L0X_DataInit>
	  hMem2 = GUI_MEMDEV_Create(46,46,180,180);
 8005b20:	23b4      	movs	r3, #180	; 0xb4
 8005b22:	212e      	movs	r1, #46	; 0x2e
	  x_coordinate=(136+(sin(angle)*50));
 8005b24:	2488      	movs	r4, #136	; 0x88
	  hMem2 = GUI_MEMDEV_Create(46,46,180,180);
 8005b26:	461a      	mov	r2, r3
 8005b28:	4608      	mov	r0, r1
 8005b2a:	f001 fa0f 	bl	8006f4c <GUI_MEMDEV_Create>
 8005b2e:	f8ca 0000 	str.w	r0, [sl]
	  GUI_MEMDEV_Select(hMem2);
 8005b32:	f001 fa13 	bl	8006f5c <GUI_MEMDEV_Select>
	  GUI_Clear();
 8005b36:	f004 f89f 	bl	8009c78 <GUI_Clear>
	  GUI_SetFont(&GUI_Font24B_ASCII);
 8005b3a:	4658      	mov	r0, fp
 8005b3c:	f003 fbd6 	bl	80092ec <GUI_SetFont>
	  GUI_SetTextMode(GUI_TM_TRANS);
 8005b40:	2002      	movs	r0, #2
 8005b42:	f003 fbc9 	bl	80092d8 <GUI_SetTextMode>
	  GUI_DispStringHCenterAt("SEIKO", 136, 80);
 8005b46:	4621      	mov	r1, r4
 8005b48:	2250      	movs	r2, #80	; 0x50
 8005b4a:	4852      	ldr	r0, [pc, #328]	; (8005c94 <main+0x55c>)
 8005b4c:	f003 fec4 	bl	80098d8 <GUI_DispStringHCenterAt>
	  y_coordinate=(136-(cos(angle)*50));
 8005b50:	2356      	movs	r3, #86	; 0x56
	  GUI_SetColor(GUI_BLACK);
 8005b52:	2000      	movs	r0, #0
	  angle = 0;
 8005b54:	ed87 9a00 	vstr	s18, [r7]
	  y_coordinate=(136-(cos(angle)*50));
 8005b58:	602b      	str	r3, [r5, #0]
	  x_coordinate=(136+(sin(angle)*50));
 8005b5a:	6034      	str	r4, [r6, #0]
	  GUI_SetColor(GUI_BLACK);
 8005b5c:	f003 fbd4 	bl	8009308 <GUI_SetColor>
	  GUI_SetPenSize( 10 );
 8005b60:	200a      	movs	r0, #10
 8005b62:	f003 fc0f 	bl	8009384 <GUI_SetPenSize>
	  GUI_DrawLine(136, 136, x_coordinate, y_coordinate);//sat
 8005b66:	682b      	ldr	r3, [r5, #0]
 8005b68:	6832      	ldr	r2, [r6, #0]
 8005b6a:	4621      	mov	r1, r4
 8005b6c:	4620      	mov	r0, r4
 8005b6e:	f003 fe95 	bl	800989c <GUI_DrawLine>
	  angle=(angle/57.29577951) ; //Convert degrees to radians
 8005b72:	6838      	ldr	r0, [r7, #0]
 8005b74:	f7fa fcac 	bl	80004d0 <__aeabi_f2d>
 8005b78:	a343      	add	r3, pc, #268	; (adr r3, 8005c88 <main+0x550>)
 8005b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b7e:	f7fa fe29 	bl	80007d4 <__aeabi_ddiv>
 8005b82:	f7fa ffbf 	bl	8000b04 <__aeabi_d2f>
 8005b86:	6038      	str	r0, [r7, #0]
	  x_coordinate=(136+(sin(angle)*80));
 8005b88:	f7fa fca2 	bl	80004d0 <__aeabi_f2d>
 8005b8c:	ec41 0b10 	vmov	d0, r0, r1
 8005b90:	ec41 0b18 	vmov	d8, r0, r1
 8005b94:	f006 fe2c 	bl	800c7f0 <sin>
 8005b98:	2200      	movs	r2, #0
 8005b9a:	4b3f      	ldr	r3, [pc, #252]	; (8005c98 <main+0x560>)
 8005b9c:	ec51 0b10 	vmov	r0, r1, d0
 8005ba0:	f7fa fcee 	bl	8000580 <__aeabi_dmul>
 8005ba4:	4642      	mov	r2, r8
 8005ba6:	464b      	mov	r3, r9
 8005ba8:	f7fa fb34 	bl	8000214 <__adddf3>
 8005bac:	f7fa ff82 	bl	8000ab4 <__aeabi_d2iz>
	  y_coordinate=(136-(cos(angle)*80));
 8005bb0:	eeb0 0a48 	vmov.f32	s0, s16
 8005bb4:	eef0 0a68 	vmov.f32	s1, s17
	  x_coordinate=(136+(sin(angle)*80));
 8005bb8:	6030      	str	r0, [r6, #0]
	  y_coordinate=(136-(cos(angle)*80));
 8005bba:	f006 fdd5 	bl	800c768 <cos>
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	4b35      	ldr	r3, [pc, #212]	; (8005c98 <main+0x560>)
 8005bc2:	ec51 0b10 	vmov	r0, r1, d0
 8005bc6:	f7fa fcdb 	bl	8000580 <__aeabi_dmul>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	460b      	mov	r3, r1
 8005bce:	4640      	mov	r0, r8
 8005bd0:	4649      	mov	r1, r9
 8005bd2:	f7fa fb1d 	bl	8000210 <__aeabi_dsub>
 8005bd6:	f7fa ff6d 	bl	8000ab4 <__aeabi_d2iz>
 8005bda:	6028      	str	r0, [r5, #0]
	  GUI_SetPenSize( 6 );
 8005bdc:	2006      	movs	r0, #6
 8005bde:	f003 fbd1 	bl	8009384 <GUI_SetPenSize>
	  GUI_DrawLine(136, 136, x_coordinate, y_coordinate);//minut
 8005be2:	682b      	ldr	r3, [r5, #0]
 8005be4:	6832      	ldr	r2, [r6, #0]
 8005be6:	4621      	mov	r1, r4
 8005be8:	4620      	mov	r0, r4
 8005bea:	f003 fe57 	bl	800989c <GUI_DrawLine>
	  angle=(angle/57.29577951) ; //Convert degrees to radians
 8005bee:	6838      	ldr	r0, [r7, #0]
 8005bf0:	f7fa fc6e 	bl	80004d0 <__aeabi_f2d>
 8005bf4:	a324      	add	r3, pc, #144	; (adr r3, 8005c88 <main+0x550>)
 8005bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bfa:	f7fa fdeb 	bl	80007d4 <__aeabi_ddiv>
 8005bfe:	f7fa ff81 	bl	8000b04 <__aeabi_d2f>
 8005c02:	6038      	str	r0, [r7, #0]
	  x_coordinate=(136+(sin(angle)*90));
 8005c04:	f7fa fc64 	bl	80004d0 <__aeabi_f2d>
 8005c08:	ec41 0b10 	vmov	d0, r0, r1
 8005c0c:	ec41 0b18 	vmov	d8, r0, r1
 8005c10:	f006 fdee 	bl	800c7f0 <sin>
 8005c14:	2200      	movs	r2, #0
 8005c16:	4b21      	ldr	r3, [pc, #132]	; (8005c9c <main+0x564>)
 8005c18:	ec51 0b10 	vmov	r0, r1, d0
 8005c1c:	f7fa fcb0 	bl	8000580 <__aeabi_dmul>
 8005c20:	4642      	mov	r2, r8
 8005c22:	464b      	mov	r3, r9
 8005c24:	f7fa faf6 	bl	8000214 <__adddf3>
 8005c28:	f7fa ff44 	bl	8000ab4 <__aeabi_d2iz>
	  y_coordinate=(136-(cos(angle)*90));
 8005c2c:	eeb0 0a48 	vmov.f32	s0, s16
 8005c30:	eef0 0a68 	vmov.f32	s1, s17
	  x_coordinate=(136+(sin(angle)*90));
 8005c34:	6030      	str	r0, [r6, #0]
	  y_coordinate=(136-(cos(angle)*90));
 8005c36:	f006 fd97 	bl	800c768 <cos>
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	4b17      	ldr	r3, [pc, #92]	; (8005c9c <main+0x564>)
 8005c3e:	ec51 0b10 	vmov	r0, r1, d0
 8005c42:	f7fa fc9d 	bl	8000580 <__aeabi_dmul>
 8005c46:	4602      	mov	r2, r0
 8005c48:	460b      	mov	r3, r1
 8005c4a:	4640      	mov	r0, r8
 8005c4c:	4649      	mov	r1, r9
 8005c4e:	f7fa fadf 	bl	8000210 <__aeabi_dsub>
 8005c52:	f7fa ff2f 	bl	8000ab4 <__aeabi_d2iz>
 8005c56:	6028      	str	r0, [r5, #0]
	  GUI_SetColor(GUI_RED);
 8005c58:	20ff      	movs	r0, #255	; 0xff
 8005c5a:	f003 fb55 	bl	8009308 <GUI_SetColor>
	  GUI_SetPenSize( 4 );
 8005c5e:	2004      	movs	r0, #4
 8005c60:	f003 fb90 	bl	8009384 <GUI_SetPenSize>
	  GUI_DrawLine(136, 136, x_coordinate, y_coordinate);//sekund
 8005c64:	4621      	mov	r1, r4
 8005c66:	4620      	mov	r0, r4
 8005c68:	682b      	ldr	r3, [r5, #0]
 8005c6a:	6832      	ldr	r2, [r6, #0]
 8005c6c:	f003 fe16 	bl	800989c <GUI_DrawLine>
	  GUI_MEMDEV_CopyToLCD(hMem2);
 8005c70:	f8da 0000 	ldr.w	r0, [sl]
 8005c74:	f001 f9ea 	bl	800704c <GUI_MEMDEV_CopyToLCD>
	  GUI_MEMDEV_Delete(hMem2);
 8005c78:	f8da 0000 	ldr.w	r0, [sl]
 8005c7c:	f001 f908 	bl	8006e90 <GUI_MEMDEV_Delete>
 8005c80:	e74e      	b.n	8005b20 <main+0x3e8>
 8005c82:	bf00      	nop
 8005c84:	f3af 8000 	nop.w
 8005c88:	1a5d2372 	.word	0x1a5d2372
 8005c8c:	404ca5dc 	.word	0x404ca5dc
 8005c90:	200193c4 	.word	0x200193c4
 8005c94:	0800d894 	.word	0x0800d894
 8005c98:	40540000 	.word	0x40540000
 8005c9c:	40568000 	.word	0x40568000

08005ca0 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop

08005ca4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8005ca4:	4b0a      	ldr	r3, [pc, #40]	; (8005cd0 <HAL_MspInit+0x2c>)
{
 8005ca6:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8005ca8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005caa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005cae:	641a      	str	r2, [r3, #64]	; 0x40
 8005cb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cb2:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8005cb6:	9200      	str	r2, [sp, #0]
 8005cb8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005cba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cbc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cc0:	645a      	str	r2, [r3, #68]	; 0x44
 8005cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cc8:	9301      	str	r3, [sp, #4]
 8005cca:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005ccc:	b002      	add	sp, #8
 8005cce:	4770      	bx	lr
 8005cd0:	40023800 	.word	0x40023800

08005cd4 <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC3)
 8005cd4:	4b27      	ldr	r3, [pc, #156]	; (8005d74 <HAL_ADC_MspInit+0xa0>)
 8005cd6:	6802      	ldr	r2, [r0, #0]
{
 8005cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hadc->Instance==ADC3)
 8005cda:	429a      	cmp	r2, r3
{
 8005cdc:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cde:	f04f 0400 	mov.w	r4, #0
 8005ce2:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8005ce6:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8005cea:	9407      	str	r4, [sp, #28]
  if(hadc->Instance==ADC3)
 8005cec:	d001      	beq.n	8005cf2 <HAL_ADC_MspInit+0x1e>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8005cee:	b009      	add	sp, #36	; 0x24
 8005cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC3_CLK_ENABLE();
 8005cf2:	f503 338b 	add.w	r3, r3, #71168	; 0x11600
 8005cf6:	4606      	mov	r6, r0
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005cf8:	f44f 7040 	mov.w	r0, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005cfc:	2503      	movs	r5, #3
    __HAL_RCC_ADC3_CLK_ENABLE();
 8005cfe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005d00:	a903      	add	r1, sp, #12
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8005d02:	f44f 6780 	mov.w	r7, #1024	; 0x400
    __HAL_RCC_ADC3_CLK_ENABLE();
 8005d06:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d0a:	645a      	str	r2, [r3, #68]	; 0x44
 8005d0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d0e:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8005d12:	9201      	str	r2, [sp, #4]
 8005d14:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005d16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d18:	f042 0220 	orr.w	r2, r2, #32
 8005d1c:	631a      	str	r2, [r3, #48]	; 0x30
 8005d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005d20:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005d22:	f003 0320 	and.w	r3, r3, #32
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005d26:	4814      	ldr	r0, [pc, #80]	; (8005d78 <HAL_ADC_MspInit+0xa4>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005d28:	9504      	str	r5, [sp, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005d2a:	9302      	str	r3, [sp, #8]
    hdma_adc3.Instance = DMA2_Stream0;
 8005d2c:	4d13      	ldr	r5, [pc, #76]	; (8005d7c <HAL_ADC_MspInit+0xa8>)
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005d2e:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005d30:	f7fb fe08 	bl	8001944 <HAL_GPIO_Init>
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8005d34:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    hdma_adc3.Instance = DMA2_Stream0;
 8005d38:	f8df c044 	ldr.w	ip, [pc, #68]	; 8005d80 <HAL_ADC_MspInit+0xac>
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005d3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005d40:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8005d44:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005d48:	60ac      	str	r4, [r5, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d4a:	60ec      	str	r4, [r5, #12]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8005d4c:	e9c5 c000 	strd	ip, r0, [r5]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8005d50:	4628      	mov	r0, r5
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005d52:	e9c5 4408 	strd	r4, r4, [r5, #32]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005d56:	e9c5 7104 	strd	r7, r1, [r5, #16]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8005d5a:	e9c5 2306 	strd	r2, r3, [r5, #24]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8005d5e:	f7fb fbdd 	bl	800151c <HAL_DMA_Init>
 8005d62:	b918      	cbnz	r0, 8005d6c <HAL_ADC_MspInit+0x98>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8005d64:	63b5      	str	r5, [r6, #56]	; 0x38
 8005d66:	63ae      	str	r6, [r5, #56]	; 0x38
}
 8005d68:	b009      	add	sp, #36	; 0x24
 8005d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8005d6c:	f7ff ff98 	bl	8005ca0 <Error_Handler>
 8005d70:	e7f8      	b.n	8005d64 <HAL_ADC_MspInit+0x90>
 8005d72:	bf00      	nop
 8005d74:	40012200 	.word	0x40012200
 8005d78:	40021400 	.word	0x40021400
 8005d7c:	20019310 	.word	0x20019310
 8005d80:	40026410 	.word	0x40026410

08005d84 <HAL_I2C_MspInit>:
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C1)
 8005d84:	6802      	ldr	r2, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d86:	2300      	movs	r3, #0
  if(hi2c->Instance==I2C1)
 8005d88:	4929      	ldr	r1, [pc, #164]	; (8005e30 <HAL_I2C_MspInit+0xac>)
{
 8005d8a:	b570      	push	{r4, r5, r6, lr}
  if(hi2c->Instance==I2C1)
 8005d8c:	428a      	cmp	r2, r1
{
 8005d8e:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d90:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005d94:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005d98:	9309      	str	r3, [sp, #36]	; 0x24
  if(hi2c->Instance==I2C1)
 8005d9a:	d026      	beq.n	8005dea <HAL_I2C_MspInit+0x66>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 8005d9c:	4b25      	ldr	r3, [pc, #148]	; (8005e34 <HAL_I2C_MspInit+0xb0>)
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d001      	beq.n	8005da6 <HAL_I2C_MspInit+0x22>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8005da2:	b00a      	add	sp, #40	; 0x28
 8005da4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005da6:	4c24      	ldr	r4, [pc, #144]	; (8005e38 <HAL_I2C_MspInit+0xb4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005da8:	2012      	movs	r0, #18
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005daa:	2203      	movs	r2, #3
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005dac:	2601      	movs	r6, #1
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005dae:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005db0:	2504      	movs	r5, #4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005db2:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005db4:	f043 0320 	orr.w	r3, r3, #32
 8005db8:	6323      	str	r3, [r4, #48]	; 0x30
 8005dba:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005dbc:	9006      	str	r0, [sp, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005dbe:	f003 0320 	and.w	r3, r3, #32
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005dc2:	481e      	ldr	r0, [pc, #120]	; (8005e3c <HAL_I2C_MspInit+0xb8>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005dc4:	9205      	str	r2, [sp, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005dc6:	9303      	str	r3, [sp, #12]
 8005dc8:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005dca:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005dcc:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005dce:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005dd0:	f7fb fdb8 	bl	8001944 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005dd4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005dd6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005dda:	6423      	str	r3, [r4, #64]	; 0x40
 8005ddc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005de2:	9304      	str	r3, [sp, #16]
 8005de4:	9b04      	ldr	r3, [sp, #16]
}
 8005de6:	b00a      	add	sp, #40	; 0x28
 8005de8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005dea:	4c13      	ldr	r4, [pc, #76]	; (8005e38 <HAL_I2C_MspInit+0xb4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005dec:	2212      	movs	r2, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005dee:	2001      	movs	r0, #1
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005df0:	26c0      	movs	r6, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005df2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005df4:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005df6:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005df8:	f043 0302 	orr.w	r3, r3, #2
 8005dfc:	6323      	str	r3, [r4, #48]	; 0x30
 8005dfe:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005e00:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005e02:	2204      	movs	r2, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e04:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005e08:	9007      	str	r0, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e0a:	480d      	ldr	r0, [pc, #52]	; (8005e40 <HAL_I2C_MspInit+0xbc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e0c:	9301      	str	r3, [sp, #4]
 8005e0e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005e10:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005e12:	e9cd 5208 	strd	r5, r2, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e16:	f7fb fd95 	bl	8001944 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005e1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e20:	6423      	str	r3, [r4, #64]	; 0x40
 8005e22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e28:	9302      	str	r3, [sp, #8]
 8005e2a:	9b02      	ldr	r3, [sp, #8]
}
 8005e2c:	b00a      	add	sp, #40	; 0x28
 8005e2e:	bd70      	pop	{r4, r5, r6, pc}
 8005e30:	40005400 	.word	0x40005400
 8005e34:	40005800 	.word	0x40005800
 8005e38:	40023800 	.word	0x40023800
 8005e3c:	40021400 	.word	0x40021400
 8005e40:	40020400 	.word	0x40020400

08005e44 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8005e44:	6802      	ldr	r2, [r0, #0]
 8005e46:	4b04      	ldr	r3, [pc, #16]	; (8005e58 <HAL_RTC_MspInit+0x14>)
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d104      	bne.n	8005e56 <HAL_RTC_MspInit+0x12>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005e4c:	4a03      	ldr	r2, [pc, #12]	; (8005e5c <HAL_RTC_MspInit+0x18>)
 8005e4e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8005e50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e54:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8005e56:	4770      	bx	lr
 8005e58:	40002800 	.word	0x40002800
 8005e5c:	40023800 	.word	0x40023800

08005e60 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM3)
 8005e60:	6802      	ldr	r2, [r0, #0]
 8005e62:	4b09      	ldr	r3, [pc, #36]	; (8005e88 <HAL_TIM_Base_MspInit+0x28>)
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d000      	beq.n	8005e6a <HAL_TIM_Base_MspInit+0xa>
 8005e68:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005e6a:	f503 330d 	add.w	r3, r3, #144384	; 0x23400
{
 8005e6e:	b082      	sub	sp, #8
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005e70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e72:	f042 0202 	orr.w	r2, r2, #2
 8005e76:	641a      	str	r2, [r3, #64]	; 0x40
 8005e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7a:	f003 0302 	and.w	r3, r3, #2
 8005e7e:	9301      	str	r3, [sp, #4]
 8005e80:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005e82:	b002      	add	sp, #8
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	40000400 	.word	0x40000400

08005e8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM3)
 8005e8c:	6801      	ldr	r1, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e8e:	2300      	movs	r3, #0
  if(htim->Instance==TIM3)
 8005e90:	4a0f      	ldr	r2, [pc, #60]	; (8005ed0 <HAL_TIM_MspPostInit+0x44>)
{
 8005e92:	b530      	push	{r4, r5, lr}
  if(htim->Instance==TIM3)
 8005e94:	4291      	cmp	r1, r2
{
 8005e96:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e98:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8005e9c:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8005ea0:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM3)
 8005ea2:	d001      	beq.n	8005ea8 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005ea4:	b007      	add	sp, #28
 8005ea6:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ea8:	4b0a      	ldr	r3, [pc, #40]	; (8005ed4 <HAL_TIM_MspPostInit+0x48>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005eaa:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005eac:	2510      	movs	r5, #16
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005eae:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005eb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005eb2:	4809      	ldr	r0, [pc, #36]	; (8005ed8 <HAL_TIM_MspPostInit+0x4c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005eb4:	4322      	orrs	r2, r4
 8005eb6:	631a      	str	r2, [r3, #48]	; 0x30
 8005eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005eba:	9501      	str	r5, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ebc:	4023      	ands	r3, r4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ebe:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005ec0:	9405      	str	r4, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ec2:	9300      	str	r3, [sp, #0]
 8005ec4:	9b00      	ldr	r3, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ec6:	f7fb fd3d 	bl	8001944 <HAL_GPIO_Init>
}
 8005eca:	b007      	add	sp, #28
 8005ecc:	bd30      	pop	{r4, r5, pc}
 8005ece:	bf00      	nop
 8005ed0:	40000400 	.word	0x40000400
 8005ed4:	40023800 	.word	0x40023800
 8005ed8:	40020400 	.word	0x40020400

08005edc <HAL_UART_MspInit>:
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==UART8)
 8005edc:	4b36      	ldr	r3, [pc, #216]	; (8005fb8 <HAL_UART_MspInit+0xdc>)
 8005ede:	6802      	ldr	r2, [r0, #0]
{
 8005ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(huart->Instance==UART8)
 8005ee2:	429a      	cmp	r2, r3
{
 8005ee4:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ee6:	f04f 0400 	mov.w	r4, #0
 8005eea:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8005eee:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8005ef2:	9407      	str	r4, [sp, #28]
  if(huart->Instance==UART8)
 8005ef4:	d001      	beq.n	8005efa <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }

}
 8005ef6:	b009      	add	sp, #36	; 0x24
 8005ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_UART8_CLK_ENABLE();
 8005efa:	f503 33de 	add.w	r3, r3, #113664	; 0x1bc00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005efe:	2502      	movs	r5, #2
 8005f00:	4606      	mov	r6, r0
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005f02:	2003      	movs	r0, #3
    __HAL_RCC_UART8_CLK_ENABLE();
 8005f04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005f06:	a903      	add	r1, sp, #12
    __HAL_RCC_UART8_CLK_ENABLE();
 8005f08:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005f0c:	641a      	str	r2, [r3, #64]	; 0x40
 8005f0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f10:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005f14:	9201      	str	r2, [sp, #4]
 8005f16:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005f18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f1a:	f042 0210 	orr.w	r2, r2, #16
 8005f1e:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8005f20:	2208      	movs	r2, #8
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005f24:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005f26:	f003 0310 	and.w	r3, r3, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f2a:	9006      	str	r0, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f2c:	9504      	str	r5, [sp, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005f2e:	9302      	str	r3, [sp, #8]
    hdma_uart8_rx.Instance = DMA1_Stream6;
 8005f30:	4d22      	ldr	r5, [pc, #136]	; (8005fbc <HAL_UART_MspInit+0xe0>)
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005f32:	4823      	ldr	r0, [pc, #140]	; (8005fc0 <HAL_UART_MspInit+0xe4>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005f34:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8005f36:	9207      	str	r2, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005f38:	f7fb fd04 	bl	8001944 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream6;
 8005f3c:	4921      	ldr	r1, [pc, #132]	; (8005fc4 <HAL_UART_MspInit+0xe8>)
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 8005f3e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005f42:	f44f 6380 	mov.w	r3, #1024	; 0x400
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8005f46:	4628      	mov	r0, r5
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005f48:	626c      	str	r4, [r5, #36]	; 0x24
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005f4a:	612b      	str	r3, [r5, #16]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005f4c:	e9c5 4402 	strd	r4, r4, [r5, #8]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005f50:	e9c5 4405 	strd	r4, r4, [r5, #20]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005f54:	e9c5 4407 	strd	r4, r4, [r5, #28]
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 8005f58:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8005f5c:	f7fb fade 	bl	800151c <HAL_DMA_Init>
 8005f60:	bb18      	cbnz	r0, 8005faa <HAL_UART_MspInit+0xce>
    hdma_uart8_tx.Instance = DMA1_Stream0;
 8005f62:	4c19      	ldr	r4, [pc, #100]	; (8005fc8 <HAL_UART_MspInit+0xec>)
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005f64:	2300      	movs	r3, #0
    hdma_uart8_tx.Instance = DMA1_Stream0;
 8005f66:	4819      	ldr	r0, [pc, #100]	; (8005fcc <HAL_UART_MspInit+0xf0>)
    hdma_uart8_tx.Init.Channel = DMA_CHANNEL_5;
 8005f68:	f04f 6720 	mov.w	r7, #167772160	; 0xa000000
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005f6c:	2140      	movs	r1, #64	; 0x40
    hdma_uart8_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005f6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart8_tx.Instance = DMA1_Stream0;
 8005f72:	6020      	str	r0, [r4, #0]
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 8005f74:	4620      	mov	r0, r4
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 8005f76:	6735      	str	r5, [r6, #112]	; 0x70
 8005f78:	63ae      	str	r6, [r5, #56]	; 0x38
    hdma_uart8_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005f7a:	6263      	str	r3, [r4, #36]	; 0x24
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005f7c:	e9c4 7101 	strd	r7, r1, [r4, #4]
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005f80:	e9c4 3203 	strd	r3, r2, [r4, #12]
    hdma_uart8_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005f84:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_uart8_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005f88:	e9c4 3307 	strd	r3, r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 8005f8c:	f7fb fac6 	bl	800151c <HAL_DMA_Init>
 8005f90:	b970      	cbnz	r0, 8005fb0 <HAL_UART_MspInit+0xd4>
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8005f92:	2200      	movs	r2, #0
    __HAL_LINKDMA(huart,hdmatx,hdma_uart8_tx);
 8005f94:	66f4      	str	r4, [r6, #108]	; 0x6c
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8005f96:	2053      	movs	r0, #83	; 0x53
    __HAL_LINKDMA(huart,hdmatx,hdma_uart8_tx);
 8005f98:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8005f9a:	4611      	mov	r1, r2
 8005f9c:	f7fb fa5e 	bl	800145c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8005fa0:	2053      	movs	r0, #83	; 0x53
 8005fa2:	f7fb fa91 	bl	80014c8 <HAL_NVIC_EnableIRQ>
}
 8005fa6:	b009      	add	sp, #36	; 0x24
 8005fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8005faa:	f7ff fe79 	bl	8005ca0 <Error_Handler>
 8005fae:	e7d8      	b.n	8005f62 <HAL_UART_MspInit+0x86>
      Error_Handler();
 8005fb0:	f7ff fe76 	bl	8005ca0 <Error_Handler>
 8005fb4:	e7ed      	b.n	8005f92 <HAL_UART_MspInit+0xb6>
 8005fb6:	bf00      	nop
 8005fb8:	40007c00 	.word	0x40007c00
 8005fbc:	20019428 	.word	0x20019428
 8005fc0:	40021000 	.word	0x40021000
 8005fc4:	400260a0 	.word	0x400260a0
 8005fc8:	20019488 	.word	0x20019488
 8005fcc:	40026010 	.word	0x40026010

08005fd0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop

08005fd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005fd4:	e7fe      	b.n	8005fd4 <HardFault_Handler>
 8005fd6:	bf00      	nop

08005fd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005fd8:	e7fe      	b.n	8005fd8 <MemManage_Handler>
 8005fda:	bf00      	nop

08005fdc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005fdc:	e7fe      	b.n	8005fdc <BusFault_Handler>
 8005fde:	bf00      	nop

08005fe0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005fe0:	e7fe      	b.n	8005fe0 <UsageFault_Handler>
 8005fe2:	bf00      	nop

08005fe4 <SVC_Handler>:
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop

08005fe8 <DebugMon_Handler>:
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop

08005fec <PendSV_Handler>:
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop

08005ff0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005ff0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005ff2:	f7fa ff87 	bl	8000f04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
HAL_SYSTICK_IRQHandler();
  /* USER CODE END SysTick_IRQn 1 */
}
 8005ff6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
HAL_SYSTICK_IRQHandler();
 8005ffa:	f7fb ba8b 	b.w	8001514 <HAL_SYSTICK_IRQHandler>
 8005ffe:	bf00      	nop

08006000 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_tx);
 8006000:	4801      	ldr	r0, [pc, #4]	; (8006008 <DMA1_Stream0_IRQHandler+0x8>)
 8006002:	f7fb bbc9 	b.w	8001798 <HAL_DMA_IRQHandler>
 8006006:	bf00      	nop
 8006008:	20019488 	.word	0x20019488

0800600c <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 800600c:	4801      	ldr	r0, [pc, #4]	; (8006014 <DMA1_Stream6_IRQHandler+0x8>)
 800600e:	f7fb bbc3 	b.w	8001798 <HAL_DMA_IRQHandler>
 8006012:	bf00      	nop
 8006014:	20019428 	.word	0x20019428

08006018 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8006018:	4801      	ldr	r0, [pc, #4]	; (8006020 <DMA2_Stream0_IRQHandler+0x8>)
 800601a:	f7fb bbbd 	b.w	8001798 <HAL_DMA_IRQHandler>
 800601e:	bf00      	nop
 8006020:	20019310 	.word	0x20019310

08006024 <UART8_IRQHandler>:
void UART8_IRQHandler(void)
{
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8006024:	4801      	ldr	r0, [pc, #4]	; (800602c <UART8_IRQHandler+0x8>)
 8006026:	f7fd bd3b 	b.w	8003aa0 <HAL_UART_IRQHandler>
 800602a:	bf00      	nop
 800602c:	2001950c 	.word	0x2001950c

08006030 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006030:	4a03      	ldr	r2, [pc, #12]	; (8006040 <SystemInit+0x10>)
 8006032:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006036:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800603a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800603e:	4770      	bx	lr
 8006040:	e000ed00 	.word	0xe000ed00

08006044 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006044:	f8df d034 	ldr.w	sp, [pc, #52]	; 800607c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006048:	480d      	ldr	r0, [pc, #52]	; (8006080 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800604a:	490e      	ldr	r1, [pc, #56]	; (8006084 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800604c:	4a0e      	ldr	r2, [pc, #56]	; (8006088 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800604e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006050:	e002      	b.n	8006058 <LoopCopyDataInit>

08006052 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006052:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006054:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006056:	3304      	adds	r3, #4

08006058 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006058:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800605a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800605c:	d3f9      	bcc.n	8006052 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800605e:	4a0b      	ldr	r2, [pc, #44]	; (800608c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006060:	4c0b      	ldr	r4, [pc, #44]	; (8006090 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006062:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006064:	e001      	b.n	800606a <LoopFillZerobss>

08006066 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006066:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006068:	3204      	adds	r2, #4

0800606a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800606a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800606c:	d3fb      	bcc.n	8006066 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800606e:	f7ff ffdf 	bl	8006030 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006072:	f006 fb29 	bl	800c6c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006076:	f7ff fb5f 	bl	8005738 <main>
  bx  lr    
 800607a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800607c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8006080:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006084:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8006088:	0800f988 	.word	0x0800f988
  ldr r2, =_sbss
 800608c:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8006090:	20019728 	.word	0x20019728

08006094 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006094:	e7fe      	b.n	8006094 <ADC_IRQHandler>

08006096 <WM_GetParent>:
 8006096:	b508      	push	{r3, lr}
 8006098:	4603      	mov	r3, r0
 800609a:	b110      	cbz	r0, 80060a2 <WM_GetParent+0xc>
 800609c:	f004 fa12 	bl	800a4c4 <GUI_ALLOC_h2p>
 80060a0:	6983      	ldr	r3, [r0, #24]
 80060a2:	4618      	mov	r0, r3
 80060a4:	bd08      	pop	{r3, pc}

080060a6 <WM_GetFirstChild>:
 80060a6:	b508      	push	{r3, lr}
 80060a8:	4603      	mov	r3, r0
 80060aa:	b110      	cbz	r0, 80060b2 <WM_GetFirstChild+0xc>
 80060ac:	f004 fa0a 	bl	800a4c4 <GUI_ALLOC_h2p>
 80060b0:	69c3      	ldr	r3, [r0, #28]
 80060b2:	4618      	mov	r0, r3
 80060b4:	bd08      	pop	{r3, pc}
	...

080060b8 <WM_GetDesktopWindow>:
 80060b8:	4b03      	ldr	r3, [pc, #12]	; (80060c8 <WM_GetDesktopWindow+0x10>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	7c5a      	ldrb	r2, [r3, #17]
 80060be:	4b03      	ldr	r3, [pc, #12]	; (80060cc <WM_GetDesktopWindow+0x14>)
 80060c0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	20000018 	.word	0x20000018
 80060cc:	200195a8 	.word	0x200195a8

080060d0 <WM__GetClientRectEx>:
 80060d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060d2:	460d      	mov	r5, r1
 80060d4:	b158      	cbz	r0, 80060ee <WM__GetClientRectEx+0x1e>
 80060d6:	b151      	cbz	r1, 80060ee <WM__GetClientRectEx+0x1e>
 80060d8:	f004 f9fe 	bl	800a4d8 <GUI_ALLOC_LockH>
 80060dc:	ac02      	add	r4, sp, #8
 80060de:	4629      	mov	r1, r5
 80060e0:	f844 0d04 	str.w	r0, [r4, #-4]!
 80060e4:	f000 fad5 	bl	8006692 <WM__GetClientRectWin>
 80060e8:	4620      	mov	r0, r4
 80060ea:	f004 fa03 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 80060ee:	b003      	add	sp, #12
 80060f0:	bd30      	pop	{r4, r5, pc}
	...

080060f4 <_OnExit>:
 80060f4:	4a0a      	ldr	r2, [pc, #40]	; (8006120 <_OnExit+0x2c>)
 80060f6:	490b      	ldr	r1, [pc, #44]	; (8006124 <_OnExit+0x30>)
 80060f8:	2300      	movs	r3, #0
 80060fa:	7013      	strb	r3, [r2, #0]
 80060fc:	4a0a      	ldr	r2, [pc, #40]	; (8006128 <_OnExit+0x34>)
 80060fe:	600b      	str	r3, [r1, #0]
 8006100:	6013      	str	r3, [r2, #0]
 8006102:	4a0a      	ldr	r2, [pc, #40]	; (800612c <_OnExit+0x38>)
 8006104:	604b      	str	r3, [r1, #4]
 8006106:	6013      	str	r3, [r2, #0]
 8006108:	4a09      	ldr	r2, [pc, #36]	; (8006130 <_OnExit+0x3c>)
 800610a:	6013      	str	r3, [r2, #0]
 800610c:	6053      	str	r3, [r2, #4]
 800610e:	4a09      	ldr	r2, [pc, #36]	; (8006134 <_OnExit+0x40>)
 8006110:	6013      	str	r3, [r2, #0]
 8006112:	4a09      	ldr	r2, [pc, #36]	; (8006138 <_OnExit+0x44>)
 8006114:	6013      	str	r3, [r2, #0]
 8006116:	4a09      	ldr	r2, [pc, #36]	; (800613c <_OnExit+0x48>)
 8006118:	6013      	str	r3, [r2, #0]
 800611a:	4a09      	ldr	r2, [pc, #36]	; (8006140 <_OnExit+0x4c>)
 800611c:	6013      	str	r3, [r2, #0]
 800611e:	4770      	bx	lr
 8006120:	20019078 	.word	0x20019078
 8006124:	200195b8 	.word	0x200195b8
 8006128:	20019050 	.word	0x20019050
 800612c:	200195dc 	.word	0x200195dc
 8006130:	200195e4 	.word	0x200195e4
 8006134:	200195f0 	.word	0x200195f0
 8006138:	200195a4 	.word	0x200195a4
 800613c:	200195d0 	.word	0x200195d0
 8006140:	200195e0 	.word	0x200195e0

08006144 <_Findy1>:
 8006144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006146:	4605      	mov	r5, r0
 8006148:	b085      	sub	sp, #20
 800614a:	460c      	mov	r4, r1
 800614c:	4616      	mov	r6, r2
 800614e:	2d00      	cmp	r5, #0
 8006150:	d04c      	beq.n	80061ec <_Findy1+0xa8>
 8006152:	4628      	mov	r0, r5
 8006154:	f004 f9c0 	bl	800a4d8 <GUI_ALLOC_LockH>
 8006158:	6a87      	ldr	r7, [r0, #40]	; 0x28
 800615a:	9001      	str	r0, [sp, #4]
 800615c:	07bb      	lsls	r3, r7, #30
 800615e:	4601      	mov	r1, r0
 8006160:	d53d      	bpl.n	80061de <_Findy1+0x9a>
 8006162:	ad02      	add	r5, sp, #8
 8006164:	b126      	cbz	r6, 8006170 <_Findy1+0x2c>
 8006166:	4628      	mov	r0, r5
 8006168:	4632      	mov	r2, r6
 800616a:	f002 fd8d 	bl	8008c88 <GUI__IntersectRects>
 800616e:	e002      	b.n	8006176 <_Findy1+0x32>
 8006170:	c803      	ldmia	r0, {r0, r1}
 8006172:	e885 0003 	stmia.w	r5, {r0, r1}
 8006176:	4620      	mov	r0, r4
 8006178:	4629      	mov	r1, r5
 800617a:	f003 f8e6 	bl	800934a <GUI_RectsIntersect>
 800617e:	b370      	cbz	r0, 80061de <_Findy1+0x9a>
 8006180:	f017 0f01 	tst.w	r7, #1
 8006184:	9b01      	ldr	r3, [sp, #4]
 8006186:	d11e      	bne.n	80061c6 <_Findy1+0x82>
 8006188:	b13e      	cbz	r6, 800619a <_Findy1+0x56>
 800618a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800618e:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8006192:	429a      	cmp	r2, r3
 8006194:	bfa8      	it	ge
 8006196:	4613      	movge	r3, r2
 8006198:	e001      	b.n	800619e <_Findy1+0x5a>
 800619a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800619e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80061a2:	4293      	cmp	r3, r2
 80061a4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80061a8:	dd06      	ble.n	80061b8 <_Findy1+0x74>
 80061aa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80061ae:	b219      	sxth	r1, r3
 80061b0:	428a      	cmp	r2, r1
 80061b2:	db14      	blt.n	80061de <_Findy1+0x9a>
 80061b4:	3b01      	subs	r3, #1
 80061b6:	e004      	b.n	80061c2 <_Findy1+0x7e>
 80061b8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80061bc:	b219      	sxth	r1, r3
 80061be:	428a      	cmp	r2, r1
 80061c0:	dd0d      	ble.n	80061de <_Findy1+0x9a>
 80061c2:	80e3      	strh	r3, [r4, #6]
 80061c4:	e00b      	b.n	80061de <_Findy1+0x9a>
 80061c6:	69df      	ldr	r7, [r3, #28]
 80061c8:	b14f      	cbz	r7, 80061de <_Findy1+0x9a>
 80061ca:	4638      	mov	r0, r7
 80061cc:	4621      	mov	r1, r4
 80061ce:	462a      	mov	r2, r5
 80061d0:	f7ff ffb8 	bl	8006144 <_Findy1>
 80061d4:	4638      	mov	r0, r7
 80061d6:	f004 f975 	bl	800a4c4 <GUI_ALLOC_h2p>
 80061da:	6a07      	ldr	r7, [r0, #32]
 80061dc:	e7f4      	b.n	80061c8 <_Findy1+0x84>
 80061de:	a804      	add	r0, sp, #16
 80061e0:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 80061e4:	6a1d      	ldr	r5, [r3, #32]
 80061e6:	f004 f985 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 80061ea:	e7b0      	b.n	800614e <_Findy1+0xa>
 80061ec:	b005      	add	sp, #20
 80061ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080061f0 <_Findx0>:
 80061f0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80061f4:	4604      	mov	r4, r0
 80061f6:	460f      	mov	r7, r1
 80061f8:	4690      	mov	r8, r2
 80061fa:	2500      	movs	r5, #0
 80061fc:	2c00      	cmp	r4, #0
 80061fe:	d037      	beq.n	8006270 <_Findx0+0x80>
 8006200:	4620      	mov	r0, r4
 8006202:	f004 f969 	bl	800a4d8 <GUI_ALLOC_LockH>
 8006206:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8006208:	9001      	str	r0, [sp, #4]
 800620a:	07b2      	lsls	r2, r6, #30
 800620c:	4601      	mov	r1, r0
 800620e:	d528      	bpl.n	8006262 <_Findx0+0x72>
 8006210:	ac02      	add	r4, sp, #8
 8006212:	f1b8 0f00 	cmp.w	r8, #0
 8006216:	d004      	beq.n	8006222 <_Findx0+0x32>
 8006218:	4620      	mov	r0, r4
 800621a:	4642      	mov	r2, r8
 800621c:	f002 fd34 	bl	8008c88 <GUI__IntersectRects>
 8006220:	e002      	b.n	8006228 <_Findx0+0x38>
 8006222:	c803      	ldmia	r0, {r0, r1}
 8006224:	e884 0003 	stmia.w	r4, {r0, r1}
 8006228:	4638      	mov	r0, r7
 800622a:	4621      	mov	r1, r4
 800622c:	f003 f88d 	bl	800934a <GUI_RectsIntersect>
 8006230:	b1b8      	cbz	r0, 8006262 <_Findx0+0x72>
 8006232:	07f3      	lsls	r3, r6, #31
 8006234:	d405      	bmi.n	8006242 <_Findx0+0x52>
 8006236:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800623a:	3301      	adds	r3, #1
 800623c:	803b      	strh	r3, [r7, #0]
 800623e:	2501      	movs	r5, #1
 8006240:	e00f      	b.n	8006262 <_Findx0+0x72>
 8006242:	9b01      	ldr	r3, [sp, #4]
 8006244:	69de      	ldr	r6, [r3, #28]
 8006246:	b166      	cbz	r6, 8006262 <_Findx0+0x72>
 8006248:	4630      	mov	r0, r6
 800624a:	4639      	mov	r1, r7
 800624c:	4622      	mov	r2, r4
 800624e:	f7ff ffcf 	bl	80061f0 <_Findx0>
 8006252:	2800      	cmp	r0, #0
 8006254:	4630      	mov	r0, r6
 8006256:	bf18      	it	ne
 8006258:	2501      	movne	r5, #1
 800625a:	f004 f933 	bl	800a4c4 <GUI_ALLOC_h2p>
 800625e:	6a06      	ldr	r6, [r0, #32]
 8006260:	e7f1      	b.n	8006246 <_Findx0+0x56>
 8006262:	a804      	add	r0, sp, #16
 8006264:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 8006268:	6a1c      	ldr	r4, [r3, #32]
 800626a:	f004 f943 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 800626e:	e7c5      	b.n	80061fc <_Findx0+0xc>
 8006270:	4628      	mov	r0, r5
 8006272:	b004      	add	sp, #16
 8006274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006278 <_Findx1>:
 8006278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800627a:	4604      	mov	r4, r0
 800627c:	b085      	sub	sp, #20
 800627e:	460e      	mov	r6, r1
 8006280:	4617      	mov	r7, r2
 8006282:	2c00      	cmp	r4, #0
 8006284:	d031      	beq.n	80062ea <_Findx1+0x72>
 8006286:	4620      	mov	r0, r4
 8006288:	f004 f926 	bl	800a4d8 <GUI_ALLOC_LockH>
 800628c:	6a85      	ldr	r5, [r0, #40]	; 0x28
 800628e:	9001      	str	r0, [sp, #4]
 8006290:	07aa      	lsls	r2, r5, #30
 8006292:	4601      	mov	r1, r0
 8006294:	d522      	bpl.n	80062dc <_Findx1+0x64>
 8006296:	ac02      	add	r4, sp, #8
 8006298:	b127      	cbz	r7, 80062a4 <_Findx1+0x2c>
 800629a:	4620      	mov	r0, r4
 800629c:	463a      	mov	r2, r7
 800629e:	f002 fcf3 	bl	8008c88 <GUI__IntersectRects>
 80062a2:	e002      	b.n	80062aa <_Findx1+0x32>
 80062a4:	c803      	ldmia	r0, {r0, r1}
 80062a6:	e884 0003 	stmia.w	r4, {r0, r1}
 80062aa:	4630      	mov	r0, r6
 80062ac:	4621      	mov	r1, r4
 80062ae:	f003 f84c 	bl	800934a <GUI_RectsIntersect>
 80062b2:	b198      	cbz	r0, 80062dc <_Findx1+0x64>
 80062b4:	07eb      	lsls	r3, r5, #31
 80062b6:	d404      	bmi.n	80062c2 <_Findx1+0x4a>
 80062b8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80062bc:	3b01      	subs	r3, #1
 80062be:	80b3      	strh	r3, [r6, #4]
 80062c0:	e00c      	b.n	80062dc <_Findx1+0x64>
 80062c2:	9b01      	ldr	r3, [sp, #4]
 80062c4:	69dd      	ldr	r5, [r3, #28]
 80062c6:	b14d      	cbz	r5, 80062dc <_Findx1+0x64>
 80062c8:	4628      	mov	r0, r5
 80062ca:	4631      	mov	r1, r6
 80062cc:	4622      	mov	r2, r4
 80062ce:	f7ff ffd3 	bl	8006278 <_Findx1>
 80062d2:	4628      	mov	r0, r5
 80062d4:	f004 f8f6 	bl	800a4c4 <GUI_ALLOC_h2p>
 80062d8:	6a05      	ldr	r5, [r0, #32]
 80062da:	e7f4      	b.n	80062c6 <_Findx1+0x4e>
 80062dc:	a804      	add	r0, sp, #16
 80062de:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 80062e2:	6a1c      	ldr	r4, [r3, #32]
 80062e4:	f004 f906 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 80062e8:	e7cb      	b.n	8006282 <_Findx1+0xa>
 80062ea:	b005      	add	sp, #20
 80062ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080062f0 <WM__ClipAtParentBorders>:
 80062f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062f2:	4607      	mov	r7, r0
 80062f4:	460d      	mov	r5, r1
 80062f6:	4628      	mov	r0, r5
 80062f8:	f004 f8ee 	bl	800a4d8 <GUI_ALLOC_LockH>
 80062fc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80062fe:	ac02      	add	r4, sp, #8
 8006300:	f013 0602 	ands.w	r6, r3, #2
 8006304:	4601      	mov	r1, r0
 8006306:	f844 0d04 	str.w	r0, [r4, #-4]!
 800630a:	d104      	bne.n	8006316 <WM__ClipAtParentBorders+0x26>
 800630c:	4620      	mov	r0, r4
 800630e:	f004 f8f1 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 8006312:	4630      	mov	r0, r6
 8006314:	e016      	b.n	8006344 <WM__ClipAtParentBorders+0x54>
 8006316:	4638      	mov	r0, r7
 8006318:	f002 fce8 	bl	8008cec <GUI__IntersectRect>
 800631c:	9b01      	ldr	r3, [sp, #4]
 800631e:	699e      	ldr	r6, [r3, #24]
 8006320:	4620      	mov	r0, r4
 8006322:	b956      	cbnz	r6, 800633a <WM__ClipAtParentBorders+0x4a>
 8006324:	f004 f8e6 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 8006328:	4b07      	ldr	r3, [pc, #28]	; (8006348 <WM__ClipAtParentBorders+0x58>)
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	4295      	cmp	r5, r2
 800632e:	d008      	beq.n	8006342 <WM__ClipAtParentBorders+0x52>
 8006330:	6858      	ldr	r0, [r3, #4]
 8006332:	1a2b      	subs	r3, r5, r0
 8006334:	4258      	negs	r0, r3
 8006336:	4158      	adcs	r0, r3
 8006338:	e004      	b.n	8006344 <WM__ClipAtParentBorders+0x54>
 800633a:	f004 f8db 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 800633e:	4635      	mov	r5, r6
 8006340:	e7d9      	b.n	80062f6 <WM__ClipAtParentBorders+0x6>
 8006342:	2001      	movs	r0, #1
 8006344:	b003      	add	sp, #12
 8006346:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006348:	200195a8 	.word	0x200195a8

0800634c <WM__InsertWindowIntoList>:
 800634c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800634e:	4604      	mov	r4, r0
 8006350:	b085      	sub	sp, #20
 8006352:	460d      	mov	r5, r1
 8006354:	2900      	cmp	r1, #0
 8006356:	d049      	beq.n	80063ec <WM__InsertWindowIntoList+0xa0>
 8006358:	f004 f8be 	bl	800a4d8 <GUI_ALLOC_LockH>
 800635c:	2300      	movs	r3, #0
 800635e:	6203      	str	r3, [r0, #32]
 8006360:	6185      	str	r5, [r0, #24]
 8006362:	9001      	str	r0, [sp, #4]
 8006364:	4628      	mov	r0, r5
 8006366:	f004 f8b7 	bl	800a4d8 <GUI_ALLOC_LockH>
 800636a:	9b01      	ldr	r3, [sp, #4]
 800636c:	69c5      	ldr	r5, [r0, #28]
 800636e:	9002      	str	r0, [sp, #8]
 8006370:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 8006372:	b92d      	cbnz	r5, 8006380 <WM__InsertWindowIntoList+0x34>
 8006374:	61c4      	str	r4, [r0, #28]
 8006376:	a801      	add	r0, sp, #4
 8006378:	f004 f8bc 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 800637c:	a802      	add	r0, sp, #8
 800637e:	e033      	b.n	80063e8 <WM__InsertWindowIntoList+0x9c>
 8006380:	4628      	mov	r0, r5
 8006382:	f004 f8a9 	bl	800a4d8 <GUI_ALLOC_LockH>
 8006386:	ae04      	add	r6, sp, #16
 8006388:	f007 0708 	and.w	r7, r7, #8
 800638c:	f846 0d04 	str.w	r0, [r6, #-4]!
 8006390:	b977      	cbnz	r7, 80063b0 <WM__InsertWindowIntoList+0x64>
 8006392:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006394:	071a      	lsls	r2, r3, #28
 8006396:	d50b      	bpl.n	80063b0 <WM__InsertWindowIntoList+0x64>
 8006398:	9b01      	ldr	r3, [sp, #4]
 800639a:	621d      	str	r5, [r3, #32]
 800639c:	9b02      	ldr	r3, [sp, #8]
 800639e:	a801      	add	r0, sp, #4
 80063a0:	61dc      	str	r4, [r3, #28]
 80063a2:	f004 f8a7 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 80063a6:	a802      	add	r0, sp, #8
 80063a8:	f004 f8a4 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 80063ac:	4630      	mov	r0, r6
 80063ae:	e01b      	b.n	80063e8 <WM__InsertWindowIntoList+0x9c>
 80063b0:	a802      	add	r0, sp, #8
 80063b2:	f004 f89f 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 80063b6:	4630      	mov	r0, r6
 80063b8:	f004 f89c 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 80063bc:	4628      	mov	r0, r5
 80063be:	f004 f881 	bl	800a4c4 <GUI_ALLOC_h2p>
 80063c2:	9003      	str	r0, [sp, #12]
 80063c4:	9b03      	ldr	r3, [sp, #12]
 80063c6:	6a1d      	ldr	r5, [r3, #32]
 80063c8:	b90d      	cbnz	r5, 80063ce <WM__InsertWindowIntoList+0x82>
 80063ca:	621c      	str	r4, [r3, #32]
 80063cc:	e00b      	b.n	80063e6 <WM__InsertWindowIntoList+0x9a>
 80063ce:	4628      	mov	r0, r5
 80063d0:	f004 f878 	bl	800a4c4 <GUI_ALLOC_h2p>
 80063d4:	2f00      	cmp	r7, #0
 80063d6:	d1f4      	bne.n	80063c2 <WM__InsertWindowIntoList+0x76>
 80063d8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80063da:	071b      	lsls	r3, r3, #28
 80063dc:	d5f1      	bpl.n	80063c2 <WM__InsertWindowIntoList+0x76>
 80063de:	9b03      	ldr	r3, [sp, #12]
 80063e0:	621c      	str	r4, [r3, #32]
 80063e2:	9b01      	ldr	r3, [sp, #4]
 80063e4:	621d      	str	r5, [r3, #32]
 80063e6:	a801      	add	r0, sp, #4
 80063e8:	f004 f884 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 80063ec:	b005      	add	sp, #20
 80063ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080063f0 <WM__Client2Screen>:
 80063f0:	4603      	mov	r3, r0
 80063f2:	4608      	mov	r0, r1
 80063f4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80063f8:	f9b3 1000 	ldrsh.w	r1, [r3]
 80063fc:	f002 bfd2 	b.w	80093a4 <GUI_MoveRect>

08006400 <_SetClipRectUserIntersect>:
 8006400:	4b11      	ldr	r3, [pc, #68]	; (8006448 <_SetClipRectUserIntersect+0x48>)
 8006402:	b530      	push	{r4, r5, lr}
 8006404:	681c      	ldr	r4, [r3, #0]
 8006406:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006408:	b085      	sub	sp, #20
 800640a:	4605      	mov	r5, r0
 800640c:	b1ba      	cbz	r2, 800643e <_SetClipRectUserIntersect+0x3e>
 800640e:	6810      	ldr	r0, [r2, #0]
 8006410:	6851      	ldr	r1, [r2, #4]
 8006412:	ab02      	add	r3, sp, #8
 8006414:	c303      	stmia	r3!, {r0, r1}
 8006416:	4b0d      	ldr	r3, [pc, #52]	; (800644c <_SetClipRectUserIntersect+0x4c>)
 8006418:	6818      	ldr	r0, [r3, #0]
 800641a:	b900      	cbnz	r0, 800641e <_SetClipRectUserIntersect+0x1e>
 800641c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800641e:	f004 f85b 	bl	800a4d8 <GUI_ALLOC_LockH>
 8006422:	ac04      	add	r4, sp, #16
 8006424:	a902      	add	r1, sp, #8
 8006426:	f844 0d0c 	str.w	r0, [r4, #-12]!
 800642a:	f7ff ffe1 	bl	80063f0 <WM__Client2Screen>
 800642e:	4620      	mov	r0, r4
 8006430:	f004 f860 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 8006434:	a802      	add	r0, sp, #8
 8006436:	4629      	mov	r1, r5
 8006438:	f002 fc58 	bl	8008cec <GUI__IntersectRect>
 800643c:	a802      	add	r0, sp, #8
 800643e:	f001 feaf 	bl	80081a0 <LCD_SetClipRectEx>
 8006442:	b005      	add	sp, #20
 8006444:	bd30      	pop	{r4, r5, pc}
 8006446:	bf00      	nop
 8006448:	20000018 	.word	0x20000018
 800644c:	200195a4 	.word	0x200195a4

08006450 <WM__ActivateClipRect>:
 8006450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006452:	4b0e      	ldr	r3, [pc, #56]	; (800648c <WM__ActivateClipRect+0x3c>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800645a:	b10a      	cbz	r2, 8006460 <WM__ActivateClipRect+0x10>
 800645c:	480c      	ldr	r0, [pc, #48]	; (8006490 <WM__ActivateClipRect+0x40>)
 800645e:	e011      	b.n	8006484 <WM__ActivateClipRect+0x34>
 8006460:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006462:	f004 f839 	bl	800a4d8 <GUI_ALLOC_LockH>
 8006466:	9001      	str	r0, [sp, #4]
 8006468:	c803      	ldmia	r0, {r0, r1}
 800646a:	ac02      	add	r4, sp, #8
 800646c:	e884 0003 	stmia.w	r4, {r0, r1}
 8006470:	a801      	add	r0, sp, #4
 8006472:	f004 f83f 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 8006476:	4b07      	ldr	r3, [pc, #28]	; (8006494 <WM__ActivateClipRect+0x44>)
 8006478:	6819      	ldr	r1, [r3, #0]
 800647a:	b111      	cbz	r1, 8006482 <WM__ActivateClipRect+0x32>
 800647c:	4620      	mov	r0, r4
 800647e:	f7ff ff37 	bl	80062f0 <WM__ClipAtParentBorders>
 8006482:	4620      	mov	r0, r4
 8006484:	f7ff ffbc 	bl	8006400 <_SetClipRectUserIntersect>
 8006488:	b004      	add	sp, #16
 800648a:	bd10      	pop	{r4, pc}
 800648c:	20000018 	.word	0x20000018
 8006490:	2001905c 	.word	0x2001905c
 8006494:	200195a4 	.word	0x200195a4

08006498 <WM__InvalidateDrawAndDescs>:
 8006498:	b513      	push	{r0, r1, r4, lr}
 800649a:	4604      	mov	r4, r0
 800649c:	b300      	cbz	r0, 80064e0 <WM__InvalidateDrawAndDescs+0x48>
 800649e:	f004 f81b 	bl	800a4d8 <GUI_ALLOC_LockH>
 80064a2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80064a4:	9001      	str	r0, [sp, #4]
 80064a6:	0793      	lsls	r3, r2, #30
 80064a8:	d517      	bpl.n	80064da <WM__InvalidateDrawAndDescs+0x42>
 80064aa:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80064ac:	b140      	cbz	r0, 80064c0 <WM__InvalidateDrawAndDescs+0x28>
 80064ae:	4b0d      	ldr	r3, [pc, #52]	; (80064e4 <WM__InvalidateDrawAndDescs+0x4c>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	42a3      	cmp	r3, r4
 80064b4:	d004      	beq.n	80064c0 <WM__InvalidateDrawAndDescs+0x28>
 80064b6:	f000 fceb 	bl	8006e90 <GUI_MEMDEV_Delete>
 80064ba:	9b01      	ldr	r3, [sp, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	625a      	str	r2, [r3, #36]	; 0x24
 80064c0:	4620      	mov	r0, r4
 80064c2:	f7ff fdf0 	bl	80060a6 <WM_GetFirstChild>
 80064c6:	4604      	mov	r4, r0
 80064c8:	b13c      	cbz	r4, 80064da <WM__InvalidateDrawAndDescs+0x42>
 80064ca:	4620      	mov	r0, r4
 80064cc:	f7ff ffe4 	bl	8006498 <WM__InvalidateDrawAndDescs>
 80064d0:	4620      	mov	r0, r4
 80064d2:	f003 fff7 	bl	800a4c4 <GUI_ALLOC_h2p>
 80064d6:	6a04      	ldr	r4, [r0, #32]
 80064d8:	e7f6      	b.n	80064c8 <WM__InvalidateDrawAndDescs+0x30>
 80064da:	a801      	add	r0, sp, #4
 80064dc:	f004 f80a 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 80064e0:	b002      	add	sp, #8
 80064e2:	bd10      	pop	{r4, pc}
 80064e4:	200195ec 	.word	0x200195ec

080064e8 <WM__RectIsNZ>:
 80064e8:	f9b0 2000 	ldrsh.w	r2, [r0]
 80064ec:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	dc08      	bgt.n	8006506 <WM__RectIsNZ+0x1e>
 80064f4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80064f8:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	bfcc      	ite	gt
 8006500:	2000      	movgt	r0, #0
 8006502:	2001      	movle	r0, #1
 8006504:	4770      	bx	lr
 8006506:	2000      	movs	r0, #0
 8006508:	4770      	bx	lr
	...

0800650c <_Invalidate1Abs>:
 800650c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800650e:	b085      	sub	sp, #20
 8006510:	4606      	mov	r6, r0
 8006512:	460d      	mov	r5, r1
 8006514:	4617      	mov	r7, r2
 8006516:	f003 ffd5 	bl	800a4c4 <GUI_ALLOC_h2p>
 800651a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800651c:	9001      	str	r0, [sp, #4]
 800651e:	07a3      	lsls	r3, r4, #30
 8006520:	d534      	bpl.n	800658c <_Invalidate1Abs+0x80>
 8006522:	4628      	mov	r0, r5
 8006524:	f7ff ffe0 	bl	80064e8 <WM__RectIsNZ>
 8006528:	2800      	cmp	r0, #0
 800652a:	d02f      	beq.n	800658c <_Invalidate1Abs+0x80>
 800652c:	f640 0301 	movw	r3, #2049	; 0x801
 8006530:	4023      	ands	r3, r4
 8006532:	2b01      	cmp	r3, #1
 8006534:	d02a      	beq.n	800658c <_Invalidate1Abs+0x80>
 8006536:	4630      	mov	r0, r6
 8006538:	f003 ffce 	bl	800a4d8 <GUI_ALLOC_LockH>
 800653c:	ac02      	add	r4, sp, #8
 800653e:	4602      	mov	r2, r0
 8006540:	9001      	str	r0, [sp, #4]
 8006542:	4629      	mov	r1, r5
 8006544:	4620      	mov	r0, r4
 8006546:	f002 fb9f 	bl	8008c88 <GUI__IntersectRects>
 800654a:	4620      	mov	r0, r4
 800654c:	f7ff ffcc 	bl	80064e8 <WM__RectIsNZ>
 8006550:	b1c8      	cbz	r0, 8006586 <_Invalidate1Abs+0x7a>
 8006552:	9b01      	ldr	r3, [sp, #4]
 8006554:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 8006556:	f244 0120 	movw	r1, #16416	; 0x4020
 800655a:	4031      	ands	r1, r6
 800655c:	f103 0508 	add.w	r5, r3, #8
 8006560:	b129      	cbz	r1, 800656e <_Invalidate1Abs+0x62>
 8006562:	4628      	mov	r0, r5
 8006564:	4629      	mov	r1, r5
 8006566:	4622      	mov	r2, r4
 8006568:	f002 ff2c 	bl	80093c4 <GUI_MergeRect>
 800656c:	e00b      	b.n	8006586 <_Invalidate1Abs+0x7a>
 800656e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006572:	433e      	orrs	r6, r7
 8006574:	e885 0003 	stmia.w	r5, {r0, r1}
 8006578:	629e      	str	r6, [r3, #40]	; 0x28
 800657a:	4b05      	ldr	r3, [pc, #20]	; (8006590 <_Invalidate1Abs+0x84>)
 800657c:	881a      	ldrh	r2, [r3, #0]
 800657e:	3201      	adds	r2, #1
 8006580:	801a      	strh	r2, [r3, #0]
 8006582:	f002 fbd1 	bl	8008d28 <GUI_SignalEvent>
 8006586:	a801      	add	r0, sp, #4
 8006588:	f003 ffb4 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 800658c:	b005      	add	sp, #20
 800658e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006590:	200195c0 	.word	0x200195c0

08006594 <WM__Invalidate1Abs>:
 8006594:	2220      	movs	r2, #32
 8006596:	f7ff bfb9 	b.w	800650c <_Invalidate1Abs>

0800659a <WM_InvalidateWindowAndDescsEx>:
 800659a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800659c:	460f      	mov	r7, r1
 800659e:	b085      	sub	sp, #20
 80065a0:	4615      	mov	r5, r2
 80065a2:	4606      	mov	r6, r0
 80065a4:	b348      	cbz	r0, 80065fa <WM_InvalidateWindowAndDescsEx+0x60>
 80065a6:	f003 ff97 	bl	800a4d8 <GUI_ALLOC_LockH>
 80065aa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80065ac:	ac04      	add	r4, sp, #16
 80065ae:	079b      	lsls	r3, r3, #30
 80065b0:	4602      	mov	r2, r0
 80065b2:	f844 0d0c 	str.w	r0, [r4, #-12]!
 80065b6:	d403      	bmi.n	80065c0 <WM_InvalidateWindowAndDescsEx+0x26>
 80065b8:	4620      	mov	r0, r4
 80065ba:	f003 ff9b 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 80065be:	e01c      	b.n	80065fa <WM_InvalidateWindowAndDescsEx+0x60>
 80065c0:	a802      	add	r0, sp, #8
 80065c2:	4639      	mov	r1, r7
 80065c4:	f002 fb60 	bl	8008c88 <GUI__IntersectRects>
 80065c8:	2800      	cmp	r0, #0
 80065ca:	d0f5      	beq.n	80065b8 <WM_InvalidateWindowAndDescsEx+0x1e>
 80065cc:	4620      	mov	r0, r4
 80065ce:	f003 ff91 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 80065d2:	4630      	mov	r0, r6
 80065d4:	a902      	add	r1, sp, #8
 80065d6:	462a      	mov	r2, r5
 80065d8:	f7ff ff98 	bl	800650c <_Invalidate1Abs>
 80065dc:	4630      	mov	r0, r6
 80065de:	f7ff fd62 	bl	80060a6 <WM_GetFirstChild>
 80065e2:	4604      	mov	r4, r0
 80065e4:	b14c      	cbz	r4, 80065fa <WM_InvalidateWindowAndDescsEx+0x60>
 80065e6:	4620      	mov	r0, r4
 80065e8:	a902      	add	r1, sp, #8
 80065ea:	462a      	mov	r2, r5
 80065ec:	f7ff ffd5 	bl	800659a <WM_InvalidateWindowAndDescsEx>
 80065f0:	4620      	mov	r0, r4
 80065f2:	f003 ff67 	bl	800a4c4 <GUI_ALLOC_h2p>
 80065f6:	6a04      	ldr	r4, [r0, #32]
 80065f8:	e7f4      	b.n	80065e4 <WM_InvalidateWindowAndDescsEx+0x4a>
 80065fa:	b005      	add	sp, #20
 80065fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080065fe <WM__InvalidateRect>:
 80065fe:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8006602:	4680      	mov	r8, r0
 8006604:	4617      	mov	r7, r2
 8006606:	461d      	mov	r5, r3
 8006608:	460c      	mov	r4, r1
 800660a:	2900      	cmp	r1, #0
 800660c:	d030      	beq.n	8006670 <WM__InvalidateRect+0x72>
 800660e:	4608      	mov	r0, r1
 8006610:	f003 ff62 	bl	800a4d8 <GUI_ALLOC_LockH>
 8006614:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8006616:	9001      	str	r0, [sp, #4]
 8006618:	07b3      	lsls	r3, r6, #30
 800661a:	4602      	mov	r2, r0
 800661c:	d525      	bpl.n	800666a <WM__InvalidateRect+0x6c>
 800661e:	a802      	add	r0, sp, #8
 8006620:	4641      	mov	r1, r8
 8006622:	f002 fb31 	bl	8008c88 <GUI__IntersectRects>
 8006626:	b300      	cbz	r0, 800666a <WM__InvalidateRect+0x6c>
 8006628:	f640 0301 	movw	r3, #2049	; 0x801
 800662c:	4033      	ands	r3, r6
 800662e:	2b01      	cmp	r3, #1
 8006630:	d107      	bne.n	8006642 <WM__InvalidateRect+0x44>
 8006632:	9b01      	ldr	r3, [sp, #4]
 8006634:	a802      	add	r0, sp, #8
 8006636:	6999      	ldr	r1, [r3, #24]
 8006638:	6a1a      	ldr	r2, [r3, #32]
 800663a:	462b      	mov	r3, r5
 800663c:	f7ff ffdf 	bl	80065fe <WM__InvalidateRect>
 8006640:	e004      	b.n	800664c <WM__InvalidateRect+0x4e>
 8006642:	4620      	mov	r0, r4
 8006644:	a902      	add	r1, sp, #8
 8006646:	462a      	mov	r2, r5
 8006648:	f7ff ff60 	bl	800650c <_Invalidate1Abs>
 800664c:	9b01      	ldr	r3, [sp, #4]
 800664e:	69dc      	ldr	r4, [r3, #28]
 8006650:	b15c      	cbz	r4, 800666a <WM__InvalidateRect+0x6c>
 8006652:	42bc      	cmp	r4, r7
 8006654:	d009      	beq.n	800666a <WM__InvalidateRect+0x6c>
 8006656:	4620      	mov	r0, r4
 8006658:	a902      	add	r1, sp, #8
 800665a:	462a      	mov	r2, r5
 800665c:	f7ff ff9d 	bl	800659a <WM_InvalidateWindowAndDescsEx>
 8006660:	4620      	mov	r0, r4
 8006662:	f003 ff2f 	bl	800a4c4 <GUI_ALLOC_h2p>
 8006666:	6a04      	ldr	r4, [r0, #32]
 8006668:	e7f2      	b.n	8006650 <WM__InvalidateRect+0x52>
 800666a:	a801      	add	r0, sp, #4
 800666c:	f003 ff42 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 8006670:	b004      	add	sp, #16
 8006672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006676 <WM__InvalidateRectEx>:
 8006676:	2320      	movs	r3, #32
 8006678:	f7ff bfc1 	b.w	80065fe <WM__InvalidateRect>

0800667c <WM__SendMsgNoData>:
 800667c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800667e:	ab04      	add	r3, sp, #16
 8006680:	9001      	str	r0, [sp, #4]
 8006682:	f843 1d10 	str.w	r1, [r3, #-16]!
 8006686:	4669      	mov	r1, sp
 8006688:	f004 fa1e 	bl	800aac8 <WM__SendMessage>
 800668c:	b005      	add	sp, #20
 800668e:	f85d fb04 	ldr.w	pc, [sp], #4

08006692 <WM__GetClientRectWin>:
 8006692:	2300      	movs	r3, #0
 8006694:	800b      	strh	r3, [r1, #0]
 8006696:	8882      	ldrh	r2, [r0, #4]
 8006698:	804b      	strh	r3, [r1, #2]
 800669a:	8803      	ldrh	r3, [r0, #0]
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	808b      	strh	r3, [r1, #4]
 80066a0:	88c2      	ldrh	r2, [r0, #6]
 80066a2:	8843      	ldrh	r3, [r0, #2]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	80cb      	strh	r3, [r1, #6]
 80066a8:	4770      	bx	lr

080066aa <WM_InvalidateRect>:
 80066aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066ac:	460f      	mov	r7, r1
 80066ae:	b087      	sub	sp, #28
 80066b0:	4605      	mov	r5, r0
 80066b2:	2800      	cmp	r0, #0
 80066b4:	d033      	beq.n	800671e <WM_InvalidateRect+0x74>
 80066b6:	f003 ff0f 	bl	800a4d8 <GUI_ALLOC_LockH>
 80066ba:	6a86      	ldr	r6, [r0, #40]	; 0x28
 80066bc:	9001      	str	r0, [sp, #4]
 80066be:	07b2      	lsls	r2, r6, #30
 80066c0:	d52a      	bpl.n	8006718 <WM_InvalidateRect+0x6e>
 80066c2:	c803      	ldmia	r0, {r0, r1}
 80066c4:	ac04      	add	r4, sp, #16
 80066c6:	03f3      	lsls	r3, r6, #15
 80066c8:	e884 0003 	stmia.w	r4, {r0, r1}
 80066cc:	d502      	bpl.n	80066d4 <WM_InvalidateRect+0x2a>
 80066ce:	4628      	mov	r0, r5
 80066d0:	f7ff fee2 	bl	8006498 <WM__InvalidateDrawAndDescs>
 80066d4:	b15f      	cbz	r7, 80066ee <WM_InvalidateRect+0x44>
 80066d6:	6838      	ldr	r0, [r7, #0]
 80066d8:	6879      	ldr	r1, [r7, #4]
 80066da:	ab02      	add	r3, sp, #8
 80066dc:	c303      	stmia	r3!, {r0, r1}
 80066de:	9801      	ldr	r0, [sp, #4]
 80066e0:	a902      	add	r1, sp, #8
 80066e2:	f7ff fe85 	bl	80063f0 <WM__Client2Screen>
 80066e6:	4620      	mov	r0, r4
 80066e8:	a902      	add	r1, sp, #8
 80066ea:	f002 faff 	bl	8008cec <GUI__IntersectRect>
 80066ee:	4620      	mov	r0, r4
 80066f0:	4629      	mov	r1, r5
 80066f2:	f7ff fdfd 	bl	80062f0 <WM__ClipAtParentBorders>
 80066f6:	b178      	cbz	r0, 8006718 <WM_InvalidateRect+0x6e>
 80066f8:	f640 0301 	movw	r3, #2049	; 0x801
 80066fc:	4033      	ands	r3, r6
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d106      	bne.n	8006710 <WM_InvalidateRect+0x66>
 8006702:	9b01      	ldr	r3, [sp, #4]
 8006704:	4620      	mov	r0, r4
 8006706:	6999      	ldr	r1, [r3, #24]
 8006708:	6a1a      	ldr	r2, [r3, #32]
 800670a:	f7ff ffb4 	bl	8006676 <WM__InvalidateRectEx>
 800670e:	e003      	b.n	8006718 <WM_InvalidateRect+0x6e>
 8006710:	4628      	mov	r0, r5
 8006712:	4621      	mov	r1, r4
 8006714:	f7ff ff3e 	bl	8006594 <WM__Invalidate1Abs>
 8006718:	a801      	add	r0, sp, #4
 800671a:	f003 feeb 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 800671e:	b007      	add	sp, #28
 8006720:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006722 <WM_InvalidateWindow>:
 8006722:	2100      	movs	r1, #0
 8006724:	f7ff bfc1 	b.w	80066aa <WM_InvalidateRect>

08006728 <WM__GetTopLevelLayer>:
 8006728:	b510      	push	{r4, lr}
 800672a:	4604      	mov	r4, r0
 800672c:	f003 feca 	bl	800a4c4 <GUI_ALLOC_h2p>
 8006730:	6980      	ldr	r0, [r0, #24]
 8006732:	2800      	cmp	r0, #0
 8006734:	d1f9      	bne.n	800672a <WM__GetTopLevelLayer+0x2>
 8006736:	4b05      	ldr	r3, [pc, #20]	; (800674c <WM__GetTopLevelLayer+0x24>)
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	4294      	cmp	r4, r2
 800673c:	d005      	beq.n	800674a <WM__GetTopLevelLayer+0x22>
 800673e:	6858      	ldr	r0, [r3, #4]
 8006740:	4284      	cmp	r4, r0
 8006742:	bf14      	ite	ne
 8006744:	f04f 30ff 	movne.w	r0, #4294967295
 8006748:	2001      	moveq	r0, #1
 800674a:	bd10      	pop	{r4, pc}
 800674c:	200195a8 	.word	0x200195a8

08006750 <WM__SelectTopLevelLayer>:
 8006750:	b508      	push	{r3, lr}
 8006752:	f7ff ffe9 	bl	8006728 <WM__GetTopLevelLayer>
 8006756:	2800      	cmp	r0, #0
 8006758:	db03      	blt.n	8006762 <WM__SelectTopLevelLayer+0x12>
 800675a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800675e:	f002 bdd5 	b.w	800930c <GUI_SelectLayer>
 8006762:	bd08      	pop	{r3, pc}

08006764 <WM_SelectWindow>:
 8006764:	4a0d      	ldr	r2, [pc, #52]	; (800679c <WM_SelectWindow+0x38>)
 8006766:	6813      	ldr	r3, [r2, #0]
 8006768:	b570      	push	{r4, r5, r6, lr}
 800676a:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 800676c:	4604      	mov	r4, r0
 800676e:	4616      	mov	r6, r2
 8006770:	b908      	cbnz	r0, 8006776 <WM_SelectWindow+0x12>
 8006772:	4a0b      	ldr	r2, [pc, #44]	; (80067a0 <WM_SelectWindow+0x3c>)
 8006774:	6814      	ldr	r4, [r2, #0]
 8006776:	649c      	str	r4, [r3, #72]	; 0x48
 8006778:	4620      	mov	r0, r4
 800677a:	f7ff ffe9 	bl	8006750 <WM__SelectTopLevelLayer>
 800677e:	f002 f8ed 	bl	800895c <LCD_SetClipRectMax>
 8006782:	4620      	mov	r0, r4
 8006784:	f003 fe9e 	bl	800a4c4 <GUI_ALLOC_h2p>
 8006788:	6833      	ldr	r3, [r6, #0]
 800678a:	f9b0 1000 	ldrsh.w	r1, [r0]
 800678e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8006792:	64d9      	str	r1, [r3, #76]	; 0x4c
 8006794:	651a      	str	r2, [r3, #80]	; 0x50
 8006796:	4628      	mov	r0, r5
 8006798:	bd70      	pop	{r4, r5, r6, pc}
 800679a:	bf00      	nop
 800679c:	20000018 	.word	0x20000018
 80067a0:	200195c4 	.word	0x200195c4

080067a4 <WM_CreateWindowAsChild>:
 80067a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067a8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80067aa:	469b      	mov	fp, r3
 80067ac:	4b4b      	ldr	r3, [pc, #300]	; (80068dc <WM_CreateWindowAsChild+0x138>)
 80067ae:	4607      	mov	r7, r0
 80067b0:	4688      	mov	r8, r1
 80067b2:	4692      	mov	sl, r2
 80067b4:	681e      	ldr	r6, [r3, #0]
 80067b6:	bb65      	cbnz	r5, 8006812 <WM_CreateWindowAsChild+0x6e>
 80067b8:	4b49      	ldr	r3, [pc, #292]	; (80068e0 <WM_CreateWindowAsChild+0x13c>)
 80067ba:	881b      	ldrh	r3, [r3, #0]
 80067bc:	b363      	cbz	r3, 8006818 <WM_CreateWindowAsChild+0x74>
 80067be:	4b49      	ldr	r3, [pc, #292]	; (80068e4 <WM_CreateWindowAsChild+0x140>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	7c5a      	ldrb	r2, [r3, #17]
 80067c4:	4b48      	ldr	r3, [pc, #288]	; (80068e8 <WM_CreateWindowAsChild+0x144>)
 80067c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ca:	1c5a      	adds	r2, r3, #1
 80067cc:	d024      	beq.n	8006818 <WM_CreateWindowAsChild+0x74>
 80067ce:	b31b      	cbz	r3, 8006818 <WM_CreateWindowAsChild+0x74>
 80067d0:	461d      	mov	r5, r3
 80067d2:	4628      	mov	r0, r5
 80067d4:	f003 fe80 	bl	800a4d8 <GUI_ALLOC_LockH>
 80067d8:	f9b0 2000 	ldrsh.w	r2, [r0]
 80067dc:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80067e0:	9001      	str	r0, [sp, #4]
 80067e2:	4417      	add	r7, r2
 80067e4:	4498      	add	r8, r3
 80067e6:	f1ba 0f00 	cmp.w	sl, #0
 80067ea:	d105      	bne.n	80067f8 <WM_CreateWindowAsChild+0x54>
 80067ec:	f9b0 a004 	ldrsh.w	sl, [r0, #4]
 80067f0:	ebc2 0a0a 	rsb	sl, r2, sl
 80067f4:	f10a 0a01 	add.w	sl, sl, #1
 80067f8:	f1bb 0f00 	cmp.w	fp, #0
 80067fc:	d105      	bne.n	800680a <WM_CreateWindowAsChild+0x66>
 80067fe:	f9b0 b006 	ldrsh.w	fp, [r0, #6]
 8006802:	ebc3 0b0b 	rsb	fp, r3, fp
 8006806:	f10b 0b01 	add.w	fp, fp, #1
 800680a:	a801      	add	r0, sp, #4
 800680c:	f003 fe72 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 8006810:	e002      	b.n	8006818 <WM_CreateWindowAsChild+0x74>
 8006812:	1c6b      	adds	r3, r5, #1
 8006814:	d1dd      	bne.n	80067d2 <WM_CreateWindowAsChild+0x2e>
 8006816:	2500      	movs	r5, #0
 8006818:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800681a:	302c      	adds	r0, #44	; 0x2c
 800681c:	f004 f8a8 	bl	800a970 <GUI_ALLOC_AllocZero>
 8006820:	4604      	mov	r4, r0
 8006822:	2800      	cmp	r0, #0
 8006824:	d056      	beq.n	80068d4 <WM_CreateWindowAsChild+0x130>
 8006826:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006828:	431e      	orrs	r6, r3
 800682a:	4b2d      	ldr	r3, [pc, #180]	; (80068e0 <WM_CreateWindowAsChild+0x13c>)
 800682c:	881a      	ldrh	r2, [r3, #0]
 800682e:	3201      	adds	r2, #1
 8006830:	801a      	strh	r2, [r3, #0]
 8006832:	f003 fe51 	bl	800a4d8 <GUI_ALLOC_LockH>
 8006836:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006838:	6103      	str	r3, [r0, #16]
 800683a:	f10d 0908 	add.w	r9, sp, #8
 800683e:	4b2b      	ldr	r3, [pc, #172]	; (80068ec <WM_CreateWindowAsChild+0x148>)
 8006840:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8006842:	f849 0d08 	str.w	r0, [r9, #-8]!
 8006846:	4033      	ands	r3, r6
 8006848:	8007      	strh	r7, [r0, #0]
 800684a:	f8a0 8002 	strh.w	r8, [r0, #2]
 800684e:	4457      	add	r7, sl
 8006850:	44d8      	add	r8, fp
 8006852:	4313      	orrs	r3, r2
 8006854:	3f01      	subs	r7, #1
 8006856:	f108 38ff 	add.w	r8, r8, #4294967295
 800685a:	6283      	str	r3, [r0, #40]	; 0x28
 800685c:	8087      	strh	r7, [r0, #4]
 800685e:	f8a0 8006 	strh.w	r8, [r0, #6]
 8006862:	4668      	mov	r0, sp
 8006864:	f003 fe46 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 8006868:	4b21      	ldr	r3, [pc, #132]	; (80068f0 <WM_CreateWindowAsChild+0x14c>)
 800686a:	6818      	ldr	r0, [r3, #0]
 800686c:	b148      	cbz	r0, 8006882 <WM_CreateWindowAsChild+0xde>
 800686e:	f003 fe29 	bl	800a4c4 <GUI_ALLOC_h2p>
 8006872:	4607      	mov	r7, r0
 8006874:	4620      	mov	r0, r4
 8006876:	f003 fe25 	bl	800a4c4 <GUI_ALLOC_h2p>
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	6143      	str	r3, [r0, #20]
 800687e:	617c      	str	r4, [r7, #20]
 8006880:	e000      	b.n	8006884 <WM_CreateWindowAsChild+0xe0>
 8006882:	601c      	str	r4, [r3, #0]
 8006884:	4629      	mov	r1, r5
 8006886:	4620      	mov	r0, r4
 8006888:	f7ff fd60 	bl	800634c <WM__InsertWindowIntoList>
 800688c:	06b5      	lsls	r5, r6, #26
 800688e:	d502      	bpl.n	8006896 <WM_CreateWindowAsChild+0xf2>
 8006890:	4620      	mov	r0, r4
 8006892:	f7ff ff67 	bl	8006764 <WM_SelectWindow>
 8006896:	07f0      	lsls	r0, r6, #31
 8006898:	d503      	bpl.n	80068a2 <WM_CreateWindowAsChild+0xfe>
 800689a:	4b16      	ldr	r3, [pc, #88]	; (80068f4 <WM_CreateWindowAsChild+0x150>)
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	3201      	adds	r2, #1
 80068a0:	601a      	str	r2, [r3, #0]
 80068a2:	0671      	lsls	r1, r6, #25
 80068a4:	d502      	bpl.n	80068ac <WM_CreateWindowAsChild+0x108>
 80068a6:	4620      	mov	r0, r4
 80068a8:	f004 f95e 	bl	800ab68 <WM_BringToBottom>
 80068ac:	07b2      	lsls	r2, r6, #30
 80068ae:	d50d      	bpl.n	80068cc <WM_CreateWindowAsChild+0x128>
 80068b0:	4620      	mov	r0, r4
 80068b2:	f003 fe11 	bl	800a4d8 <GUI_ALLOC_LockH>
 80068b6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80068b8:	9000      	str	r0, [sp, #0]
 80068ba:	f043 0302 	orr.w	r3, r3, #2
 80068be:	6283      	str	r3, [r0, #40]	; 0x28
 80068c0:	4668      	mov	r0, sp
 80068c2:	f003 fe17 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 80068c6:	4620      	mov	r0, r4
 80068c8:	f7ff ff2b 	bl	8006722 <WM_InvalidateWindow>
 80068cc:	4620      	mov	r0, r4
 80068ce:	2101      	movs	r1, #1
 80068d0:	f7ff fed4 	bl	800667c <WM__SendMsgNoData>
 80068d4:	4620      	mov	r0, r4
 80068d6:	b003      	add	sp, #12
 80068d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068dc:	200195d0 	.word	0x200195d0
 80068e0:	200195a0 	.word	0x200195a0
 80068e4:	20000018 	.word	0x20000018
 80068e8:	200195a8 	.word	0x200195a8
 80068ec:	003f3f9f 	.word	0x003f3f9f
 80068f0:	200195c4 	.word	0x200195c4
 80068f4:	200195f0 	.word	0x200195f0

080068f8 <WM__GetNextIVR>:
 80068f8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80068fc:	4f5d      	ldr	r7, [pc, #372]	; (8006a74 <WM__GetNextIVR+0x17c>)
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 8006904:	2800      	cmp	r0, #0
 8006906:	f000 80b2 	beq.w	8006a6e <WM__GetNextIVR+0x176>
 800690a:	4b5b      	ldr	r3, [pc, #364]	; (8006a78 <WM__GetNextIVR+0x180>)
 800690c:	695a      	ldr	r2, [r3, #20]
 800690e:	2a01      	cmp	r2, #1
 8006910:	461c      	mov	r4, r3
 8006912:	dd03      	ble.n	800691c <WM__GetNextIVR+0x24>
 8006914:	3a01      	subs	r2, #1
 8006916:	615a      	str	r2, [r3, #20]
 8006918:	2000      	movs	r0, #0
 800691a:	e0a8      	b.n	8006a6e <WM__GetNextIVR+0x176>
 800691c:	f104 0608 	add.w	r6, r4, #8
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	e896 0003 	ldmia.w	r6, {r0, r1}
 8006926:	3301      	adds	r3, #1
 8006928:	ad02      	add	r5, sp, #8
 800692a:	6123      	str	r3, [r4, #16]
 800692c:	e885 0003 	stmia.w	r5, {r0, r1}
 8006930:	b923      	cbnz	r3, 800693c <WM__GetNextIVR+0x44>
 8006932:	8823      	ldrh	r3, [r4, #0]
 8006934:	f8ad 3008 	strh.w	r3, [sp, #8]
 8006938:	8863      	ldrh	r3, [r4, #2]
 800693a:	e011      	b.n	8006960 <WM__GetNextIVR+0x68>
 800693c:	89a3      	ldrh	r3, [r4, #12]
 800693e:	8962      	ldrh	r2, [r4, #10]
 8006940:	f8ad 200a 	strh.w	r2, [sp, #10]
 8006944:	3301      	adds	r3, #1
 8006946:	b29b      	uxth	r3, r3
 8006948:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800694c:	f8ad 3008 	strh.w	r3, [sp, #8]
 8006950:	b21b      	sxth	r3, r3
 8006952:	429a      	cmp	r2, r3
 8006954:	da06      	bge.n	8006964 <WM__GetNextIVR+0x6c>
 8006956:	8823      	ldrh	r3, [r4, #0]
 8006958:	f8ad 3008 	strh.w	r3, [sp, #8]
 800695c:	89e3      	ldrh	r3, [r4, #14]
 800695e:	3301      	adds	r3, #1
 8006960:	f8ad 300a 	strh.w	r3, [sp, #10]
 8006964:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8006968:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800696c:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8006a78 <WM__GetNextIVR+0x180>
 8006970:	429a      	cmp	r2, r3
 8006972:	dd04      	ble.n	800697e <WM__GetNextIVR+0x86>
 8006974:	6963      	ldr	r3, [r4, #20]
 8006976:	3b01      	subs	r3, #1
 8006978:	2000      	movs	r0, #0
 800697a:	6163      	str	r3, [r4, #20]
 800697c:	e077      	b.n	8006a6e <WM__GetNextIVR+0x176>
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006982:	f003 fda9 	bl	800a4d8 <GUI_ALLOC_LockH>
 8006986:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 800698a:	f9b8 3000 	ldrsh.w	r3, [r8]
 800698e:	9001      	str	r0, [sp, #4]
 8006990:	429a      	cmp	r2, r3
 8006992:	d11c      	bne.n	80069ce <WM__GetNextIVR+0xd6>
 8006994:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8006998:	f8ad 300e 	strh.w	r3, [sp, #14]
 800699c:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80069a0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80069a4:	4b33      	ldr	r3, [pc, #204]	; (8006a74 <WM__GetNextIVR+0x17c>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80069aa:	b15a      	cbz	r2, 80069c4 <WM__GetNextIVR+0xcc>
 80069ac:	4610      	mov	r0, r2
 80069ae:	f003 fd89 	bl	800a4c4 <GUI_ALLOC_h2p>
 80069b2:	4680      	mov	r8, r0
 80069b4:	2200      	movs	r2, #0
 80069b6:	6a00      	ldr	r0, [r0, #32]
 80069b8:	4629      	mov	r1, r5
 80069ba:	f7ff fbc3 	bl	8006144 <_Findy1>
 80069be:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80069c2:	e7f2      	b.n	80069aa <WM__GetNextIVR+0xb2>
 80069c4:	9b01      	ldr	r3, [sp, #4]
 80069c6:	4629      	mov	r1, r5
 80069c8:	69d8      	ldr	r0, [r3, #28]
 80069ca:	f7ff fbbb 	bl	8006144 <_Findy1>
 80069ce:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80069d2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80069da:	b16a      	cbz	r2, 80069f8 <WM__GetNextIVR+0x100>
 80069dc:	4610      	mov	r0, r2
 80069de:	f003 fd71 	bl	800a4c4 <GUI_ALLOC_h2p>
 80069e2:	4629      	mov	r1, r5
 80069e4:	4680      	mov	r8, r0
 80069e6:	2200      	movs	r2, #0
 80069e8:	6a00      	ldr	r0, [r0, #32]
 80069ea:	f7ff fc01 	bl	80061f0 <_Findx0>
 80069ee:	2800      	cmp	r0, #0
 80069f0:	d1ed      	bne.n	80069ce <WM__GetNextIVR+0xd6>
 80069f2:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80069f6:	e7f0      	b.n	80069da <WM__GetNextIVR+0xe2>
 80069f8:	9b01      	ldr	r3, [sp, #4]
 80069fa:	4629      	mov	r1, r5
 80069fc:	69d8      	ldr	r0, [r3, #28]
 80069fe:	f7ff fbf7 	bl	80061f0 <_Findx0>
 8006a02:	2800      	cmp	r0, #0
 8006a04:	d1e3      	bne.n	80069ce <WM__GetNextIVR+0xd6>
 8006a06:	88a3      	ldrh	r3, [r4, #4]
 8006a08:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8006a0c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006a10:	b21b      	sxth	r3, r3
 8006a12:	429a      	cmp	r2, r3
 8006a14:	dd07      	ble.n	8006a26 <WM__GetNextIVR+0x12e>
 8006a16:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006a1a:	e886 0003 	stmia.w	r6, {r0, r1}
 8006a1e:	a801      	add	r0, sp, #4
 8006a20:	f003 fd68 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 8006a24:	e797      	b.n	8006956 <WM__GetNextIVR+0x5e>
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a2a:	b152      	cbz	r2, 8006a42 <WM__GetNextIVR+0x14a>
 8006a2c:	4610      	mov	r0, r2
 8006a2e:	f003 fd49 	bl	800a4c4 <GUI_ALLOC_h2p>
 8006a32:	4607      	mov	r7, r0
 8006a34:	2200      	movs	r2, #0
 8006a36:	6a00      	ldr	r0, [r0, #32]
 8006a38:	4629      	mov	r1, r5
 8006a3a:	f7ff fc1d 	bl	8006278 <_Findx1>
 8006a3e:	69ba      	ldr	r2, [r7, #24]
 8006a40:	e7f3      	b.n	8006a2a <WM__GetNextIVR+0x132>
 8006a42:	af04      	add	r7, sp, #16
 8006a44:	4629      	mov	r1, r5
 8006a46:	f857 3d0c 	ldr.w	r3, [r7, #-12]!
 8006a4a:	69d8      	ldr	r0, [r3, #28]
 8006a4c:	f7ff fc14 	bl	8006278 <_Findx1>
 8006a50:	4638      	mov	r0, r7
 8006a52:	f003 fd4f 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 8006a56:	6923      	ldr	r3, [r4, #16]
 8006a58:	f644 6220 	movw	r2, #20000	; 0x4e20
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	dc89      	bgt.n	8006974 <WM__GetNextIVR+0x7c>
 8006a60:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006a64:	e886 0003 	stmia.w	r6, {r0, r1}
 8006a68:	f7ff fcf2 	bl	8006450 <WM__ActivateClipRect>
 8006a6c:	2001      	movs	r0, #1
 8006a6e:	b004      	add	sp, #16
 8006a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a74:	20000018 	.word	0x20000018
 8006a78:	20019054 	.word	0x20019054

08006a7c <WM__InitIVRSearch>:
 8006a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a80:	4f39      	ldr	r7, [pc, #228]	; (8006b68 <WM__InitIVRSearch+0xec>)
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8006a88:	b086      	sub	sp, #24
 8006a8a:	4606      	mov	r6, r0
 8006a8c:	b912      	cbnz	r2, 8006a94 <WM__InitIVRSearch+0x18>
 8006a8e:	f7ff fcdf 	bl	8006450 <WM__ActivateClipRect>
 8006a92:	e064      	b.n	8006b5e <WM__InitIVRSearch+0xe2>
 8006a94:	4d35      	ldr	r5, [pc, #212]	; (8006b6c <WM__InitIVRSearch+0xf0>)
 8006a96:	696a      	ldr	r2, [r5, #20]
 8006a98:	3201      	adds	r2, #1
 8006a9a:	2a01      	cmp	r2, #1
 8006a9c:	616a      	str	r2, [r5, #20]
 8006a9e:	462c      	mov	r4, r5
 8006aa0:	dc5d      	bgt.n	8006b5e <WM__InitIVRSearch+0xe2>
 8006aa2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006aa4:	f003 fd18 	bl	800a4d8 <GUI_ALLOC_LockH>
 8006aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8006aac:	612a      	str	r2, [r5, #16]
 8006aae:	4a30      	ldr	r2, [pc, #192]	; (8006b70 <WM__InitIVRSearch+0xf4>)
 8006ab0:	9000      	str	r0, [sp, #0]
 8006ab2:	7812      	ldrb	r2, [r2, #0]
 8006ab4:	b12a      	cbz	r2, 8006ac2 <WM__InitIVRSearch+0x46>
 8006ab6:	f100 0308 	add.w	r3, r0, #8
 8006aba:	aa02      	add	r2, sp, #8
 8006abc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006ac0:	e005      	b.n	8006ace <WM__InitIVRSearch+0x52>
 8006ac2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8006ac4:	f012 0802 	ands.w	r8, r2, #2
 8006ac8:	d00a      	beq.n	8006ae0 <WM__InitIVRSearch+0x64>
 8006aca:	c803      	ldmia	r0, {r0, r1}
 8006acc:	aa02      	add	r2, sp, #8
 8006ace:	e882 0003 	stmia.w	r2, {r0, r1}
 8006ad2:	ad02      	add	r5, sp, #8
 8006ad4:	b166      	cbz	r6, 8006af0 <WM__InitIVRSearch+0x74>
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	4631      	mov	r1, r6
 8006ada:	f002 f907 	bl	8008cec <GUI__IntersectRect>
 8006ade:	e007      	b.n	8006af0 <WM__InitIVRSearch+0x74>
 8006ae0:	696b      	ldr	r3, [r5, #20]
 8006ae2:	4668      	mov	r0, sp
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	616b      	str	r3, [r5, #20]
 8006ae8:	f003 fd04 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 8006aec:	4640      	mov	r0, r8
 8006aee:	e037      	b.n	8006b60 <WM__InitIVRSearch+0xe4>
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	4e20      	ldr	r6, [pc, #128]	; (8006b74 <WM__InitIVRSearch+0xf8>)
 8006af4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006af6:	b1c2      	cbz	r2, 8006b2a <WM__InitIVRSearch+0xae>
 8006af8:	9b00      	ldr	r3, [sp, #0]
 8006afa:	6810      	ldr	r0, [r2, #0]
 8006afc:	6851      	ldr	r1, [r2, #4]
 8006afe:	9301      	str	r3, [sp, #4]
 8006b00:	ab04      	add	r3, sp, #16
 8006b02:	c303      	stmia	r3!, {r0, r1}
 8006b04:	6833      	ldr	r3, [r6, #0]
 8006b06:	b133      	cbz	r3, 8006b16 <WM__InitIVRSearch+0x9a>
 8006b08:	a801      	add	r0, sp, #4
 8006b0a:	f003 fcf3 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 8006b0e:	6830      	ldr	r0, [r6, #0]
 8006b10:	f003 fce2 	bl	800a4d8 <GUI_ALLOC_LockH>
 8006b14:	9001      	str	r0, [sp, #4]
 8006b16:	9801      	ldr	r0, [sp, #4]
 8006b18:	a904      	add	r1, sp, #16
 8006b1a:	f7ff fc69 	bl	80063f0 <WM__Client2Screen>
 8006b1e:	4628      	mov	r0, r5
 8006b20:	a904      	add	r1, sp, #16
 8006b22:	f002 f8e3 	bl	8008cec <GUI__IntersectRect>
 8006b26:	a801      	add	r0, sp, #4
 8006b28:	e000      	b.n	8006b2c <WM__InitIVRSearch+0xb0>
 8006b2a:	4668      	mov	r0, sp
 8006b2c:	f003 fce2 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 8006b30:	6831      	ldr	r1, [r6, #0]
 8006b32:	b119      	cbz	r1, 8006b3c <WM__InitIVRSearch+0xc0>
 8006b34:	4628      	mov	r0, r5
 8006b36:	f7ff fbdb 	bl	80062f0 <WM__ClipAtParentBorders>
 8006b3a:	b128      	cbz	r0, 8006b48 <WM__InitIVRSearch+0xcc>
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	4628      	mov	r0, r5
 8006b40:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8006b42:	f7ff fbd5 	bl	80062f0 <WM__ClipAtParentBorders>
 8006b46:	b918      	cbnz	r0, 8006b50 <WM__InitIVRSearch+0xd4>
 8006b48:	6963      	ldr	r3, [r4, #20]
 8006b4a:	3b01      	subs	r3, #1
 8006b4c:	6163      	str	r3, [r4, #20]
 8006b4e:	e007      	b.n	8006b60 <WM__InitIVRSearch+0xe4>
 8006b50:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006b54:	e884 0003 	stmia.w	r4, {r0, r1}
 8006b58:	f7ff fece 	bl	80068f8 <WM__GetNextIVR>
 8006b5c:	e000      	b.n	8006b60 <WM__InitIVRSearch+0xe4>
 8006b5e:	2001      	movs	r0, #1
 8006b60:	b006      	add	sp, #24
 8006b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b66:	bf00      	nop
 8006b68:	20000018 	.word	0x20000018
 8006b6c:	20019054 	.word	0x20019054
 8006b70:	200195cd 	.word	0x200195cd
 8006b74:	200195a4 	.word	0x200195a4

08006b78 <WM_Activate>:
 8006b78:	4b02      	ldr	r3, [pc, #8]	; (8006b84 <WM_Activate+0xc>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8006b82:	4770      	bx	lr
 8006b84:	20000018 	.word	0x20000018

08006b88 <WM_Deactivate>:
 8006b88:	4b03      	ldr	r3, [pc, #12]	; (8006b98 <WM_Deactivate+0x10>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8006b92:	f001 bee3 	b.w	800895c <LCD_SetClipRectMax>
 8006b96:	bf00      	nop
 8006b98:	20000018 	.word	0x20000018

08006b9c <WM_DefaultProc>:
 8006b9c:	b510      	push	{r4, lr}
 8006b9e:	4604      	mov	r4, r0
 8006ba0:	6840      	ldr	r0, [r0, #4]
 8006ba2:	6823      	ldr	r3, [r4, #0]
 8006ba4:	68e1      	ldr	r1, [r4, #12]
 8006ba6:	2b17      	cmp	r3, #23
 8006ba8:	d00f      	beq.n	8006bca <WM_DefaultProc+0x2e>
 8006baa:	dc06      	bgt.n	8006bba <WM_DefaultProc+0x1e>
 8006bac:	2b0e      	cmp	r3, #14
 8006bae:	d00e      	beq.n	8006bce <WM_DefaultProc+0x32>
 8006bb0:	2b14      	cmp	r3, #20
 8006bb2:	d114      	bne.n	8006bde <WM_DefaultProc+0x42>
 8006bb4:	f7ff fa8c 	bl	80060d0 <WM__GetClientRectEx>
 8006bb8:	e011      	b.n	8006bde <WM_DefaultProc+0x42>
 8006bba:	2b22      	cmp	r3, #34	; 0x22
 8006bbc:	d00c      	beq.n	8006bd8 <WM_DefaultProc+0x3c>
 8006bbe:	2b28      	cmp	r3, #40	; 0x28
 8006bc0:	d10d      	bne.n	8006bde <WM_DefaultProc+0x42>
 8006bc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bc6:	f7ff bdac 	b.w	8006722 <WM_InvalidateWindow>
 8006bca:	60e0      	str	r0, [r4, #12]
 8006bcc:	bd10      	pop	{r4, pc}
 8006bce:	4621      	mov	r1, r4
 8006bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bd4:	f003 bfb2 	b.w	800ab3c <WM_SendToParent>
 8006bd8:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8006bdc:	e000      	b.n	8006be0 <WM_DefaultProc+0x44>
 8006bde:	2300      	movs	r3, #0
 8006be0:	60e3      	str	r3, [r4, #12]
 8006be2:	bd10      	pop	{r4, pc}

08006be4 <_cbBackWin>:
 8006be4:	6803      	ldr	r3, [r0, #0]
 8006be6:	2b0e      	cmp	r3, #14
 8006be8:	b510      	push	{r4, lr}
 8006bea:	4604      	mov	r4, r0
 8006bec:	d002      	beq.n	8006bf4 <_cbBackWin+0x10>
 8006bee:	2b0f      	cmp	r3, #15
 8006bf0:	d009      	beq.n	8006c06 <_cbBackWin+0x22>
 8006bf2:	e020      	b.n	8006c36 <_cbBackWin+0x52>
 8006bf4:	68c3      	ldr	r3, [r0, #12]
 8006bf6:	685a      	ldr	r2, [r3, #4]
 8006bf8:	2a01      	cmp	r2, #1
 8006bfa:	d121      	bne.n	8006c40 <_cbBackWin+0x5c>
 8006bfc:	6818      	ldr	r0, [r3, #0]
 8006bfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c02:	f002 bbc7 	b.w	8009394 <GUI_StoreKey>
 8006c06:	4a0f      	ldr	r2, [pc, #60]	; (8006c44 <_cbBackWin+0x60>)
 8006c08:	6843      	ldr	r3, [r0, #4]
 8006c0a:	6811      	ldr	r1, [r2, #0]
 8006c0c:	428b      	cmp	r3, r1
 8006c0e:	d006      	beq.n	8006c1e <_cbBackWin+0x3a>
 8006c10:	6852      	ldr	r2, [r2, #4]
 8006c12:	4293      	cmp	r3, r2
 8006c14:	bf14      	ite	ne
 8006c16:	f04f 33ff 	movne.w	r3, #4294967295
 8006c1a:	2301      	moveq	r3, #1
 8006c1c:	e000      	b.n	8006c20 <_cbBackWin+0x3c>
 8006c1e:	2300      	movs	r3, #0
 8006c20:	4a09      	ldr	r2, [pc, #36]	; (8006c48 <_cbBackWin+0x64>)
 8006c22:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006c26:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8006c2a:	4298      	cmp	r0, r3
 8006c2c:	d003      	beq.n	8006c36 <_cbBackWin+0x52>
 8006c2e:	f002 fb69 	bl	8009304 <GUI_SetBkColor>
 8006c32:	f003 f821 	bl	8009c78 <GUI_Clear>
 8006c36:	4620      	mov	r0, r4
 8006c38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c3c:	f7ff bfae 	b.w	8006b9c <WM_DefaultProc>
 8006c40:	bd10      	pop	{r4, pc}
 8006c42:	bf00      	nop
 8006c44:	200195a8 	.word	0x200195a8
 8006c48:	200195d4 	.word	0x200195d4

08006c4c <WM_Init>:
 8006c4c:	b530      	push	{r4, r5, lr}
 8006c4e:	4b2b      	ldr	r3, [pc, #172]	; (8006cfc <WM_Init+0xb0>)
 8006c50:	7818      	ldrb	r0, [r3, #0]
 8006c52:	b085      	sub	sp, #20
 8006c54:	461d      	mov	r5, r3
 8006c56:	2800      	cmp	r0, #0
 8006c58:	d14d      	bne.n	8006cf6 <WM_Init+0xaa>
 8006c5a:	4b29      	ldr	r3, [pc, #164]	; (8006d00 <WM_Init+0xb4>)
 8006c5c:	6018      	str	r0, [r3, #0]
 8006c5e:	4b29      	ldr	r3, [pc, #164]	; (8006d04 <WM_Init+0xb8>)
 8006c60:	6018      	str	r0, [r3, #0]
 8006c62:	4b29      	ldr	r3, [pc, #164]	; (8006d08 <WM_Init+0xbc>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	6458      	str	r0, [r3, #68]	; 0x44
 8006c68:	4b28      	ldr	r3, [pc, #160]	; (8006d0c <WM_Init+0xc0>)
 8006c6a:	8018      	strh	r0, [r3, #0]
 8006c6c:	4b28      	ldr	r3, [pc, #160]	; (8006d10 <WM_Init+0xc4>)
 8006c6e:	4604      	mov	r4, r0
 8006c70:	8018      	strh	r0, [r3, #0]
 8006c72:	4620      	mov	r0, r4
 8006c74:	f002 fed6 	bl	8009a24 <GUI_DEVICE__GetpDriver>
 8006c78:	b1c0      	cbz	r0, 8006cac <WM_Init+0x60>
 8006c7a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c7e:	2302      	movs	r3, #2
 8006c80:	e88d 000c 	stmia.w	sp, {r2, r3}
 8006c84:	2000      	movs	r0, #0
 8006c86:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8006c8a:	4b22      	ldr	r3, [pc, #136]	; (8006d14 <WM_Init+0xc8>)
 8006c8c:	9302      	str	r3, [sp, #8]
 8006c8e:	9003      	str	r0, [sp, #12]
 8006c90:	4613      	mov	r3, r2
 8006c92:	4601      	mov	r1, r0
 8006c94:	f7ff fd86 	bl	80067a4 <WM_CreateWindowAsChild>
 8006c98:	4b1f      	ldr	r3, [pc, #124]	; (8006d18 <WM_Init+0xcc>)
 8006c9a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006c9e:	4b1f      	ldr	r3, [pc, #124]	; (8006d1c <WM_Init+0xd0>)
 8006ca0:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8006ca4:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8006ca8:	f7ff fd3b 	bl	8006722 <WM_InvalidateWindow>
 8006cac:	3401      	adds	r4, #1
 8006cae:	2c02      	cmp	r4, #2
 8006cb0:	d1df      	bne.n	8006c72 <WM_Init+0x26>
 8006cb2:	481b      	ldr	r0, [pc, #108]	; (8006d20 <WM_Init+0xd4>)
 8006cb4:	f003 ff50 	bl	800ab58 <WM__AddCriticalHandle>
 8006cb8:	481a      	ldr	r0, [pc, #104]	; (8006d24 <WM_Init+0xd8>)
 8006cba:	f003 ff4d 	bl	800ab58 <WM__AddCriticalHandle>
 8006cbe:	481a      	ldr	r0, [pc, #104]	; (8006d28 <WM_Init+0xdc>)
 8006cc0:	f003 ff4a 	bl	800ab58 <WM__AddCriticalHandle>
 8006cc4:	4819      	ldr	r0, [pc, #100]	; (8006d2c <WM_Init+0xe0>)
 8006cc6:	f003 ff47 	bl	800ab58 <WM__AddCriticalHandle>
 8006cca:	4819      	ldr	r0, [pc, #100]	; (8006d30 <WM_Init+0xe4>)
 8006ccc:	f003 ff44 	bl	800ab58 <WM__AddCriticalHandle>
 8006cd0:	4818      	ldr	r0, [pc, #96]	; (8006d34 <WM_Init+0xe8>)
 8006cd2:	f003 ff41 	bl	800ab58 <WM__AddCriticalHandle>
 8006cd6:	4b10      	ldr	r3, [pc, #64]	; (8006d18 <WM_Init+0xcc>)
 8006cd8:	6818      	ldr	r0, [r3, #0]
 8006cda:	f7ff fd43 	bl	8006764 <WM_SelectWindow>
 8006cde:	f7ff ff4b 	bl	8006b78 <WM_Activate>
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	702b      	strb	r3, [r5, #0]
 8006ce6:	4814      	ldr	r0, [pc, #80]	; (8006d38 <WM_Init+0xec>)
 8006ce8:	4b14      	ldr	r3, [pc, #80]	; (8006d3c <WM_Init+0xf0>)
 8006cea:	6003      	str	r3, [r0, #0]
 8006cec:	b005      	add	sp, #20
 8006cee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006cf2:	f002 bfd1 	b.w	8009c98 <GUI__RegisterExit>
 8006cf6:	b005      	add	sp, #20
 8006cf8:	bd30      	pop	{r4, r5, pc}
 8006cfa:	bf00      	nop
 8006cfc:	20019078 	.word	0x20019078
 8006d00:	200195c4 	.word	0x200195c4
 8006d04:	2001906c 	.word	0x2001906c
 8006d08:	20000018 	.word	0x20000018
 8006d0c:	200195c0 	.word	0x200195c0
 8006d10:	200195a0 	.word	0x200195a0
 8006d14:	08006be5 	.word	0x08006be5
 8006d18:	200195a8 	.word	0x200195a8
 8006d1c:	200195d4 	.word	0x200195d4
 8006d20:	20019714 	.word	0x20019714
 8006d24:	20019704 	.word	0x20019704
 8006d28:	200196f4 	.word	0x200196f4
 8006d2c:	2001971c 	.word	0x2001971c
 8006d30:	2001970c 	.word	0x2001970c
 8006d34:	200196fc 	.word	0x200196fc
 8006d38:	20019070 	.word	0x20019070
 8006d3c:	080060f5 	.word	0x080060f5

08006d40 <GUI_MEMDEV_GetDataPtr>:
 8006d40:	b513      	push	{r0, r1, r4, lr}
 8006d42:	b150      	cbz	r0, 8006d5a <GUI_MEMDEV_GetDataPtr+0x1a>
 8006d44:	f003 fbc8 	bl	800a4d8 <GUI_ALLOC_LockH>
 8006d48:	4604      	mov	r4, r0
 8006d4a:	a802      	add	r0, sp, #8
 8006d4c:	f840 4d04 	str.w	r4, [r0, #-4]!
 8006d50:	f003 fbd0 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 8006d54:	f104 0018 	add.w	r0, r4, #24
 8006d58:	e7ff      	b.n	8006d5a <GUI_MEMDEV_GetDataPtr+0x1a>
 8006d5a:	b002      	add	sp, #8
 8006d5c:	bd10      	pop	{r4, pc}
	...

08006d60 <GUI_MEMDEV__CreateFixed>:
 8006d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d64:	4e3e      	ldr	r6, [pc, #248]	; (8006e60 <GUI_MEMDEV__CreateFixed+0x100>)
 8006d66:	b087      	sub	sp, #28
 8006d68:	461d      	mov	r5, r3
 8006d6a:	6833      	ldr	r3, [r6, #0]
 8006d6c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8006d6e:	7c5b      	ldrb	r3, [r3, #17]
 8006d70:	4683      	mov	fp, r0
 8006d72:	468a      	mov	sl, r1
 8006d74:	4690      	mov	r8, r2
 8006d76:	9811      	ldr	r0, [sp, #68]	; 0x44
 8006d78:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f002 fe64 	bl	8009a48 <GUI_DEVICE_Create>
 8006d80:	4604      	mov	r4, r0
 8006d82:	2800      	cmp	r0, #0
 8006d84:	d033      	beq.n	8006dee <GUI_MEMDEV__CreateFixed+0x8e>
 8006d86:	6903      	ldr	r3, [r0, #16]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	4798      	blx	r3
 8006d8c:	f001 fb25 	bl	80083da <LCD__GetBPPDevice>
 8006d90:	fb08 f600 	mul.w	r6, r8, r0
 8006d94:	9003      	str	r0, [sp, #12]
 8006d96:	3607      	adds	r6, #7
 8006d98:	f003 fd5a 	bl	800a850 <GUI_ALLOC_RequestSize>
 8006d9c:	f017 0901 	ands.w	r9, r7, #1
 8006da0:	ea4f 06d6 	mov.w	r6, r6, lsr #3
 8006da4:	d104      	bne.n	8006db0 <GUI_MEMDEV__CreateFixed+0x50>
 8006da6:	2304      	movs	r3, #4
 8006da8:	fb90 f0f3 	sdiv	r0, r0, r3
 8006dac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8006db0:	2d00      	cmp	r5, #0
 8006db2:	dc09      	bgt.n	8006dc8 <GUI_MEMDEV__CreateFixed+0x68>
 8006db4:	b11e      	cbz	r6, 8006dbe <GUI_MEMDEV__CreateFixed+0x5e>
 8006db6:	3818      	subs	r0, #24
 8006db8:	fbb0 f0f6 	udiv	r0, r0, r6
 8006dbc:	e000      	b.n	8006dc0 <GUI_MEMDEV__CreateFixed+0x60>
 8006dbe:	4630      	mov	r0, r6
 8006dc0:	426d      	negs	r5, r5
 8006dc2:	42a8      	cmp	r0, r5
 8006dc4:	bfb8      	it	lt
 8006dc6:	4605      	movlt	r5, r0
 8006dc8:	f1b9 0f00 	cmp.w	r9, #0
 8006dcc:	d109      	bne.n	8006de2 <GUI_MEMDEV__CreateFixed+0x82>
 8006dce:	f8cd 9000 	str.w	r9, [sp]
 8006dd2:	4658      	mov	r0, fp
 8006dd4:	4651      	mov	r1, sl
 8006dd6:	4642      	mov	r2, r8
 8006dd8:	462b      	mov	r3, r5
 8006dda:	f004 fb7f 	bl	800b4dc <GUI_USAGE_BM_Create>
 8006dde:	4607      	mov	r7, r0
 8006de0:	e000      	b.n	8006de4 <GUI_MEMDEV__CreateFixed+0x84>
 8006de2:	2700      	movs	r7, #0
 8006de4:	2d00      	cmp	r5, #0
 8006de6:	dc04      	bgt.n	8006df2 <GUI_MEMDEV__CreateFixed+0x92>
 8006de8:	4620      	mov	r0, r4
 8006dea:	f002 fe2b 	bl	8009a44 <GUI_DEVICE_Delete>
 8006dee:	2000      	movs	r0, #0
 8006df0:	e032      	b.n	8006e58 <GUI_MEMDEV__CreateFixed+0xf8>
 8006df2:	fb06 f005 	mul.w	r0, r6, r5
 8006df6:	3018      	adds	r0, #24
 8006df8:	f1b9 0f00 	cmp.w	r9, #0
 8006dfc:	d002      	beq.n	8006e04 <GUI_MEMDEV__CreateFixed+0xa4>
 8006dfe:	f003 fdb3 	bl	800a968 <GUI_ALLOC_AllocNoInit>
 8006e02:	e001      	b.n	8006e08 <GUI_MEMDEV__CreateFixed+0xa8>
 8006e04:	f003 fdb4 	bl	800a970 <GUI_ALLOC_AllocZero>
 8006e08:	4681      	mov	r9, r0
 8006e0a:	b940      	cbnz	r0, 8006e1e <GUI_MEMDEV__CreateFixed+0xbe>
 8006e0c:	4620      	mov	r0, r4
 8006e0e:	f002 fe19 	bl	8009a44 <GUI_DEVICE_Delete>
 8006e12:	2f00      	cmp	r7, #0
 8006e14:	d0eb      	beq.n	8006dee <GUI_MEMDEV__CreateFixed+0x8e>
 8006e16:	4638      	mov	r0, r7
 8006e18:	f003 fb8c 	bl	800a534 <GUI_ALLOC_Free>
 8006e1c:	e01b      	b.n	8006e56 <GUI_MEMDEV__CreateFixed+0xf6>
 8006e1e:	f003 fb5b 	bl	800a4d8 <GUI_ALLOC_LockH>
 8006e22:	4603      	mov	r3, r0
 8006e24:	a806      	add	r0, sp, #24
 8006e26:	9a03      	ldr	r2, [sp, #12]
 8006e28:	f840 3d04 	str.w	r3, [r0, #-4]!
 8006e2c:	611a      	str	r2, [r3, #16]
 8006e2e:	601c      	str	r4, [r3, #0]
 8006e30:	f8a3 b004 	strh.w	fp, [r3, #4]
 8006e34:	f8a3 a006 	strh.w	sl, [r3, #6]
 8006e38:	f8a3 8008 	strh.w	r8, [r3, #8]
 8006e3c:	815d      	strh	r5, [r3, #10]
 8006e3e:	60de      	str	r6, [r3, #12]
 8006e40:	615f      	str	r7, [r3, #20]
 8006e42:	f003 fb57 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 8006e46:	4a06      	ldr	r2, [pc, #24]	; (8006e60 <GUI_MEMDEV__CreateFixed+0x100>)
 8006e48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e4a:	6123      	str	r3, [r4, #16]
 8006e4c:	6813      	ldr	r3, [r2, #0]
 8006e4e:	f8c4 9008 	str.w	r9, [r4, #8]
 8006e52:	7c5b      	ldrb	r3, [r3, #17]
 8006e54:	61a3      	str	r3, [r4, #24]
 8006e56:	4648      	mov	r0, r9
 8006e58:	b007      	add	sp, #28
 8006e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e5e:	bf00      	nop
 8006e60:	20000018 	.word	0x20000018

08006e64 <GUI_MEMDEV_GetBitsPerPixel>:
 8006e64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e66:	4605      	mov	r5, r0
 8006e68:	b170      	cbz	r0, 8006e88 <GUI_MEMDEV_GetBitsPerPixel+0x24>
 8006e6a:	f003 fb35 	bl	800a4d8 <GUI_ALLOC_LockH>
 8006e6e:	6803      	ldr	r3, [r0, #0]
 8006e70:	ac02      	add	r4, sp, #8
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	f844 0d04 	str.w	r0, [r4, #-4]!
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	4798      	blx	r3
 8006e7c:	f001 faad 	bl	80083da <LCD__GetBPPDevice>
 8006e80:	4605      	mov	r5, r0
 8006e82:	4620      	mov	r0, r4
 8006e84:	f003 fb36 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 8006e88:	4628      	mov	r0, r5
 8006e8a:	b003      	add	sp, #12
 8006e8c:	bd30      	pop	{r4, r5, pc}
	...

08006e90 <GUI_MEMDEV_Delete>:
 8006e90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e92:	4604      	mov	r4, r0
 8006e94:	b1d0      	cbz	r0, 8006ecc <GUI_MEMDEV_Delete+0x3c>
 8006e96:	4b0e      	ldr	r3, [pc, #56]	; (8006ed0 <GUI_MEMDEV_Delete+0x40>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e9c:	4283      	cmp	r3, r0
 8006e9e:	d101      	bne.n	8006ea4 <GUI_MEMDEV_Delete+0x14>
 8006ea0:	f002 fa4a 	bl	8009338 <GUI_SelectLCD>
 8006ea4:	4620      	mov	r0, r4
 8006ea6:	f003 fb17 	bl	800a4d8 <GUI_ALLOC_LockH>
 8006eaa:	9001      	str	r0, [sp, #4]
 8006eac:	6940      	ldr	r0, [r0, #20]
 8006eae:	b108      	cbz	r0, 8006eb4 <GUI_MEMDEV_Delete+0x24>
 8006eb0:	f004 fb40 	bl	800b534 <GUI_USAGE_DecUseCnt>
 8006eb4:	ad02      	add	r5, sp, #8
 8006eb6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006eba:	6818      	ldr	r0, [r3, #0]
 8006ebc:	f002 fdc2 	bl	8009a44 <GUI_DEVICE_Delete>
 8006ec0:	4628      	mov	r0, r5
 8006ec2:	f003 fb17 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 8006ec6:	4620      	mov	r0, r4
 8006ec8:	f003 fb34 	bl	800a534 <GUI_ALLOC_Free>
 8006ecc:	b003      	add	sp, #12
 8006ece:	bd30      	pop	{r4, r5, pc}
 8006ed0:	20000018 	.word	0x20000018

08006ed4 <GUI_MEMDEV_CreateEx>:
 8006ed4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ed8:	469a      	mov	sl, r3
 8006eda:	4b19      	ldr	r3, [pc, #100]	; (8006f40 <GUI_MEMDEV_CreateEx+0x6c>)
 8006edc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4607      	mov	r7, r0
 8006ee2:	7c58      	ldrb	r0, [r3, #17]
 8006ee4:	4b17      	ldr	r3, [pc, #92]	; (8006f44 <GUI_MEMDEV_CreateEx+0x70>)
 8006ee6:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8006eea:	4688      	mov	r8, r1
 8006eec:	4691      	mov	r9, r2
 8006eee:	68e3      	ldr	r3, [r4, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	2b04      	cmp	r3, #4
 8006ef4:	d006      	beq.n	8006f04 <GUI_MEMDEV_CreateEx+0x30>
 8006ef6:	6824      	ldr	r4, [r4, #0]
 8006ef8:	2c00      	cmp	r4, #0
 8006efa:	d1f8      	bne.n	8006eee <GUI_MEMDEV_CreateEx+0x1a>
 8006efc:	f002 fd92 	bl	8009a24 <GUI_DEVICE__GetpDriver>
 8006f00:	4604      	mov	r4, r0
 8006f02:	b130      	cbz	r0, 8006f12 <GUI_MEMDEV_CreateEx+0x3e>
 8006f04:	68e3      	ldr	r3, [r4, #12]
 8006f06:	4620      	mov	r0, r4
 8006f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f0a:	2101      	movs	r1, #1
 8006f0c:	4798      	blx	r3
 8006f0e:	4606      	mov	r6, r0
 8006f10:	b908      	cbnz	r0, 8006f16 <GUI_MEMDEV_CreateEx+0x42>
 8006f12:	2000      	movs	r0, #0
 8006f14:	e010      	b.n	8006f38 <GUI_MEMDEV_CreateEx+0x64>
 8006f16:	6924      	ldr	r4, [r4, #16]
 8006f18:	68a3      	ldr	r3, [r4, #8]
 8006f1a:	4798      	blx	r3
 8006f1c:	3001      	adds	r0, #1
 8006f1e:	bf04      	itt	eq
 8006f20:	f045 0501 	orreq.w	r5, r5, #1
 8006f24:	4c08      	ldreq	r4, [pc, #32]	; (8006f48 <GUI_MEMDEV_CreateEx+0x74>)
 8006f26:	9402      	str	r4, [sp, #8]
 8006f28:	e88d 0060 	stmia.w	sp, {r5, r6}
 8006f2c:	4638      	mov	r0, r7
 8006f2e:	4641      	mov	r1, r8
 8006f30:	464a      	mov	r2, r9
 8006f32:	4653      	mov	r3, sl
 8006f34:	f7ff ff14 	bl	8006d60 <GUI_MEMDEV__CreateFixed>
 8006f38:	b004      	add	sp, #16
 8006f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f3e:	bf00      	nop
 8006f40:	20000018 	.word	0x20000018
 8006f44:	20019624 	.word	0x20019624
 8006f48:	0800f470 	.word	0x0800f470

08006f4c <GUI_MEMDEV_Create>:
 8006f4c:	b513      	push	{r0, r1, r4, lr}
 8006f4e:	2400      	movs	r4, #0
 8006f50:	9400      	str	r4, [sp, #0]
 8006f52:	f7ff ffbf 	bl	8006ed4 <GUI_MEMDEV_CreateEx>
 8006f56:	b002      	add	sp, #8
 8006f58:	bd10      	pop	{r4, pc}
	...

08006f5c <GUI_MEMDEV_Select>:
 8006f5c:	4b11      	ldr	r3, [pc, #68]	; (8006fa4 <GUI_MEMDEV_Select+0x48>)
 8006f5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	4604      	mov	r4, r0
 8006f64:	6e16      	ldr	r6, [r2, #96]	; 0x60
 8006f66:	461f      	mov	r7, r3
 8006f68:	b910      	cbnz	r0, 8006f70 <GUI_MEMDEV_Select+0x14>
 8006f6a:	f002 f9e5 	bl	8009338 <GUI_SelectLCD>
 8006f6e:	e016      	b.n	8006f9e <GUI_MEMDEV_Select+0x42>
 8006f70:	b10e      	cbz	r6, 8006f76 <GUI_MEMDEV_Select+0x1a>
 8006f72:	f002 f9e1 	bl	8009338 <GUI_SelectLCD>
 8006f76:	f7ff fe07 	bl	8006b88 <WM_Deactivate>
 8006f7a:	4620      	mov	r0, r4
 8006f7c:	f003 faac 	bl	800a4d8 <GUI_ALLOC_LockH>
 8006f80:	ad02      	add	r5, sp, #8
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	f845 0d04 	str.w	r0, [r5, #-4]!
 8006f88:	661c      	str	r4, [r3, #96]	; 0x60
 8006f8a:	6800      	ldr	r0, [r0, #0]
 8006f8c:	f002 fd98 	bl	8009ac0 <GUI_DEVICE_Link>
 8006f90:	4628      	mov	r0, r5
 8006f92:	f003 faaf 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 8006f96:	f001 f8f1 	bl	800817c <LCD_UpdateColorIndices>
 8006f9a:	f001 fcdf 	bl	800895c <LCD_SetClipRectMax>
 8006f9e:	4630      	mov	r0, r6
 8006fa0:	b003      	add	sp, #12
 8006fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fa4:	20000018 	.word	0x20000018

08006fa8 <GUI_MEMDEV_CopyToLCDAt>:
 8006fa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006fac:	460c      	mov	r4, r1
 8006fae:	b085      	sub	sp, #20
 8006fb0:	4615      	mov	r5, r2
 8006fb2:	4606      	mov	r6, r0
 8006fb4:	2800      	cmp	r0, #0
 8006fb6:	d041      	beq.n	800703c <GUI_MEMDEV_CopyToLCDAt+0x94>
 8006fb8:	2000      	movs	r0, #0
 8006fba:	f002 f9a1 	bl	8009300 <GUI_SetDrawMode>
 8006fbe:	4b21      	ldr	r3, [pc, #132]	; (8007044 <GUI_MEMDEV_CopyToLCDAt+0x9c>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4607      	mov	r7, r0
 8006fc4:	4630      	mov	r0, r6
 8006fc6:	f8d3 8060 	ldr.w	r8, [r3, #96]	; 0x60
 8006fca:	f003 fa85 	bl	800a4d8 <GUI_ALLOC_LockH>
 8006fce:	6803      	ldr	r3, [r0, #0]
 8006fd0:	9001      	str	r0, [sp, #4]
 8006fd2:	6998      	ldr	r0, [r3, #24]
 8006fd4:	f002 f99a 	bl	800930c <GUI_SelectLayer>
 8006fd8:	4b1b      	ldr	r3, [pc, #108]	; (8007048 <GUI_MEMDEV_CopyToLCDAt+0xa0>)
 8006fda:	429c      	cmp	r4, r3
 8006fdc:	9b01      	ldr	r3, [sp, #4]
 8006fde:	bf04      	itt	eq
 8006fe0:	f9b3 4004 	ldrsheq.w	r4, [r3, #4]
 8006fe4:	f9b3 5006 	ldrsheq.w	r5, [r3, #6]
 8006fe8:	891a      	ldrh	r2, [r3, #8]
 8006fea:	895b      	ldrh	r3, [r3, #10]
 8006fec:	f8ad 4008 	strh.w	r4, [sp, #8]
 8006ff0:	3a01      	subs	r2, #1
 8006ff2:	3b01      	subs	r3, #1
 8006ff4:	4422      	add	r2, r4
 8006ff6:	442b      	add	r3, r5
 8006ff8:	4681      	mov	r9, r0
 8006ffa:	f8ad 200c 	strh.w	r2, [sp, #12]
 8006ffe:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007002:	f8ad 500a 	strh.w	r5, [sp, #10]
 8007006:	f7ff fdb7 	bl	8006b78 <WM_Activate>
 800700a:	a801      	add	r0, sp, #4
 800700c:	f003 fa72 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 8007010:	a802      	add	r0, sp, #8
 8007012:	f7ff fd33 	bl	8006a7c <WM__InitIVRSearch>
 8007016:	b948      	cbnz	r0, 800702c <GUI_MEMDEV_CopyToLCDAt+0x84>
 8007018:	4648      	mov	r0, r9
 800701a:	f002 f977 	bl	800930c <GUI_SelectLayer>
 800701e:	4640      	mov	r0, r8
 8007020:	f7ff ff9c 	bl	8006f5c <GUI_MEMDEV_Select>
 8007024:	4638      	mov	r0, r7
 8007026:	f002 f96b 	bl	8009300 <GUI_SetDrawMode>
 800702a:	e007      	b.n	800703c <GUI_MEMDEV_CopyToLCDAt+0x94>
 800702c:	4630      	mov	r0, r6
 800702e:	4621      	mov	r1, r4
 8007030:	462a      	mov	r2, r5
 8007032:	f003 fe1d 	bl	800ac70 <GUI_MEMDEV__WriteToActiveOpaque>
 8007036:	f7ff fc5f 	bl	80068f8 <WM__GetNextIVR>
 800703a:	e7ec      	b.n	8007016 <GUI_MEMDEV_CopyToLCDAt+0x6e>
 800703c:	b005      	add	sp, #20
 800703e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007042:	bf00      	nop
 8007044:	20000018 	.word	0x20000018
 8007048:	fffff001 	.word	0xfffff001

0800704c <GUI_MEMDEV_CopyToLCD>:
 800704c:	4901      	ldr	r1, [pc, #4]	; (8007054 <GUI_MEMDEV_CopyToLCD+0x8>)
 800704e:	460a      	mov	r2, r1
 8007050:	f7ff bfaa 	b.w	8006fa8 <GUI_MEMDEV_CopyToLCDAt>
 8007054:	fffff001 	.word	0xfffff001

08007058 <_SetPhysRAMAddr>:
 8007058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800705a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800705c:	4604      	mov	r4, r0
 800705e:	460e      	mov	r6, r1
 8007060:	4615      	mov	r5, r2
 8007062:	b15b      	cbz	r3, 800707c <_SetPhysRAMAddr+0x24>
 8007064:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8007068:	4798      	blx	r3
 800706a:	4631      	mov	r1, r6
 800706c:	4607      	mov	r7, r0
 800706e:	462a      	mov	r2, r5
 8007070:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8007074:	4620      	mov	r0, r4
 8007076:	4798      	blx	r3
 8007078:	463e      	mov	r6, r7
 800707a:	4605      	mov	r5, r0
 800707c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007080:	4620      	mov	r0, r4
 8007082:	212a      	movs	r1, #42	; 0x2a
 8007084:	4798      	blx	r3
 8007086:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007088:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800708c:	4431      	add	r1, r6
 800708e:	4620      	mov	r0, r4
 8007090:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8007094:	4798      	blx	r3
 8007096:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007098:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800709c:	b2b7      	uxth	r7, r6
 800709e:	4439      	add	r1, r7
 80070a0:	4620      	mov	r0, r4
 80070a2:	b2c9      	uxtb	r1, r1
 80070a4:	4798      	blx	r3
 80070a6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80070a8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80070ac:	4431      	add	r1, r6
 80070ae:	4620      	mov	r0, r4
 80070b0:	f3c1 210f 	ubfx	r1, r1, #8, #16
 80070b4:	4798      	blx	r3
 80070b6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80070b8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80070bc:	4439      	add	r1, r7
 80070be:	4620      	mov	r0, r4
 80070c0:	b2c9      	uxtb	r1, r1
 80070c2:	4798      	blx	r3
 80070c4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80070c8:	4620      	mov	r0, r4
 80070ca:	212b      	movs	r1, #43	; 0x2b
 80070cc:	4798      	blx	r3
 80070ce:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80070d0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80070d4:	4429      	add	r1, r5
 80070d6:	4620      	mov	r0, r4
 80070d8:	f3c1 210f 	ubfx	r1, r1, #8, #16
 80070dc:	4798      	blx	r3
 80070de:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80070e0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80070e4:	b2ae      	uxth	r6, r5
 80070e6:	4431      	add	r1, r6
 80070e8:	4620      	mov	r0, r4
 80070ea:	b2c9      	uxtb	r1, r1
 80070ec:	4798      	blx	r3
 80070ee:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80070f0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80070f4:	4429      	add	r1, r5
 80070f6:	4620      	mov	r0, r4
 80070f8:	f3c1 210f 	ubfx	r1, r1, #8, #16
 80070fc:	4798      	blx	r3
 80070fe:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007100:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007104:	4431      	add	r1, r6
 8007106:	4620      	mov	r0, r4
 8007108:	b2c9      	uxtb	r1, r1
 800710a:	4798      	blx	r3
 800710c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007110:	4620      	mov	r0, r4
 8007112:	212c      	movs	r1, #44	; 0x2c
 8007114:	4798      	blx	r3
 8007116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007118 <_SetRect>:
 8007118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800711c:	4698      	mov	r8, r3
 800711e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007120:	9f08      	ldr	r7, [sp, #32]
 8007122:	4604      	mov	r4, r0
 8007124:	4689      	mov	r9, r1
 8007126:	4615      	mov	r5, r2
 8007128:	2b00      	cmp	r3, #0
 800712a:	d064      	beq.n	80071f6 <_SetRect+0xde>
 800712c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8007130:	4798      	blx	r3
 8007132:	463a      	mov	r2, r7
 8007134:	4606      	mov	r6, r0
 8007136:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800713a:	4641      	mov	r1, r8
 800713c:	4620      	mov	r0, r4
 800713e:	4798      	blx	r3
 8007140:	462a      	mov	r2, r5
 8007142:	4682      	mov	sl, r0
 8007144:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8007148:	4649      	mov	r1, r9
 800714a:	4620      	mov	r0, r4
 800714c:	4798      	blx	r3
 800714e:	463a      	mov	r2, r7
 8007150:	4605      	mov	r5, r0
 8007152:	4641      	mov	r1, r8
 8007154:	4620      	mov	r0, r4
 8007156:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 800715a:	4798      	blx	r3
 800715c:	45b2      	cmp	sl, r6
 800715e:	4607      	mov	r7, r0
 8007160:	db02      	blt.n	8007168 <_SetRect+0x50>
 8007162:	4653      	mov	r3, sl
 8007164:	46b2      	mov	sl, r6
 8007166:	461e      	mov	r6, r3
 8007168:	42af      	cmp	r7, r5
 800716a:	db02      	blt.n	8007172 <_SetRect+0x5a>
 800716c:	463b      	mov	r3, r7
 800716e:	462f      	mov	r7, r5
 8007170:	461d      	mov	r5, r3
 8007172:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007176:	4620      	mov	r0, r4
 8007178:	212a      	movs	r1, #42	; 0x2a
 800717a:	4798      	blx	r3
 800717c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800717e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007182:	4451      	add	r1, sl
 8007184:	4620      	mov	r0, r4
 8007186:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800718a:	4798      	blx	r3
 800718c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800718e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007192:	4451      	add	r1, sl
 8007194:	4620      	mov	r0, r4
 8007196:	b2c9      	uxtb	r1, r1
 8007198:	4798      	blx	r3
 800719a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800719c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80071a0:	4431      	add	r1, r6
 80071a2:	4620      	mov	r0, r4
 80071a4:	f3c1 210f 	ubfx	r1, r1, #8, #16
 80071a8:	4798      	blx	r3
 80071aa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80071ac:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80071b0:	4431      	add	r1, r6
 80071b2:	4620      	mov	r0, r4
 80071b4:	b2c9      	uxtb	r1, r1
 80071b6:	4798      	blx	r3
 80071b8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80071bc:	4620      	mov	r0, r4
 80071be:	212b      	movs	r1, #43	; 0x2b
 80071c0:	4798      	blx	r3
 80071c2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80071c4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80071c8:	4439      	add	r1, r7
 80071ca:	4620      	mov	r0, r4
 80071cc:	f3c1 210f 	ubfx	r1, r1, #8, #16
 80071d0:	4798      	blx	r3
 80071d2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80071d4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80071d8:	4439      	add	r1, r7
 80071da:	4620      	mov	r0, r4
 80071dc:	b2c9      	uxtb	r1, r1
 80071de:	4798      	blx	r3
 80071e0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80071e2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80071e6:	4429      	add	r1, r5
 80071e8:	f3c1 210f 	ubfx	r1, r1, #8, #16
 80071ec:	4620      	mov	r0, r4
 80071ee:	4798      	blx	r3
 80071f0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80071f2:	4429      	add	r1, r5
 80071f4:	e03f      	b.n	8007276 <_SetRect+0x15e>
 80071f6:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 80071fa:	212a      	movs	r1, #42	; 0x2a
 80071fc:	4798      	blx	r3
 80071fe:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007200:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007204:	4449      	add	r1, r9
 8007206:	4620      	mov	r0, r4
 8007208:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800720c:	4798      	blx	r3
 800720e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007210:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007214:	4449      	add	r1, r9
 8007216:	4620      	mov	r0, r4
 8007218:	b2c9      	uxtb	r1, r1
 800721a:	4798      	blx	r3
 800721c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800721e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007222:	4441      	add	r1, r8
 8007224:	4620      	mov	r0, r4
 8007226:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800722a:	4798      	blx	r3
 800722c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800722e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007232:	4441      	add	r1, r8
 8007234:	4620      	mov	r0, r4
 8007236:	b2c9      	uxtb	r1, r1
 8007238:	4798      	blx	r3
 800723a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800723e:	4620      	mov	r0, r4
 8007240:	212b      	movs	r1, #43	; 0x2b
 8007242:	4798      	blx	r3
 8007244:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007246:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800724a:	4429      	add	r1, r5
 800724c:	4620      	mov	r0, r4
 800724e:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8007252:	4798      	blx	r3
 8007254:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007256:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800725a:	4429      	add	r1, r5
 800725c:	4620      	mov	r0, r4
 800725e:	b2c9      	uxtb	r1, r1
 8007260:	4798      	blx	r3
 8007262:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007264:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007268:	4439      	add	r1, r7
 800726a:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800726e:	4620      	mov	r0, r4
 8007270:	4798      	blx	r3
 8007272:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007274:	4439      	add	r1, r7
 8007276:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800727a:	4620      	mov	r0, r4
 800727c:	b2c9      	uxtb	r1, r1
 800727e:	4798      	blx	r3
 8007280:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007284:	4620      	mov	r0, r4
 8007286:	212c      	movs	r1, #44	; 0x2c
 8007288:	4798      	blx	r3
 800728a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08007290 <_SetOrientation>:
 8007290:	b513      	push	{r0, r1, r4, lr}
 8007292:	4a0d      	ldr	r2, [pc, #52]	; (80072c8 <_SetOrientation+0x38>)
 8007294:	4604      	mov	r4, r0
 8007296:	6851      	ldr	r1, [r2, #4]
 8007298:	6810      	ldr	r0, [r2, #0]
 800729a:	466b      	mov	r3, sp
 800729c:	c303      	stmia	r3!, {r0, r1}
 800729e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80072a2:	4620      	mov	r0, r4
 80072a4:	2136      	movs	r1, #54	; 0x36
 80072a6:	4798      	blx	r3
 80072a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80072aa:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 80072ac:	aa02      	add	r2, sp, #8
 80072ae:	4413      	add	r3, r2
 80072b0:	f021 01e0 	bic.w	r1, r1, #224	; 0xe0
 80072b4:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80072b8:	4319      	orrs	r1, r3
 80072ba:	4620      	mov	r0, r4
 80072bc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80072c0:	b289      	uxth	r1, r1
 80072c2:	4798      	blx	r3
 80072c4:	b002      	add	sp, #8
 80072c6:	bd10      	pop	{r4, pc}
 80072c8:	0800d830 	.word	0x0800d830

080072cc <_ReadPixel_16bpp_B8>:
 80072cc:	b513      	push	{r0, r1, r4, lr}
 80072ce:	4604      	mov	r4, r0
 80072d0:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 80072d4:	202e      	movs	r0, #46	; 0x2e
 80072d6:	4798      	blx	r3
 80072d8:	6a21      	ldr	r1, [r4, #32]
 80072da:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80072de:	4668      	mov	r0, sp
 80072e0:	3103      	adds	r1, #3
 80072e2:	4798      	blx	r3
 80072e4:	6a22      	ldr	r2, [r4, #32]
 80072e6:	ab00      	add	r3, sp, #0
 80072e8:	4413      	add	r3, r2
 80072ea:	f81d 2002 	ldrb.w	r2, [sp, r2]
 80072ee:	7859      	ldrb	r1, [r3, #1]
 80072f0:	7898      	ldrb	r0, [r3, #2]
 80072f2:	08d2      	lsrs	r2, r2, #3
 80072f4:	0889      	lsrs	r1, r1, #2
 80072f6:	02d2      	lsls	r2, r2, #11
 80072f8:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
 80072fc:	ea42 00d0 	orr.w	r0, r2, r0, lsr #3
 8007300:	b002      	add	sp, #8
 8007302:	bd10      	pop	{r4, pc}

08007304 <_ReadPixel_16bpp_B16_I>:
 8007304:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007306:	4604      	mov	r4, r0
 8007308:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
 800730c:	202e      	movs	r0, #46	; 0x2e
 800730e:	4798      	blx	r3
 8007310:	6a21      	ldr	r1, [r4, #32]
 8007312:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8007316:	4668      	mov	r0, sp
 8007318:	3102      	adds	r1, #2
 800731a:	4798      	blx	r3
 800731c:	6a23      	ldr	r3, [r4, #32]
 800731e:	a900      	add	r1, sp, #0
 8007320:	eb01 0243 	add.w	r2, r1, r3, lsl #1
 8007324:	f83d 0013 	ldrh.w	r0, [sp, r3, lsl #1]
 8007328:	8852      	ldrh	r2, [r2, #2]
 800732a:	f402 417c 	and.w	r1, r2, #64512	; 0xfc00
 800732e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8007332:	ea42 1251 	orr.w	r2, r2, r1, lsr #5
 8007336:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 800733a:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 800733e:	b004      	add	sp, #16
 8007340:	bd10      	pop	{r4, pc}

08007342 <_SetReg_B8>:
 8007342:	b538      	push	{r3, r4, r5, lr}
 8007344:	4604      	mov	r4, r0
 8007346:	460d      	mov	r5, r1
 8007348:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 800734c:	0a08      	lsrs	r0, r1, #8
 800734e:	4798      	blx	r3
 8007350:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8007354:	b2e8      	uxtb	r0, r5
 8007356:	4798      	blx	r3
 8007358:	bd38      	pop	{r3, r4, r5, pc}

0800735a <_SetReg_B16>:
 800735a:	b508      	push	{r3, lr}
 800735c:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
 8007360:	4608      	mov	r0, r1
 8007362:	4798      	blx	r3
 8007364:	bd08      	pop	{r3, pc}

08007366 <_WritePara_B8>:
 8007366:	b508      	push	{r3, lr}
 8007368:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 800736c:	b2c8      	uxtb	r0, r1
 800736e:	4798      	blx	r3
 8007370:	bd08      	pop	{r3, pc}

08007372 <_WritePara_B16>:
 8007372:	b508      	push	{r3, lr}
 8007374:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
 8007378:	4608      	mov	r0, r1
 800737a:	4798      	blx	r3
 800737c:	bd08      	pop	{r3, pc}
	...

08007380 <_SetInterface>:
 8007380:	2908      	cmp	r1, #8
 8007382:	d002      	beq.n	800738a <_SetInterface+0xa>
 8007384:	2910      	cmp	r1, #16
 8007386:	d005      	beq.n	8007394 <_SetInterface+0x14>
 8007388:	4770      	bx	lr
 800738a:	4b06      	ldr	r3, [pc, #24]	; (80073a4 <_SetInterface+0x24>)
 800738c:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
 8007390:	4b05      	ldr	r3, [pc, #20]	; (80073a8 <_SetInterface+0x28>)
 8007392:	e003      	b.n	800739c <_SetInterface+0x1c>
 8007394:	4b05      	ldr	r3, [pc, #20]	; (80073ac <_SetInterface+0x2c>)
 8007396:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
 800739a:	4b05      	ldr	r3, [pc, #20]	; (80073b0 <_SetInterface+0x30>)
 800739c:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
 80073a0:	4770      	bx	lr
 80073a2:	bf00      	nop
 80073a4:	08007343 	.word	0x08007343
 80073a8:	08007367 	.word	0x08007367
 80073ac:	0800735b 	.word	0x0800735b
 80073b0:	08007373 	.word	0x08007373

080073b4 <_ReadRect_16bpp_B8>:
 80073b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073b6:	b085      	sub	sp, #20
 80073b8:	6884      	ldr	r4, [r0, #8]
 80073ba:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80073bc:	9700      	str	r7, [sp, #0]
 80073be:	1abd      	subs	r5, r7, r2
 80073c0:	1a58      	subs	r0, r3, r1
 80073c2:	3501      	adds	r5, #1
 80073c4:	fb00 5505 	mla	r5, r0, r5, r5
 80073c8:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 80073cc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80073ce:	4620      	mov	r0, r4
 80073d0:	47b8      	blx	r7
 80073d2:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 80073d6:	202e      	movs	r0, #46	; 0x2e
 80073d8:	4798      	blx	r3
 80073da:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80073de:	6a21      	ldr	r1, [r4, #32]
 80073e0:	a802      	add	r0, sp, #8
 80073e2:	4798      	blx	r3
 80073e4:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80073e8:	a802      	add	r0, sp, #8
 80073ea:	2103      	movs	r1, #3
 80073ec:	4798      	blx	r3
 80073ee:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80073f2:	f89d 2009 	ldrb.w	r2, [sp, #9]
 80073f6:	08db      	lsrs	r3, r3, #3
 80073f8:	0892      	lsrs	r2, r2, #2
 80073fa:	02db      	lsls	r3, r3, #11
 80073fc:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8007400:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8007404:	3d01      	subs	r5, #1
 8007406:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 800740a:	f826 3b02 	strh.w	r3, [r6], #2
 800740e:	d1e9      	bne.n	80073e4 <_ReadRect_16bpp_B8+0x30>
 8007410:	b005      	add	sp, #20
 8007412:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007414 <_ReadRect_16bpp_B16_I>:
 8007414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007416:	b087      	sub	sp, #28
 8007418:	6884      	ldr	r4, [r0, #8]
 800741a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800741c:	9700      	str	r7, [sp, #0]
 800741e:	1abd      	subs	r5, r7, r2
 8007420:	1a58      	subs	r0, r3, r1
 8007422:	3501      	adds	r5, #1
 8007424:	fb00 5505 	mla	r5, r0, r5, r5
 8007428:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800742c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800742e:	4620      	mov	r0, r4
 8007430:	47b8      	blx	r7
 8007432:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 8007436:	202e      	movs	r0, #46	; 0x2e
 8007438:	4798      	blx	r3
 800743a:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 800743e:	6a21      	ldr	r1, [r4, #32]
 8007440:	a802      	add	r0, sp, #8
 8007442:	4798      	blx	r3
 8007444:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8007448:	a802      	add	r0, sp, #8
 800744a:	2102      	movs	r1, #2
 800744c:	4798      	blx	r3
 800744e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8007452:	f403 427c 	and.w	r2, r3, #64512	; 0xfc00
 8007456:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 800745a:	ea43 1352 	orr.w	r3, r3, r2, lsr #5
 800745e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8007462:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8007466:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800746a:	3d01      	subs	r5, #1
 800746c:	f826 3b02 	strh.w	r3, [r6], #2
 8007470:	d1e8      	bne.n	8007444 <_ReadRect_16bpp_B16_I+0x30>
 8007472:	b007      	add	sp, #28
 8007474:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08007478 <GUIDRV_FlexColor_SetFunc66720>:
 8007478:	b510      	push	{r4, lr}
 800747a:	4604      	mov	r4, r0
 800747c:	f000 fda6 	bl	8007fcc <GUIDRV_FlexColor__InitOnce>
 8007480:	68a3      	ldr	r3, [r4, #8]
 8007482:	4a12      	ldr	r2, [pc, #72]	; (80074cc <GUIDRV_FlexColor_SetFunc66720+0x54>)
 8007484:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8007488:	4a11      	ldr	r2, [pc, #68]	; (80074d0 <GUIDRV_FlexColor_SetFunc66720+0x58>)
 800748a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 800748e:	4a11      	ldr	r2, [pc, #68]	; (80074d4 <GUIDRV_FlexColor_SetFunc66720+0x5c>)
 8007490:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8007494:	4a10      	ldr	r2, [pc, #64]	; (80074d8 <GUIDRV_FlexColor_SetFunc66720+0x60>)
 8007496:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800749a:	2200      	movs	r2, #0
 800749c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 80074a0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 80074a4:	4a0d      	ldr	r2, [pc, #52]	; (80074dc <GUIDRV_FlexColor_SetFunc66720+0x64>)
 80074a6:	490e      	ldr	r1, [pc, #56]	; (80074e0 <GUIDRV_FlexColor_SetFunc66720+0x68>)
 80074a8:	6812      	ldr	r2, [r2, #0]
 80074aa:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 80074ae:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 80074b0:	6809      	ldr	r1, [r1, #0]
 80074b2:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4
 80074b6:	f022 0203 	bic.w	r2, r2, #3
 80074ba:	490a      	ldr	r1, [pc, #40]	; (80074e4 <GUIDRV_FlexColor_SetFunc66720+0x6c>)
 80074bc:	84da      	strh	r2, [r3, #38]	; 0x26
 80074be:	4a0a      	ldr	r2, [pc, #40]	; (80074e8 <GUIDRV_FlexColor_SetFunc66720+0x70>)
 80074c0:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
 80074c4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80074c8:	bd10      	pop	{r4, pc}
 80074ca:	bf00      	nop
 80074cc:	08007059 	.word	0x08007059
 80074d0:	08007119 	.word	0x08007119
 80074d4:	08007291 	.word	0x08007291
 80074d8:	080072cd 	.word	0x080072cd
 80074dc:	20000010 	.word	0x20000010
 80074e0:	2000000c 	.word	0x2000000c
 80074e4:	080073b5 	.word	0x080073b5
 80074e8:	08007381 	.word	0x08007381

080074ec <_ReadData>:
 80074ec:	b508      	push	{r3, lr}
 80074ee:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
 80074f2:	4798      	blx	r3
 80074f4:	bd08      	pop	{r3, pc}

080074f6 <_WriteData>:
 80074f6:	b508      	push	{r3, lr}
 80074f8:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
 80074fc:	b288      	uxth	r0, r1
 80074fe:	4798      	blx	r3
 8007500:	bd08      	pop	{r3, pc}
	...

08007504 <_FillRect>:
 8007504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007508:	4f3d      	ldr	r7, [pc, #244]	; (8007600 <_FillRect+0xfc>)
 800750a:	6884      	ldr	r4, [r0, #8]
 800750c:	4682      	mov	sl, r0
 800750e:	6838      	ldr	r0, [r7, #0]
 8007510:	7c00      	ldrb	r0, [r0, #16]
 8007512:	f010 0f01 	tst.w	r0, #1
 8007516:	b085      	sub	sp, #20
 8007518:	460e      	mov	r6, r1
 800751a:	4615      	mov	r5, r2
 800751c:	4698      	mov	r8, r3
 800751e:	ebc1 0903 	rsb	r9, r1, r3
 8007522:	d045      	beq.n	80075b0 <_FillRect+0xac>
 8007524:	ea4f 0b49 	mov.w	fp, r9, lsl #1
 8007528:	980e      	ldr	r0, [sp, #56]	; 0x38
 800752a:	4285      	cmp	r5, r0
 800752c:	dc65      	bgt.n	80075fa <_FillRect+0xf6>
 800752e:	f8d4 c0c4 	ldr.w	ip, [r4, #196]	; 0xc4
 8007532:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 8007534:	f1bc 0f00 	cmp.w	ip, #0
 8007538:	d101      	bne.n	800753e <_FillRect+0x3a>
 800753a:	46b4      	mov	ip, r6
 800753c:	e007      	b.n	800754e <_FillRect+0x4a>
 800753e:	e88d 00a0 	stmia.w	sp, {r5, r7}
 8007542:	4650      	mov	r0, sl
 8007544:	4631      	mov	r1, r6
 8007546:	462a      	mov	r2, r5
 8007548:	4643      	mov	r3, r8
 800754a:	47e0      	blx	ip
 800754c:	e011      	b.n	8007572 <_FillRect+0x6e>
 800754e:	45c4      	cmp	ip, r8
 8007550:	dc0e      	bgt.n	8007570 <_FillRect+0x6c>
 8007552:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8007556:	f8cd c00c 	str.w	ip, [sp, #12]
 800755a:	4661      	mov	r1, ip
 800755c:	4650      	mov	r0, sl
 800755e:	462a      	mov	r2, r5
 8007560:	4798      	blx	r3
 8007562:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8007566:	f827 0b02 	strh.w	r0, [r7], #2
 800756a:	f10c 0c01 	add.w	ip, ip, #1
 800756e:	e7ee      	b.n	800754e <_FillRect+0x4a>
 8007570:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 8007572:	1ebb      	subs	r3, r7, #2
 8007574:	f109 0c01 	add.w	ip, r9, #1
 8007578:	445f      	add	r7, fp
 800757a:	42bb      	cmp	r3, r7
 800757c:	d005      	beq.n	800758a <_FillRect+0x86>
 800757e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007580:	8859      	ldrh	r1, [r3, #2]
 8007582:	404a      	eors	r2, r1
 8007584:	f823 2f02 	strh.w	r2, [r3, #2]!
 8007588:	e7f7      	b.n	800757a <_FillRect+0x76>
 800758a:	9500      	str	r5, [sp, #0]
 800758c:	462a      	mov	r2, r5
 800758e:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 8007592:	f8cd c00c 	str.w	ip, [sp, #12]
 8007596:	4620      	mov	r0, r4
 8007598:	4631      	mov	r1, r6
 800759a:	4643      	mov	r3, r8
 800759c:	47b8      	blx	r7
 800759e:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80075a2:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 80075a6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80075a8:	4661      	mov	r1, ip
 80075aa:	4798      	blx	r3
 80075ac:	3501      	adds	r5, #1
 80075ae:	e7bb      	b.n	8007528 <_FillRect+0x24>
 80075b0:	980e      	ldr	r0, [sp, #56]	; 0x38
 80075b2:	9000      	str	r0, [sp, #0]
 80075b4:	1a85      	subs	r5, r0, r2
 80075b6:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 80075ba:	4620      	mov	r0, r4
 80075bc:	47b0      	blx	r6
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	6ea7      	ldr	r7, [r4, #104]	; 0x68
 80075c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075c4:	f109 0901 	add.w	r9, r9, #1
 80075c8:	f8d3 8000 	ldr.w	r8, [r3]
 80075cc:	fb05 9509 	mla	r5, r5, r9, r9
 80075d0:	2301      	movs	r3, #1
 80075d2:	b195      	cbz	r5, 80075fa <_FillRect+0xf6>
 80075d4:	2dfa      	cmp	r5, #250	; 0xfa
 80075d6:	bf34      	ite	cc
 80075d8:	462e      	movcc	r6, r5
 80075da:	26fa      	movcs	r6, #250	; 0xfa
 80075dc:	b12b      	cbz	r3, 80075ea <_FillRect+0xe6>
 80075de:	4638      	mov	r0, r7
 80075e0:	fa1f f188 	uxth.w	r1, r8
 80075e4:	4632      	mov	r2, r6
 80075e6:	f001 fa7b 	bl	8008ae0 <GUI__memset16>
 80075ea:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 80075ee:	4638      	mov	r0, r7
 80075f0:	4631      	mov	r1, r6
 80075f2:	4798      	blx	r3
 80075f4:	1bad      	subs	r5, r5, r6
 80075f6:	2300      	movs	r3, #0
 80075f8:	e7eb      	b.n	80075d2 <_FillRect+0xce>
 80075fa:	b005      	add	sp, #20
 80075fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007600:	20000018 	.word	0x20000018

08007604 <_DrawBitmap>:
 8007604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007608:	b08d      	sub	sp, #52	; 0x34
 800760a:	6885      	ldr	r5, [r0, #8]
 800760c:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800760e:	9305      	str	r3, [sp, #20]
 8007610:	1e7b      	subs	r3, r7, #1
 8007612:	2b01      	cmp	r3, #1
 8007614:	9009      	str	r0, [sp, #36]	; 0x24
 8007616:	9108      	str	r1, [sp, #32]
 8007618:	920a      	str	r2, [sp, #40]	; 0x28
 800761a:	950b      	str	r5, [sp, #44]	; 0x2c
 800761c:	d903      	bls.n	8007626 <_DrawBitmap+0x22>
 800761e:	2f04      	cmp	r7, #4
 8007620:	d001      	beq.n	8007626 <_DrawBitmap+0x22>
 8007622:	2f08      	cmp	r7, #8
 8007624:	d106      	bne.n	8007634 <_DrawBitmap+0x30>
 8007626:	4b8f      	ldr	r3, [pc, #572]	; (8007864 <_DrawBitmap+0x260>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	7c1b      	ldrb	r3, [r3, #16]
 800762c:	f003 0303 	and.w	r3, r3, #3
 8007630:	2b02      	cmp	r3, #2
 8007632:	d010      	beq.n	8007656 <_DrawBitmap+0x52>
 8007634:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007636:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8007638:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800763a:	9908      	ldr	r1, [sp, #32]
 800763c:	9b05      	ldr	r3, [sp, #20]
 800763e:	443a      	add	r2, r7
 8007640:	4429      	add	r1, r5
 8007642:	3a01      	subs	r2, #1
 8007644:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007646:	9200      	str	r2, [sp, #0]
 8007648:	440b      	add	r3, r1
 800764a:	f8d5 40a8 	ldr.w	r4, [r5, #168]	; 0xa8
 800764e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007650:	4628      	mov	r0, r5
 8007652:	3b01      	subs	r3, #1
 8007654:	47a0      	blx	r4
 8007656:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800765a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800765c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800765e:	ebc7 030b 	rsb	r3, r7, fp
 8007662:	42ab      	cmp	r3, r5
 8007664:	f280 8251 	bge.w	8007b0a <_DrawBitmap+0x506>
 8007668:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800766a:	1e7b      	subs	r3, r7, #1
 800766c:	2b0f      	cmp	r3, #15
 800766e:	f200 8245 	bhi.w	8007afc <_DrawBitmap+0x4f8>
 8007672:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007676:	0010      	.short	0x0010
 8007678:	024300b7 	.word	0x024300b7
 800767c:	02430140 	.word	0x02430140
 8007680:	02430243 	.word	0x02430243
 8007684:	024301d7 	.word	0x024301d7
 8007688:	02430243 	.word	0x02430243
 800768c:	02430243 	.word	0x02430243
 8007690:	02430243 	.word	0x02430243
 8007694:	023d      	.short	0x023d
 8007696:	4b73      	ldr	r3, [pc, #460]	; (8007864 <_DrawBitmap+0x260>)
 8007698:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	68ac      	ldr	r4, [r5, #8]
 800769e:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80076a0:	7c1b      	ldrb	r3, [r3, #16]
 80076a2:	682f      	ldr	r7, [r5, #0]
 80076a4:	686d      	ldr	r5, [r5, #4]
 80076a6:	9507      	str	r5, [sp, #28]
 80076a8:	f8dd a020 	ldr.w	sl, [sp, #32]
 80076ac:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80076ae:	f003 0303 	and.w	r3, r3, #3
 80076b2:	2b02      	cmp	r3, #2
 80076b4:	44aa      	add	sl, r5
 80076b6:	d01b      	beq.n	80076f0 <_DrawBitmap+0xec>
 80076b8:	2b03      	cmp	r3, #3
 80076ba:	d06e      	beq.n	800779a <_DrawBitmap+0x196>
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d06c      	beq.n	800779a <_DrawBitmap+0x196>
 80076c0:	9e05      	ldr	r6, [sp, #20]
 80076c2:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
 80076c6:	f898 1000 	ldrb.w	r1, [r8]
 80076ca:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 80076ce:	2280      	movs	r2, #128	; 0x80
 80076d0:	412a      	asrs	r2, r5
 80076d2:	4211      	tst	r1, r2
 80076d4:	bf16      	itet	ne
 80076d6:	9907      	ldrne	r1, [sp, #28]
 80076d8:	b2b8      	uxtheq	r0, r7
 80076da:	b288      	uxthne	r0, r1
 80076dc:	3501      	adds	r5, #1
 80076de:	4798      	blx	r3
 80076e0:	2d08      	cmp	r5, #8
 80076e2:	bf04      	itt	eq
 80076e4:	f108 0801 	addeq.w	r8, r8, #1
 80076e8:	2500      	moveq	r5, #0
 80076ea:	3e01      	subs	r6, #1
 80076ec:	d1eb      	bne.n	80076c6 <_DrawBitmap+0xc2>
 80076ee:	e205      	b.n	8007afc <_DrawBitmap+0x4f8>
 80076f0:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80076f2:	9506      	str	r5, [sp, #24]
 80076f4:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
 80076f8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80076fc:	f8cd a00c 	str.w	sl, [sp, #12]
 8007700:	2500      	movs	r5, #0
 8007702:	4656      	mov	r6, sl
 8007704:	462b      	mov	r3, r5
 8007706:	9f06      	ldr	r7, [sp, #24]
 8007708:	f04f 0c80 	mov.w	ip, #128	; 0x80
 800770c:	783a      	ldrb	r2, [r7, #0]
 800770e:	fa4c fc08 	asr.w	ip, ip, r8
 8007712:	ea12 0c0c 	ands.w	ip, r2, ip
 8007716:	d00b      	beq.n	8007730 <_DrawBitmap+0x12c>
 8007718:	b913      	cbnz	r3, 8007720 <_DrawBitmap+0x11c>
 800771a:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
 800771e:	9603      	str	r6, [sp, #12]
 8007720:	9f07      	ldr	r7, [sp, #28]
 8007722:	f8a9 7000 	strh.w	r7, [r9]
 8007726:	3501      	adds	r5, #1
 8007728:	f109 0902 	add.w	r9, r9, #2
 800772c:	2301      	movs	r3, #1
 800772e:	e017      	b.n	8007760 <_DrawBitmap+0x15c>
 8007730:	2b01      	cmp	r3, #1
 8007732:	d114      	bne.n	800775e <_DrawBitmap+0x15a>
 8007734:	f8cd b000 	str.w	fp, [sp]
 8007738:	f8cd c010 	str.w	ip, [sp, #16]
 800773c:	4620      	mov	r0, r4
 800773e:	9903      	ldr	r1, [sp, #12]
 8007740:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 8007744:	465a      	mov	r2, fp
 8007746:	1e73      	subs	r3, r6, #1
 8007748:	47b8      	blx	r7
 800774a:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 800774e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8007750:	4629      	mov	r1, r5
 8007752:	4798      	blx	r3
 8007754:	f8dd c010 	ldr.w	ip, [sp, #16]
 8007758:	4665      	mov	r5, ip
 800775a:	4663      	mov	r3, ip
 800775c:	e000      	b.n	8007760 <_DrawBitmap+0x15c>
 800775e:	4663      	mov	r3, ip
 8007760:	f108 0801 	add.w	r8, r8, #1
 8007764:	f1b8 0f08 	cmp.w	r8, #8
 8007768:	f106 0601 	add.w	r6, r6, #1
 800776c:	d104      	bne.n	8007778 <_DrawBitmap+0x174>
 800776e:	9f06      	ldr	r7, [sp, #24]
 8007770:	3701      	adds	r7, #1
 8007772:	9706      	str	r7, [sp, #24]
 8007774:	f04f 0800 	mov.w	r8, #0
 8007778:	9a05      	ldr	r2, [sp, #20]
 800777a:	4452      	add	r2, sl
 800777c:	42b2      	cmp	r2, r6
 800777e:	d1c2      	bne.n	8007706 <_DrawBitmap+0x102>
 8007780:	9f05      	ldr	r7, [sp, #20]
 8007782:	1e7b      	subs	r3, r7, #1
 8007784:	4453      	add	r3, sl
 8007786:	2d00      	cmp	r5, #0
 8007788:	f000 81b8 	beq.w	8007afc <_DrawBitmap+0x4f8>
 800778c:	f8cd b000 	str.w	fp, [sp]
 8007790:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 8007794:	9903      	ldr	r1, [sp, #12]
 8007796:	4620      	mov	r0, r4
 8007798:	e13d      	b.n	8007a16 <_DrawBitmap+0x412>
 800779a:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800779e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80077a0:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80077a2:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80077a6:	782a      	ldrb	r2, [r5, #0]
 80077a8:	2380      	movs	r3, #128	; 0x80
 80077aa:	4133      	asrs	r3, r6
 80077ac:	44d1      	add	r9, sl
 80077ae:	421a      	tst	r2, r3
 80077b0:	ebc8 0909 	rsb	r9, r8, r9
 80077b4:	d00d      	beq.n	80077d2 <_DrawBitmap+0x1ce>
 80077b6:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 80077ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077bc:	4649      	mov	r1, r9
 80077be:	465a      	mov	r2, fp
 80077c0:	4798      	blx	r3
 80077c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80077c4:	f8d4 70f0 	ldr.w	r7, [r4, #240]	; 0xf0
 80077c8:	4043      	eors	r3, r0
 80077ca:	4649      	mov	r1, r9
 80077cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077ce:	465a      	mov	r2, fp
 80077d0:	47b8      	blx	r7
 80077d2:	3601      	adds	r6, #1
 80077d4:	2e08      	cmp	r6, #8
 80077d6:	bf04      	itt	eq
 80077d8:	3501      	addeq	r5, #1
 80077da:	2600      	moveq	r6, #0
 80077dc:	f1b8 0801 	subs.w	r8, r8, #1
 80077e0:	d1df      	bne.n	80077a2 <_DrawBitmap+0x19e>
 80077e2:	e18b      	b.n	8007afc <_DrawBitmap+0x4f8>
 80077e4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80077e6:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80077e8:	68ac      	ldr	r4, [r5, #8]
 80077ea:	2f00      	cmp	r7, #0
 80077ec:	f000 8186 	beq.w	8007afc <_DrawBitmap+0x4f8>
 80077f0:	4b1c      	ldr	r3, [pc, #112]	; (8007864 <_DrawBitmap+0x260>)
 80077f2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f895 a000 	ldrb.w	sl, [r5]
 80077fa:	7c1b      	ldrb	r3, [r3, #16]
 80077fc:	f013 0303 	ands.w	r3, r3, #3
 8007800:	d011      	beq.n	8007826 <_DrawBitmap+0x222>
 8007802:	2b02      	cmp	r3, #2
 8007804:	f040 817a 	bne.w	8007afc <_DrawBitmap+0x4f8>
 8007808:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800780a:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800780e:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 8007810:	9703      	str	r7, [sp, #12]
 8007812:	44a9      	add	r9, r5
 8007814:	46a8      	mov	r8, r5
 8007816:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007818:	9507      	str	r5, [sp, #28]
 800781a:	2500      	movs	r5, #0
 800781c:	f8cd 9018 	str.w	r9, [sp, #24]
 8007820:	464e      	mov	r6, r9
 8007822:	462b      	mov	r3, r5
 8007824:	e040      	b.n	80078a8 <_DrawBitmap+0x2a4>
 8007826:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8007828:	9e05      	ldr	r6, [sp, #20]
 800782a:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800782c:	f1c5 0303 	rsb	r3, r5, #3
 8007830:	005b      	lsls	r3, r3, #1
 8007832:	f1c3 0206 	rsb	r2, r3, #6
 8007836:	21c0      	movs	r1, #192	; 0xc0
 8007838:	fa41 f202 	asr.w	r2, r1, r2
 800783c:	ea02 020a 	and.w	r2, r2, sl
 8007840:	40da      	lsrs	r2, r3
 8007842:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8007844:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 8007848:	f831 0022 	ldrh.w	r0, [r1, r2, lsl #2]
 800784c:	3501      	adds	r5, #1
 800784e:	4798      	blx	r3
 8007850:	2d04      	cmp	r5, #4
 8007852:	d103      	bne.n	800785c <_DrawBitmap+0x258>
 8007854:	f897 a001 	ldrb.w	sl, [r7, #1]
 8007858:	2500      	movs	r5, #0
 800785a:	3701      	adds	r7, #1
 800785c:	3e01      	subs	r6, #1
 800785e:	d1e5      	bne.n	800782c <_DrawBitmap+0x228>
 8007860:	e14c      	b.n	8007afc <_DrawBitmap+0x4f8>
 8007862:	bf00      	nop
 8007864:	20000018 	.word	0x20000018
 8007868:	b913      	cbnz	r3, 8007870 <_DrawBitmap+0x26c>
 800786a:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800786c:	9703      	str	r7, [sp, #12]
 800786e:	9606      	str	r6, [sp, #24]
 8007870:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8007872:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
 8007876:	9f03      	ldr	r7, [sp, #12]
 8007878:	803b      	strh	r3, [r7, #0]
 800787a:	3702      	adds	r7, #2
 800787c:	3501      	adds	r5, #1
 800787e:	9703      	str	r7, [sp, #12]
 8007880:	2301      	movs	r3, #1
 8007882:	f108 0801 	add.w	r8, r8, #1
 8007886:	f1b8 0f04 	cmp.w	r8, #4
 800788a:	f106 0601 	add.w	r6, r6, #1
 800788e:	d106      	bne.n	800789e <_DrawBitmap+0x29a>
 8007890:	9f07      	ldr	r7, [sp, #28]
 8007892:	f897 a001 	ldrb.w	sl, [r7, #1]
 8007896:	3701      	adds	r7, #1
 8007898:	9707      	str	r7, [sp, #28]
 800789a:	f04f 0800 	mov.w	r8, #0
 800789e:	9a05      	ldr	r2, [sp, #20]
 80078a0:	444a      	add	r2, r9
 80078a2:	42b2      	cmp	r2, r6
 80078a4:	f000 80ac 	beq.w	8007a00 <_DrawBitmap+0x3fc>
 80078a8:	f1c8 0203 	rsb	r2, r8, #3
 80078ac:	0052      	lsls	r2, r2, #1
 80078ae:	f1c2 0106 	rsb	r1, r2, #6
 80078b2:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
 80078b6:	fa4c fc01 	asr.w	ip, ip, r1
 80078ba:	ea0c 0c0a 	and.w	ip, ip, sl
 80078be:	fa3c fc02 	lsrs.w	ip, ip, r2
 80078c2:	d1d1      	bne.n	8007868 <_DrawBitmap+0x264>
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d114      	bne.n	80078f2 <_DrawBitmap+0x2ee>
 80078c8:	f8cd b000 	str.w	fp, [sp]
 80078cc:	f8cd c010 	str.w	ip, [sp, #16]
 80078d0:	4620      	mov	r0, r4
 80078d2:	9906      	ldr	r1, [sp, #24]
 80078d4:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 80078d8:	465a      	mov	r2, fp
 80078da:	1e73      	subs	r3, r6, #1
 80078dc:	47b8      	blx	r7
 80078de:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 80078e2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80078e4:	4629      	mov	r1, r5
 80078e6:	4798      	blx	r3
 80078e8:	f8dd c010 	ldr.w	ip, [sp, #16]
 80078ec:	4665      	mov	r5, ip
 80078ee:	4663      	mov	r3, ip
 80078f0:	e7c7      	b.n	8007882 <_DrawBitmap+0x27e>
 80078f2:	4663      	mov	r3, ip
 80078f4:	e7c5      	b.n	8007882 <_DrawBitmap+0x27e>
 80078f6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80078f8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80078fa:	68ac      	ldr	r4, [r5, #8]
 80078fc:	2f00      	cmp	r7, #0
 80078fe:	f000 80fd 	beq.w	8007afc <_DrawBitmap+0x4f8>
 8007902:	4b83      	ldr	r3, [pc, #524]	; (8007b10 <_DrawBitmap+0x50c>)
 8007904:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f895 a000 	ldrb.w	sl, [r5]
 800790c:	7c1b      	ldrb	r3, [r3, #16]
 800790e:	f013 0303 	ands.w	r3, r3, #3
 8007912:	d011      	beq.n	8007938 <_DrawBitmap+0x334>
 8007914:	2b02      	cmp	r3, #2
 8007916:	f040 80f1 	bne.w	8007afc <_DrawBitmap+0x4f8>
 800791a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800791c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007920:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 8007922:	9703      	str	r7, [sp, #12]
 8007924:	44a9      	add	r9, r5
 8007926:	46a8      	mov	r8, r5
 8007928:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800792a:	9507      	str	r5, [sp, #28]
 800792c:	2500      	movs	r5, #0
 800792e:	f8cd 9018 	str.w	r9, [sp, #24]
 8007932:	464e      	mov	r6, r9
 8007934:	462b      	mov	r3, r5
 8007936:	e03c      	b.n	80079b2 <_DrawBitmap+0x3ae>
 8007938:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800793a:	9e05      	ldr	r6, [sp, #20]
 800793c:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800793e:	f1c5 0301 	rsb	r3, r5, #1
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	f1c3 0204 	rsb	r2, r3, #4
 8007948:	21f0      	movs	r1, #240	; 0xf0
 800794a:	fa41 f202 	asr.w	r2, r1, r2
 800794e:	ea02 020a 	and.w	r2, r2, sl
 8007952:	40da      	lsrs	r2, r3
 8007954:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8007956:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800795a:	f831 0022 	ldrh.w	r0, [r1, r2, lsl #2]
 800795e:	3501      	adds	r5, #1
 8007960:	4798      	blx	r3
 8007962:	2d02      	cmp	r5, #2
 8007964:	d103      	bne.n	800796e <_DrawBitmap+0x36a>
 8007966:	f897 a001 	ldrb.w	sl, [r7, #1]
 800796a:	2500      	movs	r5, #0
 800796c:	3701      	adds	r7, #1
 800796e:	3e01      	subs	r6, #1
 8007970:	d1e5      	bne.n	800793e <_DrawBitmap+0x33a>
 8007972:	e0c3      	b.n	8007afc <_DrawBitmap+0x4f8>
 8007974:	b913      	cbnz	r3, 800797c <_DrawBitmap+0x378>
 8007976:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 8007978:	9703      	str	r7, [sp, #12]
 800797a:	9606      	str	r6, [sp, #24]
 800797c:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800797e:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
 8007982:	9f03      	ldr	r7, [sp, #12]
 8007984:	803b      	strh	r3, [r7, #0]
 8007986:	3702      	adds	r7, #2
 8007988:	3501      	adds	r5, #1
 800798a:	9703      	str	r7, [sp, #12]
 800798c:	2301      	movs	r3, #1
 800798e:	f108 0801 	add.w	r8, r8, #1
 8007992:	f1b8 0f02 	cmp.w	r8, #2
 8007996:	f106 0601 	add.w	r6, r6, #1
 800799a:	d106      	bne.n	80079aa <_DrawBitmap+0x3a6>
 800799c:	9f07      	ldr	r7, [sp, #28]
 800799e:	f897 a001 	ldrb.w	sl, [r7, #1]
 80079a2:	3701      	adds	r7, #1
 80079a4:	9707      	str	r7, [sp, #28]
 80079a6:	f04f 0800 	mov.w	r8, #0
 80079aa:	9a05      	ldr	r2, [sp, #20]
 80079ac:	444a      	add	r2, r9
 80079ae:	42b2      	cmp	r2, r6
 80079b0:	d026      	beq.n	8007a00 <_DrawBitmap+0x3fc>
 80079b2:	f1c8 0201 	rsb	r2, r8, #1
 80079b6:	0092      	lsls	r2, r2, #2
 80079b8:	f1c2 0104 	rsb	r1, r2, #4
 80079bc:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 80079c0:	fa4c fc01 	asr.w	ip, ip, r1
 80079c4:	ea0c 0c0a 	and.w	ip, ip, sl
 80079c8:	fa3c fc02 	lsrs.w	ip, ip, r2
 80079cc:	d1d2      	bne.n	8007974 <_DrawBitmap+0x370>
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d114      	bne.n	80079fc <_DrawBitmap+0x3f8>
 80079d2:	f8cd b000 	str.w	fp, [sp]
 80079d6:	f8cd c010 	str.w	ip, [sp, #16]
 80079da:	4620      	mov	r0, r4
 80079dc:	9906      	ldr	r1, [sp, #24]
 80079de:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 80079e2:	465a      	mov	r2, fp
 80079e4:	1e73      	subs	r3, r6, #1
 80079e6:	47b8      	blx	r7
 80079e8:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 80079ec:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80079ee:	4629      	mov	r1, r5
 80079f0:	4798      	blx	r3
 80079f2:	f8dd c010 	ldr.w	ip, [sp, #16]
 80079f6:	4665      	mov	r5, ip
 80079f8:	4663      	mov	r3, ip
 80079fa:	e7c8      	b.n	800798e <_DrawBitmap+0x38a>
 80079fc:	4663      	mov	r3, ip
 80079fe:	e7c6      	b.n	800798e <_DrawBitmap+0x38a>
 8007a00:	9f05      	ldr	r7, [sp, #20]
 8007a02:	1e7b      	subs	r3, r7, #1
 8007a04:	444b      	add	r3, r9
 8007a06:	2d00      	cmp	r5, #0
 8007a08:	d078      	beq.n	8007afc <_DrawBitmap+0x4f8>
 8007a0a:	f8cd b000 	str.w	fp, [sp]
 8007a0e:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 8007a12:	9906      	ldr	r1, [sp, #24]
 8007a14:	4620      	mov	r0, r4
 8007a16:	465a      	mov	r2, fp
 8007a18:	47b0      	blx	r6
 8007a1a:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 8007a1e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8007a20:	4629      	mov	r1, r5
 8007a22:	e06a      	b.n	8007afa <_DrawBitmap+0x4f6>
 8007a24:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007a26:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8007a28:	68ac      	ldr	r4, [r5, #8]
 8007a2a:	2f00      	cmp	r7, #0
 8007a2c:	d066      	beq.n	8007afc <_DrawBitmap+0x4f8>
 8007a2e:	4b38      	ldr	r3, [pc, #224]	; (8007b10 <_DrawBitmap+0x50c>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	7c1b      	ldrb	r3, [r3, #16]
 8007a34:	f013 0303 	ands.w	r3, r3, #3
 8007a38:	d009      	beq.n	8007a4e <_DrawBitmap+0x44a>
 8007a3a:	2b02      	cmp	r3, #2
 8007a3c:	d15e      	bne.n	8007afc <_DrawBitmap+0x4f8>
 8007a3e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007a42:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
 8007a46:	2600      	movs	r6, #0
 8007a48:	464f      	mov	r7, r9
 8007a4a:	4633      	mov	r3, r6
 8007a4c:	e022      	b.n	8007a94 <_DrawBitmap+0x490>
 8007a4e:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007a50:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a52:	9f05      	ldr	r7, [sp, #20]
 8007a54:	443b      	add	r3, r7
 8007a56:	1b5b      	subs	r3, r3, r5
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	dd4f      	ble.n	8007afc <_DrawBitmap+0x4f8>
 8007a5c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8007a60:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8007a62:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 8007a66:	f837 0022 	ldrh.w	r0, [r7, r2, lsl #2]
 8007a6a:	4798      	blx	r3
 8007a6c:	e7f0      	b.n	8007a50 <_DrawBitmap+0x44c>
 8007a6e:	b913      	cbnz	r3, 8007a76 <_DrawBitmap+0x472>
 8007a70:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
 8007a74:	46b9      	mov	r9, r7
 8007a76:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007a78:	f855 302a 	ldr.w	r3, [r5, sl, lsl #2]
 8007a7c:	f8a8 3000 	strh.w	r3, [r8]
 8007a80:	3601      	adds	r6, #1
 8007a82:	f108 0802 	add.w	r8, r8, #2
 8007a86:	2301      	movs	r3, #1
 8007a88:	9a08      	ldr	r2, [sp, #32]
 8007a8a:	9d05      	ldr	r5, [sp, #20]
 8007a8c:	3701      	adds	r7, #1
 8007a8e:	442a      	add	r2, r5
 8007a90:	42ba      	cmp	r2, r7
 8007a92:	d01c      	beq.n	8007ace <_DrawBitmap+0x4ca>
 8007a94:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007a96:	9808      	ldr	r0, [sp, #32]
 8007a98:	1a2a      	subs	r2, r5, r0
 8007a9a:	f812 a007 	ldrb.w	sl, [r2, r7]
 8007a9e:	f1ba 0f00 	cmp.w	sl, #0
 8007aa2:	d1e4      	bne.n	8007a6e <_DrawBitmap+0x46a>
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d110      	bne.n	8007aca <_DrawBitmap+0x4c6>
 8007aa8:	f8cd b000 	str.w	fp, [sp]
 8007aac:	4620      	mov	r0, r4
 8007aae:	4649      	mov	r1, r9
 8007ab0:	465a      	mov	r2, fp
 8007ab2:	1e7b      	subs	r3, r7, #1
 8007ab4:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
 8007ab8:	47a8      	blx	r5
 8007aba:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 8007abe:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8007ac0:	4631      	mov	r1, r6
 8007ac2:	4798      	blx	r3
 8007ac4:	4656      	mov	r6, sl
 8007ac6:	4653      	mov	r3, sl
 8007ac8:	e7de      	b.n	8007a88 <_DrawBitmap+0x484>
 8007aca:	4653      	mov	r3, sl
 8007acc:	e7dc      	b.n	8007a88 <_DrawBitmap+0x484>
 8007ace:	9f08      	ldr	r7, [sp, #32]
 8007ad0:	1e6b      	subs	r3, r5, #1
 8007ad2:	443b      	add	r3, r7
 8007ad4:	b196      	cbz	r6, 8007afc <_DrawBitmap+0x4f8>
 8007ad6:	f8cd b000 	str.w	fp, [sp]
 8007ada:	4620      	mov	r0, r4
 8007adc:	4649      	mov	r1, r9
 8007ade:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
 8007ae2:	465a      	mov	r2, fp
 8007ae4:	47a8      	blx	r5
 8007ae6:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 8007aea:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8007aec:	4631      	mov	r1, r6
 8007aee:	e004      	b.n	8007afa <_DrawBitmap+0x4f6>
 8007af0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007af2:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007af4:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
 8007af8:	9905      	ldr	r1, [sp, #20]
 8007afa:	4798      	blx	r3
 8007afc:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8007afe:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8007b00:	442f      	add	r7, r5
 8007b02:	9719      	str	r7, [sp, #100]	; 0x64
 8007b04:	f10b 0b01 	add.w	fp, fp, #1
 8007b08:	e5a7      	b.n	800765a <_DrawBitmap+0x56>
 8007b0a:	b00d      	add	sp, #52	; 0x34
 8007b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b10:	20000018 	.word	0x20000018

08007b14 <GUIDRV_FlexColor_SetMode16bppC0B16>:
 8007b14:	b510      	push	{r4, lr}
 8007b16:	4604      	mov	r4, r0
 8007b18:	f000 fa58 	bl	8007fcc <GUIDRV_FlexColor__InitOnce>
 8007b1c:	68a4      	ldr	r4, [r4, #8]
 8007b1e:	4b10      	ldr	r3, [pc, #64]	; (8007b60 <GUIDRV_FlexColor_SetMode16bppC0B16+0x4c>)
 8007b20:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
 8007b24:	4b0f      	ldr	r3, [pc, #60]	; (8007b64 <GUIDRV_FlexColor_SetMode16bppC0B16+0x50>)
 8007b26:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 8007b2a:	4b0f      	ldr	r3, [pc, #60]	; (8007b68 <GUIDRV_FlexColor_SetMode16bppC0B16+0x54>)
 8007b2c:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
 8007b30:	4b0e      	ldr	r3, [pc, #56]	; (8007b6c <GUIDRV_FlexColor_SetMode16bppC0B16+0x58>)
 8007b32:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
 8007b36:	4b0e      	ldr	r3, [pc, #56]	; (8007b70 <GUIDRV_FlexColor_SetMode16bppC0B16+0x5c>)
 8007b38:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 8007b3c:	4b0d      	ldr	r3, [pc, #52]	; (8007b74 <GUIDRV_FlexColor_SetMode16bppC0B16+0x60>)
 8007b3e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 8007b42:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 8007b46:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
 8007b4a:	4620      	mov	r0, r4
 8007b4c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8007b50:	2110      	movs	r1, #16
 8007b52:	4798      	blx	r3
 8007b54:	2310      	movs	r3, #16
 8007b56:	63a3      	str	r3, [r4, #56]	; 0x38
 8007b58:	4b07      	ldr	r3, [pc, #28]	; (8007b78 <GUIDRV_FlexColor_SetMode16bppC0B16+0x64>)
 8007b5a:	6463      	str	r3, [r4, #68]	; 0x44
 8007b5c:	bd10      	pop	{r4, pc}
 8007b5e:	bf00      	nop
 8007b60:	08007605 	.word	0x08007605
 8007b64:	08007505 	.word	0x08007505
 8007b68:	08007f1b 	.word	0x08007f1b
 8007b6c:	08007e8b 	.word	0x08007e8b
 8007b70:	080074ed 	.word	0x080074ed
 8007b74:	080074f7 	.word	0x080074f7
 8007b78:	0800f4e0 	.word	0x0800f4e0

08007b7c <_Log2PhysX_X0Y0S0>:
 8007b7c:	4608      	mov	r0, r1
 8007b7e:	4770      	bx	lr

08007b80 <_Log2PhysX_X1Y0S0>:
 8007b80:	6800      	ldr	r0, [r0, #0]
 8007b82:	1a40      	subs	r0, r0, r1
 8007b84:	3801      	subs	r0, #1
 8007b86:	4770      	bx	lr

08007b88 <_Log2PhysX_X0Y1S0>:
 8007b88:	4608      	mov	r0, r1
 8007b8a:	4770      	bx	lr

08007b8c <_Log2PhysX_X1Y1S0>:
 8007b8c:	6800      	ldr	r0, [r0, #0]
 8007b8e:	1a40      	subs	r0, r0, r1
 8007b90:	3801      	subs	r0, #1
 8007b92:	4770      	bx	lr

08007b94 <_Log2PhysX_X0Y0S1>:
 8007b94:	4610      	mov	r0, r2
 8007b96:	4770      	bx	lr

08007b98 <_Log2PhysX_X1Y0S1>:
 8007b98:	6840      	ldr	r0, [r0, #4]
 8007b9a:	1a80      	subs	r0, r0, r2
 8007b9c:	3801      	subs	r0, #1
 8007b9e:	4770      	bx	lr

08007ba0 <_Log2PhysX_X0Y1S1>:
 8007ba0:	4610      	mov	r0, r2
 8007ba2:	4770      	bx	lr

08007ba4 <_Log2PhysX_X1Y1S1>:
 8007ba4:	6840      	ldr	r0, [r0, #4]
 8007ba6:	1a80      	subs	r0, r0, r2
 8007ba8:	3801      	subs	r0, #1
 8007baa:	4770      	bx	lr

08007bac <_Log2PhysY_X0Y0S0>:
 8007bac:	4610      	mov	r0, r2
 8007bae:	4770      	bx	lr

08007bb0 <_Log2PhysY_X1Y0S0>:
 8007bb0:	4610      	mov	r0, r2
 8007bb2:	4770      	bx	lr

08007bb4 <_Log2PhysY_X0Y1S0>:
 8007bb4:	6840      	ldr	r0, [r0, #4]
 8007bb6:	1a80      	subs	r0, r0, r2
 8007bb8:	3801      	subs	r0, #1
 8007bba:	4770      	bx	lr

08007bbc <_Log2PhysY_X1Y1S0>:
 8007bbc:	6840      	ldr	r0, [r0, #4]
 8007bbe:	1a80      	subs	r0, r0, r2
 8007bc0:	3801      	subs	r0, #1
 8007bc2:	4770      	bx	lr

08007bc4 <_Log2PhysY_X0Y0S1>:
 8007bc4:	4608      	mov	r0, r1
 8007bc6:	4770      	bx	lr

08007bc8 <_Log2PhysY_X1Y0S1>:
 8007bc8:	4608      	mov	r0, r1
 8007bca:	4770      	bx	lr

08007bcc <_Log2PhysY_X0Y1S1>:
 8007bcc:	6800      	ldr	r0, [r0, #0]
 8007bce:	1a40      	subs	r0, r0, r1
 8007bd0:	3801      	subs	r0, #1
 8007bd2:	4770      	bx	lr

08007bd4 <_Log2PhysY_X1Y1S1>:
 8007bd4:	6800      	ldr	r0, [r0, #0]
 8007bd6:	1a40      	subs	r0, r0, r1
 8007bd8:	3801      	subs	r0, #1
 8007bda:	4770      	bx	lr

08007bdc <_SetPixelIndex>:
 8007bdc:	b510      	push	{r4, lr}
 8007bde:	6884      	ldr	r4, [r0, #8]
 8007be0:	f8d4 40f0 	ldr.w	r4, [r4, #240]	; 0xf0
 8007be4:	47a0      	blx	r4
 8007be6:	bd10      	pop	{r4, pc}

08007be8 <_GetPixelIndex>:
 8007be8:	b508      	push	{r3, lr}
 8007bea:	6883      	ldr	r3, [r0, #8]
 8007bec:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8007bf0:	4798      	blx	r3
 8007bf2:	bd08      	pop	{r3, pc}

08007bf4 <_XorPixel>:
 8007bf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bf6:	4604      	mov	r4, r0
 8007bf8:	460f      	mov	r7, r1
 8007bfa:	4616      	mov	r6, r2
 8007bfc:	6885      	ldr	r5, [r0, #8]
 8007bfe:	f7ff fff3 	bl	8007be8 <_GetPixelIndex>
 8007c02:	9001      	str	r0, [sp, #4]
 8007c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007c08:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8007c0a:	4620      	mov	r0, r4
 8007c0c:	4639      	mov	r1, r7
 8007c0e:	4632      	mov	r2, r6
 8007c10:	ea8e 0303 	eor.w	r3, lr, r3
 8007c14:	f7ff ffe2 	bl	8007bdc <_SetPixelIndex>
 8007c18:	b003      	add	sp, #12
 8007c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007c1c <_DrawHLine>:
 8007c1c:	b513      	push	{r0, r1, r4, lr}
 8007c1e:	6884      	ldr	r4, [r0, #8]
 8007c20:	9200      	str	r2, [sp, #0]
 8007c22:	f8d4 40e8 	ldr.w	r4, [r4, #232]	; 0xe8
 8007c26:	47a0      	blx	r4
 8007c28:	b002      	add	sp, #8
 8007c2a:	bd10      	pop	{r4, pc}

08007c2c <_DrawVLine>:
 8007c2c:	b513      	push	{r0, r1, r4, lr}
 8007c2e:	6884      	ldr	r4, [r0, #8]
 8007c30:	9300      	str	r3, [sp, #0]
 8007c32:	f8d4 40e8 	ldr.w	r4, [r4, #232]	; 0xe8
 8007c36:	460b      	mov	r3, r1
 8007c38:	47a0      	blx	r4
 8007c3a:	b002      	add	sp, #8
 8007c3c:	bd10      	pop	{r4, pc}

08007c3e <_FillRect>:
 8007c3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c40:	9c06      	ldr	r4, [sp, #24]
 8007c42:	6885      	ldr	r5, [r0, #8]
 8007c44:	9400      	str	r4, [sp, #0]
 8007c46:	f8d5 40e8 	ldr.w	r4, [r5, #232]	; 0xe8
 8007c4a:	47a0      	blx	r4
 8007c4c:	b003      	add	sp, #12
 8007c4e:	bd30      	pop	{r4, r5, pc}

08007c50 <_DrawBitmap>:
 8007c50:	b530      	push	{r4, r5, lr}
 8007c52:	b087      	sub	sp, #28
 8007c54:	6885      	ldr	r5, [r0, #8]
 8007c56:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007c58:	9400      	str	r4, [sp, #0]
 8007c5a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007c5c:	9401      	str	r4, [sp, #4]
 8007c5e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8007c60:	9402      	str	r4, [sp, #8]
 8007c62:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8007c64:	9403      	str	r4, [sp, #12]
 8007c66:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8007c68:	9404      	str	r4, [sp, #16]
 8007c6a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8007c6c:	9405      	str	r4, [sp, #20]
 8007c6e:	f8d5 40e4 	ldr.w	r4, [r5, #228]	; 0xe4
 8007c72:	47a0      	blx	r4
 8007c74:	b007      	add	sp, #28
 8007c76:	bd30      	pop	{r4, r5, pc}

08007c78 <_GetDevFunc_SetRect>:
 8007c78:	4770      	bx	lr
	...

08007c7c <_GetDevFunc_SetRectOutside>:
 8007c7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007c7e:	9e07      	ldr	r6, [sp, #28]
 8007c80:	6884      	ldr	r4, [r0, #8]
 8007c82:	4d0c      	ldr	r5, [pc, #48]	; (8007cb4 <_GetDevFunc_SetRectOutside+0x38>)
 8007c84:	b176      	cbz	r6, 8007ca4 <_GetDevFunc_SetRectOutside+0x28>
 8007c86:	6828      	ldr	r0, [r5, #0]
 8007c88:	b988      	cbnz	r0, 8007cae <_GetDevFunc_SetRectOutside+0x32>
 8007c8a:	9806      	ldr	r0, [sp, #24]
 8007c8c:	9000      	str	r0, [sp, #0]
 8007c8e:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 8007c92:	4620      	mov	r0, r4
 8007c94:	47b0      	blx	r6
 8007c96:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8007c9a:	602b      	str	r3, [r5, #0]
 8007c9c:	4b06      	ldr	r3, [pc, #24]	; (8007cb8 <_GetDevFunc_SetRectOutside+0x3c>)
 8007c9e:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8007ca2:	e004      	b.n	8007cae <_GetDevFunc_SetRectOutside+0x32>
 8007ca4:	682b      	ldr	r3, [r5, #0]
 8007ca6:	b113      	cbz	r3, 8007cae <_GetDevFunc_SetRectOutside+0x32>
 8007ca8:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8007cac:	602e      	str	r6, [r5, #0]
 8007cae:	b002      	add	sp, #8
 8007cb0:	bd70      	pop	{r4, r5, r6, pc}
 8007cb2:	bf00      	nop
 8007cb4:	2001907c 	.word	0x2001907c
 8007cb8:	08007c79 	.word	0x08007c79

08007cbc <_ReadPixelCust_16bpp>:
 8007cbc:	b508      	push	{r3, lr}
 8007cbe:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8007cc0:	f8d0 30d4 	ldr.w	r3, [r0, #212]	; 0xd4
 8007cc4:	6990      	ldr	r0, [r2, #24]
 8007cc6:	4798      	blx	r3
 8007cc8:	bd08      	pop	{r3, pc}

08007cca <_ReadPixelCust_18bpp>:
 8007cca:	b508      	push	{r3, lr}
 8007ccc:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8007cce:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 8007cd2:	6990      	ldr	r0, [r2, #24]
 8007cd4:	4798      	blx	r3
 8007cd6:	bd08      	pop	{r3, pc}

08007cd8 <_ReadRectCust_16bpp>:
 8007cd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007cdc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007cde:	6884      	ldr	r4, [r0, #8]
 8007ce0:	9500      	str	r5, [sp, #0]
 8007ce2:	4617      	mov	r7, r2
 8007ce4:	4620      	mov	r0, r4
 8007ce6:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 8007cea:	4699      	mov	r9, r3
 8007cec:	4688      	mov	r8, r1
 8007cee:	1bed      	subs	r5, r5, r7
 8007cf0:	47b0      	blx	r6
 8007cf2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007cf4:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 8007cf8:	6988      	ldr	r0, [r1, #24]
 8007cfa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007cfc:	ebc8 0809 	rsb	r8, r8, r9
 8007d00:	1c6a      	adds	r2, r5, #1
 8007d02:	fb08 2202 	mla	r2, r8, r2, r2
 8007d06:	4798      	blx	r3
 8007d08:	b003      	add	sp, #12
 8007d0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08007d0e <_ReadRectCust_18bpp>:
 8007d0e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007d12:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007d14:	6884      	ldr	r4, [r0, #8]
 8007d16:	9500      	str	r5, [sp, #0]
 8007d18:	4617      	mov	r7, r2
 8007d1a:	4620      	mov	r0, r4
 8007d1c:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 8007d20:	4699      	mov	r9, r3
 8007d22:	4688      	mov	r8, r1
 8007d24:	1bed      	subs	r5, r5, r7
 8007d26:	47b0      	blx	r6
 8007d28:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007d2a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8007d2e:	6988      	ldr	r0, [r1, #24]
 8007d30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d32:	ebc8 0809 	rsb	r8, r8, r9
 8007d36:	1c6a      	adds	r2, r5, #1
 8007d38:	fb08 2202 	mla	r2, r8, r2, r2
 8007d3c:	4798      	blx	r3
 8007d3e:	b003      	add	sp, #12
 8007d40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08007d44 <_GetDevFunc>:
 8007d44:	3901      	subs	r1, #1
 8007d46:	2917      	cmp	r1, #23
 8007d48:	d824      	bhi.n	8007d94 <_GetDevFunc+0x50>
 8007d4a:	e8df f001 	tbb	[pc, r1]
 8007d4e:	2310      	.short	0x2310
 8007d50:	23232323 	.word	0x23232323
 8007d54:	0c232323 	.word	0x0c232323
 8007d58:	23150e25 	.word	0x23150e25
 8007d5c:	23232323 	.word	0x23232323
 8007d60:	1f232323 	.word	0x1f232323
 8007d64:	211a      	.short	0x211a
 8007d66:	480d      	ldr	r0, [pc, #52]	; (8007d9c <_GetDevFunc+0x58>)
 8007d68:	4770      	bx	lr
 8007d6a:	480d      	ldr	r0, [pc, #52]	; (8007da0 <_GetDevFunc+0x5c>)
 8007d6c:	4770      	bx	lr
 8007d6e:	6803      	ldr	r3, [r0, #0]
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	f8d3 00fc 	ldr.w	r0, [r3, #252]	; 0xfc
 8007d76:	4770      	bx	lr
 8007d78:	6803      	ldr	r3, [r0, #0]
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	f8d3 00f4 	ldr.w	r0, [r3, #244]	; 0xf4
 8007d80:	4770      	bx	lr
 8007d82:	6803      	ldr	r3, [r0, #0]
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 8007d8a:	4770      	bx	lr
 8007d8c:	4805      	ldr	r0, [pc, #20]	; (8007da4 <_GetDevFunc+0x60>)
 8007d8e:	4770      	bx	lr
 8007d90:	4805      	ldr	r0, [pc, #20]	; (8007da8 <_GetDevFunc+0x64>)
 8007d92:	4770      	bx	lr
 8007d94:	2000      	movs	r0, #0
 8007d96:	4770      	bx	lr
 8007d98:	4804      	ldr	r0, [pc, #16]	; (8007dac <_GetDevFunc+0x68>)
 8007d9a:	4770      	bx	lr
 8007d9c:	080080fb 	.word	0x080080fb
 8007da0:	0800809d 	.word	0x0800809d
 8007da4:	08008001 	.word	0x08008001
 8007da8:	08007c7d 	.word	0x08007c7d
 8007dac:	080080e7 	.word	0x080080e7

08007db0 <_GetDevProp>:
 8007db0:	3901      	subs	r1, #1
 8007db2:	6880      	ldr	r0, [r0, #8]
 8007db4:	290d      	cmp	r1, #13
 8007db6:	d823      	bhi.n	8007e00 <_GetDevProp+0x50>
 8007db8:	e8df f001 	tbb	[pc, r1]
 8007dbc:	0f0d0b09 	.word	0x0f0d0b09
 8007dc0:	11222222 	.word	0x11222222
 8007dc4:	13252507 	.word	0x13252507
 8007dc8:	1d18      	.short	0x1d18
 8007dca:	2000      	movs	r0, #0
 8007dcc:	4770      	bx	lr
 8007dce:	6800      	ldr	r0, [r0, #0]
 8007dd0:	4770      	bx	lr
 8007dd2:	6840      	ldr	r0, [r0, #4]
 8007dd4:	4770      	bx	lr
 8007dd6:	6880      	ldr	r0, [r0, #8]
 8007dd8:	4770      	bx	lr
 8007dda:	68c0      	ldr	r0, [r0, #12]
 8007ddc:	4770      	bx	lr
 8007dde:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8007de0:	4770      	bx	lr
 8007de2:	b188      	cbz	r0, 8007e08 <_GetDevProp+0x58>
 8007de4:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8007de6:	f000 0001 	and.w	r0, r0, #1
 8007dea:	4770      	bx	lr
 8007dec:	b160      	cbz	r0, 8007e08 <_GetDevProp+0x58>
 8007dee:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8007df0:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8007df4:	4770      	bx	lr
 8007df6:	b138      	cbz	r0, 8007e08 <_GetDevProp+0x58>
 8007df8:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8007dfa:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8007dfe:	4770      	bx	lr
 8007e00:	f04f 30ff 	mov.w	r0, #4294967295
 8007e04:	4770      	bx	lr
 8007e06:	2001      	movs	r0, #1
 8007e08:	4770      	bx	lr

08007e0a <_GetDevData>:
 8007e0a:	6883      	ldr	r3, [r0, #8]
 8007e0c:	2901      	cmp	r1, #1
 8007e0e:	bf0c      	ite	eq
 8007e10:	6c58      	ldreq	r0, [r3, #68]	; 0x44
 8007e12:	2000      	movne	r0, #0
 8007e14:	4770      	bx	lr

08007e16 <_GetRect>:
 8007e16:	6883      	ldr	r3, [r0, #8]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	800a      	strh	r2, [r1, #0]
 8007e1c:	804a      	strh	r2, [r1, #2]
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	3a01      	subs	r2, #1
 8007e24:	3b01      	subs	r3, #1
 8007e26:	808a      	strh	r2, [r1, #4]
 8007e28:	80cb      	strh	r3, [r1, #6]
 8007e2a:	4770      	bx	lr

08007e2c <GUIDRV_FlexColor__SetLog2Phys>:
 8007e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e2e:	4d10      	ldr	r5, [pc, #64]	; (8007e70 <GUIDRV_FlexColor__SetLog2Phys+0x44>)
 8007e30:	462e      	mov	r6, r5
 8007e32:	4607      	mov	r7, r0
 8007e34:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007e36:	b091      	sub	sp, #68	; 0x44
 8007e38:	466c      	mov	r4, sp
 8007e3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e3c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8007e40:	3520      	adds	r5, #32
 8007e42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007e46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e48:	ac08      	add	r4, sp, #32
 8007e4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e4c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007e50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e56:	aa10      	add	r2, sp, #64	; 0x40
 8007e58:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007e5c:	f853 2c40 	ldr.w	r2, [r3, #-64]
 8007e60:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 8007e64:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8007e68:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007e6c:	b011      	add	sp, #68	; 0x44
 8007e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e70:	0800d838 	.word	0x0800d838

08007e74 <_SetOrg>:
 8007e74:	b507      	push	{r0, r1, r2, lr}
 8007e76:	6980      	ldr	r0, [r0, #24]
 8007e78:	e88d 0006 	stmia.w	sp, {r1, r2}
 8007e7c:	2103      	movs	r1, #3
 8007e7e:	466a      	mov	r2, sp
 8007e80:	f7fd fbd0 	bl	8005624 <LCD_X_DisplayDriver>
 8007e84:	b003      	add	sp, #12
 8007e86:	f85d fb04 	ldr.w	pc, [sp], #4

08007e8a <GUIDRV_FlexColor__SetPixelIndexNoCache>:
 8007e8a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007e8e:	6884      	ldr	r4, [r0, #8]
 8007e90:	4698      	mov	r8, r3
 8007e92:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8007e94:	079b      	lsls	r3, r3, #30
 8007e96:	4689      	mov	r9, r1
 8007e98:	4617      	mov	r7, r2
 8007e9a:	d532      	bpl.n	8007f02 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x78>
 8007e9c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8007ea0:	4620      	mov	r0, r4
 8007ea2:	4798      	blx	r3
 8007ea4:	f8d4 5104 	ldr.w	r5, [r4, #260]	; 0x104
 8007ea8:	4606      	mov	r6, r0
 8007eaa:	463a      	mov	r2, r7
 8007eac:	4620      	mov	r0, r4
 8007eae:	4649      	mov	r1, r9
 8007eb0:	47a8      	blx	r5
 8007eb2:	6923      	ldr	r3, [r4, #16]
 8007eb4:	69a2      	ldr	r2, [r4, #24]
 8007eb6:	429e      	cmp	r6, r3
 8007eb8:	bfac      	ite	ge
 8007eba:	2300      	movge	r3, #0
 8007ebc:	2301      	movlt	r3, #1
 8007ebe:	4296      	cmp	r6, r2
 8007ec0:	bfd4      	ite	le
 8007ec2:	461a      	movle	r2, r3
 8007ec4:	f043 0201 	orrgt.w	r2, r3, #1
 8007ec8:	6963      	ldr	r3, [r4, #20]
 8007eca:	4298      	cmp	r0, r3
 8007ecc:	bfac      	ite	ge
 8007ece:	4613      	movge	r3, r2
 8007ed0:	f042 0301 	orrlt.w	r3, r2, #1
 8007ed4:	4605      	mov	r5, r0
 8007ed6:	b913      	cbnz	r3, 8007ede <GUIDRV_FlexColor__SetPixelIndexNoCache+0x54>
 8007ed8:	69e3      	ldr	r3, [r4, #28]
 8007eda:	4298      	cmp	r0, r3
 8007edc:	dd0a      	ble.n	8007ef4 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x6a>
 8007ede:	6862      	ldr	r2, [r4, #4]
 8007ee0:	6823      	ldr	r3, [r4, #0]
 8007ee2:	3a01      	subs	r2, #1
 8007ee4:	9200      	str	r2, [sp, #0]
 8007ee6:	2100      	movs	r1, #0
 8007ee8:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 8007eec:	4620      	mov	r0, r4
 8007eee:	460a      	mov	r2, r1
 8007ef0:	3b01      	subs	r3, #1
 8007ef2:	47b8      	blx	r7
 8007ef4:	f8d4 70ac 	ldr.w	r7, [r4, #172]	; 0xac
 8007ef8:	4620      	mov	r0, r4
 8007efa:	4631      	mov	r1, r6
 8007efc:	462a      	mov	r2, r5
 8007efe:	47b8      	blx	r7
 8007f00:	e003      	b.n	8007f0a <GUIDRV_FlexColor__SetPixelIndexNoCache+0x80>
 8007f02:	f8d4 50ac 	ldr.w	r5, [r4, #172]	; 0xac
 8007f06:	4620      	mov	r0, r4
 8007f08:	47a8      	blx	r5
 8007f0a:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8007f0e:	4620      	mov	r0, r4
 8007f10:	4641      	mov	r1, r8
 8007f12:	4798      	blx	r3
 8007f14:	b003      	add	sp, #12
 8007f16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08007f1a <GUIDRV_FlexColor__GetPixelIndexNoCache>:
 8007f1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f1c:	6884      	ldr	r4, [r0, #8]
 8007f1e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8007f20:	079b      	lsls	r3, r3, #30
 8007f22:	460f      	mov	r7, r1
 8007f24:	4616      	mov	r6, r2
 8007f26:	d545      	bpl.n	8007fb4 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x9a>
 8007f28:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8007f2c:	4620      	mov	r0, r4
 8007f2e:	4798      	blx	r3
 8007f30:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8007f34:	4632      	mov	r2, r6
 8007f36:	4605      	mov	r5, r0
 8007f38:	4639      	mov	r1, r7
 8007f3a:	4620      	mov	r0, r4
 8007f3c:	4798      	blx	r3
 8007f3e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8007f42:	4606      	mov	r6, r0
 8007f44:	b11b      	cbz	r3, 8007f4e <GUIDRV_FlexColor__GetPixelIndexNoCache+0x34>
 8007f46:	4620      	mov	r0, r4
 8007f48:	2101      	movs	r1, #1
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	4798      	blx	r3
 8007f4e:	6923      	ldr	r3, [r4, #16]
 8007f50:	69a2      	ldr	r2, [r4, #24]
 8007f52:	429d      	cmp	r5, r3
 8007f54:	bfac      	ite	ge
 8007f56:	2300      	movge	r3, #0
 8007f58:	2301      	movlt	r3, #1
 8007f5a:	4295      	cmp	r5, r2
 8007f5c:	bfd4      	ite	le
 8007f5e:	461a      	movle	r2, r3
 8007f60:	f043 0201 	orrgt.w	r2, r3, #1
 8007f64:	6963      	ldr	r3, [r4, #20]
 8007f66:	429e      	cmp	r6, r3
 8007f68:	bfac      	ite	ge
 8007f6a:	4613      	movge	r3, r2
 8007f6c:	f042 0301 	orrlt.w	r3, r2, #1
 8007f70:	b913      	cbnz	r3, 8007f78 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x5e>
 8007f72:	69e3      	ldr	r3, [r4, #28]
 8007f74:	429e      	cmp	r6, r3
 8007f76:	dd0a      	ble.n	8007f8e <GUIDRV_FlexColor__GetPixelIndexNoCache+0x74>
 8007f78:	6862      	ldr	r2, [r4, #4]
 8007f7a:	6823      	ldr	r3, [r4, #0]
 8007f7c:	3a01      	subs	r2, #1
 8007f7e:	9200      	str	r2, [sp, #0]
 8007f80:	2100      	movs	r1, #0
 8007f82:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 8007f86:	4620      	mov	r0, r4
 8007f88:	460a      	mov	r2, r1
 8007f8a:	3b01      	subs	r3, #1
 8007f8c:	47b8      	blx	r7
 8007f8e:	4629      	mov	r1, r5
 8007f90:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8007f94:	4620      	mov	r0, r4
 8007f96:	4632      	mov	r2, r6
 8007f98:	4798      	blx	r3
 8007f9a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8007f9e:	4620      	mov	r0, r4
 8007fa0:	4798      	blx	r3
 8007fa2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8007fa6:	4605      	mov	r5, r0
 8007fa8:	b16b      	cbz	r3, 8007fc6 <GUIDRV_FlexColor__GetPixelIndexNoCache+0xac>
 8007faa:	4620      	mov	r0, r4
 8007fac:	2100      	movs	r1, #0
 8007fae:	2201      	movs	r2, #1
 8007fb0:	4798      	blx	r3
 8007fb2:	e008      	b.n	8007fc6 <GUIDRV_FlexColor__GetPixelIndexNoCache+0xac>
 8007fb4:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8007fb8:	4620      	mov	r0, r4
 8007fba:	4798      	blx	r3
 8007fbc:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8007fc0:	4620      	mov	r0, r4
 8007fc2:	4798      	blx	r3
 8007fc4:	4605      	mov	r5, r0
 8007fc6:	4628      	mov	r0, r5
 8007fc8:	b003      	add	sp, #12
 8007fca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007fcc <GUIDRV_FlexColor__InitOnce>:
 8007fcc:	b538      	push	{r3, r4, r5, lr}
 8007fce:	6885      	ldr	r5, [r0, #8]
 8007fd0:	4604      	mov	r4, r0
 8007fd2:	b995      	cbnz	r5, 8007ffa <GUIDRV_FlexColor__InitOnce+0x2e>
 8007fd4:	f44f 70ba 	mov.w	r0, #372	; 0x174
 8007fd8:	f002 fbca 	bl	800a770 <GUI_ALLOC_GetFixedBlock>
 8007fdc:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8007fe0:	60a0      	str	r0, [r4, #8]
 8007fe2:	4629      	mov	r1, r5
 8007fe4:	f000 fdaa 	bl	8008b3c <GUI__memset>
 8007fe8:	68a3      	ldr	r3, [r4, #8]
 8007fea:	2202      	movs	r2, #2
 8007fec:	84da      	strh	r2, [r3, #38]	; 0x26
 8007fee:	2201      	movs	r2, #1
 8007ff0:	621a      	str	r2, [r3, #32]
 8007ff2:	4a02      	ldr	r2, [pc, #8]	; (8007ffc <GUIDRV_FlexColor__InitOnce+0x30>)
 8007ff4:	641c      	str	r4, [r3, #64]	; 0x40
 8007ff6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 8007ffa:	bd38      	pop	{r3, r4, r5, pc}
 8007ffc:	08007e2d 	.word	0x08007e2d

08008000 <_SetDevFunc>:
 8008000:	b570      	push	{r4, r5, r6, lr}
 8008002:	4606      	mov	r6, r0
 8008004:	460d      	mov	r5, r1
 8008006:	4614      	mov	r4, r2
 8008008:	f7ff ffe0 	bl	8007fcc <GUIDRV_FlexColor__InitOnce>
 800800c:	68b3      	ldr	r3, [r6, #8]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d03b      	beq.n	800808a <_SetDevFunc+0x8a>
 8008012:	2d26      	cmp	r5, #38	; 0x26
 8008014:	d002      	beq.n	800801c <_SetDevFunc+0x1c>
 8008016:	2d27      	cmp	r5, #39	; 0x27
 8008018:	d016      	beq.n	8008048 <_SetDevFunc+0x48>
 800801a:	bd70      	pop	{r4, r5, r6, pc}
 800801c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800801e:	2a10      	cmp	r2, #16
 8008020:	d002      	beq.n	8008028 <_SetDevFunc+0x28>
 8008022:	2a12      	cmp	r2, #18
 8008024:	d008      	beq.n	8008038 <_SetDevFunc+0x38>
 8008026:	bd70      	pop	{r4, r5, r6, pc}
 8008028:	4a18      	ldr	r2, [pc, #96]	; (800808c <_SetDevFunc+0x8c>)
 800802a:	f8c3 40d4 	str.w	r4, [r3, #212]	; 0xd4
 800802e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8008032:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8008036:	bd70      	pop	{r4, r5, r6, pc}
 8008038:	4a15      	ldr	r2, [pc, #84]	; (8008090 <_SetDevFunc+0x90>)
 800803a:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
 800803e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8008042:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8008046:	bd70      	pop	{r4, r5, r6, pc}
 8008048:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800804a:	2a10      	cmp	r2, #16
 800804c:	d002      	beq.n	8008054 <_SetDevFunc+0x54>
 800804e:	2a12      	cmp	r2, #18
 8008050:	d00e      	beq.n	8008070 <_SetDevFunc+0x70>
 8008052:	bd70      	pop	{r4, r5, r6, pc}
 8008054:	b13c      	cbz	r4, 8008066 <_SetDevFunc+0x66>
 8008056:	4a0f      	ldr	r2, [pc, #60]	; (8008094 <_SetDevFunc+0x94>)
 8008058:	f8c3 40dc 	str.w	r4, [r3, #220]	; 0xdc
 800805c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 8008060:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 8008064:	bd70      	pop	{r4, r5, r6, pc}
 8008066:	f8c3 40c8 	str.w	r4, [r3, #200]	; 0xc8
 800806a:	f8c3 40c4 	str.w	r4, [r3, #196]	; 0xc4
 800806e:	bd70      	pop	{r4, r5, r6, pc}
 8008070:	b13c      	cbz	r4, 8008082 <_SetDevFunc+0x82>
 8008072:	4a09      	ldr	r2, [pc, #36]	; (8008098 <_SetDevFunc+0x98>)
 8008074:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
 8008078:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 800807c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8008080:	bd70      	pop	{r4, r5, r6, pc}
 8008082:	f8c3 40cc 	str.w	r4, [r3, #204]	; 0xcc
 8008086:	f8c3 40d0 	str.w	r4, [r3, #208]	; 0xd0
 800808a:	bd70      	pop	{r4, r5, r6, pc}
 800808c:	08007cbd 	.word	0x08007cbd
 8008090:	08007ccb 	.word	0x08007ccb
 8008094:	08007cd9 	.word	0x08007cd9
 8008098:	08007d0f 	.word	0x08007d0f

0800809c <_GetDevFunc_Init>:
 800809c:	b538      	push	{r3, r4, r5, lr}
 800809e:	4605      	mov	r5, r0
 80080a0:	f7ff ff94 	bl	8007fcc <GUIDRV_FlexColor__InitOnce>
 80080a4:	68ac      	ldr	r4, [r5, #8]
 80080a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80080aa:	f002 fb61 	bl	800a770 <GUI_ALLOC_GetFixedBlock>
 80080ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80080b0:	66a0      	str	r0, [r4, #104]	; 0x68
 80080b2:	3307      	adds	r3, #7
 80080b4:	10d8      	asrs	r0, r3, #3
 80080b6:	6823      	ldr	r3, [r4, #0]
 80080b8:	4358      	muls	r0, r3
 80080ba:	f002 fb59 	bl	800a770 <GUI_ALLOC_GetFixedBlock>
 80080be:	2101      	movs	r1, #1
 80080c0:	2200      	movs	r2, #0
 80080c2:	66e0      	str	r0, [r4, #108]	; 0x6c
 80080c4:	69a8      	ldr	r0, [r5, #24]
 80080c6:	f7fd faad 	bl	8005624 <LCD_X_DisplayDriver>
 80080ca:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80080ce:	4605      	mov	r5, r0
 80080d0:	4620      	mov	r0, r4
 80080d2:	4798      	blx	r3
 80080d4:	4620      	mov	r0, r4
 80080d6:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80080da:	4798      	blx	r3
 80080dc:	2d00      	cmp	r5, #0
 80080de:	bfd4      	ite	le
 80080e0:	2000      	movle	r0, #0
 80080e2:	2001      	movgt	r0, #1
 80080e4:	bd38      	pop	{r3, r4, r5, pc}

080080e6 <_GetDevFunc_SetSize>:
 80080e6:	b570      	push	{r4, r5, r6, lr}
 80080e8:	4604      	mov	r4, r0
 80080ea:	460d      	mov	r5, r1
 80080ec:	4616      	mov	r6, r2
 80080ee:	f7ff ff6d 	bl	8007fcc <GUIDRV_FlexColor__InitOnce>
 80080f2:	68a3      	ldr	r3, [r4, #8]
 80080f4:	e883 0060 	stmia.w	r3, {r5, r6}
 80080f8:	bd70      	pop	{r4, r5, r6, pc}

080080fa <_GetDevFunc_SetVSize>:
 80080fa:	b570      	push	{r4, r5, r6, lr}
 80080fc:	4604      	mov	r4, r0
 80080fe:	460d      	mov	r5, r1
 8008100:	4616      	mov	r6, r2
 8008102:	f7ff ff63 	bl	8007fcc <GUIDRV_FlexColor__InitOnce>
 8008106:	68a3      	ldr	r3, [r4, #8]
 8008108:	609d      	str	r5, [r3, #8]
 800810a:	60de      	str	r6, [r3, #12]
 800810c:	bd70      	pop	{r4, r5, r6, pc}

0800810e <GUIDRV_FlexColor_Config>:
 800810e:	b538      	push	{r3, r4, r5, lr}
 8008110:	4605      	mov	r5, r0
 8008112:	460c      	mov	r4, r1
 8008114:	f7ff ff5a 	bl	8007fcc <GUIDRV_FlexColor__InitOnce>
 8008118:	68ab      	ldr	r3, [r5, #8]
 800811a:	6822      	ldr	r2, [r4, #0]
 800811c:	62da      	str	r2, [r3, #44]	; 0x2c
 800811e:	6862      	ldr	r2, [r4, #4]
 8008120:	631a      	str	r2, [r3, #48]	; 0x30
 8008122:	68a2      	ldr	r2, [r4, #8]
 8008124:	635a      	str	r2, [r3, #52]	; 0x34
 8008126:	0752      	lsls	r2, r2, #29
 8008128:	d507      	bpl.n	800813a <GUIDRV_FlexColor_Config+0x2c>
 800812a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800812e:	601a      	str	r2, [r3, #0]
 8008130:	6059      	str	r1, [r3, #4]
 8008132:	68da      	ldr	r2, [r3, #12]
 8008134:	6899      	ldr	r1, [r3, #8]
 8008136:	60d9      	str	r1, [r3, #12]
 8008138:	609a      	str	r2, [r3, #8]
 800813a:	89a2      	ldrh	r2, [r4, #12]
 800813c:	849a      	strh	r2, [r3, #36]	; 0x24
 800813e:	6922      	ldr	r2, [r4, #16]
 8008140:	b112      	cbz	r2, 8008148 <GUIDRV_FlexColor_Config+0x3a>
 8008142:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8008146:	621a      	str	r2, [r3, #32]
 8008148:	bd38      	pop	{r3, r4, r5, pc}

0800814a <GUIDRV_FlexColor_SetFunc>:
 800814a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800814e:	4604      	mov	r4, r0
 8008150:	461f      	mov	r7, r3
 8008152:	4616      	mov	r6, r2
 8008154:	4688      	mov	r8, r1
 8008156:	f7ff ff39 	bl	8007fcc <GUIDRV_FlexColor__InitOnce>
 800815a:	68a5      	ldr	r5, [r4, #8]
 800815c:	4641      	mov	r1, r8
 800815e:	2268      	movs	r2, #104	; 0x68
 8008160:	f505 7086 	add.w	r0, r5, #268	; 0x10c
 8008164:	f004 fad4 	bl	800c710 <memcpy>
 8008168:	4620      	mov	r0, r4
 800816a:	47b0      	blx	r6
 800816c:	4620      	mov	r0, r4
 800816e:	47b8      	blx	r7
 8008170:	6923      	ldr	r3, [r4, #16]
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	4798      	blx	r3
 8008176:	62a8      	str	r0, [r5, #40]	; 0x28
 8008178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800817c <LCD_UpdateColorIndices>:
 800817c:	b510      	push	{r4, lr}
 800817e:	4c07      	ldr	r4, [pc, #28]	; (800819c <LCD_UpdateColorIndices+0x20>)
 8008180:	6823      	ldr	r3, [r4, #0]
 8008182:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008184:	f000 fc44 	bl	8008a10 <LCD_Color2Index>
 8008188:	f000 fc62 	bl	8008a50 <LCD_SetColorIndex>
 800818c:	6823      	ldr	r3, [r4, #0]
 800818e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008190:	f000 fc3e 	bl	8008a10 <LCD_Color2Index>
 8008194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008198:	f000 bc76 	b.w	8008a88 <LCD_SetBkColorIndex>
 800819c:	20000018 	.word	0x20000018

080081a0 <LCD_SetClipRectEx>:
 80081a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081a2:	4c09      	ldr	r4, [pc, #36]	; (80081c8 <LCD_SetClipRectEx+0x28>)
 80081a4:	6823      	ldr	r3, [r4, #0]
 80081a6:	7c5a      	ldrb	r2, [r3, #17]
 80081a8:	4b08      	ldr	r3, [pc, #32]	; (80081cc <LCD_SetClipRectEx+0x2c>)
 80081aa:	4605      	mov	r5, r0
 80081ac:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80081b0:	68c2      	ldr	r2, [r0, #12]
 80081b2:	4669      	mov	r1, sp
 80081b4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80081b6:	4790      	blx	r2
 80081b8:	6820      	ldr	r0, [r4, #0]
 80081ba:	4629      	mov	r1, r5
 80081bc:	466a      	mov	r2, sp
 80081be:	3008      	adds	r0, #8
 80081c0:	f000 fd62 	bl	8008c88 <GUI__IntersectRects>
 80081c4:	b003      	add	sp, #12
 80081c6:	bd30      	pop	{r4, r5, pc}
 80081c8:	20000018 	.word	0x20000018
 80081cc:	20019624 	.word	0x20019624

080081d0 <LCD_SetVSizeEx>:
 80081d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081d2:	460d      	mov	r5, r1
 80081d4:	4614      	mov	r4, r2
 80081d6:	f001 fc25 	bl	8009a24 <GUI_DEVICE__GetpDriver>
 80081da:	9001      	str	r0, [sp, #4]
 80081dc:	b908      	cbnz	r0, 80081e2 <LCD_SetVSizeEx+0x12>
 80081de:	2001      	movs	r0, #1
 80081e0:	e00c      	b.n	80081fc <LCD_SetVSizeEx+0x2c>
 80081e2:	68c3      	ldr	r3, [r0, #12]
 80081e4:	210a      	movs	r1, #10
 80081e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e8:	a801      	add	r0, sp, #4
 80081ea:	4798      	blx	r3
 80081ec:	4603      	mov	r3, r0
 80081ee:	2800      	cmp	r0, #0
 80081f0:	d0f5      	beq.n	80081de <LCD_SetVSizeEx+0xe>
 80081f2:	9801      	ldr	r0, [sp, #4]
 80081f4:	4629      	mov	r1, r5
 80081f6:	4622      	mov	r2, r4
 80081f8:	4798      	blx	r3
 80081fa:	2000      	movs	r0, #0
 80081fc:	b003      	add	sp, #12
 80081fe:	bd30      	pop	{r4, r5, pc}

08008200 <LCD_SetSizeEx>:
 8008200:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008202:	460d      	mov	r5, r1
 8008204:	4614      	mov	r4, r2
 8008206:	f001 fc0d 	bl	8009a24 <GUI_DEVICE__GetpDriver>
 800820a:	9001      	str	r0, [sp, #4]
 800820c:	b908      	cbnz	r0, 8008212 <LCD_SetSizeEx+0x12>
 800820e:	2001      	movs	r0, #1
 8008210:	e00c      	b.n	800822c <LCD_SetSizeEx+0x2c>
 8008212:	68c3      	ldr	r3, [r0, #12]
 8008214:	210b      	movs	r1, #11
 8008216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008218:	a801      	add	r0, sp, #4
 800821a:	4798      	blx	r3
 800821c:	4603      	mov	r3, r0
 800821e:	2800      	cmp	r0, #0
 8008220:	d0f5      	beq.n	800820e <LCD_SetSizeEx+0xe>
 8008222:	9801      	ldr	r0, [sp, #4]
 8008224:	4629      	mov	r1, r5
 8008226:	4622      	mov	r2, r4
 8008228:	4798      	blx	r3
 800822a:	2000      	movs	r0, #0
 800822c:	b003      	add	sp, #12
 800822e:	bd30      	pop	{r4, r5, pc}

08008230 <LCD_SetLUTEntryEx>:
 8008230:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008232:	460d      	mov	r5, r1
 8008234:	4614      	mov	r4, r2
 8008236:	f001 fbf5 	bl	8009a24 <GUI_DEVICE__GetpDriver>
 800823a:	9001      	str	r0, [sp, #4]
 800823c:	b908      	cbnz	r0, 8008242 <LCD_SetLUTEntryEx+0x12>
 800823e:	2001      	movs	r0, #1
 8008240:	e00c      	b.n	800825c <LCD_SetLUTEntryEx+0x2c>
 8008242:	68c3      	ldr	r3, [r0, #12]
 8008244:	2110      	movs	r1, #16
 8008246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008248:	a801      	add	r0, sp, #4
 800824a:	4798      	blx	r3
 800824c:	4603      	mov	r3, r0
 800824e:	2800      	cmp	r0, #0
 8008250:	d0f5      	beq.n	800823e <LCD_SetLUTEntryEx+0xe>
 8008252:	9801      	ldr	r0, [sp, #4]
 8008254:	4629      	mov	r1, r5
 8008256:	4622      	mov	r2, r4
 8008258:	4798      	blx	r3
 800825a:	2000      	movs	r0, #0
 800825c:	b003      	add	sp, #12
 800825e:	bd30      	pop	{r4, r5, pc}

08008260 <_GetDevProp>:
 8008260:	2801      	cmp	r0, #1
 8008262:	b510      	push	{r4, lr}
 8008264:	460c      	mov	r4, r1
 8008266:	dc08      	bgt.n	800827a <_GetDevProp+0x1a>
 8008268:	f001 fbdc 	bl	8009a24 <GUI_DEVICE__GetpDriver>
 800826c:	b120      	cbz	r0, 8008278 <_GetDevProp+0x18>
 800826e:	68c3      	ldr	r3, [r0, #12]
 8008270:	4621      	mov	r1, r4
 8008272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008274:	4798      	blx	r3
 8008276:	bd10      	pop	{r4, pc}
 8008278:	bd10      	pop	{r4, pc}
 800827a:	2000      	movs	r0, #0
 800827c:	bd10      	pop	{r4, pc}

0800827e <_GetMaxValue>:
 800827e:	b538      	push	{r3, r4, r5, lr}
 8008280:	4604      	mov	r4, r0
 8008282:	4621      	mov	r1, r4
 8008284:	2001      	movs	r0, #1
 8008286:	f7ff ffeb 	bl	8008260 <_GetDevProp>
 800828a:	4621      	mov	r1, r4
 800828c:	4605      	mov	r5, r0
 800828e:	2000      	movs	r0, #0
 8008290:	f7ff ffe6 	bl	8008260 <_GetDevProp>
 8008294:	42a8      	cmp	r0, r5
 8008296:	bfb8      	it	lt
 8008298:	4628      	movlt	r0, r5
 800829a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800829e:	bd38      	pop	{r3, r4, r5, pc}

080082a0 <LCD_GetXSizeEx>:
 80082a0:	2101      	movs	r1, #1
 80082a2:	f7ff bfdd 	b.w	8008260 <_GetDevProp>

080082a6 <LCD_GetYSizeEx>:
 80082a6:	2102      	movs	r1, #2
 80082a8:	f7ff bfda 	b.w	8008260 <_GetDevProp>

080082ac <LCD_GetBitsPerPixelEx>:
 80082ac:	2108      	movs	r1, #8
 80082ae:	f7ff bfd7 	b.w	8008260 <_GetDevProp>

080082b2 <LCD_GetNumColorsEx>:
 80082b2:	2109      	movs	r1, #9
 80082b4:	f7ff bfd4 	b.w	8008260 <_GetDevProp>

080082b8 <LCD_GetNumColors>:
 80082b8:	4b02      	ldr	r3, [pc, #8]	; (80082c4 <LCD_GetNumColors+0xc>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	7c58      	ldrb	r0, [r3, #17]
 80082be:	f7ff bff8 	b.w	80082b2 <LCD_GetNumColorsEx>
 80082c2:	bf00      	nop
 80082c4:	20000018 	.word	0x20000018

080082c8 <GUI_GetBitsPerPixelEx>:
 80082c8:	b508      	push	{r3, lr}
 80082ca:	4b04      	ldr	r3, [pc, #16]	; (80082dc <GUI_GetBitsPerPixelEx+0x14>)
 80082cc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80082d0:	68c3      	ldr	r3, [r0, #12]
 80082d2:	2108      	movs	r1, #8
 80082d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082d6:	4798      	blx	r3
 80082d8:	bd08      	pop	{r3, pc}
 80082da:	bf00      	nop
 80082dc:	20019624 	.word	0x20019624

080082e0 <LCD_GetPaletteEx>:
 80082e0:	b508      	push	{r3, lr}
 80082e2:	f001 fb9f 	bl	8009a24 <GUI_DEVICE__GetpDriver>
 80082e6:	b120      	cbz	r0, 80082f2 <LCD_GetPaletteEx+0x12>
 80082e8:	68c3      	ldr	r3, [r0, #12]
 80082ea:	2102      	movs	r1, #2
 80082ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ee:	4798      	blx	r3
 80082f0:	bd08      	pop	{r3, pc}
 80082f2:	bd08      	pop	{r3, pc}

080082f4 <LCD_GetPalette>:
 80082f4:	4b02      	ldr	r3, [pc, #8]	; (8008300 <LCD_GetPalette+0xc>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	7c58      	ldrb	r0, [r3, #17]
 80082fa:	f7ff bff1 	b.w	80082e0 <LCD_GetPaletteEx>
 80082fe:	bf00      	nop
 8008300:	20000018 	.word	0x20000018

08008304 <GUI_GetpfIndex2ColorEx>:
 8008304:	4b02      	ldr	r3, [pc, #8]	; (8008310 <GUI_GetpfIndex2ColorEx+0xc>)
 8008306:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800830a:	691b      	ldr	r3, [r3, #16]
 800830c:	6858      	ldr	r0, [r3, #4]
 800830e:	4770      	bx	lr
 8008310:	20019624 	.word	0x20019624

08008314 <GUI_GetpfColor2IndexEx>:
 8008314:	4b02      	ldr	r3, [pc, #8]	; (8008320 <GUI_GetpfColor2IndexEx+0xc>)
 8008316:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800831a:	691b      	ldr	r3, [r3, #16]
 800831c:	6818      	ldr	r0, [r3, #0]
 800831e:	4770      	bx	lr
 8008320:	20019624 	.word	0x20019624

08008324 <LCD_GetXSizeMax>:
 8008324:	2001      	movs	r0, #1
 8008326:	f7ff bfaa 	b.w	800827e <_GetMaxValue>

0800832a <LCD_GetYSizeMax>:
 800832a:	2002      	movs	r0, #2
 800832c:	f7ff bfa7 	b.w	800827e <_GetMaxValue>

08008330 <LCD_SetDisplaySize>:
 8008330:	4b02      	ldr	r3, [pc, #8]	; (800833c <LCD_SetDisplaySize+0xc>)
 8008332:	6018      	str	r0, [r3, #0]
 8008334:	4b02      	ldr	r3, [pc, #8]	; (8008340 <LCD_SetDisplaySize+0x10>)
 8008336:	6019      	str	r1, [r3, #0]
 8008338:	4770      	bx	lr
 800833a:	bf00      	nop
 800833c:	20019084 	.word	0x20019084
 8008340:	20019080 	.word	0x20019080

08008344 <LCD_GetXSizeDisplay>:
 8008344:	4b01      	ldr	r3, [pc, #4]	; (800834c <LCD_GetXSizeDisplay+0x8>)
 8008346:	6818      	ldr	r0, [r3, #0]
 8008348:	4770      	bx	lr
 800834a:	bf00      	nop
 800834c:	20019084 	.word	0x20019084

08008350 <LCD_GetYSizeDisplay>:
 8008350:	4b01      	ldr	r3, [pc, #4]	; (8008358 <LCD_GetYSizeDisplay+0x8>)
 8008352:	6818      	ldr	r0, [r3, #0]
 8008354:	4770      	bx	lr
 8008356:	bf00      	nop
 8008358:	20019080 	.word	0x20019080

0800835c <LCD__GetBPP>:
 800835c:	2800      	cmp	r0, #0
 800835e:	d03b      	beq.n	80083d8 <LCD__GetBPP+0x7c>
 8008360:	f030 0301 	bics.w	r3, r0, #1
 8008364:	d029      	beq.n	80083ba <LCD__GetBPP+0x5e>
 8008366:	f030 0303 	bics.w	r3, r0, #3
 800836a:	d028      	beq.n	80083be <LCD__GetBPP+0x62>
 800836c:	f030 0307 	bics.w	r3, r0, #7
 8008370:	d027      	beq.n	80083c2 <LCD__GetBPP+0x66>
 8008372:	f030 030f 	bics.w	r3, r0, #15
 8008376:	d026      	beq.n	80083c6 <LCD__GetBPP+0x6a>
 8008378:	f030 031f 	bics.w	r3, r0, #31
 800837c:	d025      	beq.n	80083ca <LCD__GetBPP+0x6e>
 800837e:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
 8008382:	d024      	beq.n	80083ce <LCD__GetBPP+0x72>
 8008384:	f420 73ff 	bic.w	r3, r0, #510	; 0x1fe
 8008388:	f023 0301 	bic.w	r3, r3, #1
 800838c:	b30b      	cbz	r3, 80083d2 <LCD__GetBPP+0x76>
 800838e:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
 8008392:	f023 030f 	bic.w	r3, r3, #15
 8008396:	b1e3      	cbz	r3, 80083d2 <LCD__GetBPP+0x76>
 8008398:	f420 43ff 	bic.w	r3, r0, #32640	; 0x7f80
 800839c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80083a0:	b1bb      	cbz	r3, 80083d2 <LCD__GetBPP+0x76>
 80083a2:	0c03      	lsrs	r3, r0, #16
 80083a4:	041b      	lsls	r3, r3, #16
 80083a6:	b1a3      	cbz	r3, 80083d2 <LCD__GetBPP+0x76>
 80083a8:	0c83      	lsrs	r3, r0, #18
 80083aa:	049b      	lsls	r3, r3, #18
 80083ac:	b19b      	cbz	r3, 80083d6 <LCD__GetBPP+0x7a>
 80083ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80083b2:	bf0c      	ite	eq
 80083b4:	2018      	moveq	r0, #24
 80083b6:	2020      	movne	r0, #32
 80083b8:	4770      	bx	lr
 80083ba:	2001      	movs	r0, #1
 80083bc:	4770      	bx	lr
 80083be:	2002      	movs	r0, #2
 80083c0:	4770      	bx	lr
 80083c2:	2003      	movs	r0, #3
 80083c4:	4770      	bx	lr
 80083c6:	2004      	movs	r0, #4
 80083c8:	4770      	bx	lr
 80083ca:	2005      	movs	r0, #5
 80083cc:	4770      	bx	lr
 80083ce:	2008      	movs	r0, #8
 80083d0:	4770      	bx	lr
 80083d2:	2010      	movs	r0, #16
 80083d4:	4770      	bx	lr
 80083d6:	2012      	movs	r0, #18
 80083d8:	4770      	bx	lr

080083da <LCD__GetBPPDevice>:
 80083da:	b508      	push	{r3, lr}
 80083dc:	f7ff ffbe 	bl	800835c <LCD__GetBPP>
 80083e0:	2801      	cmp	r0, #1
 80083e2:	d00f      	beq.n	8008404 <LCD__GetBPPDevice+0x2a>
 80083e4:	1e83      	subs	r3, r0, #2
 80083e6:	2b06      	cmp	r3, #6
 80083e8:	d909      	bls.n	80083fe <LCD__GetBPPDevice+0x24>
 80083ea:	f1a0 0309 	sub.w	r3, r0, #9
 80083ee:	2b07      	cmp	r3, #7
 80083f0:	d907      	bls.n	8008402 <LCD__GetBPPDevice+0x28>
 80083f2:	3811      	subs	r0, #17
 80083f4:	2810      	cmp	r0, #16
 80083f6:	bf34      	ite	cc
 80083f8:	2020      	movcc	r0, #32
 80083fa:	2000      	movcs	r0, #0
 80083fc:	bd08      	pop	{r3, pc}
 80083fe:	2008      	movs	r0, #8
 8008400:	bd08      	pop	{r3, pc}
 8008402:	2010      	movs	r0, #16
 8008404:	bd08      	pop	{r3, pc}
	...

08008408 <_SetDrawMode>:
 8008408:	b570      	push	{r4, r5, r6, lr}
 800840a:	4b08      	ldr	r3, [pc, #32]	; (800842c <_SetDrawMode+0x24>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	7c1a      	ldrb	r2, [r3, #16]
 8008410:	ea80 0102 	eor.w	r1, r0, r2
 8008414:	0749      	lsls	r1, r1, #29
 8008416:	d505      	bpl.n	8008424 <_SetDrawMode+0x1c>
 8008418:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800841a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800841c:	6826      	ldr	r6, [r4, #0]
 800841e:	680d      	ldr	r5, [r1, #0]
 8008420:	6025      	str	r5, [r4, #0]
 8008422:	600e      	str	r6, [r1, #0]
 8008424:	7418      	strb	r0, [r3, #16]
 8008426:	4610      	mov	r0, r2
 8008428:	bd70      	pop	{r4, r5, r6, pc}
 800842a:	bf00      	nop
 800842c:	20000018 	.word	0x20000018

08008430 <LCD_SetDrawMode>:
 8008430:	b508      	push	{r3, lr}
 8008432:	4b02      	ldr	r3, [pc, #8]	; (800843c <LCD_SetDrawMode+0xc>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	689b      	ldr	r3, [r3, #8]
 8008438:	4798      	blx	r3
 800843a:	bd08      	pop	{r3, pc}
 800843c:	20000014 	.word	0x20000014

08008440 <LCD_DrawPixel>:
 8008440:	b538      	push	{r3, r4, r5, lr}
 8008442:	4b14      	ldr	r3, [pc, #80]	; (8008494 <LCD_DrawPixel+0x54>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	460a      	mov	r2, r1
 8008448:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 800844c:	428a      	cmp	r2, r1
 800844e:	4604      	mov	r4, r0
 8008450:	db1e      	blt.n	8008490 <LCD_DrawPixel+0x50>
 8008452:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8008456:	428a      	cmp	r2, r1
 8008458:	dc1a      	bgt.n	8008490 <LCD_DrawPixel+0x50>
 800845a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 800845e:	4288      	cmp	r0, r1
 8008460:	db16      	blt.n	8008490 <LCD_DrawPixel+0x50>
 8008462:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 8008466:	4288      	cmp	r0, r1
 8008468:	dc12      	bgt.n	8008490 <LCD_DrawPixel+0x50>
 800846a:	7c19      	ldrb	r1, [r3, #16]
 800846c:	7c58      	ldrb	r0, [r3, #17]
 800846e:	f011 0f01 	tst.w	r1, #1
 8008472:	4909      	ldr	r1, [pc, #36]	; (8008498 <LCD_DrawPixel+0x58>)
 8008474:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8008478:	d004      	beq.n	8008484 <LCD_DrawPixel+0x44>
 800847a:	68c3      	ldr	r3, [r0, #12]
 800847c:	4621      	mov	r1, r4
 800847e:	69db      	ldr	r3, [r3, #28]
 8008480:	4798      	blx	r3
 8008482:	bd38      	pop	{r3, r4, r5, pc}
 8008484:	68c1      	ldr	r1, [r0, #12]
 8008486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008488:	698d      	ldr	r5, [r1, #24]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4621      	mov	r1, r4
 800848e:	47a8      	blx	r5
 8008490:	bd38      	pop	{r3, r4, r5, pc}
 8008492:	bf00      	nop
 8008494:	20000018 	.word	0x20000018
 8008498:	20019624 	.word	0x20019624

0800849c <LCD_DrawHLine>:
 800849c:	b538      	push	{r3, r4, r5, lr}
 800849e:	4b10      	ldr	r3, [pc, #64]	; (80084e0 <LCD_DrawHLine+0x44>)
 80084a0:	681c      	ldr	r4, [r3, #0]
 80084a2:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80084a6:	4299      	cmp	r1, r3
 80084a8:	460d      	mov	r5, r1
 80084aa:	db17      	blt.n	80084dc <LCD_DrawHLine+0x40>
 80084ac:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80084b0:	4299      	cmp	r1, r3
 80084b2:	dc13      	bgt.n	80084dc <LCD_DrawHLine+0x40>
 80084b4:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80084b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084bc:	4288      	cmp	r0, r1
 80084be:	bfa8      	it	ge
 80084c0:	4601      	movge	r1, r0
 80084c2:	429a      	cmp	r2, r3
 80084c4:	bfb8      	it	lt
 80084c6:	4613      	movlt	r3, r2
 80084c8:	428b      	cmp	r3, r1
 80084ca:	db07      	blt.n	80084dc <LCD_DrawHLine+0x40>
 80084cc:	7c60      	ldrb	r0, [r4, #17]
 80084ce:	4a05      	ldr	r2, [pc, #20]	; (80084e4 <LCD_DrawHLine+0x48>)
 80084d0:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80084d4:	68c2      	ldr	r2, [r0, #12]
 80084d6:	6894      	ldr	r4, [r2, #8]
 80084d8:	462a      	mov	r2, r5
 80084da:	47a0      	blx	r4
 80084dc:	bd38      	pop	{r3, r4, r5, pc}
 80084de:	bf00      	nop
 80084e0:	20000018 	.word	0x20000018
 80084e4:	20019624 	.word	0x20019624

080084e8 <LCD_DrawVLine>:
 80084e8:	b538      	push	{r3, r4, r5, lr}
 80084ea:	4b10      	ldr	r3, [pc, #64]	; (800852c <LCD_DrawVLine+0x44>)
 80084ec:	681c      	ldr	r4, [r3, #0]
 80084ee:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80084f2:	4605      	mov	r5, r0
 80084f4:	429d      	cmp	r5, r3
 80084f6:	4610      	mov	r0, r2
 80084f8:	db17      	blt.n	800852a <LCD_DrawVLine+0x42>
 80084fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084fe:	429d      	cmp	r5, r3
 8008500:	dc13      	bgt.n	800852a <LCD_DrawVLine+0x42>
 8008502:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8008506:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800850a:	4291      	cmp	r1, r2
 800850c:	bfa8      	it	ge
 800850e:	460a      	movge	r2, r1
 8008510:	4298      	cmp	r0, r3
 8008512:	bfb8      	it	lt
 8008514:	4603      	movlt	r3, r0
 8008516:	4293      	cmp	r3, r2
 8008518:	db07      	blt.n	800852a <LCD_DrawVLine+0x42>
 800851a:	7c60      	ldrb	r0, [r4, #17]
 800851c:	4904      	ldr	r1, [pc, #16]	; (8008530 <LCD_DrawVLine+0x48>)
 800851e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8008522:	68c1      	ldr	r1, [r0, #12]
 8008524:	68cc      	ldr	r4, [r1, #12]
 8008526:	4629      	mov	r1, r5
 8008528:	47a0      	blx	r4
 800852a:	bd38      	pop	{r3, r4, r5, pc}
 800852c:	20000018 	.word	0x20000018
 8008530:	20019624 	.word	0x20019624

08008534 <LCD_FillRect>:
 8008534:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008536:	460e      	mov	r6, r1
 8008538:	4912      	ldr	r1, [pc, #72]	; (8008584 <LCD_FillRect+0x50>)
 800853a:	680c      	ldr	r4, [r1, #0]
 800853c:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8008540:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008544:	4288      	cmp	r0, r1
 8008546:	bfa8      	it	ge
 8008548:	4601      	movge	r1, r0
 800854a:	42aa      	cmp	r2, r5
 800854c:	bfb8      	it	lt
 800854e:	4615      	movlt	r5, r2
 8008550:	428d      	cmp	r5, r1
 8008552:	db14      	blt.n	800857e <LCD_FillRect+0x4a>
 8008554:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8008558:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 800855c:	4296      	cmp	r6, r2
 800855e:	bfa8      	it	ge
 8008560:	4632      	movge	r2, r6
 8008562:	4283      	cmp	r3, r0
 8008564:	bfa8      	it	ge
 8008566:	4603      	movge	r3, r0
 8008568:	4293      	cmp	r3, r2
 800856a:	db08      	blt.n	800857e <LCD_FillRect+0x4a>
 800856c:	7c64      	ldrb	r4, [r4, #17]
 800856e:	4806      	ldr	r0, [pc, #24]	; (8008588 <LCD_FillRect+0x54>)
 8008570:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8008574:	68c4      	ldr	r4, [r0, #12]
 8008576:	9300      	str	r3, [sp, #0]
 8008578:	6924      	ldr	r4, [r4, #16]
 800857a:	462b      	mov	r3, r5
 800857c:	47a0      	blx	r4
 800857e:	b002      	add	sp, #8
 8008580:	bd70      	pop	{r4, r5, r6, pc}
 8008582:	bf00      	nop
 8008584:	20000018 	.word	0x20000018
 8008588:	20019624 	.word	0x20019624

0800858c <LCD__DrawBitmap_1bpp>:
 800858c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008590:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 8008740 <LCD__DrawBitmap_1bpp+0x1b4>
 8008594:	b08f      	sub	sp, #60	; 0x3c
 8008596:	f8dc c000 	ldr.w	ip, [ip]
 800859a:	9009      	str	r0, [sp, #36]	; 0x24
 800859c:	460e      	mov	r6, r1
 800859e:	4615      	mov	r5, r2
 80085a0:	469b      	mov	fp, r3
 80085a2:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80085a4:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80085a8:	f1bc 0f00 	cmp.w	ip, #0
 80085ac:	d00d      	beq.n	80085ca <LCD__DrawBitmap_1bpp+0x3e>
 80085ae:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80085b0:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80085b2:	9500      	str	r5, [sp, #0]
 80085b4:	9601      	str	r6, [sp, #4]
 80085b6:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80085b8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80085ba:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80085bc:	9702      	str	r7, [sp, #8]
 80085be:	9503      	str	r5, [sp, #12]
 80085c0:	9404      	str	r4, [sp, #16]
 80085c2:	9605      	str	r6, [sp, #20]
 80085c4:	f8dc 4000 	ldr.w	r4, [ip]
 80085c8:	e053      	b.n	8008672 <LCD__DrawBitmap_1bpp+0xe6>
 80085ca:	9f18      	ldr	r7, [sp, #96]	; 0x60
 80085cc:	9819      	ldr	r0, [sp, #100]	; 0x64
 80085ce:	ea47 0300 	orr.w	r3, r7, r0
 80085d2:	2b01      	cmp	r3, #1
 80085d4:	d14f      	bne.n	8008676 <LCD__DrawBitmap_1bpp+0xea>
 80085d6:	4b58      	ldr	r3, [pc, #352]	; (8008738 <LCD__DrawBitmap_1bpp+0x1ac>)
 80085d8:	6818      	ldr	r0, [r3, #0]
 80085da:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80085de:	1a51      	subs	r1, r2, r1
 80085e0:	2900      	cmp	r1, #0
 80085e2:	dd08      	ble.n	80085f6 <LCD__DrawBitmap_1bpp+0x6a>
 80085e4:	ebc1 030b 	rsb	r3, r1, fp
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	f340 80a2 	ble.w	8008732 <LCD__DrawBitmap_1bpp+0x1a6>
 80085ee:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80085f0:	fb07 4401 	mla	r4, r7, r1, r4
 80085f4:	e001      	b.n	80085fa <LCD__DrawBitmap_1bpp+0x6e>
 80085f6:	465b      	mov	r3, fp
 80085f8:	4632      	mov	r2, r6
 80085fa:	445e      	add	r6, fp
 80085fc:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 8008600:	3e01      	subs	r6, #1
 8008602:	1a76      	subs	r6, r6, r1
 8008604:	2e00      	cmp	r6, #0
 8008606:	dd03      	ble.n	8008610 <LCD__DrawBitmap_1bpp+0x84>
 8008608:	1b9b      	subs	r3, r3, r6
 800860a:	2b00      	cmp	r3, #0
 800860c:	f340 8091 	ble.w	8008732 <LCD__DrawBitmap_1bpp+0x1a6>
 8008610:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008612:	f9b0 600c 	ldrsh.w	r6, [r0, #12]
 8008616:	4429      	add	r1, r5
 8008618:	3901      	subs	r1, #1
 800861a:	1b89      	subs	r1, r1, r6
 800861c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800861e:	2900      	cmp	r1, #0
 8008620:	bfc8      	it	gt
 8008622:	ebc1 0505 	rsbgt	r5, r1, r5
 8008626:	ebc8 0106 	rsb	r1, r8, r6
 800862a:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 800862e:	42b1      	cmp	r1, r6
 8008630:	da0c      	bge.n	800864c <LCD__DrawBitmap_1bpp+0xc0>
 8008632:	ebc1 0c06 	rsb	ip, r1, r6
 8008636:	eb08 070c 	add.w	r7, r8, ip
 800863a:	1b8e      	subs	r6, r1, r6
 800863c:	f02c 0c07 	bic.w	ip, ip, #7
 8008640:	4435      	add	r5, r6
 8008642:	eb04 04e7 	add.w	r4, r4, r7, asr #3
 8008646:	4461      	add	r1, ip
 8008648:	f007 0807 	and.w	r8, r7, #7
 800864c:	2d00      	cmp	r5, #0
 800864e:	dd70      	ble.n	8008732 <LCD__DrawBitmap_1bpp+0x1a6>
 8008650:	7c46      	ldrb	r6, [r0, #17]
 8008652:	483a      	ldr	r0, [pc, #232]	; (800873c <LCD__DrawBitmap_1bpp+0x1b0>)
 8008654:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8008656:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 800865a:	68c6      	ldr	r6, [r0, #12]
 800865c:	9701      	str	r7, [sp, #4]
 800865e:	9403      	str	r4, [sp, #12]
 8008660:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8008662:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8008664:	9300      	str	r3, [sp, #0]
 8008666:	9702      	str	r7, [sp, #8]
 8008668:	f8cd 8010 	str.w	r8, [sp, #16]
 800866c:	9405      	str	r4, [sp, #20]
 800866e:	6874      	ldr	r4, [r6, #4]
 8008670:	462b      	mov	r3, r5
 8008672:	47a0      	blx	r4
 8008674:	e05d      	b.n	8008732 <LCD__DrawBitmap_1bpp+0x1a6>
 8008676:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8008678:	f1c7 0708 	rsb	r7, r7, #8
 800867c:	970c      	str	r7, [sp, #48]	; 0x30
 800867e:	4667      	mov	r7, ip
 8008680:	45dc      	cmp	ip, fp
 8008682:	da56      	bge.n	8008732 <LCD__DrawBitmap_1bpp+0x1a6>
 8008684:	4b2c      	ldr	r3, [pc, #176]	; (8008738 <LCD__DrawBitmap_1bpp+0x1ac>)
 8008686:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4430      	add	r0, r6
 800868c:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8008690:	900a      	str	r0, [sp, #40]	; 0x28
 8008692:	1e41      	subs	r1, r0, #1
 8008694:	4291      	cmp	r1, r2
 8008696:	910b      	str	r1, [sp, #44]	; 0x2c
 8008698:	db45      	blt.n	8008726 <LCD__DrawBitmap_1bpp+0x19a>
 800869a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800869e:	429e      	cmp	r6, r3
 80086a0:	dc41      	bgt.n	8008726 <LCD__DrawBitmap_1bpp+0x19a>
 80086a2:	f04f 0800 	mov.w	r8, #0
 80086a6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80086aa:	9408      	str	r4, [sp, #32]
 80086ac:	46c2      	mov	sl, r8
 80086ae:	45aa      	cmp	sl, r5
 80086b0:	da39      	bge.n	8008726 <LCD__DrawBitmap_1bpp+0x19a>
 80086b2:	f1b8 0f00 	cmp.w	r8, #0
 80086b6:	d105      	bne.n	80086c4 <LCD__DrawBitmap_1bpp+0x138>
 80086b8:	9a08      	ldr	r2, [sp, #32]
 80086ba:	7817      	ldrb	r7, [r2, #0]
 80086bc:	3201      	adds	r2, #1
 80086be:	9208      	str	r2, [sp, #32]
 80086c0:	f04f 0808 	mov.w	r8, #8
 80086c4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80086c6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80086c8:	4a1b      	ldr	r2, [pc, #108]	; (8008738 <LCD__DrawBitmap_1bpp+0x1ac>)
 80086ca:	fa47 f300 	asr.w	r3, r7, r0
 80086ce:	ebc1 0808 	rsb	r8, r1, r8
 80086d2:	408f      	lsls	r7, r1
 80086d4:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 80086d8:	b2ff      	uxtb	r7, r7
 80086da:	d103      	bne.n	80086e4 <LCD__DrawBitmap_1bpp+0x158>
 80086dc:	6810      	ldr	r0, [r2, #0]
 80086de:	7c00      	ldrb	r0, [r0, #16]
 80086e0:	0780      	lsls	r0, r0, #30
 80086e2:	d41b      	bmi.n	800871c <LCD__DrawBitmap_1bpp+0x190>
 80086e4:	6812      	ldr	r2, [r2, #0]
 80086e6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80086e8:	6810      	ldr	r0, [r2, #0]
 80086ea:	900d      	str	r0, [sp, #52]	; 0x34
 80086ec:	981d      	ldr	r0, [sp, #116]	; 0x74
 80086ee:	b110      	cbz	r0, 80086f6 <LCD__DrawBitmap_1bpp+0x16a>
 80086f0:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 80086f4:	e000      	b.n	80086f8 <LCD__DrawBitmap_1bpp+0x16c>
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	9918      	ldr	r1, [sp, #96]	; 0x60
 80086fa:	6013      	str	r3, [r2, #0]
 80086fc:	1e4a      	subs	r2, r1, #1
 80086fe:	444a      	add	r2, r9
 8008700:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008702:	f8cd c01c 	str.w	ip, [sp, #28]
 8008706:	4648      	mov	r0, r9
 8008708:	4631      	mov	r1, r6
 800870a:	f7ff ff13 	bl	8008534 <LCD_FillRect>
 800870e:	4b0a      	ldr	r3, [pc, #40]	; (8008738 <LCD__DrawBitmap_1bpp+0x1ac>)
 8008710:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8008718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800871a:	601a      	str	r2, [r3, #0]
 800871c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800871e:	f10a 0a01 	add.w	sl, sl, #1
 8008722:	4499      	add	r9, r3
 8008724:	e7c3      	b.n	80086ae <LCD__DrawBitmap_1bpp+0x122>
 8008726:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8008728:	f10c 0c01 	add.w	ip, ip, #1
 800872c:	4434      	add	r4, r6
 800872e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008730:	e7a6      	b.n	8008680 <LCD__DrawBitmap_1bpp+0xf4>
 8008732:	b00f      	add	sp, #60	; 0x3c
 8008734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008738:	20000018 	.word	0x20000018
 800873c:	20019624 	.word	0x20019624
 8008740:	200195f8 	.word	0x200195f8

08008744 <LCD_DrawBitmap>:
 8008744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008748:	f8df c20c 	ldr.w	ip, [pc, #524]	; 8008958 <LCD_DrawBitmap+0x214>
 800874c:	b091      	sub	sp, #68	; 0x44
 800874e:	f8dc 9000 	ldr.w	r9, [ip]
 8008752:	9207      	str	r2, [sp, #28]
 8008754:	4605      	mov	r5, r0
 8008756:	4688      	mov	r8, r1
 8008758:	469b      	mov	fp, r3
 800875a:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800875c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800875e:	f1b9 0f00 	cmp.w	r9, #0
 8008762:	d00c      	beq.n	800877e <LCD_DrawBitmap+0x3a>
 8008764:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8008766:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8008768:	9500      	str	r5, [sp, #0]
 800876a:	9701      	str	r7, [sp, #4]
 800876c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800876e:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8008770:	9602      	str	r6, [sp, #8]
 8008772:	9503      	str	r5, [sp, #12]
 8008774:	9404      	str	r4, [sp, #16]
 8008776:	9705      	str	r7, [sp, #20]
 8008778:	f8d9 4000 	ldr.w	r4, [r9]
 800877c:	e081      	b.n	8008882 <LCD_DrawBitmap+0x13e>
 800877e:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8008780:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008782:	ea47 0300 	orr.w	r3, r7, r0
 8008786:	2b01      	cmp	r3, #1
 8008788:	d17d      	bne.n	8008886 <LCD_DrawBitmap+0x142>
 800878a:	4b71      	ldr	r3, [pc, #452]	; (8008950 <LCD_DrawBitmap+0x20c>)
 800878c:	6818      	ldr	r0, [r3, #0]
 800878e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8008792:	1a53      	subs	r3, r2, r1
 8008794:	2b00      	cmp	r3, #0
 8008796:	dd08      	ble.n	80087aa <LCD_DrawBitmap+0x66>
 8008798:	ebc3 010b 	rsb	r1, r3, fp
 800879c:	2900      	cmp	r1, #0
 800879e:	f340 80d4 	ble.w	800894a <LCD_DrawBitmap+0x206>
 80087a2:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 80087a4:	fb07 4403 	mla	r4, r7, r3, r4
 80087a8:	e001      	b.n	80087ae <LCD_DrawBitmap+0x6a>
 80087aa:	4659      	mov	r1, fp
 80087ac:	4642      	mov	r2, r8
 80087ae:	44d8      	add	r8, fp
 80087b0:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 80087b4:	f108 38ff 	add.w	r8, r8, #4294967295
 80087b8:	ebc3 0808 	rsb	r8, r3, r8
 80087bc:	f1b8 0f00 	cmp.w	r8, #0
 80087c0:	dd04      	ble.n	80087cc <LCD_DrawBitmap+0x88>
 80087c2:	ebc8 0101 	rsb	r1, r8, r1
 80087c6:	2900      	cmp	r1, #0
 80087c8:	f340 80bf 	ble.w	800894a <LCD_DrawBitmap+0x206>
 80087cc:	9b07      	ldr	r3, [sp, #28]
 80087ce:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
 80087d2:	442b      	add	r3, r5
 80087d4:	3b01      	subs	r3, #1
 80087d6:	ebcc 0303 	rsb	r3, ip, r3
 80087da:	2b00      	cmp	r3, #0
 80087dc:	dd02      	ble.n	80087e4 <LCD_DrawBitmap+0xa0>
 80087de:	9f07      	ldr	r7, [sp, #28]
 80087e0:	1aff      	subs	r7, r7, r3
 80087e2:	9707      	str	r7, [sp, #28]
 80087e4:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 80087e8:	4565      	cmp	r5, ip
 80087ea:	da33      	bge.n	8008854 <LCD_DrawBitmap+0x110>
 80087ec:	9f07      	ldr	r7, [sp, #28]
 80087ee:	ebc5 030c 	rsb	r3, r5, ip
 80087f2:	1aff      	subs	r7, r7, r3
 80087f4:	2e08      	cmp	r6, #8
 80087f6:	9707      	str	r7, [sp, #28]
 80087f8:	d027      	beq.n	800884a <LCD_DrawBitmap+0x106>
 80087fa:	dc0d      	bgt.n	8008818 <LCD_DrawBitmap+0xd4>
 80087fc:	2e02      	cmp	r6, #2
 80087fe:	d014      	beq.n	800882a <LCD_DrawBitmap+0xe6>
 8008800:	2e04      	cmp	r6, #4
 8008802:	d01a      	beq.n	800883a <LCD_DrawBitmap+0xf6>
 8008804:	2e01      	cmp	r6, #1
 8008806:	d126      	bne.n	8008856 <LCD_DrawBitmap+0x112>
 8008808:	f023 0c07 	bic.w	ip, r3, #7
 800880c:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 8008810:	4465      	add	r5, ip
 8008812:	f003 0307 	and.w	r3, r3, #7
 8008816:	e01e      	b.n	8008856 <LCD_DrawBitmap+0x112>
 8008818:	2e18      	cmp	r6, #24
 800881a:	d018      	beq.n	800884e <LCD_DrawBitmap+0x10a>
 800881c:	2e20      	cmp	r6, #32
 800881e:	d016      	beq.n	800884e <LCD_DrawBitmap+0x10a>
 8008820:	2e10      	cmp	r6, #16
 8008822:	d118      	bne.n	8008856 <LCD_DrawBitmap+0x112>
 8008824:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8008828:	e013      	b.n	8008852 <LCD_DrawBitmap+0x10e>
 800882a:	f023 0c03 	bic.w	ip, r3, #3
 800882e:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 8008832:	4465      	add	r5, ip
 8008834:	f003 0303 	and.w	r3, r3, #3
 8008838:	e00d      	b.n	8008856 <LCD_DrawBitmap+0x112>
 800883a:	f023 0c01 	bic.w	ip, r3, #1
 800883e:	eb04 0463 	add.w	r4, r4, r3, asr #1
 8008842:	4465      	add	r5, ip
 8008844:	f003 0301 	and.w	r3, r3, #1
 8008848:	e005      	b.n	8008856 <LCD_DrawBitmap+0x112>
 800884a:	441c      	add	r4, r3
 800884c:	e001      	b.n	8008852 <LCD_DrawBitmap+0x10e>
 800884e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8008852:	4665      	mov	r5, ip
 8008854:	2300      	movs	r3, #0
 8008856:	9f07      	ldr	r7, [sp, #28]
 8008858:	2f00      	cmp	r7, #0
 800885a:	dd76      	ble.n	800894a <LCD_DrawBitmap+0x206>
 800885c:	f890 e011 	ldrb.w	lr, [r0, #17]
 8008860:	483c      	ldr	r0, [pc, #240]	; (8008954 <LCD_DrawBitmap+0x210>)
 8008862:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8008864:	f850 002e 	ldr.w	r0, [r0, lr, lsl #2]
 8008868:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 800886c:	9403      	str	r4, [sp, #12]
 800886e:	e88d 0042 	stmia.w	sp, {r1, r6}
 8008872:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8008874:	9304      	str	r3, [sp, #16]
 8008876:	9702      	str	r7, [sp, #8]
 8008878:	9405      	str	r4, [sp, #20]
 800887a:	f8de 4004 	ldr.w	r4, [lr, #4]
 800887e:	9b07      	ldr	r3, [sp, #28]
 8008880:	4629      	mov	r1, r5
 8008882:	47a0      	blx	r4
 8008884:	e061      	b.n	800894a <LCD_DrawBitmap+0x206>
 8008886:	f1c6 0708 	rsb	r7, r6, #8
 800888a:	970e      	str	r7, [sp, #56]	; 0x38
 800888c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8008890:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8008892:	455f      	cmp	r7, fp
 8008894:	da59      	bge.n	800894a <LCD_DrawBitmap+0x206>
 8008896:	4b2e      	ldr	r3, [pc, #184]	; (8008950 <LCD_DrawBitmap+0x20c>)
 8008898:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4447      	add	r7, r8
 800889e:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 80088a2:	970c      	str	r7, [sp, #48]	; 0x30
 80088a4:	3f01      	subs	r7, #1
 80088a6:	4297      	cmp	r7, r2
 80088a8:	970d      	str	r7, [sp, #52]	; 0x34
 80088aa:	db46      	blt.n	800893a <LCD_DrawBitmap+0x1f6>
 80088ac:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80088b0:	4598      	cmp	r8, r3
 80088b2:	dc42      	bgt.n	800893a <LCD_DrawBitmap+0x1f6>
 80088b4:	f04f 0a00 	mov.w	sl, #0
 80088b8:	940b      	str	r4, [sp, #44]	; 0x2c
 80088ba:	46ac      	mov	ip, r5
 80088bc:	4657      	mov	r7, sl
 80088be:	9807      	ldr	r0, [sp, #28]
 80088c0:	4287      	cmp	r7, r0
 80088c2:	da3a      	bge.n	800893a <LCD_DrawBitmap+0x1f6>
 80088c4:	f1ba 0f00 	cmp.w	sl, #0
 80088c8:	d106      	bne.n	80088d8 <LCD_DrawBitmap+0x194>
 80088ca:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80088cc:	f890 9000 	ldrb.w	r9, [r0]
 80088d0:	3001      	adds	r0, #1
 80088d2:	900b      	str	r0, [sp, #44]	; 0x2c
 80088d4:	f04f 0a08 	mov.w	sl, #8
 80088d8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80088da:	4a1d      	ldr	r2, [pc, #116]	; (8008950 <LCD_DrawBitmap+0x20c>)
 80088dc:	fa49 f301 	asr.w	r3, r9, r1
 80088e0:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 80088e4:	fa09 f906 	lsl.w	r9, r9, r6
 80088e8:	fa5f f989 	uxtb.w	r9, r9
 80088ec:	ebc6 0a0a 	rsb	sl, r6, sl
 80088f0:	d103      	bne.n	80088fa <LCD_DrawBitmap+0x1b6>
 80088f2:	6810      	ldr	r0, [r2, #0]
 80088f4:	7c00      	ldrb	r0, [r0, #16]
 80088f6:	0780      	lsls	r0, r0, #30
 80088f8:	d41b      	bmi.n	8008932 <LCD_DrawBitmap+0x1ee>
 80088fa:	6812      	ldr	r2, [r2, #0]
 80088fc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80088fe:	6810      	ldr	r0, [r2, #0]
 8008900:	900f      	str	r0, [sp, #60]	; 0x3c
 8008902:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8008904:	b110      	cbz	r0, 800890c <LCD_DrawBitmap+0x1c8>
 8008906:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800890a:	e000      	b.n	800890e <LCD_DrawBitmap+0x1ca>
 800890c:	b2db      	uxtb	r3, r3
 800890e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008910:	6013      	str	r3, [r2, #0]
 8008912:	1e4a      	subs	r2, r1, #1
 8008914:	4462      	add	r2, ip
 8008916:	4660      	mov	r0, ip
 8008918:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800891a:	f8cd c020 	str.w	ip, [sp, #32]
 800891e:	4641      	mov	r1, r8
 8008920:	f7ff fe08 	bl	8008534 <LCD_FillRect>
 8008924:	4b0a      	ldr	r3, [pc, #40]	; (8008950 <LCD_DrawBitmap+0x20c>)
 8008926:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800892e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008930:	601a      	str	r2, [r3, #0]
 8008932:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008934:	3701      	adds	r7, #1
 8008936:	449c      	add	ip, r3
 8008938:	e7c1      	b.n	80088be <LCD_DrawBitmap+0x17a>
 800893a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800893c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8008940:	3701      	adds	r7, #1
 8008942:	970a      	str	r7, [sp, #40]	; 0x28
 8008944:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8008946:	443c      	add	r4, r7
 8008948:	e7a2      	b.n	8008890 <LCD_DrawBitmap+0x14c>
 800894a:	b011      	add	sp, #68	; 0x44
 800894c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008950:	20000018 	.word	0x20000018
 8008954:	20019624 	.word	0x20019624
 8008958:	200195f8 	.word	0x200195f8

0800895c <LCD_SetClipRectMax>:
 800895c:	b508      	push	{r3, lr}
 800895e:	4b05      	ldr	r3, [pc, #20]	; (8008974 <LCD_SetClipRectMax+0x18>)
 8008960:	6819      	ldr	r1, [r3, #0]
 8008962:	4b05      	ldr	r3, [pc, #20]	; (8008978 <LCD_SetClipRectMax+0x1c>)
 8008964:	7c4a      	ldrb	r2, [r1, #17]
 8008966:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800896a:	68c3      	ldr	r3, [r0, #12]
 800896c:	3108      	adds	r1, #8
 800896e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008970:	4798      	blx	r3
 8008972:	bd08      	pop	{r3, pc}
 8008974:	20000018 	.word	0x20000018
 8008978:	20019624 	.word	0x20019624

0800897c <emWin_LCD_Init>:
 800897c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800897e:	f7ff ffed 	bl	800895c <LCD_SetClipRectMax>
 8008982:	f003 fb31 	bl	800bfe8 <LCD_InitColors>
 8008986:	4604      	mov	r4, r0
 8008988:	2800      	cmp	r0, #0
 800898a:	d13d      	bne.n	8008a08 <emWin_LCD_Init+0x8c>
 800898c:	4605      	mov	r5, r0
 800898e:	4628      	mov	r0, r5
 8008990:	f001 f848 	bl	8009a24 <GUI_DEVICE__GetpDriver>
 8008994:	9001      	str	r0, [sp, #4]
 8008996:	b148      	cbz	r0, 80089ac <emWin_LCD_Init+0x30>
 8008998:	68c3      	ldr	r3, [r0, #12]
 800899a:	210c      	movs	r1, #12
 800899c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800899e:	a801      	add	r0, sp, #4
 80089a0:	4798      	blx	r3
 80089a2:	4603      	mov	r3, r0
 80089a4:	b370      	cbz	r0, 8008a04 <emWin_LCD_Init+0x88>
 80089a6:	9801      	ldr	r0, [sp, #4]
 80089a8:	4798      	blx	r3
 80089aa:	4304      	orrs	r4, r0
 80089ac:	3501      	adds	r5, #1
 80089ae:	2d02      	cmp	r5, #2
 80089b0:	d1ed      	bne.n	800898e <emWin_LCD_Init+0x12>
 80089b2:	bb4c      	cbnz	r4, 8008a08 <emWin_LCD_Init+0x8c>
 80089b4:	f003 fb34 	bl	800c020 <LCD_InitLUT>
 80089b8:	2401      	movs	r4, #1
 80089ba:	4620      	mov	r0, r4
 80089bc:	f001 f832 	bl	8009a24 <GUI_DEVICE__GetpDriver>
 80089c0:	9001      	str	r0, [sp, #4]
 80089c2:	b1d0      	cbz	r0, 80089fa <emWin_LCD_Init+0x7e>
 80089c4:	4620      	mov	r0, r4
 80089c6:	f000 fca1 	bl	800930c <GUI_SelectLayer>
 80089ca:	2004      	movs	r0, #4
 80089cc:	f7ff fd30 	bl	8008430 <LCD_SetDrawMode>
 80089d0:	f643 72ff 	movw	r2, #16383	; 0x3fff
 80089d4:	2000      	movs	r0, #0
 80089d6:	4601      	mov	r1, r0
 80089d8:	4613      	mov	r3, r2
 80089da:	f7ff fdab 	bl	8008534 <LCD_FillRect>
 80089de:	2000      	movs	r0, #0
 80089e0:	f7ff fd26 	bl	8008430 <LCD_SetDrawMode>
 80089e4:	a802      	add	r0, sp, #8
 80089e6:	210e      	movs	r1, #14
 80089e8:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 80089ec:	68db      	ldr	r3, [r3, #12]
 80089ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f0:	4798      	blx	r3
 80089f2:	4603      	mov	r3, r0
 80089f4:	b108      	cbz	r0, 80089fa <emWin_LCD_Init+0x7e>
 80089f6:	9801      	ldr	r0, [sp, #4]
 80089f8:	4798      	blx	r3
 80089fa:	f114 34ff 	adds.w	r4, r4, #4294967295
 80089fe:	d2dc      	bcs.n	80089ba <emWin_LCD_Init+0x3e>
 8008a00:	2000      	movs	r0, #0
 8008a02:	e002      	b.n	8008a0a <emWin_LCD_Init+0x8e>
 8008a04:	2001      	movs	r0, #1
 8008a06:	e000      	b.n	8008a0a <emWin_LCD_Init+0x8e>
 8008a08:	4620      	mov	r0, r4
 8008a0a:	b003      	add	sp, #12
 8008a0c:	bd30      	pop	{r4, r5, pc}
	...

08008a10 <LCD_Color2Index>:
 8008a10:	b508      	push	{r3, lr}
 8008a12:	4b05      	ldr	r3, [pc, #20]	; (8008a28 <LCD_Color2Index+0x18>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	7c5a      	ldrb	r2, [r3, #17]
 8008a18:	4b04      	ldr	r3, [pc, #16]	; (8008a2c <LCD_Color2Index+0x1c>)
 8008a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a1e:	691b      	ldr	r3, [r3, #16]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4798      	blx	r3
 8008a24:	bd08      	pop	{r3, pc}
 8008a26:	bf00      	nop
 8008a28:	20000018 	.word	0x20000018
 8008a2c:	20019624 	.word	0x20019624

08008a30 <LCD_Index2Color>:
 8008a30:	b508      	push	{r3, lr}
 8008a32:	4b05      	ldr	r3, [pc, #20]	; (8008a48 <LCD_Index2Color+0x18>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	7c5a      	ldrb	r2, [r3, #17]
 8008a38:	4b04      	ldr	r3, [pc, #16]	; (8008a4c <LCD_Index2Color+0x1c>)
 8008a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a3e:	691b      	ldr	r3, [r3, #16]
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	4798      	blx	r3
 8008a44:	bd08      	pop	{r3, pc}
 8008a46:	bf00      	nop
 8008a48:	20000018 	.word	0x20000018
 8008a4c:	20019624 	.word	0x20019624

08008a50 <LCD_SetColorIndex>:
 8008a50:	4b04      	ldr	r3, [pc, #16]	; (8008a64 <LCD_SetColorIndex+0x14>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	7c1a      	ldrb	r2, [r3, #16]
 8008a56:	0752      	lsls	r2, r2, #29
 8008a58:	bf4c      	ite	mi
 8008a5a:	6b9b      	ldrmi	r3, [r3, #56]	; 0x38
 8008a5c:	6bdb      	ldrpl	r3, [r3, #60]	; 0x3c
 8008a5e:	6018      	str	r0, [r3, #0]
 8008a60:	4770      	bx	lr
 8008a62:	bf00      	nop
 8008a64:	20000018 	.word	0x20000018

08008a68 <_SetColor>:
 8008a68:	b508      	push	{r3, lr}
 8008a6a:	4b06      	ldr	r3, [pc, #24]	; (8008a84 <_SetColor+0x1c>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008a70:	4281      	cmp	r1, r0
 8008a72:	d006      	beq.n	8008a82 <_SetColor+0x1a>
 8008a74:	6318      	str	r0, [r3, #48]	; 0x30
 8008a76:	f7ff ffcb 	bl	8008a10 <LCD_Color2Index>
 8008a7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008a7e:	f7ff bfe7 	b.w	8008a50 <LCD_SetColorIndex>
 8008a82:	bd08      	pop	{r3, pc}
 8008a84:	20000018 	.word	0x20000018

08008a88 <LCD_SetBkColorIndex>:
 8008a88:	4b04      	ldr	r3, [pc, #16]	; (8008a9c <LCD_SetBkColorIndex+0x14>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	7c1a      	ldrb	r2, [r3, #16]
 8008a8e:	0752      	lsls	r2, r2, #29
 8008a90:	bf4c      	ite	mi
 8008a92:	6bdb      	ldrmi	r3, [r3, #60]	; 0x3c
 8008a94:	6b9b      	ldrpl	r3, [r3, #56]	; 0x38
 8008a96:	6018      	str	r0, [r3, #0]
 8008a98:	4770      	bx	lr
 8008a9a:	bf00      	nop
 8008a9c:	20000018 	.word	0x20000018

08008aa0 <_SetBkColor>:
 8008aa0:	b508      	push	{r3, lr}
 8008aa2:	4b06      	ldr	r3, [pc, #24]	; (8008abc <_SetBkColor+0x1c>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008aa8:	4281      	cmp	r1, r0
 8008aaa:	d006      	beq.n	8008aba <_SetBkColor+0x1a>
 8008aac:	6358      	str	r0, [r3, #52]	; 0x34
 8008aae:	f7ff ffaf 	bl	8008a10 <LCD_Color2Index>
 8008ab2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008ab6:	f7ff bfe7 	b.w	8008a88 <LCD_SetBkColorIndex>
 8008aba:	bd08      	pop	{r3, pc}
 8008abc:	20000018 	.word	0x20000018

08008ac0 <LCD_SetBkColor>:
 8008ac0:	b508      	push	{r3, lr}
 8008ac2:	4b02      	ldr	r3, [pc, #8]	; (8008acc <LCD_SetBkColor+0xc>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	4798      	blx	r3
 8008aca:	bd08      	pop	{r3, pc}
 8008acc:	20000014 	.word	0x20000014

08008ad0 <LCD_SetColor>:
 8008ad0:	b508      	push	{r3, lr}
 8008ad2:	4b02      	ldr	r3, [pc, #8]	; (8008adc <LCD_SetColor+0xc>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4798      	blx	r3
 8008ada:	bd08      	pop	{r3, pc}
 8008adc:	20000014 	.word	0x20000014

08008ae0 <GUI__memset16>:
 8008ae0:	b570      	push	{r4, r5, r6, lr}
 8008ae2:	0784      	lsls	r4, r0, #30
 8008ae4:	d502      	bpl.n	8008aec <GUI__memset16+0xc>
 8008ae6:	8001      	strh	r1, [r0, #0]
 8008ae8:	3a01      	subs	r2, #1
 8008aea:	3002      	adds	r0, #2
 8008aec:	0855      	lsrs	r5, r2, #1
 8008aee:	462b      	mov	r3, r5
 8008af0:	b305      	cbz	r5, 8008b34 <GUI__memset16+0x54>
 8008af2:	2d03      	cmp	r5, #3
 8008af4:	eb01 4401 	add.w	r4, r1, r1, lsl #16
 8008af8:	dc02      	bgt.n	8008b00 <GUI__memset16+0x20>
 8008afa:	4606      	mov	r6, r0
 8008afc:	461d      	mov	r5, r3
 8008afe:	e012      	b.n	8008b26 <GUI__memset16+0x46>
 8008b00:	4603      	mov	r3, r0
 8008b02:	462e      	mov	r6, r5
 8008b04:	3e04      	subs	r6, #4
 8008b06:	2e03      	cmp	r6, #3
 8008b08:	601c      	str	r4, [r3, #0]
 8008b0a:	605c      	str	r4, [r3, #4]
 8008b0c:	609c      	str	r4, [r3, #8]
 8008b0e:	60dc      	str	r4, [r3, #12]
 8008b10:	f103 0310 	add.w	r3, r3, #16
 8008b14:	dcf6      	bgt.n	8008b04 <GUI__memset16+0x24>
 8008b16:	3d04      	subs	r5, #4
 8008b18:	08ab      	lsrs	r3, r5, #2
 8008b1a:	1c5e      	adds	r6, r3, #1
 8008b1c:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 8008b20:	eba5 0383 	sub.w	r3, r5, r3, lsl #2
 8008b24:	e7e9      	b.n	8008afa <GUI__memset16+0x1a>
 8008b26:	b11d      	cbz	r5, 8008b30 <GUI__memset16+0x50>
 8008b28:	f846 4b04 	str.w	r4, [r6], #4
 8008b2c:	3d01      	subs	r5, #1
 8008b2e:	e7fa      	b.n	8008b26 <GUI__memset16+0x46>
 8008b30:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8008b34:	07d3      	lsls	r3, r2, #31
 8008b36:	bf48      	it	mi
 8008b38:	8001      	strhmi	r1, [r0, #0]
 8008b3a:	bd70      	pop	{r4, r5, r6, pc}

08008b3c <GUI__memset>:
 8008b3c:	b570      	push	{r4, r5, r6, lr}
 8008b3e:	b12a      	cbz	r2, 8008b4c <GUI__memset+0x10>
 8008b40:	0783      	lsls	r3, r0, #30
 8008b42:	d003      	beq.n	8008b4c <GUI__memset+0x10>
 8008b44:	f800 1b01 	strb.w	r1, [r0], #1
 8008b48:	3a01      	subs	r2, #1
 8008b4a:	e7f8      	b.n	8008b3e <GUI__memset+0x2>
 8008b4c:	0893      	lsrs	r3, r2, #2
 8008b4e:	d101      	bne.n	8008b54 <GUI__memset+0x18>
 8008b50:	4402      	add	r2, r0
 8008b52:	e017      	b.n	8008b84 <GUI__memset+0x48>
 8008b54:	f04f 3401 	mov.w	r4, #16843009	; 0x1010101
 8008b58:	f002 0203 	and.w	r2, r2, #3
 8008b5c:	434c      	muls	r4, r1
 8008b5e:	2b03      	cmp	r3, #3
 8008b60:	4605      	mov	r5, r0
 8008b62:	dd06      	ble.n	8008b72 <GUI__memset+0x36>
 8008b64:	6004      	str	r4, [r0, #0]
 8008b66:	6044      	str	r4, [r0, #4]
 8008b68:	6084      	str	r4, [r0, #8]
 8008b6a:	60c4      	str	r4, [r0, #12]
 8008b6c:	3b04      	subs	r3, #4
 8008b6e:	3010      	adds	r0, #16
 8008b70:	e7f5      	b.n	8008b5e <GUI__memset+0x22>
 8008b72:	461e      	mov	r6, r3
 8008b74:	b11b      	cbz	r3, 8008b7e <GUI__memset+0x42>
 8008b76:	f845 4b04 	str.w	r4, [r5], #4
 8008b7a:	3b01      	subs	r3, #1
 8008b7c:	e7fa      	b.n	8008b74 <GUI__memset+0x38>
 8008b7e:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 8008b82:	e7e5      	b.n	8008b50 <GUI__memset+0x14>
 8008b84:	4290      	cmp	r0, r2
 8008b86:	d002      	beq.n	8008b8e <GUI__memset+0x52>
 8008b88:	f800 1b01 	strb.w	r1, [r0], #1
 8008b8c:	e7fa      	b.n	8008b84 <GUI__memset+0x48>
 8008b8e:	bd70      	pop	{r4, r5, r6, pc}

08008b90 <GUI__ManageCacheEx>:
 8008b90:	2801      	cmp	r0, #1
 8008b92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b94:	4604      	mov	r4, r0
 8008b96:	460d      	mov	r5, r1
 8008b98:	dc65      	bgt.n	8008c66 <GUI__ManageCacheEx+0xd6>
 8008b9a:	4b34      	ldr	r3, [pc, #208]	; (8008c6c <GUI__ManageCacheEx+0xdc>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	b103      	cbz	r3, 8008ba2 <GUI__ManageCacheEx+0x12>
 8008ba0:	4798      	blx	r3
 8008ba2:	2d01      	cmp	r5, #1
 8008ba4:	d004      	beq.n	8008bb0 <GUI__ManageCacheEx+0x20>
 8008ba6:	2d02      	cmp	r5, #2
 8008ba8:	d021      	beq.n	8008bee <GUI__ManageCacheEx+0x5e>
 8008baa:	2d00      	cmp	r5, #0
 8008bac:	d15b      	bne.n	8008c66 <GUI__ManageCacheEx+0xd6>
 8008bae:	e035      	b.n	8008c1c <GUI__ManageCacheEx+0x8c>
 8008bb0:	4e2f      	ldr	r6, [pc, #188]	; (8008c70 <GUI__ManageCacheEx+0xe0>)
 8008bb2:	f856 7024 	ldr.w	r7, [r6, r4, lsl #2]
 8008bb6:	b9b7      	cbnz	r7, 8008be6 <GUI__ManageCacheEx+0x56>
 8008bb8:	4620      	mov	r0, r4
 8008bba:	f000 ff33 	bl	8009a24 <GUI_DEVICE__GetpDriver>
 8008bbe:	9001      	str	r0, [sp, #4]
 8008bc0:	2800      	cmp	r0, #0
 8008bc2:	d050      	beq.n	8008c66 <GUI__ManageCacheEx+0xd6>
 8008bc4:	68c3      	ldr	r3, [r0, #12]
 8008bc6:	210d      	movs	r1, #13
 8008bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bca:	a801      	add	r0, sp, #4
 8008bcc:	4798      	blx	r3
 8008bce:	4603      	mov	r3, r0
 8008bd0:	2800      	cmp	r0, #0
 8008bd2:	d048      	beq.n	8008c66 <GUI__ManageCacheEx+0xd6>
 8008bd4:	9801      	ldr	r0, [sp, #4]
 8008bd6:	4629      	mov	r1, r5
 8008bd8:	4798      	blx	r3
 8008bda:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 8008bde:	3301      	adds	r3, #1
 8008be0:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
 8008be4:	e018      	b.n	8008c18 <GUI__ManageCacheEx+0x88>
 8008be6:	3701      	adds	r7, #1
 8008be8:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
 8008bec:	e03b      	b.n	8008c66 <GUI__ManageCacheEx+0xd6>
 8008bee:	4620      	mov	r0, r4
 8008bf0:	f000 ff18 	bl	8009a24 <GUI_DEVICE__GetpDriver>
 8008bf4:	9001      	str	r0, [sp, #4]
 8008bf6:	2800      	cmp	r0, #0
 8008bf8:	d035      	beq.n	8008c66 <GUI__ManageCacheEx+0xd6>
 8008bfa:	68c3      	ldr	r3, [r0, #12]
 8008bfc:	210d      	movs	r1, #13
 8008bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c00:	a801      	add	r0, sp, #4
 8008c02:	4798      	blx	r3
 8008c04:	4604      	mov	r4, r0
 8008c06:	2800      	cmp	r0, #0
 8008c08:	d02d      	beq.n	8008c66 <GUI__ManageCacheEx+0xd6>
 8008c0a:	4b1a      	ldr	r3, [pc, #104]	; (8008c74 <GUI__ManageCacheEx+0xe4>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	b103      	cbz	r3, 8008c12 <GUI__ManageCacheEx+0x82>
 8008c10:	4798      	blx	r3
 8008c12:	9801      	ldr	r0, [sp, #4]
 8008c14:	2102      	movs	r1, #2
 8008c16:	47a0      	blx	r4
 8008c18:	2000      	movs	r0, #0
 8008c1a:	e025      	b.n	8008c68 <GUI__ManageCacheEx+0xd8>
 8008c1c:	4d14      	ldr	r5, [pc, #80]	; (8008c70 <GUI__ManageCacheEx+0xe0>)
 8008c1e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	d001      	beq.n	8008c2a <GUI__ManageCacheEx+0x9a>
 8008c26:	2001      	movs	r0, #1
 8008c28:	e015      	b.n	8008c56 <GUI__ManageCacheEx+0xc6>
 8008c2a:	4620      	mov	r0, r4
 8008c2c:	f000 fefa 	bl	8009a24 <GUI_DEVICE__GetpDriver>
 8008c30:	9001      	str	r0, [sp, #4]
 8008c32:	2800      	cmp	r0, #0
 8008c34:	d0f7      	beq.n	8008c26 <GUI__ManageCacheEx+0x96>
 8008c36:	68c3      	ldr	r3, [r0, #12]
 8008c38:	210d      	movs	r1, #13
 8008c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c3c:	a801      	add	r0, sp, #4
 8008c3e:	4798      	blx	r3
 8008c40:	4606      	mov	r6, r0
 8008c42:	2800      	cmp	r0, #0
 8008c44:	d0ef      	beq.n	8008c26 <GUI__ManageCacheEx+0x96>
 8008c46:	4b0b      	ldr	r3, [pc, #44]	; (8008c74 <GUI__ManageCacheEx+0xe4>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	b103      	cbz	r3, 8008c4e <GUI__ManageCacheEx+0xbe>
 8008c4c:	4798      	blx	r3
 8008c4e:	9801      	ldr	r0, [sp, #4]
 8008c50:	2100      	movs	r1, #0
 8008c52:	47b0      	blx	r6
 8008c54:	2000      	movs	r0, #0
 8008c56:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	bf18      	it	ne
 8008c5e:	3b01      	subne	r3, #1
 8008c60:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
 8008c64:	e000      	b.n	8008c68 <GUI__ManageCacheEx+0xd8>
 8008c66:	2001      	movs	r0, #1
 8008c68:	b003      	add	sp, #12
 8008c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c6c:	20019094 	.word	0x20019094
 8008c70:	2001908c 	.word	0x2001908c
 8008c74:	20019088 	.word	0x20019088

08008c78 <GUI__ManageCache>:
 8008c78:	4b02      	ldr	r3, [pc, #8]	; (8008c84 <GUI__ManageCache+0xc>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4601      	mov	r1, r0
 8008c7e:	7c58      	ldrb	r0, [r3, #17]
 8008c80:	f7ff bf86 	b.w	8008b90 <GUI__ManageCacheEx>
 8008c84:	20000018 	.word	0x20000018

08008c88 <GUI__IntersectRects>:
 8008c88:	b570      	push	{r4, r5, r6, lr}
 8008c8a:	f9b2 3000 	ldrsh.w	r3, [r2]
 8008c8e:	f9b1 4000 	ldrsh.w	r4, [r1]
 8008c92:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8008c96:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
 8008c9a:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 8008c9e:	429c      	cmp	r4, r3
 8008ca0:	bfb8      	it	lt
 8008ca2:	461c      	movlt	r4, r3
 8008ca4:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8008ca8:	429d      	cmp	r5, r3
 8008caa:	bfa8      	it	ge
 8008cac:	462b      	movge	r3, r5
 8008cae:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 8008cb2:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8008cb6:	42ae      	cmp	r6, r5
 8008cb8:	bfb8      	it	lt
 8008cba:	4635      	movlt	r5, r6
 8008cbc:	b2a4      	uxth	r4, r4
 8008cbe:	b2ad      	uxth	r5, r5
 8008cc0:	4291      	cmp	r1, r2
 8008cc2:	bfb8      	it	lt
 8008cc4:	460a      	movlt	r2, r1
 8008cc6:	8004      	strh	r4, [r0, #0]
 8008cc8:	8085      	strh	r5, [r0, #4]
 8008cca:	b224      	sxth	r4, r4
 8008ccc:	b22d      	sxth	r5, r5
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	b292      	uxth	r2, r2
 8008cd2:	42a5      	cmp	r5, r4
 8008cd4:	8043      	strh	r3, [r0, #2]
 8008cd6:	80c2      	strh	r2, [r0, #6]
 8008cd8:	db06      	blt.n	8008ce8 <GUI__IntersectRects+0x60>
 8008cda:	b210      	sxth	r0, r2
 8008cdc:	b21b      	sxth	r3, r3
 8008cde:	4298      	cmp	r0, r3
 8008ce0:	bfb4      	ite	lt
 8008ce2:	2000      	movlt	r0, #0
 8008ce4:	2001      	movge	r0, #1
 8008ce6:	bd70      	pop	{r4, r5, r6, pc}
 8008ce8:	2000      	movs	r0, #0
 8008cea:	bd70      	pop	{r4, r5, r6, pc}

08008cec <GUI__IntersectRect>:
 8008cec:	880b      	ldrh	r3, [r1, #0]
 8008cee:	b510      	push	{r4, lr}
 8008cf0:	f9b0 4000 	ldrsh.w	r4, [r0]
 8008cf4:	b21a      	sxth	r2, r3
 8008cf6:	4294      	cmp	r4, r2
 8008cf8:	bfb8      	it	lt
 8008cfa:	8003      	strhlt	r3, [r0, #0]
 8008cfc:	884b      	ldrh	r3, [r1, #2]
 8008cfe:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8008d02:	b21a      	sxth	r2, r3
 8008d04:	4294      	cmp	r4, r2
 8008d06:	bfb8      	it	lt
 8008d08:	8043      	strhlt	r3, [r0, #2]
 8008d0a:	888b      	ldrh	r3, [r1, #4]
 8008d0c:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8008d10:	b21a      	sxth	r2, r3
 8008d12:	4294      	cmp	r4, r2
 8008d14:	bfc8      	it	gt
 8008d16:	8083      	strhgt	r3, [r0, #4]
 8008d18:	88cb      	ldrh	r3, [r1, #6]
 8008d1a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8008d1e:	b21a      	sxth	r2, r3
 8008d20:	4291      	cmp	r1, r2
 8008d22:	bfc8      	it	gt
 8008d24:	80c3      	strhgt	r3, [r0, #6]
 8008d26:	bd10      	pop	{r4, pc}

08008d28 <GUI_SignalEvent>:
 8008d28:	b508      	push	{r3, lr}
 8008d2a:	4b02      	ldr	r3, [pc, #8]	; (8008d34 <GUI_SignalEvent+0xc>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	b103      	cbz	r3, 8008d32 <GUI_SignalEvent+0xa>
 8008d30:	4798      	blx	r3
 8008d32:	bd08      	pop	{r3, pc}
 8008d34:	20019098 	.word	0x20019098

08008d38 <GUI_UC__GetCharCodeInc>:
 8008d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d3a:	4e08      	ldr	r6, [pc, #32]	; (8008d5c <GUI_UC__GetCharCodeInc+0x24>)
 8008d3c:	6804      	ldr	r4, [r0, #0]
 8008d3e:	6833      	ldr	r3, [r6, #0]
 8008d40:	4605      	mov	r5, r0
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4620      	mov	r0, r4
 8008d46:	4798      	blx	r3
 8008d48:	6833      	ldr	r3, [r6, #0]
 8008d4a:	4607      	mov	r7, r0
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	4620      	mov	r0, r4
 8008d50:	4798      	blx	r3
 8008d52:	4420      	add	r0, r4
 8008d54:	6028      	str	r0, [r5, #0]
 8008d56:	4638      	mov	r0, r7
 8008d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d5a:	bf00      	nop
 8008d5c:	2001961c 	.word	0x2001961c

08008d60 <GUI_UC__NumChars2NumBytes>:
 8008d60:	b570      	push	{r4, r5, r6, lr}
 8008d62:	4604      	mov	r4, r0
 8008d64:	460e      	mov	r6, r1
 8008d66:	2500      	movs	r5, #0
 8008d68:	b146      	cbz	r6, 8008d7c <GUI_UC__NumChars2NumBytes+0x1c>
 8008d6a:	4b05      	ldr	r3, [pc, #20]	; (8008d80 <GUI_UC__NumChars2NumBytes+0x20>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4620      	mov	r0, r4
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	4798      	blx	r3
 8008d74:	3e01      	subs	r6, #1
 8008d76:	4404      	add	r4, r0
 8008d78:	4405      	add	r5, r0
 8008d7a:	e7f5      	b.n	8008d68 <GUI_UC__NumChars2NumBytes+0x8>
 8008d7c:	4628      	mov	r0, r5
 8008d7e:	bd70      	pop	{r4, r5, r6, pc}
 8008d80:	2001961c 	.word	0x2001961c

08008d84 <GUI_TOUCH_Calibrate>:
 8008d84:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8008d86:	2801      	cmp	r0, #1
 8008d88:	9c08      	ldr	r4, [sp, #32]
 8008d8a:	d845      	bhi.n	8008e18 <GUI_TOUCH_Calibrate+0x94>
 8008d8c:	4d25      	ldr	r5, [pc, #148]	; (8008e24 <GUI_TOUCH_Calibrate+0xa0>)
 8008d8e:	d00c      	beq.n	8008daa <GUI_TOUCH_Calibrate+0x26>
 8008d90:	4e25      	ldr	r6, [pc, #148]	; (8008e28 <GUI_TOUCH_Calibrate+0xa4>)
 8008d92:	e886 0006 	stmia.w	r6, {r1, r2}
 8008d96:	6829      	ldr	r1, [r5, #0]
 8008d98:	f001 0206 	and.w	r2, r1, #6
 8008d9c:	2a06      	cmp	r2, #6
 8008d9e:	4a23      	ldr	r2, [pc, #140]	; (8008e2c <GUI_TOUCH_Calibrate+0xa8>)
 8008da0:	d010      	beq.n	8008dc4 <GUI_TOUCH_Calibrate+0x40>
 8008da2:	f001 0105 	and.w	r1, r1, #5
 8008da6:	2901      	cmp	r1, #1
 8008da8:	e00b      	b.n	8008dc2 <GUI_TOUCH_Calibrate+0x3e>
 8008daa:	4e21      	ldr	r6, [pc, #132]	; (8008e30 <GUI_TOUCH_Calibrate+0xac>)
 8008dac:	e886 0006 	stmia.w	r6, {r1, r2}
 8008db0:	6829      	ldr	r1, [r5, #0]
 8008db2:	f001 0205 	and.w	r2, r1, #5
 8008db6:	2a05      	cmp	r2, #5
 8008db8:	4a1e      	ldr	r2, [pc, #120]	; (8008e34 <GUI_TOUCH_Calibrate+0xb0>)
 8008dba:	d003      	beq.n	8008dc4 <GUI_TOUCH_Calibrate+0x40>
 8008dbc:	f001 0106 	and.w	r1, r1, #6
 8008dc0:	2902      	cmp	r1, #2
 8008dc2:	d102      	bne.n	8008dca <GUI_TOUCH_Calibrate+0x46>
 8008dc4:	6014      	str	r4, [r2, #0]
 8008dc6:	6053      	str	r3, [r2, #4]
 8008dc8:	e001      	b.n	8008dce <GUI_TOUCH_Calibrate+0x4a>
 8008dca:	e882 0018 	stmia.w	r2, {r3, r4}
 8008dce:	4b1a      	ldr	r3, [pc, #104]	; (8008e38 <GUI_TOUCH_Calibrate+0xb4>)
 8008dd0:	781a      	ldrb	r2, [r3, #0]
 8008dd2:	4102      	asrs	r2, r0
 8008dd4:	07d2      	lsls	r2, r2, #31
 8008dd6:	bf44      	itt	mi
 8008dd8:	2200      	movmi	r2, #0
 8008dda:	701a      	strbmi	r2, [r3, #0]
 8008ddc:	2201      	movs	r2, #1
 8008dde:	fa02 f000 	lsl.w	r0, r2, r0
 8008de2:	781a      	ldrb	r2, [r3, #0]
 8008de4:	4310      	orrs	r0, r2
 8008de6:	b2c0      	uxtb	r0, r0
 8008de8:	2803      	cmp	r0, #3
 8008dea:	7018      	strb	r0, [r3, #0]
 8008dec:	d116      	bne.n	8008e1c <GUI_TOUCH_Calibrate+0x98>
 8008dee:	4c13      	ldr	r4, [pc, #76]	; (8008e3c <GUI_TOUCH_Calibrate+0xb8>)
 8008df0:	6823      	ldr	r3, [r4, #0]
 8008df2:	7c58      	ldrb	r0, [r3, #17]
 8008df4:	f7ff fa54 	bl	80082a0 <LCD_GetXSizeEx>
 8008df8:	6823      	ldr	r3, [r4, #0]
 8008dfa:	4605      	mov	r5, r0
 8008dfc:	7c58      	ldrb	r0, [r3, #17]
 8008dfe:	f7ff fa52 	bl	80082a6 <LCD_GetYSizeEx>
 8008e02:	4b0c      	ldr	r3, [pc, #48]	; (8008e34 <GUI_TOUCH_Calibrate+0xb0>)
 8008e04:	9002      	str	r0, [sp, #8]
 8008e06:	e88d 0028 	stmia.w	sp, {r3, r5}
 8008e0a:	4907      	ldr	r1, [pc, #28]	; (8008e28 <GUI_TOUCH_Calibrate+0xa4>)
 8008e0c:	4a08      	ldr	r2, [pc, #32]	; (8008e30 <GUI_TOUCH_Calibrate+0xac>)
 8008e0e:	4b07      	ldr	r3, [pc, #28]	; (8008e2c <GUI_TOUCH_Calibrate+0xa8>)
 8008e10:	2002      	movs	r0, #2
 8008e12:	f000 f815 	bl	8008e40 <GUI_TOUCH_CalcCoefficients>
 8008e16:	e002      	b.n	8008e1e <GUI_TOUCH_Calibrate+0x9a>
 8008e18:	2001      	movs	r0, #1
 8008e1a:	e000      	b.n	8008e1e <GUI_TOUCH_Calibrate+0x9a>
 8008e1c:	2000      	movs	r0, #0
 8008e1e:	b004      	add	sp, #16
 8008e20:	bd70      	pop	{r4, r5, r6, pc}
 8008e22:	bf00      	nop
 8008e24:	200190b0 	.word	0x200190b0
 8008e28:	2001909c 	.word	0x2001909c
 8008e2c:	200190b4 	.word	0x200190b4
 8008e30:	200190bc 	.word	0x200190bc
 8008e34:	200190a4 	.word	0x200190a4
 8008e38:	200190ac 	.word	0x200190ac
 8008e3c:	20000018 	.word	0x20000018

08008e40 <GUI_TOUCH_CalcCoefficients>:
 8008e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e44:	ed2d 8b02 	vpush	{d8}
 8008e48:	f8df c3bc 	ldr.w	ip, [pc, #956]	; 8009208 <GUI_TOUCH_CalcCoefficients+0x3c8>
 8008e4c:	b08c      	sub	sp, #48	; 0x30
 8008e4e:	2400      	movs	r4, #0
 8008e50:	2802      	cmp	r0, #2
 8008e52:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8008e54:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008e56:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 8008e5a:	f8cc 4000 	str.w	r4, [ip]
 8008e5e:	d135      	bne.n	8008ecc <GUI_TOUCH_CalcCoefficients+0x8c>
 8008e60:	c912      	ldmia	r1, {r1, r4}
 8008e62:	6818      	ldr	r0, [r3, #0]
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	1a61      	subs	r1, r4, r1
 8008e68:	1a1b      	subs	r3, r3, r0
 8008e6a:	ee00 1a10 	vmov	s0, r1
 8008e6e:	ee07 3a90 	vmov	s15, r3
 8008e72:	eeb8 7ac0 	vcvt.f32.s32	s14, s0
 8008e76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e7a:	ee05 0a10 	vmov	s10, r0
 8008e7e:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8008e82:	6850      	ldr	r0, [r2, #4]
 8008e84:	6812      	ldr	r2, [r2, #0]
 8008e86:	4bdb      	ldr	r3, [pc, #876]	; (80091f4 <GUI_TOUCH_CalcCoefficients+0x3b4>)
 8008e88:	2100      	movs	r1, #0
 8008e8a:	1a82      	subs	r2, r0, r2
 8008e8c:	6059      	str	r1, [r3, #4]
 8008e8e:	60d9      	str	r1, [r3, #12]
 8008e90:	6839      	ldr	r1, [r7, #0]
 8008e92:	eeb8 7ac5 	vcvt.f32.s32	s14, s10
 8008e96:	ee06 2a10 	vmov	s12, r2
 8008e9a:	687a      	ldr	r2, [r7, #4]
 8008e9c:	edc3 7a00 	vstr	s15, [r3]
 8008ea0:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8008ea4:	1a52      	subs	r2, r2, r1
 8008ea6:	edc3 7a02 	vstr	s15, [r3, #8]
 8008eaa:	ee07 2a90 	vmov	s15, r2
 8008eae:	eeb8 7ac6 	vcvt.f32.s32	s14, s12
 8008eb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008eb6:	ee06 1a90 	vmov	s13, r1
 8008eba:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8008ebe:	eeb8 7ae6 	vcvt.f32.s32	s14, s13
 8008ec2:	edc3 7a04 	vstr	s15, [r3, #16]
 8008ec6:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8008eca:	e144      	b.n	8009156 <GUI_TOUCH_CalcCoefficients+0x316>
 8008ecc:	f340 8148 	ble.w	8009160 <GUI_TOUCH_CalcCoefficients+0x320>
 8008ed0:	2803      	cmp	r0, #3
 8008ed2:	d128      	bne.n	8008f26 <GUI_TOUCH_CalcCoefficients+0xe6>
 8008ed4:	4620      	mov	r0, r4
 8008ed6:	581d      	ldr	r5, [r3, r0]
 8008ed8:	ee00 5a10 	vmov	s0, r5
 8008edc:	583d      	ldr	r5, [r7, r0]
 8008ede:	eef8 7ac0 	vcvt.f32.s32	s15, s0
 8008ee2:	ac00      	add	r4, sp, #0
 8008ee4:	ee00 5a10 	vmov	s0, r5
 8008ee8:	580d      	ldr	r5, [r1, r0]
 8008eea:	4404      	add	r4, r0
 8008eec:	edc4 7a00 	vstr	s15, [r4]
 8008ef0:	eef8 7ac0 	vcvt.f32.s32	s15, s0
 8008ef4:	ac03      	add	r4, sp, #12
 8008ef6:	ee00 5a10 	vmov	s0, r5
 8008efa:	4404      	add	r4, r0
 8008efc:	5815      	ldr	r5, [r2, r0]
 8008efe:	edc4 7a00 	vstr	s15, [r4]
 8008f02:	eef8 7ac0 	vcvt.f32.s32	s15, s0
 8008f06:	ac0c      	add	r4, sp, #48	; 0x30
 8008f08:	4404      	add	r4, r0
 8008f0a:	ee00 5a10 	vmov	s0, r5
 8008f0e:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
 8008f12:	ac0c      	add	r4, sp, #48	; 0x30
 8008f14:	4404      	add	r4, r0
 8008f16:	eef8 7ac0 	vcvt.f32.s32	s15, s0
 8008f1a:	3004      	adds	r0, #4
 8008f1c:	280c      	cmp	r0, #12
 8008f1e:	ed44 7a03 	vstr	s15, [r4, #-12]
 8008f22:	d1d8      	bne.n	8008ed6 <GUI_TOUCH_CalcCoefficients+0x96>
 8008f24:	e09b      	b.n	800905e <GUI_TOUCH_CalcCoefficients+0x21e>
 8008f26:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8008f2a:	44a1      	add	r9, r4
 8008f2c:	f04f 0800 	mov.w	r8, #0
 8008f30:	f849 8c0c 	str.w	r8, [r9, #-12]
 8008f34:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8008f38:	44a1      	add	r9, r4
 8008f3a:	f849 8c18 	str.w	r8, [r9, #-24]
 8008f3e:	f10d 090c 	add.w	r9, sp, #12
 8008f42:	44a1      	add	r9, r4
 8008f44:	f8c9 8000 	str.w	r8, [r9]
 8008f48:	f10d 0900 	add.w	r9, sp, #0
 8008f4c:	44a1      	add	r9, r4
 8008f4e:	3404      	adds	r4, #4
 8008f50:	2c0c      	cmp	r4, #12
 8008f52:	f8c9 8000 	str.w	r8, [r9]
 8008f56:	d1e6      	bne.n	8008f26 <GUI_TOUCH_CalcCoefficients+0xe6>
 8008f58:	ed9d 7a02 	vldr	s14, [sp, #8]
 8008f5c:	eddd 7a05 	vldr	s15, [sp, #20]
 8008f60:	eddd 3a08 	vldr	s7, [sp, #32]
 8008f64:	ed9d 4a0b 	vldr	s8, [sp, #44]	; 0x2c
 8008f68:	eddd 1a00 	vldr	s3, [sp]
 8008f6c:	eddd 5a01 	vldr	s11, [sp, #4]
 8008f70:	ed9d 2a04 	vldr	s4, [sp, #16]
 8008f74:	eddd 2a06 	vldr	s5, [sp, #24]
 8008f78:	ed9d 3a07 	vldr	s6, [sp, #28]
 8008f7c:	eddd 0a09 	vldr	s1, [sp, #36]	; 0x24
 8008f80:	ed9d 1a0a 	vldr	s2, [sp, #40]	; 0x28
 8008f84:	ea4f 0880 	mov.w	r8, r0, lsl #2
 8008f88:	2400      	movs	r4, #0
 8008f8a:	591d      	ldr	r5, [r3, r4]
 8008f8c:	ee00 5a10 	vmov	s0, r5
 8008f90:	593d      	ldr	r5, [r7, r4]
 8008f92:	eeb8 6ac0 	vcvt.f32.s32	s12, s0
 8008f96:	ee00 5a10 	vmov	s0, r5
 8008f9a:	590d      	ldr	r5, [r1, r4]
 8008f9c:	eef8 6ac0 	vcvt.f32.s32	s13, s0
 8008fa0:	ee00 5a10 	vmov	s0, r5
 8008fa4:	5915      	ldr	r5, [r2, r4]
 8008fa6:	eef8 4ac0 	vcvt.f32.s32	s9, s0
 8008faa:	ee00 5a10 	vmov	s0, r5
 8008fae:	eeb8 5ac0 	vcvt.f32.s32	s10, s0
 8008fb2:	eee6 2a24 	vfma.f32	s5, s12, s9
 8008fb6:	3404      	adds	r4, #4
 8008fb8:	4544      	cmp	r4, r8
 8008fba:	ee73 3aa4 	vadd.f32	s7, s7, s9
 8008fbe:	eea6 3aa4 	vfma.f32	s6, s13, s9
 8008fc2:	eef0 4a60 	vmov.f32	s9, s1
 8008fc6:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008fca:	eee6 1a06 	vfma.f32	s3, s12, s12
 8008fce:	eee6 5a26 	vfma.f32	s11, s12, s13
 8008fd2:	eee6 4a05 	vfma.f32	s9, s12, s10
 8008fd6:	eeb0 6a41 	vmov.f32	s12, s2
 8008fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fde:	ee34 4a05 	vadd.f32	s8, s8, s10
 8008fe2:	eea6 2aa6 	vfma.f32	s4, s13, s13
 8008fe6:	eea6 6a85 	vfma.f32	s12, s13, s10
 8008fea:	d004      	beq.n	8008ff6 <GUI_TOUCH_CalcCoefficients+0x1b6>
 8008fec:	eef0 0a64 	vmov.f32	s1, s9
 8008ff0:	eeb0 1a46 	vmov.f32	s2, s12
 8008ff4:	e7c9      	b.n	8008f8a <GUI_TOUCH_CalcCoefficients+0x14a>
 8008ff6:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8008ffa:	ee05 0a10 	vmov	s10, r0
 8008ffe:	edcd 6a01 	vstr	s13, [sp, #4]
 8009002:	eef8 6ac5 	vcvt.f32.s32	s13, s10
 8009006:	eec1 1a87 	vdiv.f32	s3, s3, s14
 800900a:	eec5 5a87 	vdiv.f32	s11, s11, s14
 800900e:	ee82 2a27 	vdiv.f32	s4, s4, s15
 8009012:	eec2 2a87 	vdiv.f32	s5, s5, s14
 8009016:	ee83 3a27 	vdiv.f32	s6, s6, s15
 800901a:	eec4 4a87 	vdiv.f32	s9, s9, s14
 800901e:	ee86 6a27 	vdiv.f32	s12, s12, s15
 8009022:	ee87 7a26 	vdiv.f32	s14, s14, s13
 8009026:	eec7 7aa6 	vdiv.f32	s15, s15, s13
 800902a:	eec3 3aa6 	vdiv.f32	s7, s7, s13
 800902e:	eec4 6a26 	vdiv.f32	s13, s8, s13
 8009032:	edcd 1a00 	vstr	s3, [sp]
 8009036:	edcd 5a03 	vstr	s11, [sp, #12]
 800903a:	ed8d 2a04 	vstr	s4, [sp, #16]
 800903e:	edcd 2a06 	vstr	s5, [sp, #24]
 8009042:	ed8d 3a07 	vstr	s6, [sp, #28]
 8009046:	edcd 4a09 	vstr	s9, [sp, #36]	; 0x24
 800904a:	ed8d 6a0a 	vstr	s12, [sp, #40]	; 0x28
 800904e:	ed8d 7a02 	vstr	s14, [sp, #8]
 8009052:	edcd 7a05 	vstr	s15, [sp, #20]
 8009056:	edcd 3a08 	vstr	s7, [sp, #32]
 800905a:	edcd 6a0b 	vstr	s13, [sp, #44]	; 0x2c
 800905e:	ed9d 7a02 	vldr	s14, [sp, #8]
 8009062:	eddd 4a05 	vldr	s9, [sp, #20]
 8009066:	ed9d 6a01 	vldr	s12, [sp, #4]
 800906a:	ed9d 3a03 	vldr	s6, [sp, #12]
 800906e:	eddd 5a00 	vldr	s11, [sp]
 8009072:	eddd 2a04 	vldr	s5, [sp, #16]
 8009076:	ee76 6a47 	vsub.f32	s13, s12, s14
 800907a:	ee73 1a64 	vsub.f32	s3, s6, s9
 800907e:	ee35 2ac7 	vsub.f32	s4, s11, s14
 8009082:	ee32 1ae4 	vsub.f32	s2, s5, s9
 8009086:	ee61 7ae6 	vnmul.f32	s15, s3, s13
 800908a:	eee2 7a01 	vfma.f32	s15, s4, s2
 800908e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009096:	d063      	beq.n	8009160 <GUI_TOUCH_CalcCoefficients+0x320>
 8009098:	ed9d 4a08 	vldr	s8, [sp, #32]
 800909c:	eddd 0a07 	vldr	s1, [sp, #28]
 80090a0:	eddd 3a06 	vldr	s7, [sp, #24]
 80090a4:	4b53      	ldr	r3, [pc, #332]	; (80091f4 <GUI_TOUCH_CalcCoefficients+0x3b4>)
 80090a6:	ee30 8ac4 	vsub.f32	s16, s1, s8
 80090aa:	ee33 5ac4 	vsub.f32	s10, s7, s8
 80090ae:	ee21 0ac8 	vnmul.f32	s0, s3, s16
 80090b2:	eea5 0a01 	vfma.f32	s0, s10, s2
 80090b6:	ee26 5ac5 	vnmul.f32	s10, s13, s10
 80090ba:	ee80 0a27 	vdiv.f32	s0, s0, s15
 80090be:	eea8 5a02 	vfma.f32	s10, s16, s4
 80090c2:	ed83 0a00 	vstr	s0, [r3]
 80090c6:	ee85 5a27 	vdiv.f32	s10, s10, s15
 80090ca:	ed83 5a01 	vstr	s10, [r3, #4]
 80090ce:	ee23 5ac7 	vnmul.f32	s10, s7, s14
 80090d2:	eea5 5a84 	vfma.f32	s10, s11, s8
 80090d6:	ee24 4a46 	vnmul.f32	s8, s8, s12
 80090da:	ee22 5a85 	vmul.f32	s10, s5, s10
 80090de:	eea7 4a20 	vfma.f32	s8, s14, s1
 80090e2:	eea3 5a04 	vfma.f32	s10, s6, s8
 80090e6:	ee20 4ae5 	vnmul.f32	s8, s1, s11
 80090ea:	eea6 4a23 	vfma.f32	s8, s12, s7
 80090ee:	eddd 3a0a 	vldr	s7, [sp, #40]	; 0x28
 80090f2:	eea4 5a84 	vfma.f32	s10, s9, s8
 80090f6:	ed9d 4a09 	vldr	s8, [sp, #36]	; 0x24
 80090fa:	ee85 5a27 	vdiv.f32	s10, s10, s15
 80090fe:	ed83 5a02 	vstr	s10, [r3, #8]
 8009102:	ed9d 5a0b 	vldr	s10, [sp, #44]	; 0x2c
 8009106:	ee34 0a45 	vsub.f32	s0, s8, s10
 800910a:	ee73 0ac5 	vsub.f32	s1, s7, s10
 800910e:	ee66 6ac0 	vnmul.f32	s13, s13, s0
 8009112:	ee61 1ae0 	vnmul.f32	s3, s3, s1
 8009116:	eee0 6a82 	vfma.f32	s13, s1, s4
 800911a:	eee0 1a01 	vfma.f32	s3, s0, s2
 800911e:	eec6 6aa7 	vdiv.f32	s13, s13, s15
 8009122:	eec1 1aa7 	vdiv.f32	s3, s3, s15
 8009126:	edc3 6a04 	vstr	s13, [r3, #16]
 800912a:	ee64 6a47 	vnmul.f32	s13, s8, s14
 800912e:	edc3 1a03 	vstr	s3, [r3, #12]
 8009132:	eee5 6a85 	vfma.f32	s13, s11, s10
 8009136:	ee25 5a46 	vnmul.f32	s10, s10, s12
 800913a:	ee62 6aa6 	vmul.f32	s13, s5, s13
 800913e:	eea7 5a23 	vfma.f32	s10, s14, s7
 8009142:	ee63 5ae5 	vnmul.f32	s11, s7, s11
 8009146:	eee3 6a05 	vfma.f32	s13, s6, s10
 800914a:	eee6 5a04 	vfma.f32	s11, s12, s8
 800914e:	eee4 6aa5 	vfma.f32	s13, s9, s11
 8009152:	eec6 7aa7 	vdiv.f32	s15, s13, s15
 8009156:	edc3 7a05 	vstr	s15, [r3, #20]
 800915a:	2301      	movs	r3, #1
 800915c:	f8cc 3000 	str.w	r3, [ip]
 8009160:	f8dc 0000 	ldr.w	r0, [ip]
 8009164:	2800      	cmp	r0, #0
 8009166:	f000 80a7 	beq.w	80092b8 <GUI_TOUCH_CalcCoefficients+0x478>
 800916a:	4b23      	ldr	r3, [pc, #140]	; (80091f8 <GUI_TOUCH_CalcCoefficients+0x3b8>)
 800916c:	eddf 7a23 	vldr	s15, [pc, #140]	; 80091fc <GUI_TOUCH_CalcCoefficients+0x3bc>
 8009170:	601e      	str	r6, [r3, #0]
 8009172:	4b23      	ldr	r3, [pc, #140]	; (8009200 <GUI_TOUCH_CalcCoefficients+0x3c0>)
 8009174:	f8c3 a000 	str.w	sl, [r3]
 8009178:	4b1e      	ldr	r3, [pc, #120]	; (80091f4 <GUI_TOUCH_CalcCoefficients+0x3b4>)
 800917a:	ed93 7a00 	vldr	s14, [r3]
 800917e:	eeb4 7a67 	vcmp.f32	s14, s15
 8009182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009186:	d012      	beq.n	80091ae <GUI_TOUCH_CalcCoefficients+0x36e>
 8009188:	edd3 6a01 	vldr	s13, [r3, #4]
 800918c:	eee6 7ae7 	vfms.f32	s15, s13, s15
 8009190:	edd3 6a02 	vldr	s13, [r3, #8]
 8009194:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009198:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800919c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80091a0:	eec7 7a87 	vdiv.f32	s15, s15, s14
 80091a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80091a8:	ee17 1a90 	vmov	r1, s15
 80091ac:	e001      	b.n	80091b2 <GUI_TOUCH_CalcCoefficients+0x372>
 80091ae:	f04f 31ff 	mov.w	r1, #4294967295
 80091b2:	edd3 7a04 	vldr	s15, [r3, #16]
 80091b6:	eddf 6a11 	vldr	s13, [pc, #68]	; 80091fc <GUI_TOUCH_CalcCoefficients+0x3bc>
 80091ba:	4c12      	ldr	r4, [pc, #72]	; (8009204 <GUI_TOUCH_CalcCoefficients+0x3c4>)
 80091bc:	4a0d      	ldr	r2, [pc, #52]	; (80091f4 <GUI_TOUCH_CalcCoefficients+0x3b4>)
 80091be:	6021      	str	r1, [r4, #0]
 80091c0:	eef4 7a66 	vcmp.f32	s15, s13
 80091c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091c8:	4627      	mov	r7, r4
 80091ca:	d01f      	beq.n	800920c <GUI_TOUCH_CalcCoefficients+0x3cc>
 80091cc:	ed92 6a03 	vldr	s12, [r2, #12]
 80091d0:	eee6 6a66 	vfms.f32	s13, s12, s13
 80091d4:	ed92 6a05 	vldr	s12, [r2, #20]
 80091d8:	ee76 6ac6 	vsub.f32	s13, s13, s12
 80091dc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80091e0:	ee76 6ac6 	vsub.f32	s13, s13, s12
 80091e4:	eec6 6aa7 	vdiv.f32	s13, s13, s15
 80091e8:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 80091ec:	ee16 2a90 	vmov	r2, s13
 80091f0:	e00e      	b.n	8009210 <GUI_TOUCH_CalcCoefficients+0x3d0>
 80091f2:	bf00      	nop
 80091f4:	200190d8 	.word	0x200190d8
 80091f8:	200190cc 	.word	0x200190cc
 80091fc:	00000000 	.word	0x00000000
 8009200:	200190d0 	.word	0x200190d0
 8009204:	200190c4 	.word	0x200190c4
 8009208:	200190d4 	.word	0x200190d4
 800920c:	f04f 32ff 	mov.w	r2, #4294967295
 8009210:	4c2e      	ldr	r4, [pc, #184]	; (80092cc <GUI_TOUCH_CalcCoefficients+0x48c>)
 8009212:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8009216:	3e01      	subs	r6, #1
 8009218:	f10a 3aff 	add.w	sl, sl, #4294967295
 800921c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009220:	ee05 6a90 	vmov	s11, r6
 8009224:	6022      	str	r2, [r4, #0]
 8009226:	ee06 aa10 	vmov	s12, sl
 800922a:	4626      	mov	r6, r4
 800922c:	d016      	beq.n	800925c <GUI_TOUCH_CalcCoefficients+0x41c>
 800922e:	ed93 5a01 	vldr	s10, [r3, #4]
 8009232:	eef8 4ac6 	vcvt.f32.s32	s9, s12
 8009236:	eef8 6ae5 	vcvt.f32.s32	s13, s11
 800923a:	eee4 6ac5 	vfms.f32	s13, s9, s10
 800923e:	ed93 5a02 	vldr	s10, [r3, #8]
 8009242:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8009246:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 800924a:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800924e:	ee86 7a87 	vdiv.f32	s14, s13, s14
 8009252:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8009256:	ee17 4a10 	vmov	r4, s14
 800925a:	e001      	b.n	8009260 <GUI_TOUCH_CalcCoefficients+0x420>
 800925c:	f04f 34ff 	mov.w	r4, #4294967295
 8009260:	4d1b      	ldr	r5, [pc, #108]	; (80092d0 <GUI_TOUCH_CalcCoefficients+0x490>)
 8009262:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800926a:	602c      	str	r4, [r5, #0]
 800926c:	46ac      	mov	ip, r5
 800926e:	d016      	beq.n	800929e <GUI_TOUCH_CalcCoefficients+0x45e>
 8009270:	edd3 6a03 	vldr	s13, [r3, #12]
 8009274:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8009278:	eeb8 7ac6 	vcvt.f32.s32	s14, s12
 800927c:	eea5 7ae6 	vfms.f32	s14, s11, s13
 8009280:	edd3 6a05 	vldr	s13, [r3, #20]
 8009284:	ee37 7a66 	vsub.f32	s14, s14, s13
 8009288:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800928c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8009290:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8009294:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009298:	ee17 3a90 	vmov	r3, s15
 800929c:	e001      	b.n	80092a2 <GUI_TOUCH_CalcCoefficients+0x462>
 800929e:	f04f 33ff 	mov.w	r3, #4294967295
 80092a2:	42a1      	cmp	r1, r4
 80092a4:	4d0b      	ldr	r5, [pc, #44]	; (80092d4 <GUI_TOUCH_CalcCoefficients+0x494>)
 80092a6:	bfc4      	itt	gt
 80092a8:	603c      	strgt	r4, [r7, #0]
 80092aa:	f8cc 1000 	strgt.w	r1, [ip]
 80092ae:	429a      	cmp	r2, r3
 80092b0:	602b      	str	r3, [r5, #0]
 80092b2:	bfc4      	itt	gt
 80092b4:	6033      	strgt	r3, [r6, #0]
 80092b6:	602a      	strgt	r2, [r5, #0]
 80092b8:	f1d0 0001 	rsbs	r0, r0, #1
 80092bc:	bf38      	it	cc
 80092be:	2000      	movcc	r0, #0
 80092c0:	b00c      	add	sp, #48	; 0x30
 80092c2:	ecbd 8b02 	vpop	{d8}
 80092c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092ca:	bf00      	nop
 80092cc:	200190c8 	.word	0x200190c8
 80092d0:	200190f4 	.word	0x200190f4
 80092d4:	200190f0 	.word	0x200190f0

080092d8 <GUI_SetTextMode>:
 80092d8:	4b03      	ldr	r3, [pc, #12]	; (80092e8 <GUI_SetTextMode+0x10>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	; 0x2a
 80092e0:	8558      	strh	r0, [r3, #42]	; 0x2a
 80092e2:	4610      	mov	r0, r2
 80092e4:	4770      	bx	lr
 80092e6:	bf00      	nop
 80092e8:	20000018 	.word	0x20000018

080092ec <GUI_SetFont>:
 80092ec:	4b03      	ldr	r3, [pc, #12]	; (80092fc <GUI_SetFont+0x10>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	69d9      	ldr	r1, [r3, #28]
 80092f2:	b100      	cbz	r0, 80092f6 <GUI_SetFont+0xa>
 80092f4:	61d8      	str	r0, [r3, #28]
 80092f6:	4608      	mov	r0, r1
 80092f8:	4770      	bx	lr
 80092fa:	bf00      	nop
 80092fc:	20000018 	.word	0x20000018

08009300 <GUI_SetDrawMode>:
 8009300:	f7ff b896 	b.w	8008430 <LCD_SetDrawMode>

08009304 <GUI_SetBkColor>:
 8009304:	f7ff bbdc 	b.w	8008ac0 <LCD_SetBkColor>

08009308 <GUI_SetColor>:
 8009308:	f7ff bbe2 	b.w	8008ad0 <LCD_SetColor>

0800930c <GUI_SelectLayer>:
 800930c:	b570      	push	{r4, r5, r6, lr}
 800930e:	4d08      	ldr	r5, [pc, #32]	; (8009330 <GUI_SelectLayer+0x24>)
 8009310:	682b      	ldr	r3, [r5, #0]
 8009312:	2801      	cmp	r0, #1
 8009314:	4604      	mov	r4, r0
 8009316:	7c5e      	ldrb	r6, [r3, #17]
 8009318:	d808      	bhi.n	800932c <GUI_SelectLayer+0x20>
 800931a:	f000 fb83 	bl	8009a24 <GUI_DEVICE__GetpDriver>
 800931e:	b128      	cbz	r0, 800932c <GUI_SelectLayer+0x20>
 8009320:	682b      	ldr	r3, [r5, #0]
 8009322:	745c      	strb	r4, [r3, #17]
 8009324:	f000 f808 	bl	8009338 <GUI_SelectLCD>
 8009328:	4b02      	ldr	r3, [pc, #8]	; (8009334 <GUI_SelectLayer+0x28>)
 800932a:	601c      	str	r4, [r3, #0]
 800932c:	4630      	mov	r0, r6
 800932e:	bd70      	pop	{r4, r5, r6, pc}
 8009330:	20000018 	.word	0x20000018
 8009334:	200195c8 	.word	0x200195c8

08009338 <GUI_SelectLCD>:
 8009338:	b508      	push	{r3, lr}
 800933a:	f002 fe2b 	bl	800bf94 <LCD_SelectLCD>
 800933e:	f7fe ff1d 	bl	800817c <LCD_UpdateColorIndices>
 8009342:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009346:	f7fd bc17 	b.w	8006b78 <WM_Activate>

0800934a <GUI_RectsIntersect>:
 800934a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800934e:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8009352:	429a      	cmp	r2, r3
 8009354:	dc14      	bgt.n	8009380 <GUI_RectsIntersect+0x36>
 8009356:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 800935a:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800935e:	429a      	cmp	r2, r3
 8009360:	dc0e      	bgt.n	8009380 <GUI_RectsIntersect+0x36>
 8009362:	f9b0 2000 	ldrsh.w	r2, [r0]
 8009366:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800936a:	429a      	cmp	r2, r3
 800936c:	dc08      	bgt.n	8009380 <GUI_RectsIntersect+0x36>
 800936e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8009372:	f9b1 2000 	ldrsh.w	r2, [r1]
 8009376:	429a      	cmp	r2, r3
 8009378:	bfcc      	ite	gt
 800937a:	2000      	movgt	r0, #0
 800937c:	2001      	movle	r0, #1
 800937e:	4770      	bx	lr
 8009380:	2000      	movs	r0, #0
 8009382:	4770      	bx	lr

08009384 <GUI_SetPenSize>:
 8009384:	4b02      	ldr	r3, [pc, #8]	; (8009390 <GUI_SetPenSize+0xc>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	7e1a      	ldrb	r2, [r3, #24]
 800938a:	7618      	strb	r0, [r3, #24]
 800938c:	4610      	mov	r0, r2
 800938e:	4770      	bx	lr
 8009390:	20000018 	.word	0x20000018

08009394 <GUI_StoreKey>:
 8009394:	4b02      	ldr	r3, [pc, #8]	; (80093a0 <GUI_StoreKey+0xc>)
 8009396:	681a      	ldr	r2, [r3, #0]
 8009398:	b902      	cbnz	r2, 800939c <GUI_StoreKey+0x8>
 800939a:	6018      	str	r0, [r3, #0]
 800939c:	f7ff bcc4 	b.w	8008d28 <GUI_SignalEvent>
 80093a0:	200190f8 	.word	0x200190f8

080093a4 <GUI_MoveRect>:
 80093a4:	b168      	cbz	r0, 80093c2 <GUI_MoveRect+0x1e>
 80093a6:	8803      	ldrh	r3, [r0, #0]
 80093a8:	b289      	uxth	r1, r1
 80093aa:	440b      	add	r3, r1
 80093ac:	8003      	strh	r3, [r0, #0]
 80093ae:	8883      	ldrh	r3, [r0, #4]
 80093b0:	4419      	add	r1, r3
 80093b2:	8843      	ldrh	r3, [r0, #2]
 80093b4:	8081      	strh	r1, [r0, #4]
 80093b6:	b292      	uxth	r2, r2
 80093b8:	4413      	add	r3, r2
 80093ba:	8043      	strh	r3, [r0, #2]
 80093bc:	88c3      	ldrh	r3, [r0, #6]
 80093be:	441a      	add	r2, r3
 80093c0:	80c2      	strh	r2, [r0, #6]
 80093c2:	4770      	bx	lr

080093c4 <GUI_MergeRect>:
 80093c4:	b510      	push	{r4, lr}
 80093c6:	b338      	cbz	r0, 8009418 <GUI_MergeRect+0x54>
 80093c8:	b309      	cbz	r1, 800940e <GUI_MergeRect+0x4a>
 80093ca:	b30a      	cbz	r2, 8009410 <GUI_MergeRect+0x4c>
 80093cc:	f9b1 4000 	ldrsh.w	r4, [r1]
 80093d0:	f9b2 3000 	ldrsh.w	r3, [r2]
 80093d4:	429c      	cmp	r4, r3
 80093d6:	bfb8      	it	lt
 80093d8:	4623      	movlt	r3, r4
 80093da:	8003      	strh	r3, [r0, #0]
 80093dc:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 80093e0:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 80093e4:	429c      	cmp	r4, r3
 80093e6:	bfb8      	it	lt
 80093e8:	4623      	movlt	r3, r4
 80093ea:	8043      	strh	r3, [r0, #2]
 80093ec:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 80093f0:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 80093f4:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 80093f8:	429c      	cmp	r4, r3
 80093fa:	bfa8      	it	ge
 80093fc:	4623      	movge	r3, r4
 80093fe:	8083      	strh	r3, [r0, #4]
 8009400:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8009404:	4299      	cmp	r1, r3
 8009406:	bfa8      	it	ge
 8009408:	460b      	movge	r3, r1
 800940a:	80c3      	strh	r3, [r0, #6]
 800940c:	bd10      	pop	{r4, pc}
 800940e:	4611      	mov	r1, r2
 8009410:	680b      	ldr	r3, [r1, #0]
 8009412:	6003      	str	r3, [r0, #0]
 8009414:	684b      	ldr	r3, [r1, #4]
 8009416:	6043      	str	r3, [r0, #4]
 8009418:	bd10      	pop	{r4, pc}
	...

0800941c <GUI_GotoXY>:
 800941c:	4b02      	ldr	r3, [pc, #8]	; (8009428 <GUI_GotoXY+0xc>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	8458      	strh	r0, [r3, #34]	; 0x22
 8009422:	8499      	strh	r1, [r3, #36]	; 0x24
 8009424:	2000      	movs	r0, #0
 8009426:	4770      	bx	lr
 8009428:	20000018 	.word	0x20000018

0800942c <_SetLineColor>:
 800942c:	4b1e      	ldr	r3, [pc, #120]	; (80094a8 <_SetLineColor+0x7c>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	7e9b      	ldrb	r3, [r3, #26]
 8009432:	3b01      	subs	r3, #1
 8009434:	2b03      	cmp	r3, #3
 8009436:	d832      	bhi.n	800949e <_SetLineColor+0x72>
 8009438:	e8df f003 	tbb	[pc, r3]
 800943c:	221a0d02 	.word	0x221a0d02
 8009440:	4b1a      	ldr	r3, [pc, #104]	; (80094ac <_SetLineColor+0x80>)
 8009442:	3006      	adds	r0, #6
 8009444:	4003      	ands	r3, r0
 8009446:	2b00      	cmp	r3, #0
 8009448:	da03      	bge.n	8009452 <_SetLineColor+0x26>
 800944a:	3b01      	subs	r3, #1
 800944c:	f063 030f 	orn	r3, r3, #15
 8009450:	3301      	adds	r3, #1
 8009452:	2b0b      	cmp	r3, #11
 8009454:	e008      	b.n	8009468 <_SetLineColor+0x3c>
 8009456:	4b16      	ldr	r3, [pc, #88]	; (80094b0 <_SetLineColor+0x84>)
 8009458:	4003      	ands	r3, r0
 800945a:	2b00      	cmp	r3, #0
 800945c:	da03      	bge.n	8009466 <_SetLineColor+0x3a>
 800945e:	3b01      	subs	r3, #1
 8009460:	f063 0303 	orn	r3, r3, #3
 8009464:	3301      	adds	r3, #1
 8009466:	2b01      	cmp	r3, #1
 8009468:	bfcc      	ite	gt
 800946a:	2000      	movgt	r0, #0
 800946c:	2001      	movle	r0, #1
 800946e:	4770      	bx	lr
 8009470:	2314      	movs	r3, #20
 8009472:	fb90 f2f3 	sdiv	r2, r0, r3
 8009476:	fb03 0012 	mls	r0, r3, r2, r0
 800947a:	280b      	cmp	r0, #11
 800947c:	dc09      	bgt.n	8009492 <_SetLineColor+0x66>
 800947e:	e010      	b.n	80094a2 <_SetLineColor+0x76>
 8009480:	2318      	movs	r3, #24
 8009482:	fb90 f2f3 	sdiv	r2, r0, r3
 8009486:	fb03 0012 	mls	r0, r3, r2, r0
 800948a:	280b      	cmp	r0, #11
 800948c:	dd09      	ble.n	80094a2 <_SetLineColor+0x76>
 800948e:	f020 0004 	bic.w	r0, r0, #4
 8009492:	3810      	subs	r0, #16
 8009494:	2801      	cmp	r0, #1
 8009496:	bf8c      	ite	hi
 8009498:	2000      	movhi	r0, #0
 800949a:	2001      	movls	r0, #1
 800949c:	4770      	bx	lr
 800949e:	2000      	movs	r0, #0
 80094a0:	4770      	bx	lr
 80094a2:	2001      	movs	r0, #1
 80094a4:	4770      	bx	lr
 80094a6:	bf00      	nop
 80094a8:	20000018 	.word	0x20000018
 80094ac:	8000000f 	.word	0x8000000f
 80094b0:	80000003 	.word	0x80000003

080094b4 <GUI_sin>:
 80094b4:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80094b8:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80094bc:	bfc6      	itte	gt
 80094be:	f5a0 6000 	subgt.w	r0, r0, #2048	; 0x800
 80094c2:	2101      	movgt	r1, #1
 80094c4:	2100      	movle	r1, #0
 80094c6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80094ca:	bfc8      	it	gt
 80094cc:	f5c0 6000 	rsbgt	r0, r0, #2048	; 0x800
 80094d0:	f000 033f 	and.w	r3, r0, #63	; 0x3f
 80094d4:	b510      	push	{r4, lr}
 80094d6:	1182      	asrs	r2, r0, #6
 80094d8:	4c0b      	ldr	r4, [pc, #44]	; (8009508 <GUI_sin+0x54>)
 80094da:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80094de:	b29b      	uxth	r3, r3
 80094e0:	f834 0012 	ldrh.w	r0, [r4, r2, lsl #1]
 80094e4:	2b40      	cmp	r3, #64	; 0x40
 80094e6:	fb00 f003 	mul.w	r0, r0, r3
 80094ea:	d008      	beq.n	80094fe <GUI_sin+0x4a>
 80094ec:	2a10      	cmp	r2, #16
 80094ee:	d006      	beq.n	80094fe <GUI_sin+0x4a>
 80094f0:	3201      	adds	r2, #1
 80094f2:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80094f6:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
 80094fa:	fb03 0002 	mla	r0, r3, r2, r0
 80094fe:	3020      	adds	r0, #32
 8009500:	0980      	lsrs	r0, r0, #6
 8009502:	b101      	cbz	r1, 8009506 <GUI_sin+0x52>
 8009504:	4240      	negs	r0, r0
 8009506:	bd10      	pop	{r4, pc}
 8009508:	0800f40c 	.word	0x0800f40c

0800950c <GUI_cos>:
 800950c:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8009510:	f7ff bfd0 	b.w	80094b4 <GUI_sin>

08009514 <GL_DrawLine1Ex>:
 8009514:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009518:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800951c:	1a17      	subs	r7, r2, r0
 800951e:	1a5c      	subs	r4, r3, r1
 8009520:	ea54 0c07 	orrs.w	ip, r4, r7
 8009524:	4605      	mov	r5, r0
 8009526:	460e      	mov	r6, r1
 8009528:	f8d8 b000 	ldr.w	fp, [r8]
 800952c:	d104      	bne.n	8009538 <GL_DrawLine1Ex+0x24>
 800952e:	b003      	add	sp, #12
 8009530:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009534:	f002 bfa6 	b.w	800c484 <GL_DrawPoint>
 8009538:	ea87 70e7 	eor.w	r0, r7, r7, asr #31
 800953c:	eba0 70e7 	sub.w	r0, r0, r7, asr #31
 8009540:	ea84 71e4 	eor.w	r1, r4, r4, asr #31
 8009544:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 8009548:	4288      	cmp	r0, r1
 800954a:	db04      	blt.n	8009556 <GL_DrawLine1Ex+0x42>
 800954c:	4621      	mov	r1, r4
 800954e:	463c      	mov	r4, r7
 8009550:	460f      	mov	r7, r1
 8009552:	2100      	movs	r1, #0
 8009554:	e006      	b.n	8009564 <GL_DrawLine1Ex+0x50>
 8009556:	4611      	mov	r1, r2
 8009558:	461a      	mov	r2, r3
 800955a:	460b      	mov	r3, r1
 800955c:	4629      	mov	r1, r5
 800955e:	4635      	mov	r5, r6
 8009560:	460e      	mov	r6, r1
 8009562:	2101      	movs	r1, #1
 8009564:	9100      	str	r1, [sp, #0]
 8009566:	ea84 71e4 	eor.w	r1, r4, r4, asr #31
 800956a:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 800956e:	428c      	cmp	r4, r1
 8009570:	d008      	beq.n	8009584 <GL_DrawLine1Ex+0x70>
 8009572:	461e      	mov	r6, r3
 8009574:	462b      	mov	r3, r5
 8009576:	4264      	negs	r4, r4
 8009578:	4615      	mov	r5, r2
 800957a:	427f      	negs	r7, r7
 800957c:	461a      	mov	r2, r3
 800957e:	f04f 3aff 	mov.w	sl, #4294967295
 8009582:	e001      	b.n	8009588 <GL_DrawLine1Ex+0x74>
 8009584:	f04f 0a01 	mov.w	sl, #1
 8009588:	2f00      	cmp	r7, #0
 800958a:	f8df 9148 	ldr.w	r9, [pc, #328]	; 80096d4 <GL_DrawLine1Ex+0x1c0>
 800958e:	d13e      	bne.n	800960e <GL_DrawLine1Ex+0xfa>
 8009590:	9b00      	ldr	r3, [sp, #0]
 8009592:	b1d3      	cbz	r3, 80095ca <GL_DrawLine1Ex+0xb6>
 8009594:	f8d9 3000 	ldr.w	r3, [r9]
 8009598:	7e9b      	ldrb	r3, [r3, #26]
 800959a:	b98b      	cbnz	r3, 80095c0 <GL_DrawLine1Ex+0xac>
 800959c:	4630      	mov	r0, r6
 800959e:	4629      	mov	r1, r5
 80095a0:	b003      	add	sp, #12
 80095a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095a6:	f7fe bf9f 	b.w	80084e8 <LCD_DrawVLine>
 80095aa:	f7ff ff3f 	bl	800942c <_SetLineColor>
 80095ae:	b930      	cbnz	r0, 80095be <GL_DrawLine1Ex+0xaa>
 80095b0:	f8d9 3000 	ldr.w	r3, [r9]
 80095b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095b6:	4630      	mov	r0, r6
 80095b8:	685b      	ldr	r3, [r3, #4]
 80095ba:	1979      	adds	r1, r7, r5
 80095bc:	4798      	blx	r3
 80095be:	3701      	adds	r7, #1
 80095c0:	42a7      	cmp	r7, r4
 80095c2:	eb07 000b 	add.w	r0, r7, fp
 80095c6:	ddf0      	ble.n	80095aa <GL_DrawLine1Ex+0x96>
 80095c8:	e01d      	b.n	8009606 <GL_DrawLine1Ex+0xf2>
 80095ca:	f8d9 3000 	ldr.w	r3, [r9]
 80095ce:	7e99      	ldrb	r1, [r3, #26]
 80095d0:	b111      	cbz	r1, 80095d8 <GL_DrawLine1Ex+0xc4>
 80095d2:	f8dd a000 	ldr.w	sl, [sp]
 80095d6:	e012      	b.n	80095fe <GL_DrawLine1Ex+0xea>
 80095d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095da:	4628      	mov	r0, r5
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	4631      	mov	r1, r6
 80095e0:	4798      	blx	r3
 80095e2:	e074      	b.n	80096ce <GL_DrawLine1Ex+0x1ba>
 80095e4:	f7ff ff22 	bl	800942c <_SetLineColor>
 80095e8:	b938      	cbnz	r0, 80095fa <GL_DrawLine1Ex+0xe6>
 80095ea:	f8d9 3000 	ldr.w	r3, [r9]
 80095ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095f0:	eb0a 0005 	add.w	r0, sl, r5
 80095f4:	685b      	ldr	r3, [r3, #4]
 80095f6:	4631      	mov	r1, r6
 80095f8:	4798      	blx	r3
 80095fa:	f10a 0a01 	add.w	sl, sl, #1
 80095fe:	45a2      	cmp	sl, r4
 8009600:	eb0a 000b 	add.w	r0, sl, fp
 8009604:	ddee      	ble.n	80095e4 <GL_DrawLine1Ex+0xd0>
 8009606:	3801      	subs	r0, #1
 8009608:	f8c8 0000 	str.w	r0, [r8]
 800960c:	e05f      	b.n	80096ce <GL_DrawLine1Ex+0x1ba>
 800960e:	f8d9 1000 	ldr.w	r1, [r9]
 8009612:	f04f 0202 	mov.w	r2, #2
 8009616:	7e89      	ldrb	r1, [r1, #26]
 8009618:	fb94 f2f2 	sdiv	r2, r4, r2
 800961c:	bfb8      	it	lt
 800961e:	4252      	neglt	r2, r2
 8009620:	b9d9      	cbnz	r1, 800965a <GL_DrawLine1Ex+0x146>
 8009622:	4693      	mov	fp, r2
 8009624:	46a8      	mov	r8, r5
 8009626:	ebc5 0308 	rsb	r3, r5, r8
 800962a:	42a3      	cmp	r3, r4
 800962c:	dc4f      	bgt.n	80096ce <GL_DrawLine1Ex+0x1ba>
 800962e:	9b00      	ldr	r3, [sp, #0]
 8009630:	fb9b f1f4 	sdiv	r1, fp, r4
 8009634:	4431      	add	r1, r6
 8009636:	b92b      	cbnz	r3, 8009644 <GL_DrawLine1Ex+0x130>
 8009638:	f8d9 3000 	ldr.w	r3, [r9]
 800963c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800963e:	4640      	mov	r0, r8
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	e005      	b.n	8009650 <GL_DrawLine1Ex+0x13c>
 8009644:	f8d9 3000 	ldr.w	r3, [r9]
 8009648:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800964a:	685b      	ldr	r3, [r3, #4]
 800964c:	4608      	mov	r0, r1
 800964e:	4641      	mov	r1, r8
 8009650:	4798      	blx	r3
 8009652:	f108 0801 	add.w	r8, r8, #1
 8009656:	44bb      	add	fp, r7
 8009658:	e7e5      	b.n	8009626 <GL_DrawLine1Ex+0x112>
 800965a:	f1ba 3fff 	cmp.w	sl, #4294967295
 800965e:	bf04      	itt	eq
 8009660:	eb04 010b 	addeq.w	r1, r4, fp
 8009664:	f8c8 1000 	streq.w	r1, [r8]
 8009668:	9201      	str	r2, [sp, #4]
 800966a:	46ab      	mov	fp, r5
 800966c:	ebc5 010b 	rsb	r1, r5, fp
 8009670:	42a1      	cmp	r1, r4
 8009672:	f8d8 0000 	ldr.w	r0, [r8]
 8009676:	dc1e      	bgt.n	80096b6 <GL_DrawLine1Ex+0x1a2>
 8009678:	4450      	add	r0, sl
 800967a:	f8c8 0000 	str.w	r0, [r8]
 800967e:	f7ff fed5 	bl	800942c <_SetLineColor>
 8009682:	b980      	cbnz	r0, 80096a6 <GL_DrawLine1Ex+0x192>
 8009684:	f8dd c004 	ldr.w	ip, [sp, #4]
 8009688:	f8d9 0000 	ldr.w	r0, [r9]
 800968c:	9b00      	ldr	r3, [sp, #0]
 800968e:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8009690:	fb9c f1f4 	sdiv	r1, ip, r4
 8009694:	4431      	add	r1, r6
 8009696:	b913      	cbnz	r3, 800969e <GL_DrawLine1Ex+0x18a>
 8009698:	6843      	ldr	r3, [r0, #4]
 800969a:	4658      	mov	r0, fp
 800969c:	e002      	b.n	80096a4 <GL_DrawLine1Ex+0x190>
 800969e:	6843      	ldr	r3, [r0, #4]
 80096a0:	4608      	mov	r0, r1
 80096a2:	4659      	mov	r1, fp
 80096a4:	4798      	blx	r3
 80096a6:	f8dd c004 	ldr.w	ip, [sp, #4]
 80096aa:	44bc      	add	ip, r7
 80096ac:	f10b 0b01 	add.w	fp, fp, #1
 80096b0:	f8cd c004 	str.w	ip, [sp, #4]
 80096b4:	e7da      	b.n	800966c <GL_DrawLine1Ex+0x158>
 80096b6:	f1ba 3fff 	cmp.w	sl, #4294967295
 80096ba:	bf04      	itt	eq
 80096bc:	1824      	addeq	r4, r4, r0
 80096be:	f8c8 4000 	streq.w	r4, [r8]
 80096c2:	f8d8 2000 	ldr.w	r2, [r8]
 80096c6:	ebca 0302 	rsb	r3, sl, r2
 80096ca:	f8c8 3000 	str.w	r3, [r8]
 80096ce:	b003      	add	sp, #12
 80096d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096d4:	20000018 	.word	0x20000018

080096d8 <GL_DrawLineEx>:
 80096d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096dc:	4d67      	ldr	r5, [pc, #412]	; (800987c <GL_DrawLineEx+0x1a4>)
 80096de:	682c      	ldr	r4, [r5, #0]
 80096e0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80096e4:	f1bb 0f01 	cmp.w	fp, #1
 80096e8:	b087      	sub	sp, #28
 80096ea:	4681      	mov	r9, r0
 80096ec:	4688      	mov	r8, r1
 80096ee:	4617      	mov	r7, r2
 80096f0:	461e      	mov	r6, r3
 80096f2:	46aa      	mov	sl, r5
 80096f4:	d104      	bne.n	8009700 <GL_DrawLineEx+0x28>
 80096f6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80096f8:	9400      	str	r4, [sp, #0]
 80096fa:	f7ff ff0b 	bl	8009514 <GL_DrawLine1Ex>
 80096fe:	e0ba      	b.n	8009876 <GL_DrawLineEx+0x19e>
 8009700:	1a84      	subs	r4, r0, r2
 8009702:	1acd      	subs	r5, r1, r3
 8009704:	ea54 0305 	orrs.w	r3, r4, r5
 8009708:	f000 80b5 	beq.w	8009876 <GL_DrawLineEx+0x19e>
 800970c:	2c00      	cmp	r4, #0
 800970e:	bfba      	itte	lt
 8009710:	4264      	neglt	r4, r4
 8009712:	2301      	movlt	r3, #1
 8009714:	2300      	movge	r3, #0
 8009716:	2d00      	cmp	r5, #0
 8009718:	bfbc      	itt	lt
 800971a:	426d      	neglt	r5, r5
 800971c:	f043 0302 	orrlt.w	r3, r3, #2
 8009720:	42a5      	cmp	r5, r4
 8009722:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009726:	dd04      	ble.n	8009732 <GL_DrawLineEx+0x5a>
 8009728:	4622      	mov	r2, r4
 800972a:	f043 0304 	orr.w	r3, r3, #4
 800972e:	462c      	mov	r4, r5
 8009730:	4615      	mov	r5, r2
 8009732:	2202      	movs	r2, #2
 8009734:	fb94 f2f2 	sdiv	r2, r4, r2
 8009738:	eb02 2585 	add.w	r5, r2, r5, lsl #10
 800973c:	fb95 f4f4 	sdiv	r4, r5, r4
 8009740:	11a1      	asrs	r1, r4, #6
 8009742:	4a4f      	ldr	r2, [pc, #316]	; (8009880 <GL_DrawLineEx+0x1a8>)
 8009744:	f3c4 0483 	ubfx	r4, r4, #2, #4
 8009748:	f1c4 0510 	rsb	r5, r4, #16
 800974c:	f932 0011 	ldrsh.w	r0, [r2, r1, lsl #1]
 8009750:	2d10      	cmp	r5, #16
 8009752:	fb05 f000 	mul.w	r0, r5, r0
 8009756:	d004      	beq.n	8009762 <GL_DrawLineEx+0x8a>
 8009758:	3101      	adds	r1, #1
 800975a:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 800975e:	fb04 0002 	mla	r0, r4, r2, r0
 8009762:	2210      	movs	r2, #16
 8009764:	3008      	adds	r0, #8
 8009766:	fb90 f0f2 	sdiv	r0, r0, r2
 800976a:	0759      	lsls	r1, r3, #29
 800976c:	bf48      	it	mi
 800976e:	f5c0 6080 	rsbmi	r0, r0, #1024	; 0x400
 8009772:	07da      	lsls	r2, r3, #31
 8009774:	bf48      	it	mi
 8009776:	f5c0 6000 	rsbmi	r0, r0, #2048	; 0x800
 800977a:	079b      	lsls	r3, r3, #30
 800977c:	bf48      	it	mi
 800977e:	f5c0 5080 	rsbmi	r0, r0, #4096	; 0x1000
 8009782:	f500 6580 	add.w	r5, r0, #1024	; 0x400
 8009786:	4628      	mov	r0, r5
 8009788:	f7ff fec0 	bl	800950c <GUI_cos>
 800978c:	fb00 f40b 	mul.w	r4, r0, fp
 8009790:	4628      	mov	r0, r5
 8009792:	f7ff fe8f 	bl	80094b4 <GUI_sin>
 8009796:	2c00      	cmp	r4, #0
 8009798:	fb00 f00b 	mul.w	r0, r0, fp
 800979c:	da04      	bge.n	80097a8 <GL_DrawLineEx+0xd0>
 800979e:	f5c4 7300 	rsb	r3, r4, #512	; 0x200
 80097a2:	129b      	asrs	r3, r3, #10
 80097a4:	425b      	negs	r3, r3
 80097a6:	e002      	b.n	80097ae <GL_DrawLineEx+0xd6>
 80097a8:	f504 7300 	add.w	r3, r4, #512	; 0x200
 80097ac:	129b      	asrs	r3, r3, #10
 80097ae:	2800      	cmp	r0, #0
 80097b0:	da06      	bge.n	80097c0 <GL_DrawLineEx+0xe8>
 80097b2:	f5c0 7b00 	rsb	fp, r0, #512	; 0x200
 80097b6:	ea4f 2bab 	mov.w	fp, fp, asr #10
 80097ba:	f1cb 0b00 	rsb	fp, fp, #0
 80097be:	e003      	b.n	80097c8 <GL_DrawLineEx+0xf0>
 80097c0:	f500 7b00 	add.w	fp, r0, #512	; 0x200
 80097c4:	ea4f 2bab 	mov.w	fp, fp, asr #10
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	dd03      	ble.n	80097d4 <GL_DrawLineEx+0xfc>
 80097cc:	1c58      	adds	r0, r3, #1
 80097ce:	1040      	asrs	r0, r0, #1
 80097d0:	105b      	asrs	r3, r3, #1
 80097d2:	e005      	b.n	80097e0 <GL_DrawLineEx+0x108>
 80097d4:	2202      	movs	r2, #2
 80097d6:	fb93 f0f2 	sdiv	r0, r3, r2
 80097da:	3b01      	subs	r3, #1
 80097dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80097e0:	f1bb 0f00 	cmp.w	fp, #0
 80097e4:	dd05      	ble.n	80097f2 <GL_DrawLineEx+0x11a>
 80097e6:	f10b 0201 	add.w	r2, fp, #1
 80097ea:	1052      	asrs	r2, r2, #1
 80097ec:	ea4f 0b6b 	mov.w	fp, fp, asr #1
 80097f0:	e006      	b.n	8009800 <GL_DrawLineEx+0x128>
 80097f2:	2102      	movs	r1, #2
 80097f4:	fb9b f2f1 	sdiv	r2, fp, r1
 80097f8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80097fc:	fb9b fbf1 	sdiv	fp, fp, r1
 8009800:	b280      	uxth	r0, r0
 8009802:	fa1f f489 	uxth.w	r4, r9
 8009806:	1901      	adds	r1, r0, r4
 8009808:	b292      	uxth	r2, r2
 800980a:	f8ad 1008 	strh.w	r1, [sp, #8]
 800980e:	fa1f fb8b 	uxth.w	fp, fp
 8009812:	fa1f f188 	uxth.w	r1, r8
 8009816:	1855      	adds	r5, r2, r1
 8009818:	ebcb 0101 	rsb	r1, fp, r1
 800981c:	b29b      	uxth	r3, r3
 800981e:	f8ad 100e 	strh.w	r1, [sp, #14]
 8009822:	b2b9      	uxth	r1, r7
 8009824:	1ae4      	subs	r4, r4, r3
 8009826:	1acb      	subs	r3, r1, r3
 8009828:	f8ad 3010 	strh.w	r3, [sp, #16]
 800982c:	b2b3      	uxth	r3, r6
 800982e:	4401      	add	r1, r0
 8009830:	ebcb 0b03 	rsb	fp, fp, r3
 8009834:	4413      	add	r3, r2
 8009836:	2200      	movs	r2, #0
 8009838:	f8ad 1014 	strh.w	r1, [sp, #20]
 800983c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009840:	a802      	add	r0, sp, #8
 8009842:	4613      	mov	r3, r2
 8009844:	2104      	movs	r1, #4
 8009846:	f8ad 500a 	strh.w	r5, [sp, #10]
 800984a:	f8ad 400c 	strh.w	r4, [sp, #12]
 800984e:	f8ad b012 	strh.w	fp, [sp, #18]
 8009852:	f002 fd35 	bl	800c2c0 <GL_FillPolygon>
 8009856:	f8da 3000 	ldr.w	r3, [sl]
 800985a:	7e5b      	ldrb	r3, [r3, #25]
 800985c:	b91b      	cbnz	r3, 8009866 <GL_DrawLineEx+0x18e>
 800985e:	4648      	mov	r0, r9
 8009860:	4641      	mov	r1, r8
 8009862:	f002 fe0f 	bl	800c484 <GL_DrawPoint>
 8009866:	f8da 3000 	ldr.w	r3, [sl]
 800986a:	7e5b      	ldrb	r3, [r3, #25]
 800986c:	b91b      	cbnz	r3, 8009876 <GL_DrawLineEx+0x19e>
 800986e:	4638      	mov	r0, r7
 8009870:	4631      	mov	r1, r6
 8009872:	f002 fe07 	bl	800c484 <GL_DrawPoint>
 8009876:	b007      	add	sp, #28
 8009878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800987c:	20000018 	.word	0x20000018
 8009880:	0800f42e 	.word	0x0800f42e

08009884 <GL_DrawLine>:
 8009884:	b530      	push	{r4, r5, lr}
 8009886:	b085      	sub	sp, #20
 8009888:	ac04      	add	r4, sp, #16
 800988a:	2500      	movs	r5, #0
 800988c:	f844 5d04 	str.w	r5, [r4, #-4]!
 8009890:	9400      	str	r4, [sp, #0]
 8009892:	f7ff ff21 	bl	80096d8 <GL_DrawLineEx>
 8009896:	b005      	add	sp, #20
 8009898:	bd30      	pop	{r4, r5, pc}
	...

0800989c <GUI_DrawLine>:
 800989c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098a0:	461e      	mov	r6, r3
 80098a2:	4b0c      	ldr	r3, [pc, #48]	; (80098d4 <GUI_DrawLine+0x38>)
 80098a4:	681c      	ldr	r4, [r3, #0]
 80098a6:	4681      	mov	r9, r0
 80098a8:	2000      	movs	r0, #0
 80098aa:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80098ac:	6d24      	ldr	r4, [r4, #80]	; 0x50
 80098ae:	4688      	mov	r8, r1
 80098b0:	4617      	mov	r7, r2
 80098b2:	f7fd f8e3 	bl	8006a7c <WM__InitIVRSearch>
 80098b6:	b150      	cbz	r0, 80098ce <GUI_DrawLine+0x32>
 80098b8:	eb09 0005 	add.w	r0, r9, r5
 80098bc:	eb08 0104 	add.w	r1, r8, r4
 80098c0:	197a      	adds	r2, r7, r5
 80098c2:	1933      	adds	r3, r6, r4
 80098c4:	f7ff ffde 	bl	8009884 <GL_DrawLine>
 80098c8:	f7fd f816 	bl	80068f8 <WM__GetNextIVR>
 80098cc:	e7f3      	b.n	80098b6 <GUI_DrawLine+0x1a>
 80098ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098d2:	bf00      	nop
 80098d4:	20000018 	.word	0x20000018

080098d8 <GUI_DispStringHCenterAt>:
 80098d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098da:	4b0b      	ldr	r3, [pc, #44]	; (8009908 <GUI_DispStringHCenterAt+0x30>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4605      	mov	r5, r0
 80098e0:	f9b3 002c 	ldrsh.w	r0, [r3, #44]	; 0x2c
 80098e4:	f040 0002 	orr.w	r0, r0, #2
 80098e8:	460f      	mov	r7, r1
 80098ea:	4616      	mov	r6, r2
 80098ec:	f002 fc96 	bl	800c21c <GUI_SetTextAlign>
 80098f0:	4639      	mov	r1, r7
 80098f2:	4604      	mov	r4, r0
 80098f4:	4632      	mov	r2, r6
 80098f6:	4628      	mov	r0, r5
 80098f8:	f000 f808 	bl	800990c <GUI_DispStringAt>
 80098fc:	4620      	mov	r0, r4
 80098fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009902:	f002 bc8b 	b.w	800c21c <GUI_SetTextAlign>
 8009906:	bf00      	nop
 8009908:	20000018 	.word	0x20000018

0800990c <GUI_DispStringAt>:
 800990c:	4b02      	ldr	r3, [pc, #8]	; (8009918 <GUI_DispStringAt+0xc>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	8459      	strh	r1, [r3, #34]	; 0x22
 8009912:	849a      	strh	r2, [r3, #36]	; 0x24
 8009914:	f000 b802 	b.w	800991c <GUI_DispString>
 8009918:	20000018 	.word	0x20000018

0800991c <GUI_DispString>:
 800991c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009920:	4604      	mov	r4, r0
 8009922:	2800      	cmp	r0, #0
 8009924:	d079      	beq.n	8009a1a <GUI_DispString+0xfe>
 8009926:	4d3e      	ldr	r5, [pc, #248]	; (8009a20 <GUI_DispString+0x104>)
 8009928:	f000 fcba 	bl	800a2a0 <GUI_GetFontDistY>
 800992c:	682b      	ldr	r3, [r5, #0]
 800992e:	4680      	mov	r8, r0
 8009930:	f8b3 9022 	ldrh.w	r9, [r3, #34]	; 0x22
 8009934:	f000 fc9c 	bl	800a270 <GUI_GetYAdjust>
 8009938:	682b      	ldr	r3, [r5, #0]
 800993a:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800993c:	b287      	uxth	r7, r0
 800993e:	1bd2      	subs	r2, r2, r7
 8009940:	849a      	strh	r2, [r3, #36]	; 0x24
 8009942:	7823      	ldrb	r3, [r4, #0]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d05d      	beq.n	8009a04 <GUI_DispString+0xe8>
 8009948:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800994c:	4620      	mov	r0, r4
 800994e:	f000 fbdd 	bl	800a10c <GUI__GetLineNumChars>
 8009952:	4606      	mov	r6, r0
 8009954:	4631      	mov	r1, r6
 8009956:	4620      	mov	r0, r4
 8009958:	f000 fc06 	bl	800a168 <GUI__GetLineDistX>
 800995c:	682b      	ldr	r3, [r5, #0]
 800995e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009960:	f002 0203 	and.w	r2, r2, #3
 8009964:	2a01      	cmp	r2, #1
 8009966:	d005      	beq.n	8009974 <GUI_DispString+0x58>
 8009968:	2a02      	cmp	r2, #2
 800996a:	bf14      	ite	ne
 800996c:	2200      	movne	r2, #0
 800996e:	fb90 f2f2 	sdiveq	r2, r0, r2
 8009972:	e000      	b.n	8009976 <GUI_DispString+0x5a>
 8009974:	4602      	mov	r2, r0
 8009976:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8009978:	1a8a      	subs	r2, r1, r2
 800997a:	b292      	uxth	r2, r2
 800997c:	b291      	uxth	r1, r2
 800997e:	8459      	strh	r1, [r3, #34]	; 0x22
 8009980:	fa1f fa80 	uxth.w	sl, r0
 8009984:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009986:	f8ad 1000 	strh.w	r1, [sp]
 800998a:	f10a 31ff 	add.w	r1, sl, #4294967295
 800998e:	440a      	add	r2, r1
 8009990:	f8ad 3002 	strh.w	r3, [sp, #2]
 8009994:	fa1f fb88 	uxth.w	fp, r8
 8009998:	3b01      	subs	r3, #1
 800999a:	445b      	add	r3, fp
 800999c:	f8ad 2004 	strh.w	r2, [sp, #4]
 80099a0:	4620      	mov	r0, r4
 80099a2:	4631      	mov	r1, r6
 80099a4:	466a      	mov	r2, sp
 80099a6:	f8ad 3006 	strh.w	r3, [sp, #6]
 80099aa:	f000 fc0d 	bl	800a1c8 <GUI__DispLine>
 80099ae:	682b      	ldr	r3, [r5, #0]
 80099b0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80099b4:	849a      	strh	r2, [r3, #36]	; 0x24
 80099b6:	4620      	mov	r0, r4
 80099b8:	4631      	mov	r1, r6
 80099ba:	f7ff f9d1 	bl	8008d60 <GUI_UC__NumChars2NumBytes>
 80099be:	5c23      	ldrb	r3, [r4, r0]
 80099c0:	2b0a      	cmp	r3, #10
 80099c2:	eb04 0200 	add.w	r2, r4, r0
 80099c6:	d001      	beq.n	80099cc <GUI_DispString+0xb0>
 80099c8:	2b0d      	cmp	r3, #13
 80099ca:	d112      	bne.n	80099f2 <GUI_DispString+0xd6>
 80099cc:	682b      	ldr	r3, [r5, #0]
 80099ce:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 80099d0:	f001 0103 	and.w	r1, r1, #3
 80099d4:	3901      	subs	r1, #1
 80099d6:	2901      	cmp	r1, #1
 80099d8:	bf8a      	itet	hi
 80099da:	8c19      	ldrhhi	r1, [r3, #32]
 80099dc:	f8a3 9022 	strhls.w	r9, [r3, #34]	; 0x22
 80099e0:	8459      	strhhi	r1, [r3, #34]	; 0x22
 80099e2:	7811      	ldrb	r1, [r2, #0]
 80099e4:	290a      	cmp	r1, #10
 80099e6:	d10b      	bne.n	8009a00 <GUI_DispString+0xe4>
 80099e8:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 80099ea:	448b      	add	fp, r1
 80099ec:	f8a3 b024 	strh.w	fp, [r3, #36]	; 0x24
 80099f0:	e006      	b.n	8009a00 <GUI_DispString+0xe4>
 80099f2:	4b0b      	ldr	r3, [pc, #44]	; (8009a20 <GUI_DispString+0x104>)
 80099f4:	f8bd 0000 	ldrh.w	r0, [sp]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4482      	add	sl, r0
 80099fc:	f8a3 a022 	strh.w	sl, [r3, #34]	; 0x22
 8009a00:	7813      	ldrb	r3, [r2, #0]
 8009a02:	b943      	cbnz	r3, 8009a16 <GUI_DispString+0xfa>
 8009a04:	682b      	ldr	r3, [r5, #0]
 8009a06:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8009a08:	4417      	add	r7, r2
 8009a0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009a0c:	849f      	strh	r7, [r3, #36]	; 0x24
 8009a0e:	f022 0203 	bic.w	r2, r2, #3
 8009a12:	859a      	strh	r2, [r3, #44]	; 0x2c
 8009a14:	e001      	b.n	8009a1a <GUI_DispString+0xfe>
 8009a16:	1c54      	adds	r4, r2, #1
 8009a18:	e793      	b.n	8009942 <GUI_DispString+0x26>
 8009a1a:	b003      	add	sp, #12
 8009a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a20:	20000018 	.word	0x20000018

08009a24 <GUI_DEVICE__GetpDriver>:
 8009a24:	2801      	cmp	r0, #1
 8009a26:	dc09      	bgt.n	8009a3c <GUI_DEVICE__GetpDriver+0x18>
 8009a28:	4b05      	ldr	r3, [pc, #20]	; (8009a40 <GUI_DEVICE__GetpDriver+0x1c>)
 8009a2a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8009a2e:	b120      	cbz	r0, 8009a3a <GUI_DEVICE__GetpDriver+0x16>
 8009a30:	68c3      	ldr	r3, [r0, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	b11b      	cbz	r3, 8009a3e <GUI_DEVICE__GetpDriver+0x1a>
 8009a36:	6800      	ldr	r0, [r0, #0]
 8009a38:	e7f9      	b.n	8009a2e <GUI_DEVICE__GetpDriver+0xa>
 8009a3a:	4770      	bx	lr
 8009a3c:	2000      	movs	r0, #0
 8009a3e:	4770      	bx	lr
 8009a40:	20019624 	.word	0x20019624

08009a44 <GUI_DEVICE_Delete>:
 8009a44:	f000 bd34 	b.w	800a4b0 <GUI_ALLOC_FreeFixedBlock>

08009a48 <GUI_DEVICE_Create>:
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a4c:	4606      	mov	r6, r0
 8009a4e:	460d      	mov	r5, r1
 8009a50:	4617      	mov	r7, r2
 8009a52:	461c      	mov	r4, r3
 8009a54:	dd01      	ble.n	8009a5a <GUI_DEVICE_Create+0x12>
 8009a56:	2000      	movs	r0, #0
 8009a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a5a:	201c      	movs	r0, #28
 8009a5c:	f000 fe88 	bl	800a770 <GUI_ALLOC_GetFixedBlock>
 8009a60:	2800      	cmp	r0, #0
 8009a62:	d0f8      	beq.n	8009a56 <GUI_DEVICE_Create+0xe>
 8009a64:	b10d      	cbz	r5, 8009a6a <GUI_DEVICE_Create+0x22>
 8009a66:	6105      	str	r5, [r0, #16]
 8009a68:	e009      	b.n	8009a7e <GUI_DEVICE_Create+0x36>
 8009a6a:	4b09      	ldr	r3, [pc, #36]	; (8009a90 <GUI_DEVICE_Create+0x48>)
 8009a6c:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8009a70:	b129      	cbz	r1, 8009a7e <GUI_DEVICE_Create+0x36>
 8009a72:	680b      	ldr	r3, [r1, #0]
 8009a74:	b10b      	cbz	r3, 8009a7a <GUI_DEVICE_Create+0x32>
 8009a76:	4619      	mov	r1, r3
 8009a78:	e7fb      	b.n	8009a72 <GUI_DEVICE_Create+0x2a>
 8009a7a:	690b      	ldr	r3, [r1, #16]
 8009a7c:	6103      	str	r3, [r0, #16]
 8009a7e:	2300      	movs	r3, #0
 8009a80:	6083      	str	r3, [r0, #8]
 8009a82:	6184      	str	r4, [r0, #24]
 8009a84:	8287      	strh	r7, [r0, #20]
 8009a86:	60c6      	str	r6, [r0, #12]
 8009a88:	6003      	str	r3, [r0, #0]
 8009a8a:	6043      	str	r3, [r0, #4]
 8009a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a8e:	bf00      	nop
 8009a90:	20019624 	.word	0x20019624

08009a94 <GUI_DEVICE_Unlink>:
 8009a94:	4b09      	ldr	r3, [pc, #36]	; (8009abc <GUI_DEVICE_Unlink+0x28>)
 8009a96:	6982      	ldr	r2, [r0, #24]
 8009a98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a9c:	4281      	cmp	r1, r0
 8009a9e:	bf04      	itt	eq
 8009aa0:	6801      	ldreq	r1, [r0, #0]
 8009aa2:	f843 1022 	streq.w	r1, [r3, r2, lsl #2]
 8009aa6:	6843      	ldr	r3, [r0, #4]
 8009aa8:	b10b      	cbz	r3, 8009aae <GUI_DEVICE_Unlink+0x1a>
 8009aaa:	6802      	ldr	r2, [r0, #0]
 8009aac:	601a      	str	r2, [r3, #0]
 8009aae:	6802      	ldr	r2, [r0, #0]
 8009ab0:	b102      	cbz	r2, 8009ab4 <GUI_DEVICE_Unlink+0x20>
 8009ab2:	6053      	str	r3, [r2, #4]
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	6003      	str	r3, [r0, #0]
 8009ab8:	6043      	str	r3, [r0, #4]
 8009aba:	4770      	bx	lr
 8009abc:	20019624 	.word	0x20019624

08009ac0 <GUI_DEVICE_Link>:
 8009ac0:	b570      	push	{r4, r5, r6, lr}
 8009ac2:	b338      	cbz	r0, 8009b14 <GUI_DEVICE_Link+0x54>
 8009ac4:	6982      	ldr	r2, [r0, #24]
 8009ac6:	2a01      	cmp	r2, #1
 8009ac8:	dc24      	bgt.n	8009b14 <GUI_DEVICE_Link+0x54>
 8009aca:	4919      	ldr	r1, [pc, #100]	; (8009b30 <GUI_DEVICE_Link+0x70>)
 8009acc:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 8009ad0:	460d      	mov	r5, r1
 8009ad2:	b913      	cbnz	r3, 8009ada <GUI_DEVICE_Link+0x1a>
 8009ad4:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 8009ad8:	e01a      	b.n	8009b10 <GUI_DEVICE_Link+0x50>
 8009ada:	6859      	ldr	r1, [r3, #4]
 8009adc:	b109      	cbz	r1, 8009ae2 <GUI_DEVICE_Link+0x22>
 8009ade:	460b      	mov	r3, r1
 8009ae0:	e7fb      	b.n	8009ada <GUI_DEVICE_Link+0x1a>
 8009ae2:	68c1      	ldr	r1, [r0, #12]
 8009ae4:	680e      	ldr	r6, [r1, #0]
 8009ae6:	68d9      	ldr	r1, [r3, #12]
 8009ae8:	680c      	ldr	r4, [r1, #0]
 8009aea:	42b4      	cmp	r4, r6
 8009aec:	dd03      	ble.n	8009af6 <GUI_DEVICE_Link+0x36>
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d1f8      	bne.n	8009ae6 <GUI_DEVICE_Link+0x26>
 8009af4:	e00e      	b.n	8009b14 <GUI_DEVICE_Link+0x54>
 8009af6:	d102      	bne.n	8009afe <GUI_DEVICE_Link+0x3e>
 8009af8:	8a81      	ldrh	r1, [r0, #20]
 8009afa:	2901      	cmp	r1, #1
 8009afc:	d011      	beq.n	8009b22 <GUI_DEVICE_Link+0x62>
 8009afe:	6859      	ldr	r1, [r3, #4]
 8009b00:	b199      	cbz	r1, 8009b2a <GUI_DEVICE_Link+0x6a>
 8009b02:	6008      	str	r0, [r1, #0]
 8009b04:	6041      	str	r1, [r0, #4]
 8009b06:	6058      	str	r0, [r3, #4]
 8009b08:	4298      	cmp	r0, r3
 8009b0a:	bf08      	it	eq
 8009b0c:	2300      	moveq	r3, #0
 8009b0e:	6003      	str	r3, [r0, #0]
 8009b10:	2000      	movs	r0, #0
 8009b12:	bd70      	pop	{r4, r5, r6, pc}
 8009b14:	2001      	movs	r0, #1
 8009b16:	bd70      	pop	{r4, r5, r6, pc}
 8009b18:	68cb      	ldr	r3, [r1, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	42a3      	cmp	r3, r4
 8009b1e:	460b      	mov	r3, r1
 8009b20:	dbed      	blt.n	8009afe <GUI_DEVICE_Link+0x3e>
 8009b22:	6819      	ldr	r1, [r3, #0]
 8009b24:	2900      	cmp	r1, #0
 8009b26:	d1f7      	bne.n	8009b18 <GUI_DEVICE_Link+0x58>
 8009b28:	e7e9      	b.n	8009afe <GUI_DEVICE_Link+0x3e>
 8009b2a:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
 8009b2e:	e7ea      	b.n	8009b06 <GUI_DEVICE_Link+0x46>
 8009b30:	20019624 	.word	0x20019624

08009b34 <GUI_DEVICE_CreateAndLink>:
 8009b34:	b538      	push	{r3, r4, r5, lr}
 8009b36:	461d      	mov	r5, r3
 8009b38:	f7ff ff86 	bl	8009a48 <GUI_DEVICE_Create>
 8009b3c:	4604      	mov	r4, r0
 8009b3e:	b148      	cbz	r0, 8009b54 <GUI_DEVICE_CreateAndLink+0x20>
 8009b40:	f7ff ffbe 	bl	8009ac0 <GUI_DEVICE_Link>
 8009b44:	68e3      	ldr	r3, [r4, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	b923      	cbnz	r3, 8009b54 <GUI_DEVICE_CreateAndLink+0x20>
 8009b4a:	4b03      	ldr	r3, [pc, #12]	; (8009b58 <GUI_DEVICE_CreateAndLink+0x24>)
 8009b4c:	3516      	adds	r5, #22
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
 8009b54:	4620      	mov	r0, r4
 8009b56:	bd38      	pop	{r3, r4, r5, pc}
 8009b58:	20000018 	.word	0x20000018

08009b5c <_OnExit>:
 8009b5c:	b510      	push	{r4, lr}
 8009b5e:	4b07      	ldr	r3, [pc, #28]	; (8009b7c <_OnExit+0x20>)
 8009b60:	4807      	ldr	r0, [pc, #28]	; (8009b80 <_OnExit+0x24>)
 8009b62:	2400      	movs	r4, #0
 8009b64:	4621      	mov	r1, r4
 8009b66:	2270      	movs	r2, #112	; 0x70
 8009b68:	601c      	str	r4, [r3, #0]
 8009b6a:	f7fe ffe7 	bl	8008b3c <GUI__memset>
 8009b6e:	4621      	mov	r1, r4
 8009b70:	4804      	ldr	r0, [pc, #16]	; (8009b84 <_OnExit+0x28>)
 8009b72:	2208      	movs	r2, #8
 8009b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b78:	f7fe bfe0 	b.w	8008b3c <GUI__memset>
 8009b7c:	20019178 	.word	0x20019178
 8009b80:	20019100 	.word	0x20019100
 8009b84:	20019624 	.word	0x20019624

08009b88 <_InitContext>:
 8009b88:	b538      	push	{r3, r4, r5, lr}
 8009b8a:	4d19      	ldr	r5, [pc, #100]	; (8009bf0 <_InitContext+0x68>)
 8009b8c:	682b      	ldr	r3, [r5, #0]
 8009b8e:	1d1a      	adds	r2, r3, #4
 8009b90:	63da      	str	r2, [r3, #60]	; 0x3c
 8009b92:	f103 0208 	add.w	r2, r3, #8
 8009b96:	639b      	str	r3, [r3, #56]	; 0x38
 8009b98:	641b      	str	r3, [r3, #64]	; 0x40
 8009b9a:	6142      	str	r2, [r0, #20]
 8009b9c:	7c5a      	ldrb	r2, [r3, #17]
 8009b9e:	4b15      	ldr	r3, [pc, #84]	; (8009bf4 <_InitContext+0x6c>)
 8009ba0:	4604      	mov	r4, r0
 8009ba2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009ba6:	68c3      	ldr	r3, [r0, #12]
 8009ba8:	f104 0108 	add.w	r1, r4, #8
 8009bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bae:	4798      	blx	r3
 8009bb0:	4b11      	ldr	r3, [pc, #68]	; (8009bf8 <_InitContext+0x70>)
 8009bb2:	6663      	str	r3, [r4, #100]	; 0x64
 8009bb4:	4b11      	ldr	r3, [pc, #68]	; (8009bfc <_InitContext+0x74>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	61e3      	str	r3, [r4, #28]
 8009bba:	682b      	ldr	r3, [r5, #0]
 8009bbc:	3308      	adds	r3, #8
 8009bbe:	6163      	str	r3, [r4, #20]
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	7623      	strb	r3, [r4, #24]
 8009bc4:	f7fc fa78 	bl	80060b8 <WM_GetDesktopWindow>
 8009bc8:	2303      	movs	r3, #3
 8009bca:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8009bce:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8009bd2:	6323      	str	r3, [r4, #48]	; 0x30
 8009bd4:	6363      	str	r3, [r4, #52]	; 0x34
 8009bd6:	64a0      	str	r0, [r4, #72]	; 0x48
 8009bd8:	2000      	movs	r0, #0
 8009bda:	f7fe ff71 	bl	8008ac0 <LCD_SetBkColor>
 8009bde:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8009be2:	f7fe ff75 	bl	8008ad0 <LCD_SetColor>
 8009be6:	4b06      	ldr	r3, [pc, #24]	; (8009c00 <_InitContext+0x78>)
 8009be8:	4a06      	ldr	r2, [pc, #24]	; (8009c04 <_InitContext+0x7c>)
 8009bea:	601a      	str	r2, [r3, #0]
 8009bec:	bd38      	pop	{r3, r4, r5, pc}
 8009bee:	bf00      	nop
 8009bf0:	20000018 	.word	0x20000018
 8009bf4:	20019624 	.word	0x20019624
 8009bf8:	0800f450 	.word	0x0800f450
 8009bfc:	2000001c 	.word	0x2000001c
 8009c00:	2001961c 	.word	0x2001961c
 8009c04:	0800f774 	.word	0x0800f774

08009c08 <GUI_SetDefaultFont>:
 8009c08:	4b01      	ldr	r3, [pc, #4]	; (8009c10 <GUI_SetDefaultFont+0x8>)
 8009c0a:	6018      	str	r0, [r3, #0]
 8009c0c:	4770      	bx	lr
 8009c0e:	bf00      	nop
 8009c10:	2000001c 	.word	0x2000001c

08009c14 <GUI_ClearRect>:
 8009c14:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c18:	4607      	mov	r7, r0
 8009c1a:	2004      	movs	r0, #4
 8009c1c:	469a      	mov	sl, r3
 8009c1e:	460e      	mov	r6, r1
 8009c20:	4691      	mov	r9, r2
 8009c22:	f7fe fc05 	bl	8008430 <LCD_SetDrawMode>
 8009c26:	4b13      	ldr	r3, [pc, #76]	; (8009c74 <GUI_ClearRect+0x60>)
 8009c28:	681c      	ldr	r4, [r3, #0]
 8009c2a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8009c2c:	6d24      	ldr	r4, [r4, #80]	; 0x50
 8009c2e:	442f      	add	r7, r5
 8009c30:	4426      	add	r6, r4
 8009c32:	4680      	mov	r8, r0
 8009c34:	444d      	add	r5, r9
 8009c36:	4454      	add	r4, sl
 8009c38:	4668      	mov	r0, sp
 8009c3a:	f8ad 7000 	strh.w	r7, [sp]
 8009c3e:	f8ad 5004 	strh.w	r5, [sp, #4]
 8009c42:	f8ad 6002 	strh.w	r6, [sp, #2]
 8009c46:	f8ad 4006 	strh.w	r4, [sp, #6]
 8009c4a:	f7fc ff17 	bl	8006a7c <WM__InitIVRSearch>
 8009c4e:	b928      	cbnz	r0, 8009c5c <GUI_ClearRect+0x48>
 8009c50:	4640      	mov	r0, r8
 8009c52:	f7fe fbed 	bl	8008430 <LCD_SetDrawMode>
 8009c56:	b002      	add	sp, #8
 8009c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c5c:	4638      	mov	r0, r7
 8009c5e:	4631      	mov	r1, r6
 8009c60:	462a      	mov	r2, r5
 8009c62:	4623      	mov	r3, r4
 8009c64:	f7fe fc66 	bl	8008534 <LCD_FillRect>
 8009c68:	f7fc fe46 	bl	80068f8 <WM__GetNextIVR>
 8009c6c:	2800      	cmp	r0, #0
 8009c6e:	d1f5      	bne.n	8009c5c <GUI_ClearRect+0x48>
 8009c70:	e7ee      	b.n	8009c50 <GUI_ClearRect+0x3c>
 8009c72:	bf00      	nop
 8009c74:	20000018 	.word	0x20000018

08009c78 <GUI_Clear>:
 8009c78:	b510      	push	{r4, lr}
 8009c7a:	2000      	movs	r0, #0
 8009c7c:	4601      	mov	r1, r0
 8009c7e:	f7ff fbcd 	bl	800941c <GUI_GotoXY>
 8009c82:	4804      	ldr	r0, [pc, #16]	; (8009c94 <GUI_Clear+0x1c>)
 8009c84:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8009c88:	4601      	mov	r1, r0
 8009c8a:	4613      	mov	r3, r2
 8009c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c90:	f7ff bfc0 	b.w	8009c14 <GUI_ClearRect>
 8009c94:	ffffc001 	.word	0xffffc001

08009c98 <GUI__RegisterExit>:
 8009c98:	b480      	push	{r7}
 8009c9a:	b083      	sub	sp, #12
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
 8009ca0:	4b05      	ldr	r3, [pc, #20]	; (8009cb8 <GUI__RegisterExit+0x20>)
 8009ca2:	681a      	ldr	r2, [r3, #0]
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	605a      	str	r2, [r3, #4]
 8009ca8:	4b03      	ldr	r3, [pc, #12]	; (8009cb8 <GUI__RegisterExit+0x20>)
 8009caa:	687a      	ldr	r2, [r7, #4]
 8009cac:	601a      	str	r2, [r3, #0]
 8009cae:	370c      	adds	r7, #12
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb6:	4770      	bx	lr
 8009cb8:	200190fc 	.word	0x200190fc

08009cbc <GUI__Config>:
 8009cbc:	b508      	push	{r3, lr}
 8009cbe:	4b08      	ldr	r3, [pc, #32]	; (8009ce0 <GUI__Config+0x24>)
 8009cc0:	681a      	ldr	r2, [r3, #0]
 8009cc2:	b962      	cbnz	r2, 8009cde <GUI__Config+0x22>
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	601a      	str	r2, [r3, #0]
 8009cc8:	f7fb fc40 	bl	800554c <GUI_X_Config>
 8009ccc:	f7fb fc50 	bl	8005570 <LCD_X_Config>
 8009cd0:	4804      	ldr	r0, [pc, #16]	; (8009ce4 <GUI__Config+0x28>)
 8009cd2:	4b05      	ldr	r3, [pc, #20]	; (8009ce8 <GUI__Config+0x2c>)
 8009cd4:	6003      	str	r3, [r0, #0]
 8009cd6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009cda:	f7ff bfdd 	b.w	8009c98 <GUI__RegisterExit>
 8009cde:	bd08      	pop	{r3, pc}
 8009ce0:	20019178 	.word	0x20019178
 8009ce4:	20019170 	.word	0x20019170
 8009ce8:	08009b5d 	.word	0x08009b5d

08009cec <GUI_Init>:
 8009cec:	b590      	push	{r4, r7, lr}
 8009cee:	b083      	sub	sp, #12
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	4b20      	ldr	r3, [pc, #128]	; (8009d74 <GUI_Init+0x88>)
 8009cf4:	4a1f      	ldr	r2, [pc, #124]	; (8009d74 <GUI_Init+0x88>)
 8009cf6:	6812      	ldr	r2, [r2, #0]
 8009cf8:	f022 0201 	bic.w	r2, r2, #1
 8009cfc:	601a      	str	r2, [r3, #0]
 8009cfe:	4b1e      	ldr	r3, [pc, #120]	; (8009d78 <GUI_Init+0x8c>)
 8009d00:	2201      	movs	r2, #1
 8009d02:	601a      	str	r2, [r3, #0]
 8009d04:	4b1d      	ldr	r3, [pc, #116]	; (8009d7c <GUI_Init+0x90>)
 8009d06:	4a1e      	ldr	r2, [pc, #120]	; (8009d80 <GUI_Init+0x94>)
 8009d08:	601a      	str	r2, [r3, #0]
 8009d0a:	4b1c      	ldr	r3, [pc, #112]	; (8009d7c <GUI_Init+0x90>)
 8009d0c:	681a      	ldr	r2, [r3, #0]
 8009d0e:	4b1d      	ldr	r3, [pc, #116]	; (8009d84 <GUI_Init+0x98>)
 8009d10:	429a      	cmp	r2, r3
 8009d12:	d000      	beq.n	8009d16 <GUI_Init+0x2a>
 8009d14:	e7fe      	b.n	8009d14 <GUI_Init+0x28>
 8009d16:	f7ff ffd1 	bl	8009cbc <GUI__Config>
 8009d1a:	4b1b      	ldr	r3, [pc, #108]	; (8009d88 <GUI_Init+0x9c>)
 8009d1c:	222e      	movs	r2, #46	; 0x2e
 8009d1e:	701a      	strb	r2, [r3, #0]
 8009d20:	f7fb fc24 	bl	800556c <GUI_X_Init>
 8009d24:	4819      	ldr	r0, [pc, #100]	; (8009d8c <GUI_Init+0xa0>)
 8009d26:	f7ff ff2f 	bl	8009b88 <_InitContext>
 8009d2a:	f7fe fe27 	bl	800897c <emWin_LCD_Init>
 8009d2e:	6078      	str	r0, [r7, #4]
 8009d30:	f7fe fb08 	bl	8008344 <LCD_GetXSizeDisplay>
 8009d34:	4603      	mov	r3, r0
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d004      	beq.n	8009d44 <GUI_Init+0x58>
 8009d3a:	f7fe fb09 	bl	8008350 <LCD_GetYSizeDisplay>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d109      	bne.n	8009d58 <GUI_Init+0x6c>
 8009d44:	f7fe faee 	bl	8008324 <LCD_GetXSizeMax>
 8009d48:	4604      	mov	r4, r0
 8009d4a:	f7fe faee 	bl	800832a <LCD_GetYSizeMax>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	4620      	mov	r0, r4
 8009d52:	4619      	mov	r1, r3
 8009d54:	f7fe faec 	bl	8008330 <LCD_SetDisplaySize>
 8009d58:	2000      	movs	r0, #0
 8009d5a:	2100      	movs	r1, #0
 8009d5c:	f002 fa68 	bl	800c230 <GUI_SetOrg>
 8009d60:	f7fc ff74 	bl	8006c4c <WM_Init>
 8009d64:	4b0a      	ldr	r3, [pc, #40]	; (8009d90 <GUI_Init+0xa4>)
 8009d66:	2201      	movs	r2, #1
 8009d68:	701a      	strb	r2, [r3, #0]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	370c      	adds	r7, #12
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd90      	pop	{r4, r7, pc}
 8009d74:	e0002000 	.word	0xe0002000
 8009d78:	40023008 	.word	0x40023008
 8009d7c:	40023000 	.word	0x40023000
 8009d80:	f407a5c2 	.word	0xf407a5c2
 8009d84:	b5e8b5cd 	.word	0xb5e8b5cd
 8009d88:	200195f6 	.word	0x200195f6
 8009d8c:	20019100 	.word	0x20019100
 8009d90:	20019614 	.word	0x20019614

08009d94 <GUIPROP__FindChar>:
 8009d94:	b138      	cbz	r0, 8009da6 <GUIPROP__FindChar+0x12>
 8009d96:	8803      	ldrh	r3, [r0, #0]
 8009d98:	428b      	cmp	r3, r1
 8009d9a:	d802      	bhi.n	8009da2 <GUIPROP__FindChar+0xe>
 8009d9c:	8843      	ldrh	r3, [r0, #2]
 8009d9e:	428b      	cmp	r3, r1
 8009da0:	d201      	bcs.n	8009da6 <GUIPROP__FindChar+0x12>
 8009da2:	6880      	ldr	r0, [r0, #8]
 8009da4:	e7f6      	b.n	8009d94 <GUIPROP__FindChar>
 8009da6:	4770      	bx	lr

08009da8 <GUIPROP_DispChar>:
 8009da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dac:	4c38      	ldr	r4, [pc, #224]	; (8009e90 <GUIPROP_DispChar+0xe8>)
 8009dae:	6823      	ldr	r3, [r4, #0]
 8009db0:	f9b3 902a 	ldrsh.w	r9, [r3, #42]	; 0x2a
 8009db4:	69db      	ldr	r3, [r3, #28]
 8009db6:	4605      	mov	r5, r0
 8009db8:	b089      	sub	sp, #36	; 0x24
 8009dba:	69d8      	ldr	r0, [r3, #28]
 8009dbc:	4629      	mov	r1, r5
 8009dbe:	f7ff ffe9 	bl	8009d94 <GUIPROP__FindChar>
 8009dc2:	2800      	cmp	r0, #0
 8009dc4:	d061      	beq.n	8009e8a <GUIPROP_DispChar+0xe2>
 8009dc6:	f8b0 8000 	ldrh.w	r8, [r0]
 8009dca:	6847      	ldr	r7, [r0, #4]
 8009dcc:	ebc8 0805 	rsb	r8, r8, r5
 8009dd0:	eb07 06c8 	add.w	r6, r7, r8, lsl #3
 8009dd4:	4648      	mov	r0, r9
 8009dd6:	f896 b002 	ldrb.w	fp, [r6, #2]
 8009dda:	f7fe fb29 	bl	8008430 <LCD_SetDrawMode>
 8009dde:	6825      	ldr	r5, [r4, #0]
 8009de0:	f817 2038 	ldrb.w	r2, [r7, r8, lsl #3]
 8009de4:	f8d5 e01c 	ldr.w	lr, [r5, #28]
 8009de8:	f9b5 1024 	ldrsh.w	r1, [r5, #36]	; 0x24
 8009dec:	f89e c01a 	ldrb.w	ip, [lr, #26]
 8009df0:	f89e 3018 	ldrb.w	r3, [lr, #24]
 8009df4:	9306      	str	r3, [sp, #24]
 8009df6:	4682      	mov	sl, r0
 8009df8:	f9b5 0022 	ldrsh.w	r0, [r5, #34]	; 0x22
 8009dfc:	f8cd c000 	str.w	ip, [sp]
 8009e00:	f89e e01b 	ldrb.w	lr, [lr, #27]
 8009e04:	f8cd e004 	str.w	lr, [sp, #4]
 8009e08:	f04f 0e01 	mov.w	lr, #1
 8009e0c:	f8cd b00c 	str.w	fp, [sp, #12]
 8009e10:	f8cd e008 	str.w	lr, [sp, #8]
 8009e14:	6873      	ldr	r3, [r6, #4]
 8009e16:	9304      	str	r3, [sp, #16]
 8009e18:	6bad      	ldr	r5, [r5, #56]	; 0x38
 8009e1a:	9b06      	ldr	r3, [sp, #24]
 8009e1c:	9505      	str	r5, [sp, #20]
 8009e1e:	f7fe fc91 	bl	8008744 <LCD_DrawBitmap>
 8009e22:	6823      	ldr	r3, [r4, #0]
 8009e24:	69da      	ldr	r2, [r3, #28]
 8009e26:	f892 b019 	ldrb.w	fp, [r2, #25]
 8009e2a:	7e11      	ldrb	r1, [r2, #24]
 8009e2c:	458b      	cmp	fp, r1
 8009e2e:	d920      	bls.n	8009e72 <GUIPROP_DispChar+0xca>
 8009e30:	f1b9 0f02 	cmp.w	r9, #2
 8009e34:	7ed5      	ldrb	r5, [r2, #27]
 8009e36:	d01c      	beq.n	8009e72 <GUIPROP_DispChar+0xca>
 8009e38:	9107      	str	r1, [sp, #28]
 8009e3a:	f002 fa1a 	bl	800c272 <GUI_GetColor>
 8009e3e:	4681      	mov	r9, r0
 8009e40:	f002 fa10 	bl	800c264 <GUI_GetBkColor>
 8009e44:	f7ff fa60 	bl	8009308 <GUI_SetColor>
 8009e48:	6824      	ldr	r4, [r4, #0]
 8009e4a:	f817 7038 	ldrb.w	r7, [r7, r8, lsl #3]
 8009e4e:	69e2      	ldr	r2, [r4, #28]
 8009e50:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 8009e54:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8009e58:	7ed2      	ldrb	r2, [r2, #27]
 8009e5a:	9907      	ldr	r1, [sp, #28]
 8009e5c:	fb07 0202 	mla	r2, r7, r2, r0
 8009e60:	fb01 3105 	mla	r1, r1, r5, r3
 8009e64:	fb0b 3305 	mla	r3, fp, r5, r3
 8009e68:	f7fe fb64 	bl	8008534 <LCD_FillRect>
 8009e6c:	4648      	mov	r0, r9
 8009e6e:	f7ff fa4b 	bl	8009308 <GUI_SetColor>
 8009e72:	4650      	mov	r0, sl
 8009e74:	f7fe fadc 	bl	8008430 <LCD_SetDrawMode>
 8009e78:	4b05      	ldr	r3, [pc, #20]	; (8009e90 <GUIPROP_DispChar+0xe8>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	69da      	ldr	r2, [r3, #28]
 8009e7e:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8009e80:	7e90      	ldrb	r0, [r2, #26]
 8009e82:	7872      	ldrb	r2, [r6, #1]
 8009e84:	fb00 1202 	mla	r2, r0, r2, r1
 8009e88:	845a      	strh	r2, [r3, #34]	; 0x22
 8009e8a:	b009      	add	sp, #36	; 0x24
 8009e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e90:	20000018 	.word	0x20000018

08009e94 <GUIPROP_GetCharDistX>:
 8009e94:	4b0d      	ldr	r3, [pc, #52]	; (8009ecc <GUIPROP_GetCharDistX+0x38>)
 8009e96:	b570      	push	{r4, r5, r6, lr}
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	69dd      	ldr	r5, [r3, #28]
 8009e9c:	4606      	mov	r6, r0
 8009e9e:	460c      	mov	r4, r1
 8009ea0:	69e8      	ldr	r0, [r5, #28]
 8009ea2:	4631      	mov	r1, r6
 8009ea4:	f7ff ff76 	bl	8009d94 <GUIPROP__FindChar>
 8009ea8:	b170      	cbz	r0, 8009ec8 <GUIPROP_GetCharDistX+0x34>
 8009eaa:	8803      	ldrh	r3, [r0, #0]
 8009eac:	6842      	ldr	r2, [r0, #4]
 8009eae:	1af6      	subs	r6, r6, r3
 8009eb0:	eb02 03c6 	add.w	r3, r2, r6, lsl #3
 8009eb4:	7858      	ldrb	r0, [r3, #1]
 8009eb6:	7eab      	ldrb	r3, [r5, #26]
 8009eb8:	fb10 f003 	smulbb	r0, r0, r3
 8009ebc:	b124      	cbz	r4, 8009ec8 <GUIPROP_GetCharDistX+0x34>
 8009ebe:	f812 2036 	ldrb.w	r2, [r2, r6, lsl #3]
 8009ec2:	fb12 f303 	smulbb	r3, r2, r3
 8009ec6:	6023      	str	r3, [r4, #0]
 8009ec8:	bd70      	pop	{r4, r5, r6, pc}
 8009eca:	bf00      	nop
 8009ecc:	20000018 	.word	0x20000018

08009ed0 <GUIPROP_GetFontInfo>:
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	800b      	strh	r3, [r1, #0]
 8009ed4:	4770      	bx	lr

08009ed6 <GUIPROP_IsInFont>:
 8009ed6:	b508      	push	{r3, lr}
 8009ed8:	69c0      	ldr	r0, [r0, #28]
 8009eda:	f7ff ff5b 	bl	8009d94 <GUIPROP__FindChar>
 8009ede:	3000      	adds	r0, #0
 8009ee0:	bf18      	it	ne
 8009ee2:	2001      	movne	r0, #1
 8009ee4:	bd08      	pop	{r3, pc}
	...

08009ee8 <GUIMONO_DispChar>:
 8009ee8:	4b52      	ldr	r3, [pc, #328]	; (800a034 <GUIMONO_DispChar+0x14c>)
 8009eea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	69d9      	ldr	r1, [r3, #28]
 8009ef2:	8c5f      	ldrh	r7, [r3, #34]	; 0x22
 8009ef4:	69cc      	ldr	r4, [r1, #28]
 8009ef6:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
 8009ef8:	89a2      	ldrh	r2, [r4, #12]
 8009efa:	4290      	cmp	r0, r2
 8009efc:	b08b      	sub	sp, #44	; 0x2c
 8009efe:	d308      	bcc.n	8009f12 <GUIMONO_DispChar+0x2a>
 8009f00:	89e6      	ldrh	r6, [r4, #14]
 8009f02:	4286      	cmp	r6, r0
 8009f04:	d305      	bcc.n	8009f12 <GUIMONO_DispChar+0x2a>
 8009f06:	f8d4 9000 	ldr.w	r9, [r4]
 8009f0a:	1a82      	subs	r2, r0, r2
 8009f0c:	f04f 3bff 	mov.w	fp, #4294967295
 8009f10:	e015      	b.n	8009f3e <GUIMONO_DispChar+0x56>
 8009f12:	68a2      	ldr	r2, [r4, #8]
 8009f14:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8009f18:	2a00      	cmp	r2, #0
 8009f1a:	f000 8081 	beq.w	800a020 <GUIMONO_DispChar+0x138>
 8009f1e:	8816      	ldrh	r6, [r2, #0]
 8009f20:	42b0      	cmp	r0, r6
 8009f22:	d37d      	bcc.n	800a020 <GUIMONO_DispChar+0x138>
 8009f24:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 8009f28:	4584      	cmp	ip, r0
 8009f2a:	d379      	bcc.n	800a020 <GUIMONO_DispChar+0x138>
 8009f2c:	6852      	ldr	r2, [r2, #4]
 8009f2e:	1b80      	subs	r0, r0, r6
 8009f30:	b280      	uxth	r0, r0
 8009f32:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8009f36:	f932 2020 	ldrsh.w	r2, [r2, r0, lsl #2]
 8009f3a:	f9b6 b002 	ldrsh.w	fp, [r6, #2]
 8009f3e:	1c50      	adds	r0, r2, #1
 8009f40:	d06e      	beq.n	800a020 <GUIMONO_DispChar+0x138>
 8009f42:	f891 8018 	ldrb.w	r8, [r1, #24]
 8009f46:	7ca1      	ldrb	r1, [r4, #18]
 8009f48:	f8b3 a02a 	ldrh.w	sl, [r3, #42]	; 0x2a
 8009f4c:	7c26      	ldrb	r6, [r4, #16]
 8009f4e:	9206      	str	r2, [sp, #24]
 8009f50:	fb18 f101 	smulbb	r1, r8, r1
 8009f54:	9107      	str	r1, [sp, #28]
 8009f56:	fa0f f18a 	sxth.w	r1, sl
 8009f5a:	4608      	mov	r0, r1
 8009f5c:	9108      	str	r1, [sp, #32]
 8009f5e:	f7fe fa67 	bl	8008430 <LCD_SetDrawMode>
 8009f62:	4934      	ldr	r1, [pc, #208]	; (800a034 <GUIMONO_DispChar+0x14c>)
 8009f64:	9009      	str	r0, [sp, #36]	; 0x24
 8009f66:	680b      	ldr	r3, [r1, #0]
 8009f68:	9a06      	ldr	r2, [sp, #24]
 8009f6a:	69d9      	ldr	r1, [r3, #28]
 8009f6c:	7e88      	ldrb	r0, [r1, #26]
 8009f6e:	9000      	str	r0, [sp, #0]
 8009f70:	7ec9      	ldrb	r1, [r1, #27]
 8009f72:	9101      	str	r1, [sp, #4]
 8009f74:	2101      	movs	r1, #1
 8009f76:	9102      	str	r1, [sp, #8]
 8009f78:	7ca1      	ldrb	r1, [r4, #18]
 8009f7a:	9103      	str	r1, [sp, #12]
 8009f7c:	9907      	ldr	r1, [sp, #28]
 8009f7e:	fb01 9202 	mla	r2, r1, r2, r9
 8009f82:	9204      	str	r2, [sp, #16]
 8009f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f86:	9305      	str	r3, [sp, #20]
 8009f88:	b23f      	sxth	r7, r7
 8009f8a:	b22d      	sxth	r5, r5
 8009f8c:	4638      	mov	r0, r7
 8009f8e:	4629      	mov	r1, r5
 8009f90:	4632      	mov	r2, r6
 8009f92:	4643      	mov	r3, r8
 8009f94:	f7fe fbd6 	bl	8008744 <LCD_DrawBitmap>
 8009f98:	f1bb 3fff 	cmp.w	fp, #4294967295
 8009f9c:	d01b      	beq.n	8009fd6 <GUIMONO_DispChar+0xee>
 8009f9e:	f04a 0002 	orr.w	r0, sl, #2
 8009fa2:	b200      	sxth	r0, r0
 8009fa4:	f7fe fa44 	bl	8008430 <LCD_SetDrawMode>
 8009fa8:	4a22      	ldr	r2, [pc, #136]	; (800a034 <GUIMONO_DispChar+0x14c>)
 8009faa:	6813      	ldr	r3, [r2, #0]
 8009fac:	69da      	ldr	r2, [r3, #28]
 8009fae:	7e91      	ldrb	r1, [r2, #26]
 8009fb0:	9100      	str	r1, [sp, #0]
 8009fb2:	7ed2      	ldrb	r2, [r2, #27]
 8009fb4:	9201      	str	r2, [sp, #4]
 8009fb6:	2101      	movs	r1, #1
 8009fb8:	9102      	str	r1, [sp, #8]
 8009fba:	9907      	ldr	r1, [sp, #28]
 8009fbc:	7ca2      	ldrb	r2, [r4, #18]
 8009fbe:	9203      	str	r2, [sp, #12]
 8009fc0:	fb01 920b 	mla	r2, r1, fp, r9
 8009fc4:	9204      	str	r2, [sp, #16]
 8009fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fc8:	9305      	str	r3, [sp, #20]
 8009fca:	4638      	mov	r0, r7
 8009fcc:	4629      	mov	r1, r5
 8009fce:	4632      	mov	r2, r6
 8009fd0:	4643      	mov	r3, r8
 8009fd2:	f7fe fbb7 	bl	8008744 <LCD_DrawBitmap>
 8009fd6:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800a034 <GUIMONO_DispChar+0x14c>
 8009fda:	f8d8 3000 	ldr.w	r3, [r8]
 8009fde:	69db      	ldr	r3, [r3, #28]
 8009fe0:	7e5a      	ldrb	r2, [r3, #25]
 8009fe2:	7e1b      	ldrb	r3, [r3, #24]
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	d917      	bls.n	800a018 <GUIMONO_DispChar+0x130>
 8009fe8:	9a08      	ldr	r2, [sp, #32]
 8009fea:	2a02      	cmp	r2, #2
 8009fec:	d014      	beq.n	800a018 <GUIMONO_DispChar+0x130>
 8009fee:	f08a 0004 	eor.w	r0, sl, #4
 8009ff2:	b200      	sxth	r0, r0
 8009ff4:	f7fe fa1c 	bl	8008430 <LCD_SetDrawMode>
 8009ff8:	f8d8 3000 	ldr.w	r3, [r8]
 8009ffc:	69db      	ldr	r3, [r3, #28]
 8009ffe:	f893 e018 	ldrb.w	lr, [r3, #24]
 800a002:	7ed9      	ldrb	r1, [r3, #27]
 800a004:	7e9a      	ldrb	r2, [r3, #26]
 800a006:	7e5b      	ldrb	r3, [r3, #25]
 800a008:	4638      	mov	r0, r7
 800a00a:	fb0e 5101 	mla	r1, lr, r1, r5
 800a00e:	fb06 7202 	mla	r2, r6, r2, r7
 800a012:	442b      	add	r3, r5
 800a014:	f7fe fa8e 	bl	8008534 <LCD_FillRect>
 800a018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a01a:	b2d8      	uxtb	r0, r3
 800a01c:	f7fe fa08 	bl	8008430 <LCD_SetDrawMode>
 800a020:	4b04      	ldr	r3, [pc, #16]	; (800a034 <GUIMONO_DispChar+0x14c>)
 800a022:	7c61      	ldrb	r1, [r4, #17]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800a028:	440a      	add	r2, r1
 800a02a:	845a      	strh	r2, [r3, #34]	; 0x22
 800a02c:	b00b      	add	sp, #44	; 0x2c
 800a02e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a032:	bf00      	nop
 800a034:	20000018 	.word	0x20000018

0800a038 <GUIMONO_GetCharDistX>:
 800a038:	4b04      	ldr	r3, [pc, #16]	; (800a04c <GUIMONO_GetCharDistX+0x14>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	69db      	ldr	r3, [r3, #28]
 800a03e:	69db      	ldr	r3, [r3, #28]
 800a040:	b109      	cbz	r1, 800a046 <GUIMONO_GetCharDistX+0xe>
 800a042:	7c1a      	ldrb	r2, [r3, #16]
 800a044:	600a      	str	r2, [r1, #0]
 800a046:	7c58      	ldrb	r0, [r3, #17]
 800a048:	4770      	bx	lr
 800a04a:	bf00      	nop
 800a04c:	20000018 	.word	0x20000018

0800a050 <GUIMONO_GetFontInfo>:
 800a050:	2302      	movs	r3, #2
 800a052:	800b      	strh	r3, [r1, #0]
 800a054:	4770      	bx	lr

0800a056 <GUIMONO_IsInFont>:
 800a056:	69c3      	ldr	r3, [r0, #28]
 800a058:	899a      	ldrh	r2, [r3, #12]
 800a05a:	428a      	cmp	r2, r1
 800a05c:	d802      	bhi.n	800a064 <GUIMONO_IsInFont+0xe>
 800a05e:	89da      	ldrh	r2, [r3, #14]
 800a060:	428a      	cmp	r2, r1
 800a062:	d20f      	bcs.n	800a084 <GUIMONO_IsInFont+0x2e>
 800a064:	6898      	ldr	r0, [r3, #8]
 800a066:	b180      	cbz	r0, 800a08a <GUIMONO_IsInFont+0x34>
 800a068:	8803      	ldrh	r3, [r0, #0]
 800a06a:	4299      	cmp	r1, r3
 800a06c:	d30c      	bcc.n	800a088 <GUIMONO_IsInFont+0x32>
 800a06e:	8842      	ldrh	r2, [r0, #2]
 800a070:	428a      	cmp	r2, r1
 800a072:	d309      	bcc.n	800a088 <GUIMONO_IsInFont+0x32>
 800a074:	1ac9      	subs	r1, r1, r3
 800a076:	6842      	ldr	r2, [r0, #4]
 800a078:	f832 0021 	ldrh.w	r0, [r2, r1, lsl #2]
 800a07c:	43c0      	mvns	r0, r0
 800a07e:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 800a082:	4770      	bx	lr
 800a084:	2001      	movs	r0, #1
 800a086:	4770      	bx	lr
 800a088:	2000      	movs	r0, #0
 800a08a:	4770      	bx	lr

0800a08c <_Log2VisBuffered>:
 800a08c:	4770      	bx	lr
	...

0800a090 <_DispLine>:
 800a090:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a092:	4615      	mov	r5, r2
 800a094:	ab02      	add	r3, sp, #8
 800a096:	4a1a      	ldr	r2, [pc, #104]	; (800a100 <_DispLine+0x70>)
 800a098:	f843 1d08 	str.w	r1, [r3, #-8]!
 800a09c:	9001      	str	r0, [sp, #4]
 800a09e:	6812      	ldr	r2, [r2, #0]
 800a0a0:	4c18      	ldr	r4, [pc, #96]	; (800a104 <_DispLine+0x74>)
 800a0a2:	4669      	mov	r1, sp
 800a0a4:	4790      	blx	r2
 800a0a6:	6823      	ldr	r3, [r4, #0]
 800a0a8:	9001      	str	r0, [sp, #4]
 800a0aa:	6958      	ldr	r0, [r3, #20]
 800a0ac:	b958      	cbnz	r0, 800a0c6 <_DispLine+0x36>
 800a0ae:	2001      	movs	r0, #1
 800a0b0:	f7fe fde2 	bl	8008c78 <GUI__ManageCache>
 800a0b4:	6823      	ldr	r3, [r4, #0]
 800a0b6:	69db      	ldr	r3, [r3, #28]
 800a0b8:	695b      	ldr	r3, [r3, #20]
 800a0ba:	b1bb      	cbz	r3, 800a0ec <_DispLine+0x5c>
 800a0bc:	689b      	ldr	r3, [r3, #8]
 800a0be:	9801      	ldr	r0, [sp, #4]
 800a0c0:	9900      	ldr	r1, [sp, #0]
 800a0c2:	4798      	blx	r3
 800a0c4:	e017      	b.n	800a0f6 <_DispLine+0x66>
 800a0c6:	4629      	mov	r1, r5
 800a0c8:	f7ff f93f 	bl	800934a <GUI_RectsIntersect>
 800a0cc:	2800      	cmp	r0, #0
 800a0ce:	d1ee      	bne.n	800a0ae <_DispLine+0x1e>
 800a0d0:	e014      	b.n	800a0fc <_DispLine+0x6c>
 800a0d2:	a801      	add	r0, sp, #4
 800a0d4:	f7fe fe30 	bl	8008d38 <GUI_UC__GetCharCodeInc>
 800a0d8:	6823      	ldr	r3, [r4, #0]
 800a0da:	69db      	ldr	r3, [r3, #28]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	4605      	mov	r5, r0
 800a0e0:	4798      	blx	r3
 800a0e2:	4b09      	ldr	r3, [pc, #36]	; (800a108 <_DispLine+0x78>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	b10b      	cbz	r3, 800a0ec <_DispLine+0x5c>
 800a0e8:	4628      	mov	r0, r5
 800a0ea:	4798      	blx	r3
 800a0ec:	9b00      	ldr	r3, [sp, #0]
 800a0ee:	3b01      	subs	r3, #1
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	9300      	str	r3, [sp, #0]
 800a0f4:	daed      	bge.n	800a0d2 <_DispLine+0x42>
 800a0f6:	2000      	movs	r0, #0
 800a0f8:	f7fe fdbe 	bl	8008c78 <GUI__ManageCache>
 800a0fc:	b003      	add	sp, #12
 800a0fe:	bd30      	pop	{r4, r5, pc}
 800a100:	20000020 	.word	0x20000020
 800a104:	20000018 	.word	0x20000018
 800a108:	20019610 	.word	0x20019610

0800a10c <GUI__GetLineNumChars>:
 800a10c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a10e:	460d      	mov	r5, r1
 800a110:	9001      	str	r0, [sp, #4]
 800a112:	4604      	mov	r4, r0
 800a114:	b198      	cbz	r0, 800a13e <GUI__GetLineNumChars+0x32>
 800a116:	4b0b      	ldr	r3, [pc, #44]	; (800a144 <GUI__GetLineNumChars+0x38>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	69db      	ldr	r3, [r3, #28]
 800a11c:	695b      	ldr	r3, [r3, #20]
 800a11e:	b10b      	cbz	r3, 800a124 <GUI__GetLineNumChars+0x18>
 800a120:	685b      	ldr	r3, [r3, #4]
 800a122:	b90b      	cbnz	r3, 800a128 <GUI__GetLineNumChars+0x1c>
 800a124:	2400      	movs	r4, #0
 800a126:	e008      	b.n	800a13a <GUI__GetLineNumChars+0x2e>
 800a128:	4798      	blx	r3
 800a12a:	e009      	b.n	800a140 <GUI__GetLineNumChars+0x34>
 800a12c:	a801      	add	r0, sp, #4
 800a12e:	f7fe fe03 	bl	8008d38 <GUI_UC__GetCharCodeInc>
 800a132:	b120      	cbz	r0, 800a13e <GUI__GetLineNumChars+0x32>
 800a134:	280a      	cmp	r0, #10
 800a136:	d002      	beq.n	800a13e <GUI__GetLineNumChars+0x32>
 800a138:	3401      	adds	r4, #1
 800a13a:	42ac      	cmp	r4, r5
 800a13c:	dbf6      	blt.n	800a12c <GUI__GetLineNumChars+0x20>
 800a13e:	4620      	mov	r0, r4
 800a140:	b003      	add	sp, #12
 800a142:	bd30      	pop	{r4, r5, pc}
 800a144:	20000018 	.word	0x20000018

0800a148 <GUI__GetOverlap>:
 800a148:	b513      	push	{r0, r1, r4, lr}
 800a14a:	a902      	add	r1, sp, #8
 800a14c:	2400      	movs	r4, #0
 800a14e:	f841 4d04 	str.w	r4, [r1, #-4]!
 800a152:	f000 f8b7 	bl	800a2c4 <GUI_GetCharDistXEx>
 800a156:	9b01      	ldr	r3, [sp, #4]
 800a158:	4283      	cmp	r3, r0
 800a15a:	bfcc      	ite	gt
 800a15c:	ebc0 0003 	rsbgt	r0, r0, r3
 800a160:	4620      	movle	r0, r4
 800a162:	b002      	add	sp, #8
 800a164:	bd10      	pop	{r4, pc}
	...

0800a168 <GUI__GetLineDistX>:
 800a168:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a16a:	4a15      	ldr	r2, [pc, #84]	; (800a1c0 <GUI__GetLineDistX+0x58>)
 800a16c:	9001      	str	r0, [sp, #4]
 800a16e:	ab02      	add	r3, sp, #8
 800a170:	6812      	ldr	r2, [r2, #0]
 800a172:	f843 1d08 	str.w	r1, [r3, #-8]!
 800a176:	4669      	mov	r1, sp
 800a178:	4790      	blx	r2
 800a17a:	9001      	str	r0, [sp, #4]
 800a17c:	b1f0      	cbz	r0, 800a1bc <GUI__GetLineDistX+0x54>
 800a17e:	4b11      	ldr	r3, [pc, #68]	; (800a1c4 <GUI__GetLineDistX+0x5c>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	69db      	ldr	r3, [r3, #28]
 800a184:	695b      	ldr	r3, [r3, #20]
 800a186:	b10b      	cbz	r3, 800a18c <GUI__GetLineDistX+0x24>
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	b913      	cbnz	r3, 800a192 <GUI__GetLineDistX+0x2a>
 800a18c:	2500      	movs	r5, #0
 800a18e:	462c      	mov	r4, r5
 800a190:	e002      	b.n	800a198 <GUI__GetLineDistX+0x30>
 800a192:	9900      	ldr	r1, [sp, #0]
 800a194:	4798      	blx	r3
 800a196:	e011      	b.n	800a1bc <GUI__GetLineDistX+0x54>
 800a198:	9b00      	ldr	r3, [sp, #0]
 800a19a:	3b01      	subs	r3, #1
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	9300      	str	r3, [sp, #0]
 800a1a0:	db07      	blt.n	800a1b2 <GUI__GetLineDistX+0x4a>
 800a1a2:	a801      	add	r0, sp, #4
 800a1a4:	f7fe fdc8 	bl	8008d38 <GUI_UC__GetCharCodeInc>
 800a1a8:	4605      	mov	r5, r0
 800a1aa:	f000 f881 	bl	800a2b0 <GUI_GetCharDistX>
 800a1ae:	4404      	add	r4, r0
 800a1b0:	e7f2      	b.n	800a198 <GUI__GetLineDistX+0x30>
 800a1b2:	4628      	mov	r0, r5
 800a1b4:	f7ff ffc8 	bl	800a148 <GUI__GetOverlap>
 800a1b8:	4420      	add	r0, r4
 800a1ba:	e7ff      	b.n	800a1bc <GUI__GetLineDistX+0x54>
 800a1bc:	b003      	add	sp, #12
 800a1be:	bd30      	pop	{r4, r5, pc}
 800a1c0:	20000020 	.word	0x20000020
 800a1c4:	20000018 	.word	0x20000018

0800a1c8 <GUI__DispLine>:
 800a1c8:	4b27      	ldr	r3, [pc, #156]	; (800a268 <GUI__DispLine+0xa0>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a1ce:	4605      	mov	r5, r0
 800a1d0:	460c      	mov	r4, r1
 800a1d2:	b163      	cbz	r3, 800a1ee <GUI__DispLine+0x26>
 800a1d4:	2000      	movs	r0, #0
 800a1d6:	f7fc fc51 	bl	8006a7c <WM__InitIVRSearch>
 800a1da:	2800      	cmp	r0, #0
 800a1dc:	d041      	beq.n	800a262 <GUI__DispLine+0x9a>
 800a1de:	4628      	mov	r0, r5
 800a1e0:	4621      	mov	r1, r4
 800a1e2:	466a      	mov	r2, sp
 800a1e4:	f7ff ff54 	bl	800a090 <_DispLine>
 800a1e8:	f7fc fb86 	bl	80068f8 <WM__GetNextIVR>
 800a1ec:	e7f5      	b.n	800a1da <GUI__DispLine+0x12>
 800a1ee:	6810      	ldr	r0, [r2, #0]
 800a1f0:	6851      	ldr	r1, [r2, #4]
 800a1f2:	4e1e      	ldr	r6, [pc, #120]	; (800a26c <GUI__DispLine+0xa4>)
 800a1f4:	466b      	mov	r3, sp
 800a1f6:	c303      	stmia	r3!, {r0, r1}
 800a1f8:	6833      	ldr	r3, [r6, #0]
 800a1fa:	f8bd 1000 	ldrh.w	r1, [sp]
 800a1fe:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 800a202:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a206:	4411      	add	r1, r2
 800a208:	f8ad 1000 	strh.w	r1, [sp]
 800a20c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800a210:	4419      	add	r1, r3
 800a212:	f8ad 1002 	strh.w	r1, [sp, #2]
 800a216:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 800a21a:	440a      	add	r2, r1
 800a21c:	f8ad 2004 	strh.w	r2, [sp, #4]
 800a220:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a224:	4668      	mov	r0, sp
 800a226:	4413      	add	r3, r2
 800a228:	f8ad 3006 	strh.w	r3, [sp, #6]
 800a22c:	f7fc fc26 	bl	8006a7c <WM__InitIVRSearch>
 800a230:	6833      	ldr	r3, [r6, #0]
 800a232:	b940      	cbnz	r0, 800a246 <GUI__DispLine+0x7e>
 800a234:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800a236:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a238:	1a8a      	subs	r2, r1, r2
 800a23a:	845a      	strh	r2, [r3, #34]	; 0x22
 800a23c:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 800a23e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a240:	1a8a      	subs	r2, r1, r2
 800a242:	849a      	strh	r2, [r3, #36]	; 0x24
 800a244:	e00d      	b.n	800a262 <GUI__DispLine+0x9a>
 800a246:	f8bd 2000 	ldrh.w	r2, [sp]
 800a24a:	845a      	strh	r2, [r3, #34]	; 0x22
 800a24c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800a250:	849a      	strh	r2, [r3, #36]	; 0x24
 800a252:	4628      	mov	r0, r5
 800a254:	4621      	mov	r1, r4
 800a256:	466a      	mov	r2, sp
 800a258:	f7ff ff1a 	bl	800a090 <_DispLine>
 800a25c:	f7fc fb4c 	bl	80068f8 <WM__GetNextIVR>
 800a260:	e7e6      	b.n	800a230 <GUI__DispLine+0x68>
 800a262:	b002      	add	sp, #8
 800a264:	bd70      	pop	{r4, r5, r6, pc}
 800a266:	bf00      	nop
 800a268:	200195f8 	.word	0x200195f8
 800a26c:	20000018 	.word	0x20000018

0800a270 <GUI_GetYAdjust>:
 800a270:	4b0a      	ldr	r3, [pc, #40]	; (800a29c <GUI_GetYAdjust+0x2c>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a276:	f002 020c 	and.w	r2, r2, #12
 800a27a:	2a08      	cmp	r2, #8
 800a27c:	d007      	beq.n	800a28e <GUI_GetYAdjust+0x1e>
 800a27e:	2a0c      	cmp	r2, #12
 800a280:	d005      	beq.n	800a28e <GUI_GetYAdjust+0x1e>
 800a282:	2a04      	cmp	r2, #4
 800a284:	d107      	bne.n	800a296 <GUI_GetYAdjust+0x26>
 800a286:	69db      	ldr	r3, [r3, #28]
 800a288:	7e18      	ldrb	r0, [r3, #24]
 800a28a:	3801      	subs	r0, #1
 800a28c:	4770      	bx	lr
 800a28e:	69db      	ldr	r3, [r3, #28]
 800a290:	7e18      	ldrb	r0, [r3, #24]
 800a292:	0840      	lsrs	r0, r0, #1
 800a294:	4770      	bx	lr
 800a296:	2000      	movs	r0, #0
 800a298:	4770      	bx	lr
 800a29a:	bf00      	nop
 800a29c:	20000018 	.word	0x20000018

0800a2a0 <GUI_GetFontDistY>:
 800a2a0:	4b02      	ldr	r3, [pc, #8]	; (800a2ac <GUI_GetFontDistY+0xc>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	69db      	ldr	r3, [r3, #28]
 800a2a6:	7e58      	ldrb	r0, [r3, #25]
 800a2a8:	4770      	bx	lr
 800a2aa:	bf00      	nop
 800a2ac:	20000018 	.word	0x20000018

0800a2b0 <GUI_GetCharDistX>:
 800a2b0:	b508      	push	{r3, lr}
 800a2b2:	4b03      	ldr	r3, [pc, #12]	; (800a2c0 <GUI_GetCharDistX+0x10>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	69db      	ldr	r3, [r3, #28]
 800a2b8:	2100      	movs	r1, #0
 800a2ba:	685b      	ldr	r3, [r3, #4]
 800a2bc:	4798      	blx	r3
 800a2be:	bd08      	pop	{r3, pc}
 800a2c0:	20000018 	.word	0x20000018

0800a2c4 <GUI_GetCharDistXEx>:
 800a2c4:	b508      	push	{r3, lr}
 800a2c6:	4b03      	ldr	r3, [pc, #12]	; (800a2d4 <GUI_GetCharDistXEx+0x10>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	69db      	ldr	r3, [r3, #28]
 800a2cc:	685b      	ldr	r3, [r3, #4]
 800a2ce:	4798      	blx	r3
 800a2d0:	bd08      	pop	{r3, pc}
 800a2d2:	bf00      	nop
 800a2d4:	20000018 	.word	0x20000018

0800a2d8 <_PushFreeBlock>:
 800a2d8:	4b07      	ldr	r3, [pc, #28]	; (800a2f8 <_PushFreeBlock+0x20>)
 800a2da:	685a      	ldr	r2, [r3, #4]
 800a2dc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a2de:	3201      	adds	r2, #1
 800a2e0:	b510      	push	{r4, lr}
 800a2e2:	605a      	str	r2, [r3, #4]
 800a2e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a2e6:	eb02 04c0 	add.w	r4, r2, r0, lsl #3
 800a2ea:	6061      	str	r1, [r4, #4]
 800a2ec:	2100      	movs	r1, #0
 800a2ee:	f802 1030 	strb.w	r1, [r2, r0, lsl #3]
 800a2f2:	6258      	str	r0, [r3, #36]	; 0x24
 800a2f4:	bd10      	pop	{r4, pc}
 800a2f6:	bf00      	nop
 800a2f8:	20019634 	.word	0x20019634

0800a2fc <_OnExit>:
 800a2fc:	b538      	push	{r3, r4, r5, lr}
 800a2fe:	4d0b      	ldr	r5, [pc, #44]	; (800a32c <_OnExit+0x30>)
 800a300:	2400      	movs	r4, #0
 800a302:	f105 0040 	add.w	r0, r5, #64	; 0x40
 800a306:	4621      	mov	r1, r4
 800a308:	2280      	movs	r2, #128	; 0x80
 800a30a:	f885 4028 	strb.w	r4, [r5, #40]	; 0x28
 800a30e:	f7fe fc15 	bl	8008b3c <GUI__memset>
 800a312:	4628      	mov	r0, r5
 800a314:	4621      	mov	r1, r4
 800a316:	22c0      	movs	r2, #192	; 0xc0
 800a318:	f7fe fc10 	bl	8008b3c <GUI__memset>
 800a31c:	4621      	mov	r1, r4
 800a31e:	4804      	ldr	r0, [pc, #16]	; (800a330 <_OnExit+0x34>)
 800a320:	220c      	movs	r2, #12
 800a322:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a326:	f7fe bc09 	b.w	8008b3c <GUI__memset>
 800a32a:	bf00      	nop
 800a32c:	20019634 	.word	0x20019634
 800a330:	2001917c 	.word	0x2001917c

0800a334 <_RemoveFreeBlock>:
 800a334:	b510      	push	{r4, lr}
 800a336:	6842      	ldr	r2, [r0, #4]
 800a338:	230f      	movs	r3, #15
 800a33a:	490d      	ldr	r1, [pc, #52]	; (800a370 <_RemoveFreeBlock+0x3c>)
 800a33c:	eb01 04c3 	add.w	r4, r1, r3, lsl #3
 800a340:	6c24      	ldr	r4, [r4, #64]	; 0x40
 800a342:	42a2      	cmp	r2, r4
 800a344:	d203      	bcs.n	800a34e <_RemoveFreeBlock+0x1a>
 800a346:	f113 33ff 	adds.w	r3, r3, #4294967295
 800a34a:	d2f6      	bcs.n	800a33a <_RemoveFreeBlock+0x6>
 800a34c:	bd10      	pop	{r4, pc}
 800a34e:	2b0f      	cmp	r3, #15
 800a350:	d80c      	bhi.n	800a36c <_RemoveFreeBlock+0x38>
 800a352:	680c      	ldr	r4, [r1, #0]
 800a354:	1aa2      	subs	r2, r4, r2
 800a356:	600a      	str	r2, [r1, #0]
 800a358:	6882      	ldr	r2, [r0, #8]
 800a35a:	68c0      	ldr	r0, [r0, #12]
 800a35c:	b102      	cbz	r2, 800a360 <_RemoveFreeBlock+0x2c>
 800a35e:	6050      	str	r0, [r2, #4]
 800a360:	b108      	cbz	r0, 800a366 <_RemoveFreeBlock+0x32>
 800a362:	6002      	str	r2, [r0, #0]
 800a364:	bd10      	pop	{r4, pc}
 800a366:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800a36a:	645a      	str	r2, [r3, #68]	; 0x44
 800a36c:	bd10      	pop	{r4, pc}
 800a36e:	bf00      	nop
 800a370:	20019634 	.word	0x20019634

0800a374 <_AddFreeMemory>:
 800a374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a376:	4e26      	ldr	r6, [pc, #152]	; (800a410 <_AddFreeMemory+0x9c>)
 800a378:	68f3      	ldr	r3, [r6, #12]
 800a37a:	1e5a      	subs	r2, r3, #1
 800a37c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800a37e:	4605      	mov	r5, r0
 800a380:	4413      	add	r3, r2
 800a382:	1808      	adds	r0, r1, r0
 800a384:	4298      	cmp	r0, r3
 800a386:	460c      	mov	r4, r1
 800a388:	d805      	bhi.n	800a396 <_AddFreeMemory+0x22>
 800a38a:	594b      	ldr	r3, [r1, r5]
 800a38c:	b91b      	cbnz	r3, 800a396 <_AddFreeMemory+0x22>
 800a38e:	6843      	ldr	r3, [r0, #4]
 800a390:	441d      	add	r5, r3
 800a392:	f7ff ffcf 	bl	800a334 <_RemoveFreeBlock>
 800a396:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800a398:	429c      	cmp	r4, r3
 800a39a:	d90a      	bls.n	800a3b2 <_AddFreeMemory+0x3e>
 800a39c:	f854 7c04 	ldr.w	r7, [r4, #-4]
 800a3a0:	1be7      	subs	r7, r4, r7
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	b92b      	cbnz	r3, 800a3b2 <_AddFreeMemory+0x3e>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	4638      	mov	r0, r7
 800a3aa:	441d      	add	r5, r3
 800a3ac:	f7ff ffc2 	bl	800a334 <_RemoveFreeBlock>
 800a3b0:	463c      	mov	r4, r7
 800a3b2:	230f      	movs	r3, #15
 800a3b4:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800a3b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800a3ba:	4295      	cmp	r5, r2
 800a3bc:	d203      	bcs.n	800a3c6 <_AddFreeMemory+0x52>
 800a3be:	f113 33ff 	adds.w	r3, r3, #4294967295
 800a3c2:	d2f7      	bcs.n	800a3b4 <_AddFreeMemory+0x40>
 800a3c4:	e022      	b.n	800a40c <_AddFreeMemory+0x98>
 800a3c6:	2b0f      	cmp	r3, #15
 800a3c8:	d820      	bhi.n	800a40c <_AddFreeMemory+0x98>
 800a3ca:	3308      	adds	r3, #8
 800a3cc:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800a3d0:	1961      	adds	r1, r4, r5
 800a3d2:	6852      	ldr	r2, [r2, #4]
 800a3d4:	60a2      	str	r2, [r4, #8]
 800a3d6:	2000      	movs	r0, #0
 800a3d8:	e884 0021 	stmia.w	r4, {r0, r5}
 800a3dc:	6124      	str	r4, [r4, #16]
 800a3de:	f841 5c04 	str.w	r5, [r1, #-4]
 800a3e2:	f104 0108 	add.w	r1, r4, #8
 800a3e6:	b102      	cbz	r2, 800a3ea <_AddFreeMemory+0x76>
 800a3e8:	6051      	str	r1, [r2, #4]
 800a3ea:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800a3ee:	60e0      	str	r0, [r4, #12]
 800a3f0:	6059      	str	r1, [r3, #4]
 800a3f2:	6833      	ldr	r3, [r6, #0]
 800a3f4:	f896 1029 	ldrb.w	r1, [r6, #41]	; 0x29
 800a3f8:	4a05      	ldr	r2, [pc, #20]	; (800a410 <_AddFreeMemory+0x9c>)
 800a3fa:	442b      	add	r3, r5
 800a3fc:	6033      	str	r3, [r6, #0]
 800a3fe:	b929      	cbnz	r1, 800a40c <_AddFreeMemory+0x98>
 800a400:	68d1      	ldr	r1, [r2, #12]
 800a402:	1acb      	subs	r3, r1, r3
 800a404:	6891      	ldr	r1, [r2, #8]
 800a406:	4299      	cmp	r1, r3
 800a408:	bf38      	it	cc
 800a40a:	6093      	strcc	r3, [r2, #8]
 800a40c:	4628      	mov	r0, r5
 800a40e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a410:	20019634 	.word	0x20019634

0800a414 <_RemoveHoles>:
 800a414:	4b25      	ldr	r3, [pc, #148]	; (800a4ac <_RemoveHoles+0x98>)
 800a416:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a41a:	68da      	ldr	r2, [r3, #12]
 800a41c:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800a41e:	3a01      	subs	r2, #1
 800a420:	4682      	mov	sl, r0
 800a422:	eb02 0904 	add.w	r9, r2, r4
 800a426:	469b      	mov	fp, r3
 800a428:	e894 0028 	ldmia.w	r4, {r3, r5}
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d133      	bne.n	800a498 <_RemoveHoles+0x84>
 800a430:	eb04 0805 	add.w	r8, r4, r5
 800a434:	45c8      	cmp	r8, r9
 800a436:	d22f      	bcs.n	800a498 <_RemoveHoles+0x84>
 800a438:	f854 c005 	ldr.w	ip, [r4, r5]
 800a43c:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800a440:	f1bc 0f00 	cmp.w	ip, #0
 800a444:	d028      	beq.n	800a498 <_RemoveHoles+0x84>
 800a446:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 800a44a:	4f18      	ldr	r7, [pc, #96]	; (800a4ac <_RemoveHoles+0x98>)
 800a44c:	f813 303c 	ldrb.w	r3, [r3, ip, lsl #3]
 800a450:	2b01      	cmp	r3, #1
 800a452:	d121      	bne.n	800a498 <_RemoveHoles+0x84>
 800a454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a456:	4620      	mov	r0, r4
 800a458:	e88d 1008 	stmia.w	sp, {r3, ip}
 800a45c:	f7ff ff6a 	bl	800a334 <_RemoveFreeBlock>
 800a460:	f8d8 1000 	ldr.w	r1, [r8]
 800a464:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a466:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800a46a:	4620      	mov	r0, r4
 800a46c:	6054      	str	r4, [r2, #4]
 800a46e:	4641      	mov	r1, r8
 800a470:	4632      	mov	r2, r6
 800a472:	f002 f958 	bl	800c726 <memmove>
 800a476:	e89d 1008 	ldmia.w	sp, {r3, ip}
 800a47a:	459c      	cmp	ip, r3
 800a47c:	d102      	bne.n	800a484 <_RemoveHoles+0x70>
 800a47e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a480:	1b5b      	subs	r3, r3, r5
 800a482:	637b      	str	r3, [r7, #52]	; 0x34
 800a484:	4628      	mov	r0, r5
 800a486:	19a1      	adds	r1, r4, r6
 800a488:	f7ff ff74 	bl	800a374 <_AddFreeMemory>
 800a48c:	f1ba 0f00 	cmp.w	sl, #0
 800a490:	d001      	beq.n	800a496 <_RemoveHoles+0x82>
 800a492:	4582      	cmp	sl, r0
 800a494:	d905      	bls.n	800a4a2 <_RemoveHoles+0x8e>
 800a496:	4635      	mov	r5, r6
 800a498:	442c      	add	r4, r5
 800a49a:	454c      	cmp	r4, r9
 800a49c:	d3c4      	bcc.n	800a428 <_RemoveHoles+0x14>
 800a49e:	2001      	movs	r0, #1
 800a4a0:	e000      	b.n	800a4a4 <_RemoveHoles+0x90>
 800a4a2:	2000      	movs	r0, #0
 800a4a4:	b003      	add	sp, #12
 800a4a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4aa:	bf00      	nop
 800a4ac:	20019634 	.word	0x20019634

0800a4b0 <GUI_ALLOC_FreeFixedBlock>:
 800a4b0:	b128      	cbz	r0, 800a4be <GUI_ALLOC_FreeFixedBlock+0xe>
 800a4b2:	4a03      	ldr	r2, [pc, #12]	; (800a4c0 <GUI_ALLOC_FreeFixedBlock+0x10>)
 800a4b4:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800a4b6:	6003      	str	r3, [r0, #0]
 800a4b8:	b103      	cbz	r3, 800a4bc <GUI_ALLOC_FreeFixedBlock+0xc>
 800a4ba:	6058      	str	r0, [r3, #4]
 800a4bc:	63d0      	str	r0, [r2, #60]	; 0x3c
 800a4be:	4770      	bx	lr
 800a4c0:	20019634 	.word	0x20019634

0800a4c4 <GUI_ALLOC_h2p>:
 800a4c4:	b128      	cbz	r0, 800a4d2 <GUI_ALLOC_h2p+0xe>
 800a4c6:	4b03      	ldr	r3, [pc, #12]	; (800a4d4 <GUI_ALLOC_h2p+0x10>)
 800a4c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4ca:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800a4ce:	6840      	ldr	r0, [r0, #4]
 800a4d0:	3008      	adds	r0, #8
 800a4d2:	4770      	bx	lr
 800a4d4:	20019634 	.word	0x20019634

0800a4d8 <GUI_ALLOC_LockH>:
 800a4d8:	4b05      	ldr	r3, [pc, #20]	; (800a4f0 <GUI_ALLOC_LockH+0x18>)
 800a4da:	69d9      	ldr	r1, [r3, #28]
 800a4dc:	3101      	adds	r1, #1
 800a4de:	61d9      	str	r1, [r3, #28]
 800a4e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4e2:	f813 1030 	ldrb.w	r1, [r3, r0, lsl #3]
 800a4e6:	3101      	adds	r1, #1
 800a4e8:	f803 1030 	strb.w	r1, [r3, r0, lsl #3]
 800a4ec:	f7ff bfea 	b.w	800a4c4 <GUI_ALLOC_h2p>
 800a4f0:	20019634 	.word	0x20019634

0800a4f4 <GUI_ALLOC_UnlockH>:
 800a4f4:	b530      	push	{r4, r5, lr}
 800a4f6:	6802      	ldr	r2, [r0, #0]
 800a4f8:	4b09      	ldr	r3, [pc, #36]	; (800a520 <GUI_ALLOC_UnlockH+0x2c>)
 800a4fa:	f852 1c08 	ldr.w	r1, [r2, #-8]
 800a4fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a500:	f812 4031 	ldrb.w	r4, [r2, r1, lsl #3]
 800a504:	2c01      	cmp	r4, #1
 800a506:	d903      	bls.n	800a510 <GUI_ALLOC_UnlockH+0x1c>
 800a508:	69dd      	ldr	r5, [r3, #28]
 800a50a:	b10d      	cbz	r5, 800a510 <GUI_ALLOC_UnlockH+0x1c>
 800a50c:	3d01      	subs	r5, #1
 800a50e:	61dd      	str	r5, [r3, #28]
 800a510:	3c01      	subs	r4, #1
 800a512:	f802 4031 	strb.w	r4, [r2, r1, lsl #3]
 800a516:	2300      	movs	r3, #0
 800a518:	6003      	str	r3, [r0, #0]
 800a51a:	4618      	mov	r0, r3
 800a51c:	bd30      	pop	{r4, r5, pc}
 800a51e:	bf00      	nop
 800a520:	20019634 	.word	0x20019634

0800a524 <GUI_ALLOC_AssignMemory>:
 800a524:	4b02      	ldr	r3, [pc, #8]	; (800a530 <GUI_ALLOC_AssignMemory+0xc>)
 800a526:	f021 0103 	bic.w	r1, r1, #3
 800a52a:	6018      	str	r0, [r3, #0]
 800a52c:	6059      	str	r1, [r3, #4]
 800a52e:	4770      	bx	lr
 800a530:	2001917c 	.word	0x2001917c

0800a534 <GUI_ALLOC_Free>:
 800a534:	b510      	push	{r4, lr}
 800a536:	4604      	mov	r4, r0
 800a538:	b180      	cbz	r0, 800a55c <GUI_ALLOC_Free+0x28>
 800a53a:	4b09      	ldr	r3, [pc, #36]	; (800a560 <GUI_ALLOC_Free+0x2c>)
 800a53c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a53e:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
 800a542:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 800a546:	2b01      	cmp	r3, #1
 800a548:	d108      	bne.n	800a55c <GUI_ALLOC_Free+0x28>
 800a54a:	6851      	ldr	r1, [r2, #4]
 800a54c:	6848      	ldr	r0, [r1, #4]
 800a54e:	f7ff ff11 	bl	800a374 <_AddFreeMemory>
 800a552:	4620      	mov	r0, r4
 800a554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a558:	f7ff bebe 	b.w	800a2d8 <_PushFreeBlock>
 800a55c:	bd10      	pop	{r4, pc}
 800a55e:	bf00      	nop
 800a560:	20019634 	.word	0x20019634

0800a564 <_EnlargeBlocks>:
 800a564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a568:	4c22      	ldr	r4, [pc, #136]	; (800a5f4 <_EnlargeBlocks+0x90>)
 800a56a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a56c:	b93b      	cbnz	r3, 800a57e <_EnlargeBlocks+0x1a>
 800a56e:	4b22      	ldr	r3, [pc, #136]	; (800a5f8 <_EnlargeBlocks+0x94>)
 800a570:	689d      	ldr	r5, [r3, #8]
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	3508      	adds	r5, #8
 800a576:	fbb3 f5f5 	udiv	r5, r3, r5
 800a57a:	3502      	adds	r5, #2
 800a57c:	e003      	b.n	800a586 <_EnlargeBlocks+0x22>
 800a57e:	6923      	ldr	r3, [r4, #16]
 800a580:	1d1d      	adds	r5, r3, #4
 800a582:	eb05 05d3 	add.w	r5, r5, r3, lsr #3
 800a586:	00e8      	lsls	r0, r5, #3
 800a588:	f000 f978 	bl	800a87c <_Alloc>
 800a58c:	4680      	mov	r8, r0
 800a58e:	b360      	cbz	r0, 800a5ea <_EnlargeBlocks+0x86>
 800a590:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a592:	6922      	ldr	r2, [r4, #16]
 800a594:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a596:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
 800a59a:	00d2      	lsls	r2, r2, #3
 800a59c:	685e      	ldr	r6, [r3, #4]
 800a59e:	3608      	adds	r6, #8
 800a5a0:	4630      	mov	r0, r6
 800a5a2:	f002 f8b5 	bl	800c710 <memcpy>
 800a5a6:	6922      	ldr	r2, [r4, #16]
 800a5a8:	6366      	str	r6, [r4, #52]	; 0x34
 800a5aa:	eb06 01c2 	add.w	r1, r6, r2, lsl #3
 800a5ae:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 800a5b2:	3104      	adds	r1, #4
 800a5b4:	4613      	mov	r3, r2
 800a5b6:	1e68      	subs	r0, r5, #1
 800a5b8:	4283      	cmp	r3, r0
 800a5ba:	f101 0108 	add.w	r1, r1, #8
 800a5be:	d203      	bcs.n	800a5c8 <_EnlargeBlocks+0x64>
 800a5c0:	3301      	adds	r3, #1
 800a5c2:	f841 3c08 	str.w	r3, [r1, #-8]
 800a5c6:	e7f6      	b.n	800a5b6 <_EnlargeBlocks+0x52>
 800a5c8:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800a5cc:	2600      	movs	r6, #0
 800a5ce:	605e      	str	r6, [r3, #4]
 800a5d0:	6863      	ldr	r3, [r4, #4]
 800a5d2:	6262      	str	r2, [r4, #36]	; 0x24
 800a5d4:	1a9b      	subs	r3, r3, r2
 800a5d6:	442b      	add	r3, r5
 800a5d8:	6063      	str	r3, [r4, #4]
 800a5da:	6125      	str	r5, [r4, #16]
 800a5dc:	4638      	mov	r0, r7
 800a5de:	b13f      	cbz	r7, 800a5f0 <_EnlargeBlocks+0x8c>
 800a5e0:	f7ff ffa8 	bl	800a534 <GUI_ALLOC_Free>
 800a5e4:	4630      	mov	r0, r6
 800a5e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5ea:	2001      	movs	r0, #1
 800a5ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5f4:	20019634 	.word	0x20019634
 800a5f8:	2001917c 	.word	0x2001917c

0800a5fc <_InitOnce>:
 800a5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5fe:	4e58      	ldr	r6, [pc, #352]	; (800a760 <_InitOnce+0x164>)
 800a600:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800a604:	2900      	cmp	r1, #0
 800a606:	f040 80aa 	bne.w	800a75e <_InitOnce+0x162>
 800a60a:	4d56      	ldr	r5, [pc, #344]	; (800a764 <_InitOnce+0x168>)
 800a60c:	686a      	ldr	r2, [r5, #4]
 800a60e:	2301      	movs	r3, #1
 800a610:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
 800a614:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 800a618:	bf28      	it	cs
 800a61a:	f44f 5220 	movcs.w	r2, #10240	; 0x2800
 800a61e:	682b      	ldr	r3, [r5, #0]
 800a620:	0894      	lsrs	r4, r2, #2
 800a622:	2000      	movs	r0, #0
 800a624:	42a0      	cmp	r0, r4
 800a626:	d00c      	beq.n	800a642 <_InitOnce+0x46>
 800a628:	1847      	adds	r7, r0, r1
 800a62a:	f04f 0eff 	mov.w	lr, #255	; 0xff
 800a62e:	fbb7 fefe 	udiv	lr, r7, lr
 800a632:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 800a636:	ebce 0707 	rsb	r7, lr, r7
 800a63a:	f843 7020 	str.w	r7, [r3, r0, lsl #2]
 800a63e:	3001      	adds	r0, #1
 800a640:	e7f0      	b.n	800a624 <_InitOnce+0x28>
 800a642:	2000      	movs	r0, #0
 800a644:	42a0      	cmp	r0, r4
 800a646:	d016      	beq.n	800a676 <_InitOnce+0x7a>
 800a648:	1847      	adds	r7, r0, r1
 800a64a:	f04f 0eff 	mov.w	lr, #255	; 0xff
 800a64e:	fbb7 fefe 	udiv	lr, r7, lr
 800a652:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 800a656:	ebce 0e07 	rsb	lr, lr, r7
 800a65a:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800a65e:	4577      	cmp	r7, lr
 800a660:	d007      	beq.n	800a672 <_InitOnce+0x76>
 800a662:	68aa      	ldr	r2, [r5, #8]
 800a664:	4b3f      	ldr	r3, [pc, #252]	; (800a764 <_InitOnce+0x168>)
 800a666:	2a00      	cmp	r2, #0
 800a668:	d155      	bne.n	800a716 <_InitOnce+0x11a>
 800a66a:	685a      	ldr	r2, [r3, #4]
 800a66c:	0892      	lsrs	r2, r2, #2
 800a66e:	609a      	str	r2, [r3, #8]
 800a670:	e051      	b.n	800a716 <_InitOnce+0x11a>
 800a672:	3001      	adds	r0, #1
 800a674:	e7e6      	b.n	800a644 <_InitOnce+0x48>
 800a676:	3101      	adds	r1, #1
 800a678:	2902      	cmp	r1, #2
 800a67a:	d1d2      	bne.n	800a622 <_InitOnce+0x26>
 800a67c:	0854      	lsrs	r4, r2, #1
 800a67e:	2100      	movs	r1, #0
 800a680:	2000      	movs	r0, #0
 800a682:	42a0      	cmp	r0, r4
 800a684:	d00c      	beq.n	800a6a0 <_InitOnce+0xa4>
 800a686:	1847      	adds	r7, r0, r1
 800a688:	f04f 0eff 	mov.w	lr, #255	; 0xff
 800a68c:	fbb7 fefe 	udiv	lr, r7, lr
 800a690:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 800a694:	ebce 0707 	rsb	r7, lr, r7
 800a698:	f823 7010 	strh.w	r7, [r3, r0, lsl #1]
 800a69c:	3001      	adds	r0, #1
 800a69e:	e7f0      	b.n	800a682 <_InitOnce+0x86>
 800a6a0:	2000      	movs	r0, #0
 800a6a2:	42a0      	cmp	r0, r4
 800a6a4:	d00f      	beq.n	800a6c6 <_InitOnce+0xca>
 800a6a6:	1847      	adds	r7, r0, r1
 800a6a8:	f04f 0eff 	mov.w	lr, #255	; 0xff
 800a6ac:	fbb7 fefe 	udiv	lr, r7, lr
 800a6b0:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 800a6b4:	ebce 0707 	rsb	r7, lr, r7
 800a6b8:	f833 c010 	ldrh.w	ip, [r3, r0, lsl #1]
 800a6bc:	b2bf      	uxth	r7, r7
 800a6be:	45bc      	cmp	ip, r7
 800a6c0:	d1cf      	bne.n	800a662 <_InitOnce+0x66>
 800a6c2:	3001      	adds	r0, #1
 800a6c4:	e7ed      	b.n	800a6a2 <_InitOnce+0xa6>
 800a6c6:	3101      	adds	r1, #1
 800a6c8:	2902      	cmp	r1, #2
 800a6ca:	d1d9      	bne.n	800a680 <_InitOnce+0x84>
 800a6cc:	2100      	movs	r1, #0
 800a6ce:	2000      	movs	r0, #0
 800a6d0:	4290      	cmp	r0, r2
 800a6d2:	d007      	beq.n	800a6e4 <_InitOnce+0xe8>
 800a6d4:	1844      	adds	r4, r0, r1
 800a6d6:	27ff      	movs	r7, #255	; 0xff
 800a6d8:	fbb4 f7f7 	udiv	r7, r4, r7
 800a6dc:	443c      	add	r4, r7
 800a6de:	541c      	strb	r4, [r3, r0]
 800a6e0:	3001      	adds	r0, #1
 800a6e2:	e7f5      	b.n	800a6d0 <_InitOnce+0xd4>
 800a6e4:	2000      	movs	r0, #0
 800a6e6:	4290      	cmp	r0, r2
 800a6e8:	d00b      	beq.n	800a702 <_InitOnce+0x106>
 800a6ea:	1844      	adds	r4, r0, r1
 800a6ec:	27ff      	movs	r7, #255	; 0xff
 800a6ee:	fbb4 f7f7 	udiv	r7, r4, r7
 800a6f2:	443c      	add	r4, r7
 800a6f4:	5c1f      	ldrb	r7, [r3, r0]
 800a6f6:	f004 04ff 	and.w	r4, r4, #255	; 0xff
 800a6fa:	42a7      	cmp	r7, r4
 800a6fc:	d1b1      	bne.n	800a662 <_InitOnce+0x66>
 800a6fe:	3001      	adds	r0, #1
 800a700:	e7f1      	b.n	800a6e6 <_InitOnce+0xea>
 800a702:	3101      	adds	r1, #1
 800a704:	2902      	cmp	r1, #2
 800a706:	d1e2      	bne.n	800a6ce <_InitOnce+0xd2>
 800a708:	2100      	movs	r1, #0
 800a70a:	4291      	cmp	r1, r2
 800a70c:	d0a9      	beq.n	800a662 <_InitOnce+0x66>
 800a70e:	2000      	movs	r0, #0
 800a710:	5458      	strb	r0, [r3, r1]
 800a712:	3101      	adds	r1, #1
 800a714:	e7f9      	b.n	800a70a <_InitOnce+0x10e>
 800a716:	4814      	ldr	r0, [pc, #80]	; (800a768 <_InitOnce+0x16c>)
 800a718:	4b14      	ldr	r3, [pc, #80]	; (800a76c <_InitOnce+0x170>)
 800a71a:	6003      	str	r3, [r0, #0]
 800a71c:	f7ff fabc 	bl	8009c98 <GUI__RegisterExit>
 800a720:	235a      	movs	r3, #90	; 0x5a
 800a722:	6233      	str	r3, [r6, #32]
 800a724:	2300      	movs	r3, #0
 800a726:	2110      	movs	r1, #16
 800a728:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800a72c:	4099      	lsls	r1, r3
 800a72e:	3301      	adds	r3, #1
 800a730:	2b10      	cmp	r3, #16
 800a732:	4c0b      	ldr	r4, [pc, #44]	; (800a760 <_InitOnce+0x164>)
 800a734:	6411      	str	r1, [r2, #64]	; 0x40
 800a736:	d1f6      	bne.n	800a726 <_InitOnce+0x12a>
 800a738:	6868      	ldr	r0, [r5, #4]
 800a73a:	6829      	ldr	r1, [r5, #0]
 800a73c:	63a1      	str	r1, [r4, #56]	; 0x38
 800a73e:	2302      	movs	r3, #2
 800a740:	6123      	str	r3, [r4, #16]
 800a742:	f1a0 0314 	sub.w	r3, r0, #20
 800a746:	440b      	add	r3, r1
 800a748:	2501      	movs	r5, #1
 800a74a:	6363      	str	r3, [r4, #52]	; 0x34
 800a74c:	60e0      	str	r0, [r4, #12]
 800a74e:	605d      	str	r5, [r3, #4]
 800a750:	6265      	str	r5, [r4, #36]	; 0x24
 800a752:	6065      	str	r5, [r4, #4]
 800a754:	f7ff fe0e 	bl	800a374 <_AddFreeMemory>
 800a758:	f7ff ff04 	bl	800a564 <_EnlargeBlocks>
 800a75c:	6325      	str	r5, [r4, #48]	; 0x30
 800a75e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a760:	20019634 	.word	0x20019634
 800a764:	2001917c 	.word	0x2001917c
 800a768:	20019188 	.word	0x20019188
 800a76c:	0800a2fd 	.word	0x0800a2fd

0800a770 <GUI_ALLOC_GetFixedBlock>:
 800a770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a774:	4605      	mov	r5, r0
 800a776:	4e26      	ldr	r6, [pc, #152]	; (800a810 <GUI_ALLOC_GetFixedBlock+0xa0>)
 800a778:	3503      	adds	r5, #3
 800a77a:	f7ff ff3f 	bl	800a5fc <_InitOnce>
 800a77e:	f025 0503 	bic.w	r5, r5, #3
 800a782:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800a784:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 800a786:	3504      	adds	r5, #4
 800a788:	429d      	cmp	r5, r3
 800a78a:	bf38      	it	cc
 800a78c:	461d      	movcc	r5, r3
 800a78e:	4614      	mov	r4, r2
 800a790:	b12c      	cbz	r4, 800a79e <GUI_ALLOC_GetFixedBlock+0x2e>
 800a792:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a796:	42ab      	cmp	r3, r5
 800a798:	d02c      	beq.n	800a7f4 <GUI_ALLOC_GetFixedBlock+0x84>
 800a79a:	6824      	ldr	r4, [r4, #0]
 800a79c:	e7f8      	b.n	800a790 <GUI_ALLOC_GetFixedBlock+0x20>
 800a79e:	68f3      	ldr	r3, [r6, #12]
 800a7a0:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 800a7a2:	eb02 0803 	add.w	r8, r2, r3
 800a7a6:	f858 7c04 	ldr.w	r7, [r8, #-4]
 800a7aa:	ebc7 0708 	rsb	r7, r7, r8
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	b133      	cbz	r3, 800a7c0 <GUI_ALLOC_GetFixedBlock+0x50>
 800a7b2:	4620      	mov	r0, r4
 800a7b4:	f7ff fe2e 	bl	800a414 <_RemoveHoles>
 800a7b8:	f858 7c04 	ldr.w	r7, [r8, #-4]
 800a7bc:	ebc7 0708 	rsb	r7, r7, r8
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	bb13      	cbnz	r3, 800a80a <GUI_ALLOC_GetFixedBlock+0x9a>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	42ab      	cmp	r3, r5
 800a7c8:	db1f      	blt.n	800a80a <GUI_ALLOC_GetFixedBlock+0x9a>
 800a7ca:	4638      	mov	r0, r7
 800a7cc:	1d1c      	adds	r4, r3, #4
 800a7ce:	f7ff fdb1 	bl	800a334 <_RemoveFreeBlock>
 800a7d2:	68f3      	ldr	r3, [r6, #12]
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	1b5b      	subs	r3, r3, r5
 800a7d8:	60f3      	str	r3, [r6, #12]
 800a7da:	6973      	ldr	r3, [r6, #20]
 800a7dc:	1b64      	subs	r4, r4, r5
 800a7de:	442b      	add	r3, r5
 800a7e0:	1b40      	subs	r0, r0, r5
 800a7e2:	443c      	add	r4, r7
 800a7e4:	6173      	str	r3, [r6, #20]
 800a7e6:	d002      	beq.n	800a7ee <GUI_ALLOC_GetFixedBlock+0x7e>
 800a7e8:	4639      	mov	r1, r7
 800a7ea:	f7ff fdc3 	bl	800a374 <_AddFreeMemory>
 800a7ee:	f844 5c04 	str.w	r5, [r4, #-4]
 800a7f2:	e00a      	b.n	800a80a <GUI_ALLOC_GetFixedBlock+0x9a>
 800a7f4:	6823      	ldr	r3, [r4, #0]
 800a7f6:	b10b      	cbz	r3, 800a7fc <GUI_ALLOC_GetFixedBlock+0x8c>
 800a7f8:	6861      	ldr	r1, [r4, #4]
 800a7fa:	6059      	str	r1, [r3, #4]
 800a7fc:	6861      	ldr	r1, [r4, #4]
 800a7fe:	b101      	cbz	r1, 800a802 <GUI_ALLOC_GetFixedBlock+0x92>
 800a800:	600b      	str	r3, [r1, #0]
 800a802:	42a2      	cmp	r2, r4
 800a804:	d101      	bne.n	800a80a <GUI_ALLOC_GetFixedBlock+0x9a>
 800a806:	6823      	ldr	r3, [r4, #0]
 800a808:	63f3      	str	r3, [r6, #60]	; 0x3c
 800a80a:	4620      	mov	r0, r4
 800a80c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a810:	20019634 	.word	0x20019634

0800a814 <GUI_ALLOC_GetMaxSize>:
 800a814:	b508      	push	{r3, lr}
 800a816:	f7ff fef1 	bl	800a5fc <_InitOnce>
 800a81a:	2200      	movs	r2, #0
 800a81c:	4b0b      	ldr	r3, [pc, #44]	; (800a84c <GUI_ALLOC_GetMaxSize+0x38>)
 800a81e:	4413      	add	r3, r2
 800a820:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a824:	b113      	cbz	r3, 800a82c <GUI_ALLOC_GetMaxSize+0x18>
 800a826:	689b      	ldr	r3, [r3, #8]
 800a828:	2000      	movs	r0, #0
 800a82a:	e00b      	b.n	800a844 <GUI_ALLOC_GetMaxSize+0x30>
 800a82c:	3a08      	subs	r2, #8
 800a82e:	f112 0f80 	cmn.w	r2, #128	; 0x80
 800a832:	d1f3      	bne.n	800a81c <GUI_ALLOC_GetMaxSize+0x8>
 800a834:	e7f8      	b.n	800a828 <GUI_ALLOC_GetMaxSize+0x14>
 800a836:	685a      	ldr	r2, [r3, #4]
 800a838:	689b      	ldr	r3, [r3, #8]
 800a83a:	4290      	cmp	r0, r2
 800a83c:	bf38      	it	cc
 800a83e:	4610      	movcc	r0, r2
 800a840:	b113      	cbz	r3, 800a848 <GUI_ALLOC_GetMaxSize+0x34>
 800a842:	689b      	ldr	r3, [r3, #8]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d1f6      	bne.n	800a836 <GUI_ALLOC_GetMaxSize+0x22>
 800a848:	380c      	subs	r0, #12
 800a84a:	bd08      	pop	{r3, pc}
 800a84c:	20019634 	.word	0x20019634

0800a850 <GUI_ALLOC_RequestSize>:
 800a850:	b508      	push	{r3, lr}
 800a852:	f7ff ffdf 	bl	800a814 <GUI_ALLOC_GetMaxSize>
 800a856:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 800a85a:	f04f 0364 	mov.w	r3, #100	; 0x64
 800a85e:	4a06      	ldr	r2, [pc, #24]	; (800a878 <GUI_ALLOC_RequestSize+0x28>)
 800a860:	d904      	bls.n	800a86c <GUI_ALLOC_RequestSize+0x1c>
 800a862:	fb90 f0f3 	sdiv	r0, r0, r3
 800a866:	6a13      	ldr	r3, [r2, #32]
 800a868:	4358      	muls	r0, r3
 800a86a:	bd08      	pop	{r3, pc}
 800a86c:	6a12      	ldr	r2, [r2, #32]
 800a86e:	4350      	muls	r0, r2
 800a870:	fbb0 f0f3 	udiv	r0, r0, r3
 800a874:	bd08      	pop	{r3, pc}
 800a876:	bf00      	nop
 800a878:	20019634 	.word	0x20019634

0800a87c <_Alloc>:
 800a87c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a880:	4d38      	ldr	r5, [pc, #224]	; (800a964 <_Alloc+0xe8>)
 800a882:	4604      	mov	r4, r0
 800a884:	f7ff feba 	bl	800a5fc <_InitOnce>
 800a888:	6c2f      	ldr	r7, [r5, #64]	; 0x40
 800a88a:	682b      	ldr	r3, [r5, #0]
 800a88c:	42bc      	cmp	r4, r7
 800a88e:	bf24      	itt	cs
 800a890:	1ce7      	addcs	r7, r4, #3
 800a892:	f027 0703 	biccs.w	r7, r7, #3
 800a896:	370c      	adds	r7, #12
 800a898:	429f      	cmp	r7, r3
 800a89a:	4c32      	ldr	r4, [pc, #200]	; (800a964 <_Alloc+0xe8>)
 800a89c:	d83e      	bhi.n	800a91c <_Alloc+0xa0>
 800a89e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a8a0:	6862      	ldr	r2, [r4, #4]
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d90f      	bls.n	800a8c6 <_Alloc+0x4a>
 800a8a6:	686b      	ldr	r3, [r5, #4]
 800a8a8:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 800a8aa:	3b01      	subs	r3, #1
 800a8ac:	606b      	str	r3, [r5, #4]
 800a8ae:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a8b0:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 800a8b4:	eb03 0209 	add.w	r2, r3, r9
 800a8b8:	6852      	ldr	r2, [r2, #4]
 800a8ba:	626a      	str	r2, [r5, #36]	; 0x24
 800a8bc:	2201      	movs	r2, #1
 800a8be:	f803 2036 	strb.w	r2, [r3, r6, lsl #3]
 800a8c2:	b956      	cbnz	r6, 800a8da <_Alloc+0x5e>
 800a8c4:	e02a      	b.n	800a91c <_Alloc+0xa0>
 800a8c6:	3b01      	subs	r3, #1
 800a8c8:	6323      	str	r3, [r4, #48]	; 0x30
 800a8ca:	f7ff fe4b 	bl	800a564 <_EnlargeBlocks>
 800a8ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a8d0:	3301      	adds	r3, #1
 800a8d2:	6323      	str	r3, [r4, #48]	; 0x30
 800a8d4:	2800      	cmp	r0, #0
 800a8d6:	d0e6      	beq.n	800a8a6 <_Alloc+0x2a>
 800a8d8:	e020      	b.n	800a91c <_Alloc+0xa0>
 800a8da:	230f      	movs	r3, #15
 800a8dc:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 800a8e0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800a8e2:	4297      	cmp	r7, r2
 800a8e4:	d20c      	bcs.n	800a900 <_Alloc+0x84>
 800a8e6:	f113 33ff 	adds.w	r3, r3, #4294967295
 800a8ea:	d2f7      	bcs.n	800a8dc <_Alloc+0x60>
 800a8ec:	e008      	b.n	800a900 <_Alloc+0x84>
 800a8ee:	6894      	ldr	r4, [r2, #8]
 800a8f0:	b12c      	cbz	r4, 800a8fe <_Alloc+0x82>
 800a8f2:	6862      	ldr	r2, [r4, #4]
 800a8f4:	4297      	cmp	r7, r2
 800a8f6:	d914      	bls.n	800a922 <_Alloc+0xa6>
 800a8f8:	68a2      	ldr	r2, [r4, #8]
 800a8fa:	2a00      	cmp	r2, #0
 800a8fc:	d1f7      	bne.n	800a8ee <_Alloc+0x72>
 800a8fe:	3301      	adds	r3, #1
 800a900:	2b0f      	cmp	r3, #15
 800a902:	d803      	bhi.n	800a90c <_Alloc+0x90>
 800a904:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 800a908:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800a90a:	e7f6      	b.n	800a8fa <_Alloc+0x7e>
 800a90c:	4638      	mov	r0, r7
 800a90e:	f7ff fd81 	bl	800a414 <_RemoveHoles>
 800a912:	2800      	cmp	r0, #0
 800a914:	d0e1      	beq.n	800a8da <_Alloc+0x5e>
 800a916:	4630      	mov	r0, r6
 800a918:	f7ff fcde 	bl	800a2d8 <_PushFreeBlock>
 800a91c:	2000      	movs	r0, #0
 800a91e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a922:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800a926:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800a928:	ebc7 0208 	rsb	r2, r7, r8
 800a92c:	330c      	adds	r3, #12
 800a92e:	4620      	mov	r0, r4
 800a930:	429a      	cmp	r2, r3
 800a932:	bf38      	it	cc
 800a934:	4647      	movcc	r7, r8
 800a936:	f7ff fcfd 	bl	800a334 <_RemoveFreeBlock>
 800a93a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a93c:	444b      	add	r3, r9
 800a93e:	19e1      	adds	r1, r4, r7
 800a940:	605c      	str	r4, [r3, #4]
 800a942:	45b8      	cmp	r8, r7
 800a944:	f04f 0300 	mov.w	r3, #0
 800a948:	e884 00c0 	stmia.w	r4, {r6, r7}
 800a94c:	60a3      	str	r3, [r4, #8]
 800a94e:	6124      	str	r4, [r4, #16]
 800a950:	f841 7c04 	str.w	r7, [r1, #-4]
 800a954:	dd03      	ble.n	800a95e <_Alloc+0xe2>
 800a956:	ebc7 0008 	rsb	r0, r7, r8
 800a95a:	f7ff fd0b 	bl	800a374 <_AddFreeMemory>
 800a95e:	4630      	mov	r0, r6
 800a960:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a964:	20019634 	.word	0x20019634

0800a968 <GUI_ALLOC_AllocNoInit>:
 800a968:	b108      	cbz	r0, 800a96e <GUI_ALLOC_AllocNoInit+0x6>
 800a96a:	f7ff bf87 	b.w	800a87c <_Alloc>
 800a96e:	4770      	bx	lr

0800a970 <GUI_ALLOC_AllocZero>:
 800a970:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a972:	4605      	mov	r5, r0
 800a974:	f7ff fff8 	bl	800a968 <GUI_ALLOC_AllocNoInit>
 800a978:	4606      	mov	r6, r0
 800a97a:	b158      	cbz	r0, 800a994 <GUI_ALLOC_AllocZero+0x24>
 800a97c:	f7ff fdac 	bl	800a4d8 <GUI_ALLOC_LockH>
 800a980:	ac02      	add	r4, sp, #8
 800a982:	2100      	movs	r1, #0
 800a984:	f844 0d04 	str.w	r0, [r4, #-4]!
 800a988:	462a      	mov	r2, r5
 800a98a:	f7fe f8d7 	bl	8008b3c <GUI__memset>
 800a98e:	4620      	mov	r0, r4
 800a990:	f7ff fdb0 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 800a994:	4630      	mov	r0, r6
 800a996:	b002      	add	sp, #8
 800a998:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a99c <LCD_Index2Color_M565>:
 800a99c:	f3c0 21c4 	ubfx	r1, r0, #11, #5
 800a9a0:	4b06      	ldr	r3, [pc, #24]	; (800a9bc <LCD_Index2Color_M565+0x20>)
 800a9a2:	f000 021f 	and.w	r2, r0, #31
 800a9a6:	f3c0 1045 	ubfx	r0, r0, #5, #6
 800a9aa:	5c9a      	ldrb	r2, [r3, r2]
 800a9ac:	5c5b      	ldrb	r3, [r3, r1]
 800a9ae:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 800a9b2:	4a03      	ldr	r2, [pc, #12]	; (800a9c0 <LCD_Index2Color_M565+0x24>)
 800a9b4:	5c10      	ldrb	r0, [r2, r0]
 800a9b6:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 800a9ba:	4770      	bx	lr
 800a9bc:	0800f554 	.word	0x0800f554
 800a9c0:	0800f514 	.word	0x0800f514

0800a9c4 <_Color2Index_M565>:
 800a9c4:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800a9c8:	4b06      	ldr	r3, [pc, #24]	; (800a9e4 <_Color2Index_M565+0x20>)
 800a9ca:	b2c2      	uxtb	r2, r0
 800a9cc:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800a9d0:	5c9a      	ldrb	r2, [r3, r2]
 800a9d2:	5c5b      	ldrb	r3, [r3, r1]
 800a9d4:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
 800a9d8:	4a03      	ldr	r2, [pc, #12]	; (800a9e8 <_Color2Index_M565+0x24>)
 800a9da:	5c10      	ldrb	r0, [r2, r0]
 800a9dc:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 800a9e0:	4770      	bx	lr
 800a9e2:	bf00      	nop
 800a9e4:	0800f674 	.word	0x0800f674
 800a9e8:	0800f574 	.word	0x0800f574

0800a9ec <_GetIndexMask_M565>:
 800a9ec:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800a9f0:	4770      	bx	lr
	...

0800a9f4 <_Color2IndexBulk>:
 800a9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9f6:	4f0f      	ldr	r7, [pc, #60]	; (800aa34 <_Color2IndexBulk+0x40>)
 800a9f8:	683f      	ldr	r7, [r7, #0]
 800a9fa:	4606      	mov	r6, r0
 800a9fc:	460d      	mov	r5, r1
 800a9fe:	4614      	mov	r4, r2
 800aa00:	469c      	mov	ip, r3
 800aa02:	b10f      	cbz	r7, 800aa08 <_Color2IndexBulk+0x14>
 800aa04:	47b8      	blx	r7
 800aa06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa08:	f856 2b04 	ldr.w	r2, [r6], #4
 800aa0c:	490a      	ldr	r1, [pc, #40]	; (800aa38 <_Color2IndexBulk+0x44>)
 800aa0e:	b2d3      	uxtb	r3, r2
 800aa10:	3c01      	subs	r4, #1
 800aa12:	5cc8      	ldrb	r0, [r1, r3]
 800aa14:	f3c2 4307 	ubfx	r3, r2, #16, #8
 800aa18:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800aa1c:	5ccb      	ldrb	r3, [r1, r3]
 800aa1e:	4907      	ldr	r1, [pc, #28]	; (800aa3c <_Color2IndexBulk+0x48>)
 800aa20:	5c8a      	ldrb	r2, [r1, r2]
 800aa22:	eb03 23c0 	add.w	r3, r3, r0, lsl #11
 800aa26:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800aa2a:	802b      	strh	r3, [r5, #0]
 800aa2c:	4465      	add	r5, ip
 800aa2e:	d1eb      	bne.n	800aa08 <_Color2IndexBulk+0x14>
 800aa30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa32:	bf00      	nop
 800aa34:	20019194 	.word	0x20019194
 800aa38:	0800f674 	.word	0x0800f674
 800aa3c:	0800f574 	.word	0x0800f574

0800aa40 <_Index2ColorBulk>:
 800aa40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa42:	4e13      	ldr	r6, [pc, #76]	; (800aa90 <_Index2ColorBulk+0x50>)
 800aa44:	6836      	ldr	r6, [r6, #0]
 800aa46:	4684      	mov	ip, r0
 800aa48:	4614      	mov	r4, r2
 800aa4a:	461d      	mov	r5, r3
 800aa4c:	b10e      	cbz	r6, 800aa52 <_Index2ColorBulk+0x12>
 800aa4e:	47b0      	blx	r6
 800aa50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa52:	1e50      	subs	r0, r2, #1
 800aa54:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800aa58:	3a01      	subs	r2, #1
 800aa5a:	fb03 c000 	mla	r0, r3, r0, ip
 800aa5e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800aa62:	8802      	ldrh	r2, [r0, #0]
 800aa64:	4b0b      	ldr	r3, [pc, #44]	; (800aa94 <_Index2ColorBulk+0x54>)
 800aa66:	f002 061f 	and.w	r6, r2, #31
 800aa6a:	0ad7      	lsrs	r7, r2, #11
 800aa6c:	5d9e      	ldrb	r6, [r3, r6]
 800aa6e:	5ddb      	ldrb	r3, [r3, r7]
 800aa70:	f3c2 1245 	ubfx	r2, r2, #5, #6
 800aa74:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 800aa78:	4e07      	ldr	r6, [pc, #28]	; (800aa98 <_Index2ColorBulk+0x58>)
 800aa7a:	5cb2      	ldrb	r2, [r6, r2]
 800aa7c:	3c01      	subs	r4, #1
 800aa7e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800aa82:	f841 3904 	str.w	r3, [r1], #-4
 800aa86:	ebc5 0000 	rsb	r0, r5, r0
 800aa8a:	d1ea      	bne.n	800aa62 <_Index2ColorBulk+0x22>
 800aa8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa8e:	bf00      	nop
 800aa90:	20019190 	.word	0x20019190
 800aa94:	0800f554 	.word	0x0800f554
 800aa98:	0800f514 	.word	0x0800f514

0800aa9c <LCD_Index2Color_8888>:
 800aa9c:	4770      	bx	lr

0800aa9e <_Color2Index_8888>:
 800aa9e:	4770      	bx	lr

0800aaa0 <_GetIndexMask_8888>:
 800aaa0:	f04f 30ff 	mov.w	r0, #4294967295
 800aaa4:	4770      	bx	lr

0800aaa6 <_Color2IndexBulk>:
 800aaa6:	b510      	push	{r4, lr}
 800aaa8:	f850 4b04 	ldr.w	r4, [r0], #4
 800aaac:	600c      	str	r4, [r1, #0]
 800aaae:	3a01      	subs	r2, #1
 800aab0:	4419      	add	r1, r3
 800aab2:	d1f9      	bne.n	800aaa8 <_Color2IndexBulk+0x2>
 800aab4:	bd10      	pop	{r4, pc}

0800aab6 <_Index2ColorBulk>:
 800aab6:	b510      	push	{r4, lr}
 800aab8:	6804      	ldr	r4, [r0, #0]
 800aaba:	f841 4b04 	str.w	r4, [r1], #4
 800aabe:	3a01      	subs	r2, #1
 800aac0:	4418      	add	r0, r3
 800aac2:	d1f9      	bne.n	800aab8 <_Index2ColorBulk+0x2>
 800aac4:	bd10      	pop	{r4, pc}
	...

0800aac8 <WM__SendMessage>:
 800aac8:	b570      	push	{r4, r5, r6, lr}
 800aaca:	4c0d      	ldr	r4, [pc, #52]	; (800ab00 <WM__SendMessage+0x38>)
 800aacc:	6823      	ldr	r3, [r4, #0]
 800aace:	2b13      	cmp	r3, #19
 800aad0:	4606      	mov	r6, r0
 800aad2:	460d      	mov	r5, r1
 800aad4:	dc12      	bgt.n	800aafc <WM__SendMessage+0x34>
 800aad6:	f7ff fcf5 	bl	800a4c4 <GUI_ALLOC_h2p>
 800aada:	6903      	ldr	r3, [r0, #16]
 800aadc:	606e      	str	r6, [r5, #4]
 800aade:	b143      	cbz	r3, 800aaf2 <WM__SendMessage+0x2a>
 800aae0:	6822      	ldr	r2, [r4, #0]
 800aae2:	4628      	mov	r0, r5
 800aae4:	3201      	adds	r2, #1
 800aae6:	6022      	str	r2, [r4, #0]
 800aae8:	4798      	blx	r3
 800aaea:	6823      	ldr	r3, [r4, #0]
 800aaec:	3b01      	subs	r3, #1
 800aaee:	6023      	str	r3, [r4, #0]
 800aaf0:	bd70      	pop	{r4, r5, r6, pc}
 800aaf2:	4628      	mov	r0, r5
 800aaf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aaf8:	f7fc b850 	b.w	8006b9c <WM_DefaultProc>
 800aafc:	bd70      	pop	{r4, r5, r6, pc}
 800aafe:	bf00      	nop
 800ab00:	20019198 	.word	0x20019198

0800ab04 <WM__GetPrevSibling>:
 800ab04:	b538      	push	{r3, r4, r5, lr}
 800ab06:	4605      	mov	r5, r0
 800ab08:	f000 f80f 	bl	800ab2a <WM__GetFirstSibling>
 800ab0c:	4604      	mov	r4, r0
 800ab0e:	b154      	cbz	r4, 800ab26 <WM__GetPrevSibling+0x22>
 800ab10:	42ac      	cmp	r4, r5
 800ab12:	d007      	beq.n	800ab24 <WM__GetPrevSibling+0x20>
 800ab14:	4620      	mov	r0, r4
 800ab16:	f7ff fcd5 	bl	800a4c4 <GUI_ALLOC_h2p>
 800ab1a:	6a03      	ldr	r3, [r0, #32]
 800ab1c:	42ab      	cmp	r3, r5
 800ab1e:	d002      	beq.n	800ab26 <WM__GetPrevSibling+0x22>
 800ab20:	461c      	mov	r4, r3
 800ab22:	e7f4      	b.n	800ab0e <WM__GetPrevSibling+0xa>
 800ab24:	2400      	movs	r4, #0
 800ab26:	4620      	mov	r0, r4
 800ab28:	bd38      	pop	{r3, r4, r5, pc}

0800ab2a <WM__GetFirstSibling>:
 800ab2a:	b508      	push	{r3, lr}
 800ab2c:	f7fb fab3 	bl	8006096 <WM_GetParent>
 800ab30:	b118      	cbz	r0, 800ab3a <WM__GetFirstSibling+0x10>
 800ab32:	f7ff fcc7 	bl	800a4c4 <GUI_ALLOC_h2p>
 800ab36:	69c0      	ldr	r0, [r0, #28]
 800ab38:	bd08      	pop	{r3, pc}
 800ab3a:	bd08      	pop	{r3, pc}

0800ab3c <WM_SendToParent>:
 800ab3c:	b538      	push	{r3, r4, r5, lr}
 800ab3e:	4605      	mov	r5, r0
 800ab40:	460c      	mov	r4, r1
 800ab42:	b141      	cbz	r1, 800ab56 <WM_SendToParent+0x1a>
 800ab44:	f7fb faa7 	bl	8006096 <WM_GetParent>
 800ab48:	b128      	cbz	r0, 800ab56 <WM_SendToParent+0x1a>
 800ab4a:	60a5      	str	r5, [r4, #8]
 800ab4c:	4621      	mov	r1, r4
 800ab4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab52:	f7ff bfb9 	b.w	800aac8 <WM__SendMessage>
 800ab56:	bd38      	pop	{r3, r4, r5, pc}

0800ab58 <WM__AddCriticalHandle>:
 800ab58:	4b02      	ldr	r3, [pc, #8]	; (800ab64 <WM__AddCriticalHandle+0xc>)
 800ab5a:	681a      	ldr	r2, [r3, #0]
 800ab5c:	6002      	str	r2, [r0, #0]
 800ab5e:	6018      	str	r0, [r3, #0]
 800ab60:	4770      	bx	lr
 800ab62:	bf00      	nop
 800ab64:	200195dc 	.word	0x200195dc

0800ab68 <WM_BringToBottom>:
 800ab68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ab6c:	4604      	mov	r4, r0
 800ab6e:	b087      	sub	sp, #28
 800ab70:	2800      	cmp	r0, #0
 800ab72:	d039      	beq.n	800abe8 <WM_BringToBottom+0x80>
 800ab74:	f7ff fcb0 	bl	800a4d8 <GUI_ALLOC_LockH>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	9001      	str	r0, [sp, #4]
 800ab7c:	c803      	ldmia	r0, {r0, r1}
 800ab7e:	ad04      	add	r5, sp, #16
 800ab80:	e885 0003 	stmia.w	r5, {r0, r1}
 800ab84:	a801      	add	r0, sp, #4
 800ab86:	6a1e      	ldr	r6, [r3, #32]
 800ab88:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
 800ab8c:	f7ff fcb2 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 800ab90:	4620      	mov	r0, r4
 800ab92:	f7ff ffb7 	bl	800ab04 <WM__GetPrevSibling>
 800ab96:	4607      	mov	r7, r0
 800ab98:	b330      	cbz	r0, 800abe8 <WM_BringToBottom+0x80>
 800ab9a:	4620      	mov	r0, r4
 800ab9c:	f7fb fa7b 	bl	8006096 <WM_GetParent>
 800aba0:	f019 0f02 	tst.w	r9, #2
 800aba4:	4680      	mov	r8, r0
 800aba6:	d004      	beq.n	800abb2 <WM_BringToBottom+0x4a>
 800aba8:	4628      	mov	r0, r5
 800abaa:	4641      	mov	r1, r8
 800abac:	4632      	mov	r2, r6
 800abae:	f7fb fd62 	bl	8006676 <WM__InvalidateRectEx>
 800abb2:	4620      	mov	r0, r4
 800abb4:	f7ff fc90 	bl	800a4d8 <GUI_ALLOC_LockH>
 800abb8:	9001      	str	r0, [sp, #4]
 800abba:	4640      	mov	r0, r8
 800abbc:	f7ff fc8c 	bl	800a4d8 <GUI_ALLOC_LockH>
 800abc0:	9003      	str	r0, [sp, #12]
 800abc2:	4638      	mov	r0, r7
 800abc4:	f7ff fc88 	bl	800a4d8 <GUI_ALLOC_LockH>
 800abc8:	9b03      	ldr	r3, [sp, #12]
 800abca:	9a01      	ldr	r2, [sp, #4]
 800abcc:	69d9      	ldr	r1, [r3, #28]
 800abce:	6206      	str	r6, [r0, #32]
 800abd0:	9002      	str	r0, [sp, #8]
 800abd2:	6211      	str	r1, [r2, #32]
 800abd4:	a801      	add	r0, sp, #4
 800abd6:	61dc      	str	r4, [r3, #28]
 800abd8:	f7ff fc8c 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 800abdc:	a803      	add	r0, sp, #12
 800abde:	f7ff fc89 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 800abe2:	a802      	add	r0, sp, #8
 800abe4:	f7ff fc86 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 800abe8:	b007      	add	sp, #28
 800abea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800abee <_Convert16>:
 800abee:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abf2:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800abf6:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800abfa:	4605      	mov	r5, r0
 800abfc:	460e      	mov	r6, r1
 800abfe:	4690      	mov	r8, r2
 800ac00:	461f      	mov	r7, r3
 800ac02:	4614      	mov	r4, r2
 800ac04:	4689      	mov	r9, r1
 800ac06:	f835 0b02 	ldrh.w	r0, [r5], #2
 800ac0a:	47d8      	blx	fp
 800ac0c:	47d0      	blx	sl
 800ac0e:	3c01      	subs	r4, #1
 800ac10:	f849 0b04 	str.w	r0, [r9], #4
 800ac14:	d1f7      	bne.n	800ac06 <_Convert16+0x18>
 800ac16:	2f1f      	cmp	r7, #31
 800ac18:	d806      	bhi.n	800ac28 <_Convert16+0x3a>
 800ac1a:	4630      	mov	r0, r6
 800ac1c:	4641      	mov	r1, r8
 800ac1e:	463a      	mov	r2, r7
 800ac20:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac24:	f001 ba3a 	b.w	800c09c <GUI__CompactPixelIndices>
 800ac28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ac2c <_Convert8>:
 800ac2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac30:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800ac34:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800ac38:	4605      	mov	r5, r0
 800ac3a:	460e      	mov	r6, r1
 800ac3c:	4690      	mov	r8, r2
 800ac3e:	461f      	mov	r7, r3
 800ac40:	4689      	mov	r9, r1
 800ac42:	4604      	mov	r4, r0
 800ac44:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ac48:	47d8      	blx	fp
 800ac4a:	47d0      	blx	sl
 800ac4c:	1b2b      	subs	r3, r5, r4
 800ac4e:	4443      	add	r3, r8
 800ac50:	f849 0b04 	str.w	r0, [r9], #4
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d1f5      	bne.n	800ac44 <_Convert8+0x18>
 800ac58:	2f1f      	cmp	r7, #31
 800ac5a:	d806      	bhi.n	800ac6a <_Convert8+0x3e>
 800ac5c:	4630      	mov	r0, r6
 800ac5e:	4641      	mov	r1, r8
 800ac60:	463a      	mov	r2, r7
 800ac62:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac66:	f001 ba19 	b.w	800c09c <GUI__CompactPixelIndices>
 800ac6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800ac70 <GUI_MEMDEV__WriteToActiveOpaque>:
 800ac70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac74:	b09d      	sub	sp, #116	; 0x74
 800ac76:	4606      	mov	r6, r0
 800ac78:	910f      	str	r1, [sp, #60]	; 0x3c
 800ac7a:	920d      	str	r2, [sp, #52]	; 0x34
 800ac7c:	2800      	cmp	r0, #0
 800ac7e:	f000 8386 	beq.w	800b38e <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800ac82:	f7ff fc29 	bl	800a4d8 <GUI_ALLOC_LockH>
 800ac86:	ab1c      	add	r3, sp, #112	; 0x70
 800ac88:	6944      	ldr	r4, [r0, #20]
 800ac8a:	f843 0d1c 	str.w	r0, [r3, #-28]!
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f7ff fc30 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 800ac94:	4630      	mov	r0, r6
 800ac96:	f7fc f8e5 	bl	8006e64 <GUI_MEMDEV_GetBitsPerPixel>
 800ac9a:	2808      	cmp	r0, #8
 800ac9c:	4601      	mov	r1, r0
 800ac9e:	dd02      	ble.n	800aca6 <GUI_MEMDEV__WriteToActiveOpaque+0x36>
 800aca0:	2c00      	cmp	r4, #0
 800aca2:	f000 81c3 	beq.w	800b02c <GUI_MEMDEV__WriteToActiveOpaque+0x3bc>
 800aca6:	2201      	movs	r2, #1
 800aca8:	f04f 0800 	mov.w	r8, #0
 800acac:	4630      	mov	r0, r6
 800acae:	921b      	str	r2, [sp, #108]	; 0x6c
 800acb0:	920b      	str	r2, [sp, #44]	; 0x2c
 800acb2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800acb6:	f7ff fc0f 	bl	800a4d8 <GUI_ALLOC_LockH>
 800acba:	6803      	ldr	r3, [r0, #0]
 800acbc:	f8df a60c 	ldr.w	sl, [pc, #1548]	; 800b2cc <GUI_MEMDEV__WriteToActiveOpaque+0x65c>
 800acc0:	691b      	ldr	r3, [r3, #16]
 800acc2:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
 800acc6:	685b      	ldr	r3, [r3, #4]
 800acc8:	930e      	str	r3, [sp, #56]	; 0x38
 800acca:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 800acce:	f8da 3000 	ldr.w	r3, [sl]
 800acd2:	f84b 0d14 	str.w	r0, [fp, #-20]!
 800acd6:	6904      	ldr	r4, [r0, #16]
 800acd8:	6945      	ldr	r5, [r0, #20]
 800acda:	f8d0 900c 	ldr.w	r9, [r0, #12]
 800acde:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 800ace2:	7c58      	ldrb	r0, [r3, #17]
 800ace4:	9112      	str	r1, [sp, #72]	; 0x48
 800ace6:	f7fd faef 	bl	80082c8 <GUI_GetBitsPerPixelEx>
 800acea:	f8da 3000 	ldr.w	r3, [sl]
 800acee:	9010      	str	r0, [sp, #64]	; 0x40
 800acf0:	7c58      	ldrb	r0, [r3, #17]
 800acf2:	f7fd fb07 	bl	8008304 <GUI_GetpfIndex2ColorEx>
 800acf6:	4603      	mov	r3, r0
 800acf8:	4658      	mov	r0, fp
 800acfa:	9309      	str	r3, [sp, #36]	; 0x24
 800acfc:	f7ff fbfa 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 800ad00:	2c08      	cmp	r4, #8
 800ad02:	4651      	mov	r1, sl
 800ad04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ad06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad08:	d904      	bls.n	800ad14 <GUI_MEMDEV__WriteToActiveOpaque+0xa4>
 800ad0a:	2c10      	cmp	r4, #16
 800ad0c:	bf8c      	ite	hi
 800ad0e:	2204      	movhi	r2, #4
 800ad10:	2202      	movls	r2, #2
 800ad12:	e005      	b.n	800ad20 <GUI_MEMDEV__WriteToActiveOpaque+0xb0>
 800ad14:	2c01      	cmp	r4, #1
 800ad16:	d103      	bne.n	800ad20 <GUI_MEMDEV__WriteToActiveOpaque+0xb0>
 800ad18:	9411      	str	r4, [sp, #68]	; 0x44
 800ad1a:	f10d 0868 	add.w	r8, sp, #104	; 0x68
 800ad1e:	e000      	b.n	800ad22 <GUI_MEMDEV__WriteToActiveOpaque+0xb2>
 800ad20:	9211      	str	r2, [sp, #68]	; 0x44
 800ad22:	980e      	ldr	r0, [sp, #56]	; 0x38
 800ad24:	4298      	cmp	r0, r3
 800ad26:	f000 80e2 	beq.w	800aeee <GUI_MEMDEV__WriteToActiveOpaque+0x27e>
 800ad2a:	680b      	ldr	r3, [r1, #0]
 800ad2c:	7c58      	ldrb	r0, [r3, #17]
 800ad2e:	f7fd faf1 	bl	8008314 <GUI_GetpfColor2IndexEx>
 800ad32:	9013      	str	r0, [sp, #76]	; 0x4c
 800ad34:	00b8      	lsls	r0, r7, #2
 800ad36:	f7ff fe17 	bl	800a968 <GUI_ALLOC_AllocNoInit>
 800ad3a:	900c      	str	r0, [sp, #48]	; 0x30
 800ad3c:	2800      	cmp	r0, #0
 800ad3e:	f000 8326 	beq.w	800b38e <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800ad42:	4630      	mov	r0, r6
 800ad44:	f7fb fffc 	bl	8006d40 <GUI_MEMDEV_GetDataPtr>
 800ad48:	4606      	mov	r6, r0
 800ad4a:	2d00      	cmp	r5, #0
 800ad4c:	f000 80be 	beq.w	800aecc <GUI_MEMDEV__WriteToActiveOpaque+0x25c>
 800ad50:	4628      	mov	r0, r5
 800ad52:	f7ff fbc1 	bl	800a4d8 <GUI_ALLOC_LockH>
 800ad56:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800ad5a:	9018      	str	r0, [sp, #96]	; 0x60
 800ad5c:	f04f 0a00 	mov.w	sl, #0
 800ad60:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ad62:	4592      	cmp	sl, r2
 800ad64:	f280 80ae 	bge.w	800aec4 <GUI_MEMDEV__WriteToActiveOpaque+0x254>
 800ad68:	9818      	ldr	r0, [sp, #96]	; 0x60
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	9319      	str	r3, [sp, #100]	; 0x64
 800ad6e:	6883      	ldr	r3, [r0, #8]
 800ad70:	a919      	add	r1, sp, #100	; 0x64
 800ad72:	695b      	ldr	r3, [r3, #20]
 800ad74:	4652      	mov	r2, sl
 800ad76:	4798      	blx	r3
 800ad78:	42b8      	cmp	r0, r7
 800ad7a:	4605      	mov	r5, r0
 800ad7c:	d12f      	bne.n	800adde <GUI_MEMDEV__WriteToActiveOpaque+0x16e>
 800ad7e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ad80:	f7ff fbaa 	bl	800a4d8 <GUI_ALLOC_LockH>
 800ad84:	2c08      	cmp	r4, #8
 800ad86:	4601      	mov	r1, r0
 800ad88:	9016      	str	r0, [sp, #88]	; 0x58
 800ad8a:	d909      	bls.n	800ada0 <GUI_MEMDEV__WriteToActiveOpaque+0x130>
 800ad8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ad8e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ad90:	9200      	str	r2, [sp, #0]
 800ad92:	9301      	str	r3, [sp, #4]
 800ad94:	4630      	mov	r0, r6
 800ad96:	463a      	mov	r2, r7
 800ad98:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ad9a:	f7ff ff28 	bl	800abee <_Convert16>
 800ad9e:	e008      	b.n	800adb2 <GUI_MEMDEV__WriteToActiveOpaque+0x142>
 800ada0:	980e      	ldr	r0, [sp, #56]	; 0x38
 800ada2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ada4:	9000      	str	r0, [sp, #0]
 800ada6:	9201      	str	r2, [sp, #4]
 800ada8:	4630      	mov	r0, r6
 800adaa:	463a      	mov	r2, r7
 800adac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800adae:	f7ff ff3d 	bl	800ac2c <_Convert8>
 800adb2:	2301      	movs	r3, #1
 800adb4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800adb6:	9002      	str	r0, [sp, #8]
 800adb8:	ad1c      	add	r5, sp, #112	; 0x70
 800adba:	2200      	movs	r2, #0
 800adbc:	9300      	str	r3, [sp, #0]
 800adbe:	9301      	str	r3, [sp, #4]
 800adc0:	9203      	str	r2, [sp, #12]
 800adc2:	f855 2d18 	ldr.w	r2, [r5, #-24]!
 800adc6:	9204      	str	r2, [sp, #16]
 800adc8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800adca:	f8cd 8014 	str.w	r8, [sp, #20]
 800adce:	4659      	mov	r1, fp
 800add0:	463a      	mov	r2, r7
 800add2:	f7fd fcb7 	bl	8008744 <LCD_DrawBitmap>
 800add6:	4628      	mov	r0, r5
 800add8:	f7ff fb8c 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 800addc:	e060      	b.n	800aea0 <GUI_MEMDEV__WriteToActiveOpaque+0x230>
 800adde:	2c01      	cmp	r4, #1
 800ade0:	d15c      	bne.n	800ae9c <GUI_MEMDEV__WriteToActiveOpaque+0x22c>
 800ade2:	2d00      	cmp	r5, #0
 800ade4:	d05c      	beq.n	800aea0 <GUI_MEMDEV__WriteToActiveOpaque+0x230>
 800ade6:	9819      	ldr	r0, [sp, #100]	; 0x64
 800ade8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800adea:	f8cd 900c 	str.w	r9, [sp, #12]
 800adee:	2208      	movs	r2, #8
 800adf0:	fb90 f2f2 	sdiv	r2, r0, r2
 800adf4:	4432      	add	r2, r6
 800adf6:	2301      	movs	r3, #1
 800adf8:	9204      	str	r2, [sp, #16]
 800adfa:	f000 0207 	and.w	r2, r0, #7
 800adfe:	9300      	str	r3, [sp, #0]
 800ae00:	4408      	add	r0, r1
 800ae02:	9301      	str	r3, [sp, #4]
 800ae04:	9302      	str	r3, [sp, #8]
 800ae06:	9206      	str	r2, [sp, #24]
 800ae08:	4659      	mov	r1, fp
 800ae0a:	462a      	mov	r2, r5
 800ae0c:	f8cd 8014 	str.w	r8, [sp, #20]
 800ae10:	f7fd fbbc 	bl	800858c <LCD__DrawBitmap_1bpp>
 800ae14:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ae16:	9818      	ldr	r0, [sp, #96]	; 0x60
 800ae18:	441d      	add	r5, r3
 800ae1a:	6883      	ldr	r3, [r0, #8]
 800ae1c:	9519      	str	r5, [sp, #100]	; 0x64
 800ae1e:	695b      	ldr	r3, [r3, #20]
 800ae20:	a919      	add	r1, sp, #100	; 0x64
 800ae22:	4652      	mov	r2, sl
 800ae24:	4798      	blx	r3
 800ae26:	4605      	mov	r5, r0
 800ae28:	e7db      	b.n	800ade2 <GUI_MEMDEV__WriteToActiveOpaque+0x172>
 800ae2a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ae2c:	f7ff fb54 	bl	800a4d8 <GUI_ALLOC_LockH>
 800ae30:	2c08      	cmp	r4, #8
 800ae32:	4601      	mov	r1, r0
 800ae34:	9016      	str	r0, [sp, #88]	; 0x58
 800ae36:	9819      	ldr	r0, [sp, #100]	; 0x64
 800ae38:	d938      	bls.n	800aeac <GUI_MEMDEV__WriteToActiveOpaque+0x23c>
 800ae3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae3c:	9200      	str	r2, [sp, #0]
 800ae3e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ae40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ae42:	9301      	str	r3, [sp, #4]
 800ae44:	fb00 6002 	mla	r0, r0, r2, r6
 800ae48:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ae4a:	462a      	mov	r2, r5
 800ae4c:	f7ff fecf 	bl	800abee <_Convert16>
 800ae50:	2301      	movs	r3, #1
 800ae52:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
 800ae56:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ae58:	9300      	str	r3, [sp, #0]
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	9301      	str	r3, [sp, #4]
 800ae5e:	9002      	str	r0, [sp, #8]
 800ae60:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ae62:	9203      	str	r2, [sp, #12]
 800ae64:	9819      	ldr	r0, [sp, #100]	; 0x64
 800ae66:	f85c 2d18 	ldr.w	r2, [ip, #-24]!
 800ae6a:	9204      	str	r2, [sp, #16]
 800ae6c:	4408      	add	r0, r1
 800ae6e:	462a      	mov	r2, r5
 800ae70:	4659      	mov	r1, fp
 800ae72:	f8cd 8014 	str.w	r8, [sp, #20]
 800ae76:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 800ae7a:	f7fd fc63 	bl	8008744 <LCD_DrawBitmap>
 800ae7e:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 800ae82:	4660      	mov	r0, ip
 800ae84:	f7ff fb36 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 800ae88:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ae8a:	9818      	ldr	r0, [sp, #96]	; 0x60
 800ae8c:	441d      	add	r5, r3
 800ae8e:	6883      	ldr	r3, [r0, #8]
 800ae90:	9519      	str	r5, [sp, #100]	; 0x64
 800ae92:	695b      	ldr	r3, [r3, #20]
 800ae94:	a919      	add	r1, sp, #100	; 0x64
 800ae96:	4652      	mov	r2, sl
 800ae98:	4798      	blx	r3
 800ae9a:	4605      	mov	r5, r0
 800ae9c:	2d00      	cmp	r5, #0
 800ae9e:	d1c4      	bne.n	800ae2a <GUI_MEMDEV__WriteToActiveOpaque+0x1ba>
 800aea0:	444e      	add	r6, r9
 800aea2:	f10a 0a01 	add.w	sl, sl, #1
 800aea6:	f10b 0b01 	add.w	fp, fp, #1
 800aeaa:	e759      	b.n	800ad60 <GUI_MEMDEV__WriteToActiveOpaque+0xf0>
 800aeac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aeae:	9300      	str	r3, [sp, #0]
 800aeb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aeb2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800aeb4:	9201      	str	r2, [sp, #4]
 800aeb6:	fb00 6003 	mla	r0, r0, r3, r6
 800aeba:	462a      	mov	r2, r5
 800aebc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aebe:	f7ff feb5 	bl	800ac2c <_Convert8>
 800aec2:	e7c5      	b.n	800ae50 <GUI_MEMDEV__WriteToActiveOpaque+0x1e0>
 800aec4:	a818      	add	r0, sp, #96	; 0x60
 800aec6:	f7ff fb15 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 800aeca:	e00e      	b.n	800aeea <GUI_MEMDEV__WriteToActiveOpaque+0x27a>
 800aecc:	2301      	movs	r3, #1
 800aece:	9300      	str	r3, [sp, #0]
 800aed0:	9301      	str	r3, [sp, #4]
 800aed2:	9004      	str	r0, [sp, #16]
 800aed4:	9402      	str	r4, [sp, #8]
 800aed6:	f8cd 900c 	str.w	r9, [sp, #12]
 800aeda:	f8cd 8014 	str.w	r8, [sp, #20]
 800aede:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800aee0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800aee2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aee4:	463a      	mov	r2, r7
 800aee6:	f7fd fc2d 	bl	8008744 <LCD_DrawBitmap>
 800aeea:	980c      	ldr	r0, [sp, #48]	; 0x30
 800aeec:	e24d      	b.n	800b38a <GUI_MEMDEV__WriteToActiveOpaque+0x71a>
 800aeee:	4630      	mov	r0, r6
 800aef0:	f7fb ff26 	bl	8006d40 <GUI_MEMDEV_GetDataPtr>
 800aef4:	4606      	mov	r6, r0
 800aef6:	2d00      	cmp	r5, #0
 800aef8:	f000 808a 	beq.w	800b010 <GUI_MEMDEV__WriteToActiveOpaque+0x3a0>
 800aefc:	4628      	mov	r0, r5
 800aefe:	f7ff faeb 	bl	800a4d8 <GUI_ALLOC_LockH>
 800af02:	2500      	movs	r5, #0
 800af04:	9018      	str	r0, [sp, #96]	; 0x60
 800af06:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800af08:	429d      	cmp	r5, r3
 800af0a:	da7d      	bge.n	800b008 <GUI_MEMDEV__WriteToActiveOpaque+0x398>
 800af0c:	9818      	ldr	r0, [sp, #96]	; 0x60
 800af0e:	2300      	movs	r3, #0
 800af10:	9319      	str	r3, [sp, #100]	; 0x64
 800af12:	6883      	ldr	r3, [r0, #8]
 800af14:	a919      	add	r1, sp, #100	; 0x64
 800af16:	695b      	ldr	r3, [r3, #20]
 800af18:	462a      	mov	r2, r5
 800af1a:	4798      	blx	r3
 800af1c:	42b8      	cmp	r0, r7
 800af1e:	4682      	mov	sl, r0
 800af20:	d124      	bne.n	800af6c <GUI_MEMDEV__WriteToActiveOpaque+0x2fc>
 800af22:	46aa      	mov	sl, r5
 800af24:	9818      	ldr	r0, [sp, #96]	; 0x60
 800af26:	6883      	ldr	r3, [r0, #8]
 800af28:	f10a 0b01 	add.w	fp, sl, #1
 800af2c:	695b      	ldr	r3, [r3, #20]
 800af2e:	a919      	add	r1, sp, #100	; 0x64
 800af30:	465a      	mov	r2, fp
 800af32:	4798      	blx	r3
 800af34:	42b8      	cmp	r0, r7
 800af36:	d101      	bne.n	800af3c <GUI_MEMDEV__WriteToActiveOpaque+0x2cc>
 800af38:	46da      	mov	sl, fp
 800af3a:	e7f3      	b.n	800af24 <GUI_MEMDEV__WriteToActiveOpaque+0x2b4>
 800af3c:	ebc5 0b0a 	rsb	fp, r5, sl
 800af40:	990d      	ldr	r1, [sp, #52]	; 0x34
 800af42:	9604      	str	r6, [sp, #16]
 800af44:	2301      	movs	r3, #1
 800af46:	f10b 0b01 	add.w	fp, fp, #1
 800af4a:	9300      	str	r3, [sp, #0]
 800af4c:	9301      	str	r3, [sp, #4]
 800af4e:	4429      	add	r1, r5
 800af50:	9402      	str	r4, [sp, #8]
 800af52:	f8cd 900c 	str.w	r9, [sp, #12]
 800af56:	f8cd 8014 	str.w	r8, [sp, #20]
 800af5a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800af5c:	463a      	mov	r2, r7
 800af5e:	465b      	mov	r3, fp
 800af60:	f7fd fbf0 	bl	8008744 <LCD_DrawBitmap>
 800af64:	fb09 660b 	mla	r6, r9, fp, r6
 800af68:	4655      	mov	r5, sl
 800af6a:	e04b      	b.n	800b004 <GUI_MEMDEV__WriteToActiveOpaque+0x394>
 800af6c:	2c01      	cmp	r4, #1
 800af6e:	d127      	bne.n	800afc0 <GUI_MEMDEV__WriteToActiveOpaque+0x350>
 800af70:	f1ba 0f00 	cmp.w	sl, #0
 800af74:	d022      	beq.n	800afbc <GUI_MEMDEV__WriteToActiveOpaque+0x34c>
 800af76:	9819      	ldr	r0, [sp, #100]	; 0x64
 800af78:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800af7a:	f8cd 900c 	str.w	r9, [sp, #12]
 800af7e:	2208      	movs	r2, #8
 800af80:	fb90 f2f2 	sdiv	r2, r0, r2
 800af84:	4432      	add	r2, r6
 800af86:	9204      	str	r2, [sp, #16]
 800af88:	f000 0207 	and.w	r2, r0, #7
 800af8c:	4408      	add	r0, r1
 800af8e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800af90:	9206      	str	r2, [sp, #24]
 800af92:	2301      	movs	r3, #1
 800af94:	4652      	mov	r2, sl
 800af96:	9300      	str	r3, [sp, #0]
 800af98:	9301      	str	r3, [sp, #4]
 800af9a:	9302      	str	r3, [sp, #8]
 800af9c:	4429      	add	r1, r5
 800af9e:	f8cd 8014 	str.w	r8, [sp, #20]
 800afa2:	f7fd faf3 	bl	800858c <LCD__DrawBitmap_1bpp>
 800afa6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800afa8:	9818      	ldr	r0, [sp, #96]	; 0x60
 800afaa:	4453      	add	r3, sl
 800afac:	9319      	str	r3, [sp, #100]	; 0x64
 800afae:	6883      	ldr	r3, [r0, #8]
 800afb0:	a919      	add	r1, sp, #100	; 0x64
 800afb2:	695b      	ldr	r3, [r3, #20]
 800afb4:	462a      	mov	r2, r5
 800afb6:	4798      	blx	r3
 800afb8:	4682      	mov	sl, r0
 800afba:	e7d9      	b.n	800af70 <GUI_MEMDEV__WriteToActiveOpaque+0x300>
 800afbc:	444e      	add	r6, r9
 800afbe:	e021      	b.n	800b004 <GUI_MEMDEV__WriteToActiveOpaque+0x394>
 800afc0:	f1ba 0f00 	cmp.w	sl, #0
 800afc4:	d0fa      	beq.n	800afbc <GUI_MEMDEV__WriteToActiveOpaque+0x34c>
 800afc6:	9819      	ldr	r0, [sp, #100]	; 0x64
 800afc8:	9911      	ldr	r1, [sp, #68]	; 0x44
 800afca:	9402      	str	r4, [sp, #8]
 800afcc:	fb00 6201 	mla	r2, r0, r1, r6
 800afd0:	9204      	str	r2, [sp, #16]
 800afd2:	990d      	ldr	r1, [sp, #52]	; 0x34
 800afd4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800afd6:	f8cd 900c 	str.w	r9, [sp, #12]
 800afda:	2301      	movs	r3, #1
 800afdc:	4410      	add	r0, r2
 800afde:	9300      	str	r3, [sp, #0]
 800afe0:	4652      	mov	r2, sl
 800afe2:	9301      	str	r3, [sp, #4]
 800afe4:	4429      	add	r1, r5
 800afe6:	f8cd 8014 	str.w	r8, [sp, #20]
 800afea:	f7fd fbab 	bl	8008744 <LCD_DrawBitmap>
 800afee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aff0:	9818      	ldr	r0, [sp, #96]	; 0x60
 800aff2:	4453      	add	r3, sl
 800aff4:	9319      	str	r3, [sp, #100]	; 0x64
 800aff6:	6883      	ldr	r3, [r0, #8]
 800aff8:	a919      	add	r1, sp, #100	; 0x64
 800affa:	695b      	ldr	r3, [r3, #20]
 800affc:	462a      	mov	r2, r5
 800affe:	4798      	blx	r3
 800b000:	4682      	mov	sl, r0
 800b002:	e7dd      	b.n	800afc0 <GUI_MEMDEV__WriteToActiveOpaque+0x350>
 800b004:	3501      	adds	r5, #1
 800b006:	e77e      	b.n	800af06 <GUI_MEMDEV__WriteToActiveOpaque+0x296>
 800b008:	a818      	add	r0, sp, #96	; 0x60
 800b00a:	f7ff fa73 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 800b00e:	e1be      	b.n	800b38e <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800b010:	2301      	movs	r3, #1
 800b012:	9300      	str	r3, [sp, #0]
 800b014:	9301      	str	r3, [sp, #4]
 800b016:	9004      	str	r0, [sp, #16]
 800b018:	9402      	str	r4, [sp, #8]
 800b01a:	f8cd 900c 	str.w	r9, [sp, #12]
 800b01e:	f8cd 8014 	str.w	r8, [sp, #20]
 800b022:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800b024:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b026:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b028:	463a      	mov	r2, r7
 800b02a:	e041      	b.n	800b0b0 <GUI_MEMDEV__WriteToActiveOpaque+0x440>
 800b02c:	4630      	mov	r0, r6
 800b02e:	910a      	str	r1, [sp, #40]	; 0x28
 800b030:	f7ff fa52 	bl	800a4d8 <GUI_ALLOC_LockH>
 800b034:	4682      	mov	sl, r0
 800b036:	a81c      	add	r0, sp, #112	; 0x70
 800b038:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 800b03c:	f840 ad10 	str.w	sl, [r0, #-16]!
 800b040:	f8da 4000 	ldr.w	r4, [sl]
 800b044:	9210      	str	r2, [sp, #64]	; 0x40
 800b046:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b04a:	f8ba 7008 	ldrh.w	r7, [sl, #8]
 800b04e:	4c9e      	ldr	r4, [pc, #632]	; (800b2c8 <GUI_MEMDEV__WriteToActiveOpaque+0x658>)
 800b050:	b213      	sxth	r3, r2
 800b052:	f8da 200c 	ldr.w	r2, [sl, #12]
 800b056:	920b      	str	r2, [sp, #44]	; 0x2c
 800b058:	9309      	str	r3, [sp, #36]	; 0x24
 800b05a:	f7ff fa4b 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 800b05e:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800b062:	900e      	str	r0, [sp, #56]	; 0x38
 800b064:	4899      	ldr	r0, [pc, #612]	; (800b2cc <GUI_MEMDEV__WriteToActiveOpaque+0x65c>)
 800b066:	6800      	ldr	r0, [r0, #0]
 800b068:	7c40      	ldrb	r0, [r0, #17]
 800b06a:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
 800b06e:	6925      	ldr	r5, [r4, #16]
 800b070:	f8d5 8000 	ldr.w	r8, [r5]
 800b074:	f7fd f928 	bl	80082c8 <GUI_GetBitsPerPixelEx>
 800b078:	2808      	cmp	r0, #8
 800b07a:	fa0f fb87 	sxth.w	fp, r7
 800b07e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b080:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b082:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b084:	d904      	bls.n	800b090 <GUI_MEMDEV__WriteToActiveOpaque+0x420>
 800b086:	2810      	cmp	r0, #16
 800b088:	bf8c      	ite	hi
 800b08a:	2404      	movhi	r4, #4
 800b08c:	2402      	movls	r4, #2
 800b08e:	e000      	b.n	800b092 <GUI_MEMDEV__WriteToActiveOpaque+0x422>
 800b090:	2401      	movs	r4, #1
 800b092:	45a9      	cmp	r9, r5
 800b094:	d10f      	bne.n	800b0b6 <GUI_MEMDEV__WriteToActiveOpaque+0x446>
 800b096:	2001      	movs	r0, #1
 800b098:	9203      	str	r2, [sp, #12]
 800b09a:	f10a 0218 	add.w	r2, sl, #24
 800b09e:	9000      	str	r0, [sp, #0]
 800b0a0:	9001      	str	r0, [sp, #4]
 800b0a2:	9102      	str	r1, [sp, #8]
 800b0a4:	9204      	str	r2, [sp, #16]
 800b0a6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800b0a8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	9205      	str	r2, [sp, #20]
 800b0ae:	465a      	mov	r2, fp
 800b0b0:	f7fd fb48 	bl	8008744 <LCD_DrawBitmap>
 800b0b4:	e16b      	b.n	800b38e <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800b0b6:	2920      	cmp	r1, #32
 800b0b8:	f040 808e 	bne.w	800b1d8 <GUI_MEMDEV__WriteToActiveOpaque+0x568>
 800b0bc:	fb0b f004 	mul.w	r0, fp, r4
 800b0c0:	f7ff fc52 	bl	800a968 <GUI_ALLOC_AllocNoInit>
 800b0c4:	900e      	str	r0, [sp, #56]	; 0x38
 800b0c6:	2800      	cmp	r0, #0
 800b0c8:	f000 8161 	beq.w	800b38e <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800b0cc:	f7ff fa04 	bl	800a4d8 <GUI_ALLOC_LockH>
 800b0d0:	901a      	str	r0, [sp, #104]	; 0x68
 800b0d2:	4630      	mov	r0, r6
 800b0d4:	f7ff fa00 	bl	800a4d8 <GUI_ALLOC_LockH>
 800b0d8:	9018      	str	r0, [sp, #96]	; 0x60
 800b0da:	692b      	ldr	r3, [r5, #16]
 800b0dc:	f100 0a18 	add.w	sl, r0, #24
 800b0e0:	ea4f 068b 	mov.w	r6, fp, lsl #2
 800b0e4:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d02f      	beq.n	800b14c <GUI_MEMDEV__WriteToActiveOpaque+0x4dc>
 800b0ec:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 800b0f0:	2c02      	cmp	r4, #2
 800b0f2:	d003      	beq.n	800b0fc <GUI_MEMDEV__WriteToActiveOpaque+0x48c>
 800b0f4:	2c04      	cmp	r4, #4
 800b0f6:	d001      	beq.n	800b0fc <GUI_MEMDEV__WriteToActiveOpaque+0x48c>
 800b0f8:	2c01      	cmp	r4, #1
 800b0fa:	d106      	bne.n	800b10a <GUI_MEMDEV__WriteToActiveOpaque+0x49a>
 800b0fc:	4650      	mov	r0, sl
 800b0fe:	692f      	ldr	r7, [r5, #16]
 800b100:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b102:	465a      	mov	r2, fp
 800b104:	4623      	mov	r3, r4
 800b106:	47b8      	blx	r7
 800b108:	44b2      	add	sl, r6
 800b10a:	2301      	movs	r3, #1
 800b10c:	2200      	movs	r2, #0
 800b10e:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b110:	9300      	str	r3, [sp, #0]
 800b112:	9301      	str	r3, [sp, #4]
 800b114:	9203      	str	r2, [sp, #12]
 800b116:	9104      	str	r1, [sp, #16]
 800b118:	9205      	str	r2, [sp, #20]
 800b11a:	4641      	mov	r1, r8
 800b11c:	465a      	mov	r2, fp
 800b11e:	f8cd 9008 	str.w	r9, [sp, #8]
 800b122:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800b124:	f7fd fb0e 	bl	8008744 <LCD_DrawBitmap>
 800b128:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b12a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b12c:	f108 0701 	add.w	r7, r8, #1
 800b130:	fa02 f381 	sxtah	r3, r2, r1
 800b134:	42bb      	cmp	r3, r7
 800b136:	d107      	bne.n	800b148 <GUI_MEMDEV__WriteToActiveOpaque+0x4d8>
 800b138:	a818      	add	r0, sp, #96	; 0x60
 800b13a:	f7ff f9db 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 800b13e:	a81a      	add	r0, sp, #104	; 0x68
 800b140:	f7ff f9d8 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 800b144:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b146:	e120      	b.n	800b38a <GUI_MEMDEV__WriteToActiveOpaque+0x71a>
 800b148:	46b8      	mov	r8, r7
 800b14a:	e7d1      	b.n	800b0f0 <GUI_MEMDEV__WriteToActiveOpaque+0x480>
 800b14c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b14e:	2c02      	cmp	r4, #2
 800b150:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800b152:	d00e      	beq.n	800b172 <GUI_MEMDEV__WriteToActiveOpaque+0x502>
 800b154:	2c04      	cmp	r4, #4
 800b156:	d018      	beq.n	800b18a <GUI_MEMDEV__WriteToActiveOpaque+0x51a>
 800b158:	2c01      	cmp	r4, #1
 800b15a:	d125      	bne.n	800b1a8 <GUI_MEMDEV__WriteToActiveOpaque+0x538>
 800b15c:	2300      	movs	r3, #0
 800b15e:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 800b162:	9309      	str	r3, [sp, #36]	; 0x24
 800b164:	47c0      	blx	r8
 800b166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b168:	54f8      	strb	r0, [r7, r3]
 800b16a:	3301      	adds	r3, #1
 800b16c:	459b      	cmp	fp, r3
 800b16e:	d1f6      	bne.n	800b15e <GUI_MEMDEV__WriteToActiveOpaque+0x4ee>
 800b170:	e019      	b.n	800b1a6 <GUI_MEMDEV__WriteToActiveOpaque+0x536>
 800b172:	2300      	movs	r3, #0
 800b174:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 800b178:	9309      	str	r3, [sp, #36]	; 0x24
 800b17a:	47c0      	blx	r8
 800b17c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b17e:	f827 0013 	strh.w	r0, [r7, r3, lsl #1]
 800b182:	3301      	adds	r3, #1
 800b184:	459b      	cmp	fp, r3
 800b186:	d1f5      	bne.n	800b174 <GUI_MEMDEV__WriteToActiveOpaque+0x504>
 800b188:	e00d      	b.n	800b1a6 <GUI_MEMDEV__WriteToActiveOpaque+0x536>
 800b18a:	465a      	mov	r2, fp
 800b18c:	2300      	movs	r3, #0
 800b18e:	f85a 0003 	ldr.w	r0, [sl, r3]
 800b192:	920b      	str	r2, [sp, #44]	; 0x2c
 800b194:	9309      	str	r3, [sp, #36]	; 0x24
 800b196:	47c0      	blx	r8
 800b198:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b19a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b19c:	3a01      	subs	r2, #1
 800b19e:	50f8      	str	r0, [r7, r3]
 800b1a0:	f103 0304 	add.w	r3, r3, #4
 800b1a4:	d1f3      	bne.n	800b18e <GUI_MEMDEV__WriteToActiveOpaque+0x51e>
 800b1a6:	44b2      	add	sl, r6
 800b1a8:	2301      	movs	r3, #1
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b1ae:	9300      	str	r3, [sp, #0]
 800b1b0:	9301      	str	r3, [sp, #4]
 800b1b2:	9203      	str	r2, [sp, #12]
 800b1b4:	9104      	str	r1, [sp, #16]
 800b1b6:	9205      	str	r2, [sp, #20]
 800b1b8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800b1ba:	f8cd 9008 	str.w	r9, [sp, #8]
 800b1be:	4629      	mov	r1, r5
 800b1c0:	465a      	mov	r2, fp
 800b1c2:	f7fd fabf 	bl	8008744 <LCD_DrawBitmap>
 800b1c6:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b1c8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b1ca:	1c6f      	adds	r7, r5, #1
 800b1cc:	fa01 f380 	sxtah	r3, r1, r0
 800b1d0:	42bb      	cmp	r3, r7
 800b1d2:	d0b1      	beq.n	800b138 <GUI_MEMDEV__WriteToActiveOpaque+0x4c8>
 800b1d4:	463d      	mov	r5, r7
 800b1d6:	e7ba      	b.n	800b14e <GUI_MEMDEV__WriteToActiveOpaque+0x4de>
 800b1d8:	2910      	cmp	r1, #16
 800b1da:	f040 80d8 	bne.w	800b38e <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800b1de:	fa0f fa87 	sxth.w	sl, r7
 800b1e2:	fb0a f004 	mul.w	r0, sl, r4
 800b1e6:	f7ff fbbf 	bl	800a968 <GUI_ALLOC_AllocNoInit>
 800b1ea:	9012      	str	r0, [sp, #72]	; 0x48
 800b1ec:	2800      	cmp	r0, #0
 800b1ee:	f000 80ce 	beq.w	800b38e <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800b1f2:	f7ff f971 	bl	800a4d8 <GUI_ALLOC_LockH>
 800b1f6:	901a      	str	r0, [sp, #104]	; 0x68
 800b1f8:	4630      	mov	r0, r6
 800b1fa:	f7ff f96d 	bl	800a4d8 <GUI_ALLOC_LockH>
 800b1fe:	9018      	str	r0, [sp, #96]	; 0x60
 800b200:	692b      	ldr	r3, [r5, #16]
 800b202:	f100 0618 	add.w	r6, r0, #24
 800b206:	b113      	cbz	r3, 800b20e <GUI_MEMDEV__WriteToActiveOpaque+0x59e>
 800b208:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800b20c:	b92b      	cbnz	r3, 800b21a <GUI_MEMDEV__WriteToActiveOpaque+0x5aa>
 800b20e:	00e2      	lsls	r2, r4, #3
 800b210:	b23f      	sxth	r7, r7
 800b212:	9211      	str	r2, [sp, #68]	; 0x44
 800b214:	007f      	lsls	r7, r7, #1
 800b216:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b218:	e088      	b.n	800b32c <GUI_MEMDEV__WriteToActiveOpaque+0x6bc>
 800b21a:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 800b21e:	0080      	lsls	r0, r0, #2
 800b220:	f7ff fba2 	bl	800a968 <GUI_ALLOC_AllocNoInit>
 800b224:	9011      	str	r0, [sp, #68]	; 0x44
 800b226:	b118      	cbz	r0, 800b230 <GUI_MEMDEV__WriteToActiveOpaque+0x5c0>
 800b228:	f7ff f956 	bl	800a4d8 <GUI_ALLOC_LockH>
 800b22c:	9019      	str	r0, [sp, #100]	; 0x64
 800b22e:	e001      	b.n	800b234 <GUI_MEMDEV__WriteToActiveOpaque+0x5c4>
 800b230:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b232:	9319      	str	r3, [sp, #100]	; 0x64
 800b234:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b236:	2b00      	cmp	r3, #0
 800b238:	f000 80a0 	beq.w	800b37c <GUI_MEMDEV__WriteToActiveOpaque+0x70c>
 800b23c:	b23f      	sxth	r7, r7
 800b23e:	007f      	lsls	r7, r7, #1
 800b240:	970e      	str	r7, [sp, #56]	; 0x38
 800b242:	00e7      	lsls	r7, r4, #3
 800b244:	9713      	str	r7, [sp, #76]	; 0x4c
 800b246:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800b248:	970c      	str	r7, [sp, #48]	; 0x30
 800b24a:	2c02      	cmp	r4, #2
 800b24c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800b250:	d004      	beq.n	800b25c <GUI_MEMDEV__WriteToActiveOpaque+0x5ec>
 800b252:	2c04      	cmp	r4, #4
 800b254:	d007      	beq.n	800b266 <GUI_MEMDEV__WriteToActiveOpaque+0x5f6>
 800b256:	2c01      	cmp	r4, #1
 800b258:	d114      	bne.n	800b284 <GUI_MEMDEV__WriteToActiveOpaque+0x614>
 800b25a:	e004      	b.n	800b266 <GUI_MEMDEV__WriteToActiveOpaque+0x5f6>
 800b25c:	4630      	mov	r0, r6
 800b25e:	9919      	ldr	r1, [sp, #100]	; 0x64
 800b260:	4652      	mov	r2, sl
 800b262:	4623      	mov	r3, r4
 800b264:	e003      	b.n	800b26e <GUI_MEMDEV__WriteToActiveOpaque+0x5fe>
 800b266:	9919      	ldr	r1, [sp, #100]	; 0x64
 800b268:	4630      	mov	r0, r6
 800b26a:	4652      	mov	r2, sl
 800b26c:	2302      	movs	r3, #2
 800b26e:	f8d9 7014 	ldr.w	r7, [r9, #20]
 800b272:	47b8      	blx	r7
 800b274:	692f      	ldr	r7, [r5, #16]
 800b276:	9819      	ldr	r0, [sp, #100]	; 0x64
 800b278:	4641      	mov	r1, r8
 800b27a:	4652      	mov	r2, sl
 800b27c:	4623      	mov	r3, r4
 800b27e:	47b8      	blx	r7
 800b280:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800b282:	443e      	add	r6, r7
 800b284:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800b286:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b288:	9104      	str	r1, [sp, #16]
 800b28a:	2301      	movs	r3, #1
 800b28c:	2200      	movs	r2, #0
 800b28e:	f107 0801 	add.w	r8, r7, #1
 800b292:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800b294:	9300      	str	r3, [sp, #0]
 800b296:	9301      	str	r3, [sp, #4]
 800b298:	9702      	str	r7, [sp, #8]
 800b29a:	9203      	str	r2, [sp, #12]
 800b29c:	9205      	str	r2, [sp, #20]
 800b29e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800b2a0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b2a2:	465a      	mov	r2, fp
 800b2a4:	f7fd fa4e 	bl	8008744 <LCD_DrawBitmap>
 800b2a8:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800b2aa:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b2ac:	fa00 f387 	sxtah	r3, r0, r7
 800b2b0:	4543      	cmp	r3, r8
 800b2b2:	d002      	beq.n	800b2ba <GUI_MEMDEV__WriteToActiveOpaque+0x64a>
 800b2b4:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800b2b8:	e7c7      	b.n	800b24a <GUI_MEMDEV__WriteToActiveOpaque+0x5da>
 800b2ba:	a819      	add	r0, sp, #100	; 0x64
 800b2bc:	f7ff f91a 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 800b2c0:	9811      	ldr	r0, [sp, #68]	; 0x44
 800b2c2:	f7ff f937 	bl	800a534 <GUI_ALLOC_Free>
 800b2c6:	e059      	b.n	800b37c <GUI_MEMDEV__WriteToActiveOpaque+0x70c>
 800b2c8:	20019624 	.word	0x20019624
 800b2cc:	20000018 	.word	0x20000018
 800b2d0:	2c04      	cmp	r4, #4
 800b2d2:	d041      	beq.n	800b358 <GUI_MEMDEV__WriteToActiveOpaque+0x6e8>
 800b2d4:	2c01      	cmp	r4, #1
 800b2d6:	d111      	bne.n	800b2fc <GUI_MEMDEV__WriteToActiveOpaque+0x68c>
 800b2d8:	464a      	mov	r2, r9
 800b2da:	4631      	mov	r1, r6
 800b2dc:	f831 0b02 	ldrh.w	r0, [r1], #2
 800b2e0:	910a      	str	r1, [sp, #40]	; 0x28
 800b2e2:	920b      	str	r2, [sp, #44]	; 0x2c
 800b2e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b2e6:	4798      	blx	r3
 800b2e8:	47c0      	blx	r8
 800b2ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b2ec:	f802 0b01 	strb.w	r0, [r2], #1
 800b2f0:	eb09 000a 	add.w	r0, r9, sl
 800b2f4:	4282      	cmp	r2, r0
 800b2f6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b2f8:	d1f0      	bne.n	800b2dc <GUI_MEMDEV__WriteToActiveOpaque+0x66c>
 800b2fa:	443e      	add	r6, r7
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	9811      	ldr	r0, [sp, #68]	; 0x44
 800b300:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b302:	9300      	str	r3, [sp, #0]
 800b304:	2200      	movs	r2, #0
 800b306:	9301      	str	r3, [sp, #4]
 800b308:	9002      	str	r0, [sp, #8]
 800b30a:	9203      	str	r2, [sp, #12]
 800b30c:	9104      	str	r1, [sp, #16]
 800b30e:	9205      	str	r2, [sp, #20]
 800b310:	4629      	mov	r1, r5
 800b312:	465a      	mov	r2, fp
 800b314:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800b316:	f7fd fa15 	bl	8008744 <LCD_DrawBitmap>
 800b31a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b31c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b31e:	f105 0901 	add.w	r9, r5, #1
 800b322:	fa02 f381 	sxtah	r3, r2, r1
 800b326:	454b      	cmp	r3, r9
 800b328:	d028      	beq.n	800b37c <GUI_MEMDEV__WriteToActiveOpaque+0x70c>
 800b32a:	464d      	mov	r5, r9
 800b32c:	2c02      	cmp	r4, #2
 800b32e:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 800b332:	d1cd      	bne.n	800b2d0 <GUI_MEMDEV__WriteToActiveOpaque+0x660>
 800b334:	464b      	mov	r3, r9
 800b336:	4631      	mov	r1, r6
 800b338:	46d9      	mov	r9, fp
 800b33a:	f831 0b02 	ldrh.w	r0, [r1], #2
 800b33e:	910a      	str	r1, [sp, #40]	; 0x28
 800b340:	9309      	str	r3, [sp, #36]	; 0x24
 800b342:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b344:	4790      	blx	r2
 800b346:	47c0      	blx	r8
 800b348:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b34a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b34c:	f823 0b02 	strh.w	r0, [r3], #2
 800b350:	f1b9 0901 	subs.w	r9, r9, #1
 800b354:	d1f1      	bne.n	800b33a <GUI_MEMDEV__WriteToActiveOpaque+0x6ca>
 800b356:	e7d0      	b.n	800b2fa <GUI_MEMDEV__WriteToActiveOpaque+0x68a>
 800b358:	464b      	mov	r3, r9
 800b35a:	4631      	mov	r1, r6
 800b35c:	46d9      	mov	r9, fp
 800b35e:	f831 0b02 	ldrh.w	r0, [r1], #2
 800b362:	910a      	str	r1, [sp, #40]	; 0x28
 800b364:	9309      	str	r3, [sp, #36]	; 0x24
 800b366:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b368:	4790      	blx	r2
 800b36a:	47c0      	blx	r8
 800b36c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b36e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b370:	f843 0b04 	str.w	r0, [r3], #4
 800b374:	f1b9 0901 	subs.w	r9, r9, #1
 800b378:	d1f1      	bne.n	800b35e <GUI_MEMDEV__WriteToActiveOpaque+0x6ee>
 800b37a:	e7be      	b.n	800b2fa <GUI_MEMDEV__WriteToActiveOpaque+0x68a>
 800b37c:	a818      	add	r0, sp, #96	; 0x60
 800b37e:	f7ff f8b9 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 800b382:	a81a      	add	r0, sp, #104	; 0x68
 800b384:	f7ff f8b6 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 800b388:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b38a:	f7ff f8d3 	bl	800a534 <GUI_ALLOC_Free>
 800b38e:	b01d      	add	sp, #116	; 0x74
 800b390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b394 <GUI_USAGE_BM_AddPixel>:
 800b394:	4603      	mov	r3, r0
 800b396:	b510      	push	{r4, lr}
 800b398:	f933 4b14 	ldrsh.w	r4, [r3], #20
 800b39c:	1b09      	subs	r1, r1, r4
 800b39e:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800b3a2:	6900      	ldr	r0, [r0, #16]
 800b3a4:	1b12      	subs	r2, r2, r4
 800b3a6:	fb00 3302 	mla	r3, r0, r2, r3
 800b3aa:	10c8      	asrs	r0, r1, #3
 800b3ac:	2280      	movs	r2, #128	; 0x80
 800b3ae:	f001 0107 	and.w	r1, r1, #7
 800b3b2:	fa42 f101 	asr.w	r1, r2, r1
 800b3b6:	5c1a      	ldrb	r2, [r3, r0]
 800b3b8:	4311      	orrs	r1, r2
 800b3ba:	5419      	strb	r1, [r3, r0]
 800b3bc:	bd10      	pop	{r4, pc}

0800b3be <GUI_USAGE_BM_GetNextDirty>:
 800b3be:	b570      	push	{r4, r5, r6, lr}
 800b3c0:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 800b3c4:	680b      	ldr	r3, [r1, #0]
 800b3c6:	8886      	ldrh	r6, [r0, #4]
 800b3c8:	42a2      	cmp	r2, r4
 800b3ca:	da41      	bge.n	800b450 <GUI_USAGE_BM_GetNextDirty+0x92>
 800b3cc:	b236      	sxth	r6, r6
 800b3ce:	42b3      	cmp	r3, r6
 800b3d0:	6904      	ldr	r4, [r0, #16]
 800b3d2:	da3d      	bge.n	800b450 <GUI_USAGE_BM_GetNextDirty+0x92>
 800b3d4:	3014      	adds	r0, #20
 800b3d6:	fb04 0202 	mla	r2, r4, r2, r0
 800b3da:	10dd      	asrs	r5, r3, #3
 800b3dc:	1e70      	subs	r0, r6, #1
 800b3de:	1954      	adds	r4, r2, r5
 800b3e0:	ebc5 00e0 	rsb	r0, r5, r0, asr #3
 800b3e4:	5d55      	ldrb	r5, [r2, r5]
 800b3e6:	f003 0207 	and.w	r2, r3, #7
 800b3ea:	fa05 f202 	lsl.w	r2, r5, r2
 800b3ee:	3401      	adds	r4, #1
 800b3f0:	b2d2      	uxtb	r2, r2
 800b3f2:	b93a      	cbnz	r2, 800b404 <GUI_USAGE_BM_GetNextDirty+0x46>
 800b3f4:	b368      	cbz	r0, 800b452 <GUI_USAGE_BM_GetNextDirty+0x94>
 800b3f6:	3308      	adds	r3, #8
 800b3f8:	f814 2b01 	ldrb.w	r2, [r4], #1
 800b3fc:	3801      	subs	r0, #1
 800b3fe:	f023 0307 	bic.w	r3, r3, #7
 800b402:	e7f6      	b.n	800b3f2 <GUI_USAGE_BM_GetNextDirty+0x34>
 800b404:	0615      	lsls	r5, r2, #24
 800b406:	d403      	bmi.n	800b410 <GUI_USAGE_BM_GetNextDirty+0x52>
 800b408:	0052      	lsls	r2, r2, #1
 800b40a:	b2d2      	uxtb	r2, r2
 800b40c:	3301      	adds	r3, #1
 800b40e:	e7f9      	b.n	800b404 <GUI_USAGE_BM_GetNextDirty+0x46>
 800b410:	2aff      	cmp	r2, #255	; 0xff
 800b412:	461d      	mov	r5, r3
 800b414:	d005      	beq.n	800b422 <GUI_USAGE_BM_GetNextDirty+0x64>
 800b416:	0656      	lsls	r6, r2, #25
 800b418:	d504      	bpl.n	800b424 <GUI_USAGE_BM_GetNextDirty+0x66>
 800b41a:	0052      	lsls	r2, r2, #1
 800b41c:	b2d2      	uxtb	r2, r2
 800b41e:	3301      	adds	r3, #1
 800b420:	e7f9      	b.n	800b416 <GUI_USAGE_BM_GetNextDirty+0x58>
 800b422:	3307      	adds	r3, #7
 800b424:	f003 0207 	and.w	r2, r3, #7
 800b428:	2a07      	cmp	r2, #7
 800b42a:	d10d      	bne.n	800b448 <GUI_USAGE_BM_GetNextDirty+0x8a>
 800b42c:	3801      	subs	r0, #1
 800b42e:	d40b      	bmi.n	800b448 <GUI_USAGE_BM_GetNextDirty+0x8a>
 800b430:	f814 2b01 	ldrb.w	r2, [r4], #1
 800b434:	2aff      	cmp	r2, #255	; 0xff
 800b436:	d101      	bne.n	800b43c <GUI_USAGE_BM_GetNextDirty+0x7e>
 800b438:	3308      	adds	r3, #8
 800b43a:	e7f7      	b.n	800b42c <GUI_USAGE_BM_GetNextDirty+0x6e>
 800b43c:	0610      	lsls	r0, r2, #24
 800b43e:	d503      	bpl.n	800b448 <GUI_USAGE_BM_GetNextDirty+0x8a>
 800b440:	0052      	lsls	r2, r2, #1
 800b442:	b2d2      	uxtb	r2, r2
 800b444:	3301      	adds	r3, #1
 800b446:	e7f9      	b.n	800b43c <GUI_USAGE_BM_GetNextDirty+0x7e>
 800b448:	1b58      	subs	r0, r3, r5
 800b44a:	600d      	str	r5, [r1, #0]
 800b44c:	3001      	adds	r0, #1
 800b44e:	bd70      	pop	{r4, r5, r6, pc}
 800b450:	2000      	movs	r0, #0
 800b452:	bd70      	pop	{r4, r5, r6, pc}

0800b454 <_GUI_USAGE_BM_Delete>:
 800b454:	f7ff b86e 	b.w	800a534 <GUI_ALLOC_Free>

0800b458 <GUI_USAGE_BM_Clear>:
 800b458:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800b45c:	6902      	ldr	r2, [r0, #16]
 800b45e:	2100      	movs	r1, #0
 800b460:	3014      	adds	r0, #20
 800b462:	435a      	muls	r2, r3
 800b464:	f001 b978 	b.w	800c758 <memset>

0800b468 <GUI_USAGE_BM_AddHLine>:
 800b468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b46a:	f9b0 4000 	ldrsh.w	r4, [r0]
 800b46e:	1b09      	subs	r1, r1, r4
 800b470:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800b474:	42a1      	cmp	r1, r4
 800b476:	da2f      	bge.n	800b4d8 <GUI_USAGE_BM_AddHLine+0x70>
 800b478:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 800b47c:	440b      	add	r3, r1
 800b47e:	f100 0414 	add.w	r4, r0, #20
 800b482:	3b01      	subs	r3, #1
 800b484:	6900      	ldr	r0, [r0, #16]
 800b486:	1b52      	subs	r2, r2, r5
 800b488:	43de      	mvns	r6, r3
 800b48a:	fb00 4202 	mla	r2, r0, r2, r4
 800b48e:	f001 0707 	and.w	r7, r1, #7
 800b492:	10cc      	asrs	r4, r1, #3
 800b494:	f006 0607 	and.w	r6, r6, #7
 800b498:	21ff      	movs	r1, #255	; 0xff
 800b49a:	fa41 f707 	asr.w	r7, r1, r7
 800b49e:	fa01 f606 	lsl.w	r6, r1, r6
 800b4a2:	ebd4 03e3 	rsbs	r3, r4, r3, asr #3
 800b4a6:	eb02 0504 	add.w	r5, r2, r4
 800b4aa:	b2ff      	uxtb	r7, r7
 800b4ac:	b2f6      	uxtb	r6, r6
 800b4ae:	5d10      	ldrb	r0, [r2, r4]
 800b4b0:	d103      	bne.n	800b4ba <GUI_USAGE_BM_AddHLine+0x52>
 800b4b2:	403e      	ands	r6, r7
 800b4b4:	4330      	orrs	r0, r6
 800b4b6:	5510      	strb	r0, [r2, r4]
 800b4b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4ba:	4338      	orrs	r0, r7
 800b4bc:	5510      	strb	r0, [r2, r4]
 800b4be:	1e5c      	subs	r4, r3, #1
 800b4c0:	2c00      	cmp	r4, #0
 800b4c2:	f105 0501 	add.w	r5, r5, #1
 800b4c6:	dd04      	ble.n	800b4d2 <GUI_USAGE_BM_AddHLine+0x6a>
 800b4c8:	4628      	mov	r0, r5
 800b4ca:	4622      	mov	r2, r4
 800b4cc:	f001 f944 	bl	800c758 <memset>
 800b4d0:	4425      	add	r5, r4
 800b4d2:	782b      	ldrb	r3, [r5, #0]
 800b4d4:	431e      	orrs	r6, r3
 800b4d6:	702e      	strb	r6, [r5, #0]
 800b4d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b4dc <GUI_USAGE_BM_Create>:
 800b4dc:	e92d 4fd3 	stmdb	sp!, {r0, r1, r4, r6, r7, r8, r9, sl, fp, lr}
 800b4e0:	f102 060f 	add.w	r6, r2, #15
 800b4e4:	1136      	asrs	r6, r6, #4
 800b4e6:	0076      	lsls	r6, r6, #1
 800b4e8:	4682      	mov	sl, r0
 800b4ea:	fb06 f003 	mul.w	r0, r6, r3
 800b4ee:	3014      	adds	r0, #20
 800b4f0:	4689      	mov	r9, r1
 800b4f2:	4690      	mov	r8, r2
 800b4f4:	461f      	mov	r7, r3
 800b4f6:	f7ff fa3b 	bl	800a970 <GUI_ALLOC_AllocZero>
 800b4fa:	4683      	mov	fp, r0
 800b4fc:	b198      	cbz	r0, 800b526 <GUI_USAGE_BM_Create+0x4a>
 800b4fe:	f7fe ffeb 	bl	800a4d8 <GUI_ALLOC_LockH>
 800b502:	4604      	mov	r4, r0
 800b504:	4b0a      	ldr	r3, [pc, #40]	; (800b530 <GUI_USAGE_BM_Create+0x54>)
 800b506:	60a3      	str	r3, [r4, #8]
 800b508:	a802      	add	r0, sp, #8
 800b50a:	2301      	movs	r3, #1
 800b50c:	f840 4d04 	str.w	r4, [r0, #-4]!
 800b510:	f8a4 8004 	strh.w	r8, [r4, #4]
 800b514:	f8a4 a000 	strh.w	sl, [r4]
 800b518:	f8a4 9002 	strh.w	r9, [r4, #2]
 800b51c:	80e7      	strh	r7, [r4, #6]
 800b51e:	81a3      	strh	r3, [r4, #12]
 800b520:	6126      	str	r6, [r4, #16]
 800b522:	f7fe ffe7 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 800b526:	4658      	mov	r0, fp
 800b528:	b002      	add	sp, #8
 800b52a:	e8bd 8fd0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, sl, fp, pc}
 800b52e:	bf00      	nop
 800b530:	0800f488 	.word	0x0800f488

0800b534 <GUI_USAGE_DecUseCnt>:
 800b534:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b536:	4605      	mov	r5, r0
 800b538:	f7fe ffce 	bl	800a4d8 <GUI_ALLOC_LockH>
 800b53c:	4602      	mov	r2, r0
 800b53e:	a802      	add	r0, sp, #8
 800b540:	8994      	ldrh	r4, [r2, #12]
 800b542:	f840 2d04 	str.w	r2, [r0, #-4]!
 800b546:	3c01      	subs	r4, #1
 800b548:	b2a4      	uxth	r4, r4
 800b54a:	8194      	strh	r4, [r2, #12]
 800b54c:	f7fe ffd2 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 800b550:	b914      	cbnz	r4, 800b558 <GUI_USAGE_DecUseCnt+0x24>
 800b552:	4628      	mov	r0, r5
 800b554:	f7fe ffee 	bl	800a534 <GUI_ALLOC_Free>
 800b558:	b003      	add	sp, #12
 800b55a:	bd30      	pop	{r4, r5, pc}

0800b55c <GUI_USAGE_AddRect>:
 800b55c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b560:	4605      	mov	r5, r0
 800b562:	4688      	mov	r8, r1
 800b564:	4617      	mov	r7, r2
 800b566:	4699      	mov	r9, r3
 800b568:	68a8      	ldr	r0, [r5, #8]
 800b56a:	464b      	mov	r3, r9
 800b56c:	6846      	ldr	r6, [r0, #4]
 800b56e:	4641      	mov	r1, r8
 800b570:	4628      	mov	r0, r5
 800b572:	1c54      	adds	r4, r2, #1
 800b574:	47b0      	blx	r6
 800b576:	9b08      	ldr	r3, [sp, #32]
 800b578:	443b      	add	r3, r7
 800b57a:	42a3      	cmp	r3, r4
 800b57c:	d001      	beq.n	800b582 <GUI_USAGE_AddRect+0x26>
 800b57e:	4622      	mov	r2, r4
 800b580:	e7f2      	b.n	800b568 <GUI_USAGE_AddRect+0xc>
 800b582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0800b588 <_GetDevData>:
 800b588:	4802      	ldr	r0, [pc, #8]	; (800b594 <_GetDevData+0xc>)
 800b58a:	2901      	cmp	r1, #1
 800b58c:	bf18      	it	ne
 800b58e:	2000      	movne	r0, #0
 800b590:	4770      	bx	lr
 800b592:	bf00      	nop
 800b594:	0800f4e0 	.word	0x0800f4e0

0800b598 <_GetDevFunc>:
 800b598:	4802      	ldr	r0, [pc, #8]	; (800b5a4 <_GetDevFunc+0xc>)
 800b59a:	2916      	cmp	r1, #22
 800b59c:	bf18      	it	ne
 800b59e:	2000      	movne	r0, #0
 800b5a0:	4770      	bx	lr
 800b5a2:	bf00      	nop
 800b5a4:	0800ac71 	.word	0x0800ac71

0800b5a8 <_SetOrg>:
 800b5a8:	6800      	ldr	r0, [r0, #0]
 800b5aa:	b508      	push	{r3, lr}
 800b5ac:	b110      	cbz	r0, 800b5b4 <_SetOrg+0xc>
 800b5ae:	68c3      	ldr	r3, [r0, #12]
 800b5b0:	6a1b      	ldr	r3, [r3, #32]
 800b5b2:	4798      	blx	r3
 800b5b4:	bd08      	pop	{r3, pc}

0800b5b6 <_GetDevProp>:
 800b5b6:	6800      	ldr	r0, [r0, #0]
 800b5b8:	b508      	push	{r3, lr}
 800b5ba:	b118      	cbz	r0, 800b5c4 <_GetDevProp+0xe>
 800b5bc:	68c3      	ldr	r3, [r0, #12]
 800b5be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5c0:	4798      	blx	r3
 800b5c2:	bd08      	pop	{r3, pc}
 800b5c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5c8:	bd08      	pop	{r3, pc}

0800b5ca <_GetRect>:
 800b5ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b5cc:	6880      	ldr	r0, [r0, #8]
 800b5ce:	460c      	mov	r4, r1
 800b5d0:	f7fe ff82 	bl	800a4d8 <GUI_ALLOC_LockH>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	a802      	add	r0, sp, #8
 800b5d8:	8899      	ldrh	r1, [r3, #4]
 800b5da:	88da      	ldrh	r2, [r3, #6]
 800b5dc:	891d      	ldrh	r5, [r3, #8]
 800b5de:	f840 3d04 	str.w	r3, [r0, #-4]!
 800b5e2:	895b      	ldrh	r3, [r3, #10]
 800b5e4:	8021      	strh	r1, [r4, #0]
 800b5e6:	8062      	strh	r2, [r4, #2]
 800b5e8:	4429      	add	r1, r5
 800b5ea:	441a      	add	r2, r3
 800b5ec:	3901      	subs	r1, #1
 800b5ee:	3a01      	subs	r2, #1
 800b5f0:	80a1      	strh	r1, [r4, #4]
 800b5f2:	80e2      	strh	r2, [r4, #6]
 800b5f4:	f7fe ff7e 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 800b5f8:	b003      	add	sp, #12
 800b5fa:	bd30      	pop	{r4, r5, pc}

0800b5fc <_XY2PTR>:
 800b5fc:	4b0e      	ldr	r3, [pc, #56]	; (800b638 <_XY2PTR+0x3c>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b602:	4605      	mov	r5, r0
 800b604:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800b606:	460e      	mov	r6, r1
 800b608:	f7fe ff66 	bl	800a4d8 <GUI_ALLOC_LockH>
 800b60c:	4603      	mov	r3, r0
 800b60e:	a802      	add	r0, sp, #8
 800b610:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 800b614:	f840 3d04 	str.w	r3, [r0, #-4]!
 800b618:	f103 0118 	add.w	r1, r3, #24
 800b61c:	1b36      	subs	r6, r6, r4
 800b61e:	68dc      	ldr	r4, [r3, #12]
 800b620:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b624:	fb04 1406 	mla	r4, r4, r6, r1
 800b628:	1aed      	subs	r5, r5, r3
 800b62a:	f7fe ff63 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 800b62e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800b632:	4620      	mov	r0, r4
 800b634:	b002      	add	sp, #8
 800b636:	bd70      	pop	{r4, r5, r6, pc}
 800b638:	20000018 	.word	0x20000018

0800b63c <_GetPixelIndex>:
 800b63c:	b508      	push	{r3, lr}
 800b63e:	4608      	mov	r0, r1
 800b640:	4611      	mov	r1, r2
 800b642:	f7ff ffdb 	bl	800b5fc <_XY2PTR>
 800b646:	8800      	ldrh	r0, [r0, #0]
 800b648:	bd08      	pop	{r3, pc}
	...

0800b64c <_XorPixel>:
 800b64c:	4b14      	ldr	r3, [pc, #80]	; (800b6a0 <_XorPixel+0x54>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b652:	4607      	mov	r7, r0
 800b654:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800b656:	4615      	mov	r5, r2
 800b658:	460e      	mov	r6, r1
 800b65a:	f7fe ff3d 	bl	800a4d8 <GUI_ALLOC_LockH>
 800b65e:	4629      	mov	r1, r5
 800b660:	9000      	str	r0, [sp, #0]
 800b662:	4630      	mov	r0, r6
 800b664:	f7ff ffca 	bl	800b5fc <_XY2PTR>
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	4604      	mov	r4, r0
 800b66c:	689b      	ldr	r3, [r3, #8]
 800b66e:	4798      	blx	r3
 800b670:	8823      	ldrh	r3, [r4, #0]
 800b672:	4058      	eors	r0, r3
 800b674:	9b00      	ldr	r3, [sp, #0]
 800b676:	8020      	strh	r0, [r4, #0]
 800b678:	6958      	ldr	r0, [r3, #20]
 800b67a:	b160      	cbz	r0, 800b696 <_XorPixel+0x4a>
 800b67c:	f7fe ff2c 	bl	800a4d8 <GUI_ALLOC_LockH>
 800b680:	ac02      	add	r4, sp, #8
 800b682:	6883      	ldr	r3, [r0, #8]
 800b684:	f844 0d04 	str.w	r0, [r4, #-4]!
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	4631      	mov	r1, r6
 800b68c:	462a      	mov	r2, r5
 800b68e:	4798      	blx	r3
 800b690:	4620      	mov	r0, r4
 800b692:	f7fe ff2f 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 800b696:	4668      	mov	r0, sp
 800b698:	f7fe ff2c 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 800b69c:	b003      	add	sp, #12
 800b69e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6a0:	20000018 	.word	0x20000018

0800b6a4 <_SetPixelIndex>:
 800b6a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b6a6:	461c      	mov	r4, r3
 800b6a8:	4b10      	ldr	r3, [pc, #64]	; (800b6ec <_SetPixelIndex+0x48>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800b6ae:	460e      	mov	r6, r1
 800b6b0:	4615      	mov	r5, r2
 800b6b2:	f7fe ff11 	bl	800a4d8 <GUI_ALLOC_LockH>
 800b6b6:	4629      	mov	r1, r5
 800b6b8:	9000      	str	r0, [sp, #0]
 800b6ba:	4630      	mov	r0, r6
 800b6bc:	f7ff ff9e 	bl	800b5fc <_XY2PTR>
 800b6c0:	9b00      	ldr	r3, [sp, #0]
 800b6c2:	8004      	strh	r4, [r0, #0]
 800b6c4:	6958      	ldr	r0, [r3, #20]
 800b6c6:	b160      	cbz	r0, 800b6e2 <_SetPixelIndex+0x3e>
 800b6c8:	f7fe ff06 	bl	800a4d8 <GUI_ALLOC_LockH>
 800b6cc:	ac02      	add	r4, sp, #8
 800b6ce:	6883      	ldr	r3, [r0, #8]
 800b6d0:	f844 0d04 	str.w	r0, [r4, #-4]!
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	4631      	mov	r1, r6
 800b6d8:	462a      	mov	r2, r5
 800b6da:	4798      	blx	r3
 800b6dc:	4620      	mov	r0, r4
 800b6de:	f7fe ff09 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 800b6e2:	4668      	mov	r0, sp
 800b6e4:	f7fe ff06 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 800b6e8:	b002      	add	sp, #8
 800b6ea:	bd70      	pop	{r4, r5, r6, pc}
 800b6ec:	20000018 	.word	0x20000018

0800b6f0 <_DrawVLine>:
 800b6f0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800b6f4:	4d2c      	ldr	r5, [pc, #176]	; (800b7a8 <_DrawVLine+0xb8>)
 800b6f6:	461e      	mov	r6, r3
 800b6f8:	682b      	ldr	r3, [r5, #0]
 800b6fa:	4681      	mov	r9, r0
 800b6fc:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800b6fe:	460f      	mov	r7, r1
 800b700:	4614      	mov	r4, r2
 800b702:	f7fe fee9 	bl	800a4d8 <GUI_ALLOC_LockH>
 800b706:	9000      	str	r0, [sp, #0]
 800b708:	6940      	ldr	r0, [r0, #20]
 800b70a:	46aa      	mov	sl, r5
 800b70c:	b108      	cbz	r0, 800b712 <_DrawVLine+0x22>
 800b70e:	f7fe fee3 	bl	800a4d8 <GUI_ALLOC_LockH>
 800b712:	9001      	str	r0, [sp, #4]
 800b714:	4621      	mov	r1, r4
 800b716:	4638      	mov	r0, r7
 800b718:	f7ff ff70 	bl	800b5fc <_XY2PTR>
 800b71c:	9b00      	ldr	r3, [sp, #0]
 800b71e:	f8d3 800c 	ldr.w	r8, [r3, #12]
 800b722:	f8da 3000 	ldr.w	r3, [sl]
 800b726:	7c1a      	ldrb	r2, [r3, #16]
 800b728:	07d2      	lsls	r2, r2, #31
 800b72a:	4605      	mov	r5, r0
 800b72c:	d51f      	bpl.n	800b76e <_DrawVLine+0x7e>
 800b72e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b732:	689b      	ldr	r3, [r3, #8]
 800b734:	4798      	blx	r3
 800b736:	fa1f f880 	uxth.w	r8, r0
 800b73a:	9801      	ldr	r0, [sp, #4]
 800b73c:	b120      	cbz	r0, 800b748 <_DrawVLine+0x58>
 800b73e:	6883      	ldr	r3, [r0, #8]
 800b740:	4639      	mov	r1, r7
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	4622      	mov	r2, r4
 800b746:	4798      	blx	r3
 800b748:	882b      	ldrh	r3, [r5, #0]
 800b74a:	ea88 0303 	eor.w	r3, r8, r3
 800b74e:	802b      	strh	r3, [r5, #0]
 800b750:	9b00      	ldr	r3, [sp, #0]
 800b752:	3401      	adds	r4, #1
 800b754:	68db      	ldr	r3, [r3, #12]
 800b756:	42b4      	cmp	r4, r6
 800b758:	441d      	add	r5, r3
 800b75a:	ddee      	ble.n	800b73a <_DrawVLine+0x4a>
 800b75c:	4668      	mov	r0, sp
 800b75e:	f7fe fec9 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 800b762:	9b01      	ldr	r3, [sp, #4]
 800b764:	b1eb      	cbz	r3, 800b7a2 <_DrawVLine+0xb2>
 800b766:	a801      	add	r0, sp, #4
 800b768:	f7fe fec4 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 800b76c:	e019      	b.n	800b7a2 <_DrawVLine+0xb2>
 800b76e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b770:	f8d3 9000 	ldr.w	r9, [r3]
 800b774:	9b01      	ldr	r3, [sp, #4]
 800b776:	b163      	cbz	r3, 800b792 <_DrawVLine+0xa2>
 800b778:	9801      	ldr	r0, [sp, #4]
 800b77a:	6883      	ldr	r3, [r0, #8]
 800b77c:	4622      	mov	r2, r4
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	4639      	mov	r1, r7
 800b782:	3401      	adds	r4, #1
 800b784:	4798      	blx	r3
 800b786:	42b4      	cmp	r4, r6
 800b788:	f8a5 9000 	strh.w	r9, [r5]
 800b78c:	4445      	add	r5, r8
 800b78e:	ddf3      	ble.n	800b778 <_DrawVLine+0x88>
 800b790:	e7e4      	b.n	800b75c <_DrawVLine+0x6c>
 800b792:	1b34      	subs	r4, r6, r4
 800b794:	3401      	adds	r4, #1
 800b796:	3c01      	subs	r4, #1
 800b798:	f8a5 9000 	strh.w	r9, [r5]
 800b79c:	4445      	add	r5, r8
 800b79e:	d1fa      	bne.n	800b796 <_DrawVLine+0xa6>
 800b7a0:	e7dc      	b.n	800b75c <_DrawVLine+0x6c>
 800b7a2:	b002      	add	sp, #8
 800b7a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7a8:	20000018 	.word	0x20000018

0800b7ac <_FillRect>:
 800b7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7b0:	4f2a      	ldr	r7, [pc, #168]	; (800b85c <_FillRect+0xb0>)
 800b7b2:	4614      	mov	r4, r2
 800b7b4:	683a      	ldr	r2, [r7, #0]
 800b7b6:	4698      	mov	r8, r3
 800b7b8:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800b7ba:	b087      	sub	sp, #28
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	9302      	str	r3, [sp, #8]
 800b7c0:	4682      	mov	sl, r0
 800b7c2:	6e10      	ldr	r0, [r2, #96]	; 0x60
 800b7c4:	460e      	mov	r6, r1
 800b7c6:	f7fe fe87 	bl	800a4d8 <GUI_ALLOC_LockH>
 800b7ca:	4621      	mov	r1, r4
 800b7cc:	9004      	str	r0, [sp, #16]
 800b7ce:	4630      	mov	r0, r6
 800b7d0:	f7ff ff14 	bl	800b5fc <_XY2PTR>
 800b7d4:	9a04      	ldr	r2, [sp, #16]
 800b7d6:	4605      	mov	r5, r0
 800b7d8:	6950      	ldr	r0, [r2, #20]
 800b7da:	68d3      	ldr	r3, [r2, #12]
 800b7dc:	9303      	str	r3, [sp, #12]
 800b7de:	ebc6 0908 	rsb	r9, r6, r8
 800b7e2:	f109 0801 	add.w	r8, r9, #1
 800b7e6:	46bb      	mov	fp, r7
 800b7e8:	b180      	cbz	r0, 800b80c <_FillRect+0x60>
 800b7ea:	f7fe fe75 	bl	800a4d8 <GUI_ALLOC_LockH>
 800b7ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b7f0:	af06      	add	r7, sp, #24
 800b7f2:	1b13      	subs	r3, r2, r4
 800b7f4:	f847 0d04 	str.w	r0, [r7, #-4]!
 800b7f8:	3301      	adds	r3, #1
 800b7fa:	9300      	str	r3, [sp, #0]
 800b7fc:	4631      	mov	r1, r6
 800b7fe:	4622      	mov	r2, r4
 800b800:	4643      	mov	r3, r8
 800b802:	f7ff feab 	bl	800b55c <GUI_USAGE_AddRect>
 800b806:	4638      	mov	r0, r7
 800b808:	f7fe fe74 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 800b80c:	ea4f 0649 	mov.w	r6, r9, lsl #1
 800b810:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b812:	429c      	cmp	r4, r3
 800b814:	dc1c      	bgt.n	800b850 <_FillRect+0xa4>
 800b816:	f8db 3000 	ldr.w	r3, [fp]
 800b81a:	7c1b      	ldrb	r3, [r3, #16]
 800b81c:	07db      	lsls	r3, r3, #31
 800b81e:	d50d      	bpl.n	800b83c <_FillRect+0x90>
 800b820:	f8da 3010 	ldr.w	r3, [sl, #16]
 800b824:	689b      	ldr	r3, [r3, #8]
 800b826:	4798      	blx	r3
 800b828:	19aa      	adds	r2, r5, r6
 800b82a:	b280      	uxth	r0, r0
 800b82c:	1eab      	subs	r3, r5, #2
 800b82e:	8859      	ldrh	r1, [r3, #2]
 800b830:	4041      	eors	r1, r0
 800b832:	f823 1f02 	strh.w	r1, [r3, #2]!
 800b836:	4293      	cmp	r3, r2
 800b838:	d1f9      	bne.n	800b82e <_FillRect+0x82>
 800b83a:	e005      	b.n	800b848 <_FillRect+0x9c>
 800b83c:	9b02      	ldr	r3, [sp, #8]
 800b83e:	4628      	mov	r0, r5
 800b840:	b299      	uxth	r1, r3
 800b842:	4642      	mov	r2, r8
 800b844:	f7fd f94c 	bl	8008ae0 <GUI__memset16>
 800b848:	9a03      	ldr	r2, [sp, #12]
 800b84a:	3401      	adds	r4, #1
 800b84c:	4415      	add	r5, r2
 800b84e:	e7df      	b.n	800b810 <_FillRect+0x64>
 800b850:	a804      	add	r0, sp, #16
 800b852:	f7fe fe4f 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 800b856:	b007      	add	sp, #28
 800b858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b85c:	20000018 	.word	0x20000018

0800b860 <_DrawHLine>:
 800b860:	b507      	push	{r0, r1, r2, lr}
 800b862:	9200      	str	r2, [sp, #0]
 800b864:	f7ff ffa2 	bl	800b7ac <_FillRect>
 800b868:	b003      	add	sp, #12
 800b86a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800b870 <_DrawBitmap>:
 800b870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b874:	4c8a      	ldr	r4, [pc, #552]	; (800baa0 <_DrawBitmap+0x230>)
 800b876:	b093      	sub	sp, #76	; 0x4c
 800b878:	469b      	mov	fp, r3
 800b87a:	6823      	ldr	r3, [r4, #0]
 800b87c:	900d      	str	r0, [sp, #52]	; 0x34
 800b87e:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800b880:	9207      	str	r2, [sp, #28]
 800b882:	460d      	mov	r5, r1
 800b884:	f8dd a07c 	ldr.w	sl, [sp, #124]	; 0x7c
 800b888:	f7fe fe26 	bl	800a4d8 <GUI_ALLOC_LockH>
 800b88c:	9010      	str	r0, [sp, #64]	; 0x40
 800b88e:	6940      	ldr	r0, [r0, #20]
 800b890:	b108      	cbz	r0, 800b896 <_DrawBitmap+0x26>
 800b892:	f7fe fe21 	bl	800a4d8 <GUI_ALLOC_LockH>
 800b896:	9011      	str	r0, [sp, #68]	; 0x44
 800b898:	a812      	add	r0, sp, #72	; 0x48
 800b89a:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 800b89e:	68db      	ldr	r3, [r3, #12]
 800b8a0:	9308      	str	r3, [sp, #32]
 800b8a2:	f7fe fe27 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 800b8a6:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800b8a8:	9811      	ldr	r0, [sp, #68]	; 0x44
 800b8aa:	442e      	add	r6, r5
 800b8ac:	9604      	str	r6, [sp, #16]
 800b8ae:	b150      	cbz	r0, 800b8c6 <_DrawBitmap+0x56>
 800b8b0:	6823      	ldr	r3, [r4, #0]
 800b8b2:	7c1b      	ldrb	r3, [r3, #16]
 800b8b4:	0799      	lsls	r1, r3, #30
 800b8b6:	d106      	bne.n	800b8c6 <_DrawBitmap+0x56>
 800b8b8:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800b8ba:	9700      	str	r7, [sp, #0]
 800b8bc:	4631      	mov	r1, r6
 800b8be:	9a07      	ldr	r2, [sp, #28]
 800b8c0:	465b      	mov	r3, fp
 800b8c2:	f7ff fe4b 	bl	800b55c <GUI_USAGE_AddRect>
 800b8c6:	9804      	ldr	r0, [sp, #16]
 800b8c8:	9907      	ldr	r1, [sp, #28]
 800b8ca:	f7ff fe97 	bl	800b5fc <_XY2PTR>
 800b8ce:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800b8d0:	2e10      	cmp	r6, #16
 800b8d2:	4604      	mov	r4, r0
 800b8d4:	d139      	bne.n	800b94a <_DrawBitmap+0xda>
 800b8d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b8d8:	b11b      	cbz	r3, 800b8e2 <_DrawBitmap+0x72>
 800b8da:	ea4f 064b 	mov.w	r6, fp, lsl #1
 800b8de:	2500      	movs	r5, #0
 800b8e0:	e014      	b.n	800b90c <_DrawBitmap+0x9c>
 800b8e2:	4b70      	ldr	r3, [pc, #448]	; (800baa4 <_DrawBitmap+0x234>)
 800b8e4:	681d      	ldr	r5, [r3, #0]
 800b8e6:	2d00      	cmp	r5, #0
 800b8e8:	d0f7      	beq.n	800b8da <_DrawBitmap+0x6a>
 800b8ea:	9e08      	ldr	r6, [sp, #32]
 800b8ec:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800b8ee:	9600      	str	r6, [sp, #0]
 800b8f0:	9701      	str	r7, [sp, #4]
 800b8f2:	4651      	mov	r1, sl
 800b8f4:	465a      	mov	r2, fp
 800b8f6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800b8f8:	47a8      	blx	r5
 800b8fa:	e345      	b.n	800bf88 <_DrawBitmap+0x718>
 800b8fc:	f1ba 0f00 	cmp.w	sl, #0
 800b900:	d10a      	bne.n	800b918 <_DrawBitmap+0xa8>
 800b902:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800b904:	44ba      	add	sl, r7
 800b906:	9f08      	ldr	r7, [sp, #32]
 800b908:	3501      	adds	r5, #1
 800b90a:	443c      	add	r4, r7
 800b90c:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800b90e:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 800b912:	42bd      	cmp	r5, r7
 800b914:	dbf2      	blt.n	800b8fc <_DrawBitmap+0x8c>
 800b916:	e013      	b.n	800b940 <_DrawBitmap+0xd0>
 800b918:	2c00      	cmp	r4, #0
 800b91a:	d0f2      	beq.n	800b902 <_DrawBitmap+0x92>
 800b91c:	4620      	mov	r0, r4
 800b91e:	4651      	mov	r1, sl
 800b920:	4632      	mov	r2, r6
 800b922:	f000 fef5 	bl	800c710 <memcpy>
 800b926:	f1b8 0f00 	cmp.w	r8, #0
 800b92a:	d0ea      	beq.n	800b902 <_DrawBitmap+0x92>
 800b92c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b930:	9a07      	ldr	r2, [sp, #28]
 800b932:	685f      	ldr	r7, [r3, #4]
 800b934:	9904      	ldr	r1, [sp, #16]
 800b936:	4640      	mov	r0, r8
 800b938:	442a      	add	r2, r5
 800b93a:	465b      	mov	r3, fp
 800b93c:	47b8      	blx	r7
 800b93e:	e7e0      	b.n	800b902 <_DrawBitmap+0x92>
 800b940:	f1b8 0f00 	cmp.w	r8, #0
 800b944:	f040 831d 	bne.w	800bf82 <_DrawBitmap+0x712>
 800b948:	e31e      	b.n	800bf88 <_DrawBitmap+0x718>
 800b94a:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800b94c:	2e17      	cmp	r6, #23
 800b94e:	dd38      	ble.n	800b9c2 <_DrawBitmap+0x152>
 800b950:	2600      	movs	r6, #0
 800b952:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800b954:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800b956:	42be      	cmp	r6, r7
 800b958:	f280 809d 	bge.w	800ba96 <_DrawBitmap+0x226>
 800b95c:	9f07      	ldr	r7, [sp, #28]
 800b95e:	4437      	add	r7, r6
 800b960:	f1ba 0f00 	cmp.w	sl, #0
 800b964:	d027      	beq.n	800b9b6 <_DrawBitmap+0x146>
 800b966:	b334      	cbz	r4, 800b9b6 <_DrawBitmap+0x146>
 800b968:	b13d      	cbz	r5, 800b97a <_DrawBitmap+0x10a>
 800b96a:	68ab      	ldr	r3, [r5, #8]
 800b96c:	9904      	ldr	r1, [sp, #16]
 800b96e:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800b972:	4628      	mov	r0, r5
 800b974:	463a      	mov	r2, r7
 800b976:	465b      	mov	r3, fp
 800b978:	47e0      	blx	ip
 800b97a:	1ea3      	subs	r3, r4, #2
 800b97c:	f1aa 0904 	sub.w	r9, sl, #4
 800b980:	9303      	str	r3, [sp, #12]
 800b982:	46d8      	mov	r8, fp
 800b984:	9b04      	ldr	r3, [sp, #16]
 800b986:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b988:	445b      	add	r3, fp
 800b98a:	ebc8 0103 	rsb	r1, r8, r3
 800b98e:	6903      	ldr	r3, [r0, #16]
 800b990:	f859 0f04 	ldr.w	r0, [r9, #4]!
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	9102      	str	r1, [sp, #8]
 800b998:	4798      	blx	r3
 800b99a:	9b03      	ldr	r3, [sp, #12]
 800b99c:	9902      	ldr	r1, [sp, #8]
 800b99e:	f823 0f02 	strh.w	r0, [r3, #2]!
 800b9a2:	9303      	str	r3, [sp, #12]
 800b9a4:	b125      	cbz	r5, 800b9b0 <_DrawBitmap+0x140>
 800b9a6:	68ab      	ldr	r3, [r5, #8]
 800b9a8:	4628      	mov	r0, r5
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	463a      	mov	r2, r7
 800b9ae:	4798      	blx	r3
 800b9b0:	f1b8 0801 	subs.w	r8, r8, #1
 800b9b4:	d1e6      	bne.n	800b984 <_DrawBitmap+0x114>
 800b9b6:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800b9b8:	44ba      	add	sl, r7
 800b9ba:	9f08      	ldr	r7, [sp, #32]
 800b9bc:	3601      	adds	r6, #1
 800b9be:	443c      	add	r4, r7
 800b9c0:	e7c7      	b.n	800b952 <_DrawBitmap+0xe2>
 800b9c2:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800b9c4:	2e08      	cmp	r6, #8
 800b9c6:	f100 0402 	add.w	r4, r0, #2
 800b9ca:	d16d      	bne.n	800baa8 <_DrawBitmap+0x238>
 800b9cc:	9e07      	ldr	r6, [sp, #28]
 800b9ce:	9f07      	ldr	r7, [sp, #28]
 800b9d0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800b9d2:	1bf3      	subs	r3, r6, r7
 800b9d4:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800b9d6:	42bb      	cmp	r3, r7
 800b9d8:	f1a4 0002 	sub.w	r0, r4, #2
 800b9dc:	da5b      	bge.n	800ba96 <_DrawBitmap+0x226>
 800b9de:	4b30      	ldr	r3, [pc, #192]	; (800baa0 <_DrawBitmap+0x230>)
 800b9e0:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	7c1b      	ldrb	r3, [r3, #16]
 800b9e6:	b367      	cbz	r7, 800ba42 <_DrawBitmap+0x1d2>
 800b9e8:	f013 0303 	ands.w	r3, r3, #3
 800b9ec:	d004      	beq.n	800b9f8 <_DrawBitmap+0x188>
 800b9ee:	2b02      	cmp	r3, #2
 800b9f0:	d14b      	bne.n	800ba8a <_DrawBitmap+0x21a>
 800b9f2:	46a0      	mov	r8, r4
 800b9f4:	9f04      	ldr	r7, [sp, #16]
 800b9f6:	e01d      	b.n	800ba34 <_DrawBitmap+0x1c4>
 800b9f8:	f81a 2003 	ldrb.w	r2, [sl, r3]
 800b9fc:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800b9fe:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800ba02:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 800ba06:	3301      	adds	r3, #1
 800ba08:	455b      	cmp	r3, fp
 800ba0a:	d1f5      	bne.n	800b9f8 <_DrawBitmap+0x188>
 800ba0c:	e03d      	b.n	800ba8a <_DrawBitmap+0x21a>
 800ba0e:	9921      	ldr	r1, [sp, #132]	; 0x84
 800ba10:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ba14:	f828 3c02 	strh.w	r3, [r8, #-2]
 800ba18:	b12d      	cbz	r5, 800ba26 <_DrawBitmap+0x1b6>
 800ba1a:	68ab      	ldr	r3, [r5, #8]
 800ba1c:	4628      	mov	r0, r5
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	4639      	mov	r1, r7
 800ba22:	4632      	mov	r2, r6
 800ba24:	4798      	blx	r3
 800ba26:	9b04      	ldr	r3, [sp, #16]
 800ba28:	3701      	adds	r7, #1
 800ba2a:	445b      	add	r3, fp
 800ba2c:	42bb      	cmp	r3, r7
 800ba2e:	f108 0802 	add.w	r8, r8, #2
 800ba32:	d02a      	beq.n	800ba8a <_DrawBitmap+0x21a>
 800ba34:	9804      	ldr	r0, [sp, #16]
 800ba36:	ebc0 030a 	rsb	r3, r0, sl
 800ba3a:	5ddb      	ldrb	r3, [r3, r7]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d0f2      	beq.n	800ba26 <_DrawBitmap+0x1b6>
 800ba40:	e7e5      	b.n	800ba0e <_DrawBitmap+0x19e>
 800ba42:	f013 0303 	ands.w	r3, r3, #3
 800ba46:	d004      	beq.n	800ba52 <_DrawBitmap+0x1e2>
 800ba48:	2b02      	cmp	r3, #2
 800ba4a:	d11e      	bne.n	800ba8a <_DrawBitmap+0x21a>
 800ba4c:	46a0      	mov	r8, r4
 800ba4e:	9f04      	ldr	r7, [sp, #16]
 800ba50:	e014      	b.n	800ba7c <_DrawBitmap+0x20c>
 800ba52:	4651      	mov	r1, sl
 800ba54:	465a      	mov	r2, fp
 800ba56:	f000 fe5b 	bl	800c710 <memcpy>
 800ba5a:	e016      	b.n	800ba8a <_DrawBitmap+0x21a>
 800ba5c:	f828 3c02 	strh.w	r3, [r8, #-2]
 800ba60:	b12d      	cbz	r5, 800ba6e <_DrawBitmap+0x1fe>
 800ba62:	68ab      	ldr	r3, [r5, #8]
 800ba64:	4628      	mov	r0, r5
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	4639      	mov	r1, r7
 800ba6a:	4632      	mov	r2, r6
 800ba6c:	4798      	blx	r3
 800ba6e:	9b04      	ldr	r3, [sp, #16]
 800ba70:	3701      	adds	r7, #1
 800ba72:	445b      	add	r3, fp
 800ba74:	42bb      	cmp	r3, r7
 800ba76:	f108 0802 	add.w	r8, r8, #2
 800ba7a:	d006      	beq.n	800ba8a <_DrawBitmap+0x21a>
 800ba7c:	9a04      	ldr	r2, [sp, #16]
 800ba7e:	ebc2 030a 	rsb	r3, r2, sl
 800ba82:	5ddb      	ldrb	r3, [r3, r7]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d0f2      	beq.n	800ba6e <_DrawBitmap+0x1fe>
 800ba88:	e7e8      	b.n	800ba5c <_DrawBitmap+0x1ec>
 800ba8a:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800ba8c:	44ba      	add	sl, r7
 800ba8e:	9f08      	ldr	r7, [sp, #32]
 800ba90:	3601      	adds	r6, #1
 800ba92:	443c      	add	r4, r7
 800ba94:	e79b      	b.n	800b9ce <_DrawBitmap+0x15e>
 800ba96:	2d00      	cmp	r5, #0
 800ba98:	f040 8273 	bne.w	800bf82 <_DrawBitmap+0x712>
 800ba9c:	e274      	b.n	800bf88 <_DrawBitmap+0x718>
 800ba9e:	bf00      	nop
 800baa0:	20000018 	.word	0x20000018
 800baa4:	2001919c 	.word	0x2001919c
 800baa8:	9e21      	ldr	r6, [sp, #132]	; 0x84
 800baaa:	4bab      	ldr	r3, [pc, #684]	; (800bd58 <_DrawBitmap+0x4e8>)
 800baac:	9f20      	ldr	r7, [sp, #128]	; 0x80
 800baae:	9409      	str	r4, [sp, #36]	; 0x24
 800bab0:	2e00      	cmp	r6, #0
 800bab2:	bf08      	it	eq
 800bab4:	461e      	moveq	r6, r3
 800bab6:	9621      	str	r6, [sp, #132]	; 0x84
 800bab8:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800baba:	0076      	lsls	r6, r6, #1
 800babc:	960e      	str	r6, [sp, #56]	; 0x38
 800babe:	00bf      	lsls	r7, r7, #2
 800bac0:	9e07      	ldr	r6, [sp, #28]
 800bac2:	970f      	str	r7, [sp, #60]	; 0x3c
 800bac4:	9605      	str	r6, [sp, #20]
 800bac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bac8:	9e05      	ldr	r6, [sp, #20]
 800baca:	9f07      	ldr	r7, [sp, #28]
 800bacc:	1e9c      	subs	r4, r3, #2
 800bace:	1bf3      	subs	r3, r6, r7
 800bad0:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800bad2:	42b3      	cmp	r3, r6
 800bad4:	f280 8253 	bge.w	800bf7e <_DrawBitmap+0x70e>
 800bad8:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800bada:	2f02      	cmp	r7, #2
 800badc:	f000 80d9 	beq.w	800bc92 <_DrawBitmap+0x422>
 800bae0:	2f04      	cmp	r7, #4
 800bae2:	f000 8178 	beq.w	800bdd6 <_DrawBitmap+0x566>
 800bae6:	2f01      	cmp	r7, #1
 800bae8:	f040 823f 	bne.w	800bf6a <_DrawBitmap+0x6fa>
 800baec:	f8df 9270 	ldr.w	r9, [pc, #624]	; 800bd60 <_DrawBitmap+0x4f0>
 800baf0:	f8d9 3000 	ldr.w	r3, [r9]
 800baf4:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800baf6:	f7fe fcef 	bl	800a4d8 <GUI_ALLOC_LockH>
 800bafa:	f89a 3000 	ldrb.w	r3, [sl]
 800bafe:	4a97      	ldr	r2, [pc, #604]	; (800bd5c <_DrawBitmap+0x4ec>)
 800bb00:	9010      	str	r0, [sp, #64]	; 0x40
 800bb02:	5cd5      	ldrb	r5, [r2, r3]
 800bb04:	f8d9 3000 	ldr.w	r3, [r9]
 800bb08:	9820      	ldr	r0, [sp, #128]	; 0x80
 800bb0a:	7c1b      	ldrb	r3, [r3, #16]
 800bb0c:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800bb0e:	f003 0303 	and.w	r3, r3, #3
 800bb12:	2b02      	cmp	r3, #2
 800bb14:	465e      	mov	r6, fp
 800bb16:	f1c0 0808 	rsb	r8, r0, #8
 800bb1a:	fa45 f500 	asr.w	r5, r5, r0
 800bb1e:	d022      	beq.n	800bb66 <_DrawBitmap+0x2f6>
 800bb20:	2b03      	cmp	r3, #3
 800bb22:	d062      	beq.n	800bbea <_DrawBitmap+0x37a>
 800bb24:	2b01      	cmp	r3, #1
 800bb26:	d060      	beq.n	800bbea <_DrawBitmap+0x37a>
 800bb28:	4652      	mov	r2, sl
 800bb2a:	4546      	cmp	r6, r8
 800bb2c:	bf38      	it	cc
 800bb2e:	46b0      	movcc	r8, r6
 800bb30:	ebc8 0606 	rsb	r6, r8, r6
 800bb34:	4643      	mov	r3, r8
 800bb36:	4621      	mov	r1, r4
 800bb38:	f005 0001 	and.w	r0, r5, #1
 800bb3c:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800bb3e:	3b01      	subs	r3, #1
 800bb40:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 800bb44:	f821 0b02 	strh.w	r0, [r1], #2
 800bb48:	ea4f 0555 	mov.w	r5, r5, lsr #1
 800bb4c:	d1f4      	bne.n	800bb38 <_DrawBitmap+0x2c8>
 800bb4e:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 800bb52:	2e00      	cmp	r6, #0
 800bb54:	f000 8099 	beq.w	800bc8a <_DrawBitmap+0x41a>
 800bb58:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800bb5c:	497f      	ldr	r1, [pc, #508]	; (800bd5c <_DrawBitmap+0x4ec>)
 800bb5e:	f04f 0808 	mov.w	r8, #8
 800bb62:	5ccd      	ldrb	r5, [r1, r3]
 800bb64:	e7e1      	b.n	800bb2a <_DrawBitmap+0x2ba>
 800bb66:	9821      	ldr	r0, [sp, #132]	; 0x84
 800bb68:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800bb6c:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 800bb70:	f8cd a018 	str.w	sl, [sp, #24]
 800bb74:	4546      	cmp	r6, r8
 800bb76:	bf38      	it	cc
 800bb78:	46b0      	movcc	r8, r6
 800bb7a:	ebc8 0606 	rsb	r6, r8, r6
 800bb7e:	b32f      	cbz	r7, 800bbcc <_DrawBitmap+0x35c>
 800bb80:	b91d      	cbnz	r5, 800bb8a <_DrawBitmap+0x31a>
 800bb82:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 800bb86:	44c1      	add	r9, r8
 800bb88:	e024      	b.n	800bbd4 <_DrawBitmap+0x364>
 800bb8a:	07ea      	lsls	r2, r5, #31
 800bb8c:	d50b      	bpl.n	800bba6 <_DrawBitmap+0x336>
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	9a05      	ldr	r2, [sp, #20]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f8cd c008 	str.w	ip, [sp, #8]
 800bb98:	4638      	mov	r0, r7
 800bb9a:	4649      	mov	r1, r9
 800bb9c:	4798      	blx	r3
 800bb9e:	f8dd c008 	ldr.w	ip, [sp, #8]
 800bba2:	f8a4 c000 	strh.w	ip, [r4]
 800bba6:	f1b8 0801 	subs.w	r8, r8, #1
 800bbaa:	f109 0901 	add.w	r9, r9, #1
 800bbae:	f104 0402 	add.w	r4, r4, #2
 800bbb2:	d00f      	beq.n	800bbd4 <_DrawBitmap+0x364>
 800bbb4:	086d      	lsrs	r5, r5, #1
 800bbb6:	e7e3      	b.n	800bb80 <_DrawBitmap+0x310>
 800bbb8:	07eb      	lsls	r3, r5, #31
 800bbba:	bf48      	it	mi
 800bbbc:	f8a4 c000 	strhmi.w	ip, [r4]
 800bbc0:	f1b8 0801 	subs.w	r8, r8, #1
 800bbc4:	f104 0402 	add.w	r4, r4, #2
 800bbc8:	d004      	beq.n	800bbd4 <_DrawBitmap+0x364>
 800bbca:	086d      	lsrs	r5, r5, #1
 800bbcc:	2d00      	cmp	r5, #0
 800bbce:	d1f3      	bne.n	800bbb8 <_DrawBitmap+0x348>
 800bbd0:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 800bbd4:	2e00      	cmp	r6, #0
 800bbd6:	d058      	beq.n	800bc8a <_DrawBitmap+0x41a>
 800bbd8:	9906      	ldr	r1, [sp, #24]
 800bbda:	4a60      	ldr	r2, [pc, #384]	; (800bd5c <_DrawBitmap+0x4ec>)
 800bbdc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bbe0:	9106      	str	r1, [sp, #24]
 800bbe2:	5cd5      	ldrb	r5, [r2, r3]
 800bbe4:	f04f 0808 	mov.w	r8, #8
 800bbe8:	e7c4      	b.n	800bb74 <_DrawBitmap+0x304>
 800bbea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bbec:	6913      	ldr	r3, [r2, #16]
 800bbee:	689b      	ldr	r3, [r3, #8]
 800bbf0:	4798      	blx	r3
 800bbf2:	9b04      	ldr	r3, [sp, #16]
 800bbf4:	930b      	str	r3, [sp, #44]	; 0x2c
 800bbf6:	b280      	uxth	r0, r0
 800bbf8:	900a      	str	r0, [sp, #40]	; 0x28
 800bbfa:	f10a 0901 	add.w	r9, sl, #1
 800bbfe:	4546      	cmp	r6, r8
 800bc00:	bf38      	it	cc
 800bc02:	46b0      	movcc	r8, r6
 800bc04:	ebc8 0606 	rsb	r6, r8, r6
 800bc08:	1ca3      	adds	r3, r4, #2
 800bc0a:	b31f      	cbz	r7, 800bc54 <_DrawBitmap+0x3e4>
 800bc0c:	f8cd 8018 	str.w	r8, [sp, #24]
 800bc10:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800bc12:	9a06      	ldr	r2, [sp, #24]
 800bc14:	4440      	add	r0, r8
 800bc16:	900c      	str	r0, [sp, #48]	; 0x30
 800bc18:	1a81      	subs	r1, r0, r2
 800bc1a:	07e8      	lsls	r0, r5, #31
 800bc1c:	d50d      	bpl.n	800bc3a <_DrawBitmap+0x3ca>
 800bc1e:	68ba      	ldr	r2, [r7, #8]
 800bc20:	4638      	mov	r0, r7
 800bc22:	f8d2 c000 	ldr.w	ip, [r2]
 800bc26:	9a05      	ldr	r2, [sp, #20]
 800bc28:	9302      	str	r3, [sp, #8]
 800bc2a:	47e0      	blx	ip
 800bc2c:	9b02      	ldr	r3, [sp, #8]
 800bc2e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bc30:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 800bc34:	4042      	eors	r2, r0
 800bc36:	f823 2c02 	strh.w	r2, [r3, #-2]
 800bc3a:	9906      	ldr	r1, [sp, #24]
 800bc3c:	3901      	subs	r1, #1
 800bc3e:	ea4f 0555 	mov.w	r5, r5, lsr #1
 800bc42:	f103 0302 	add.w	r3, r3, #2
 800bc46:	9106      	str	r1, [sp, #24]
 800bc48:	d1e2      	bne.n	800bc10 <_DrawBitmap+0x3a0>
 800bc4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc4c:	930b      	str	r3, [sp, #44]	; 0x2c
 800bc4e:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 800bc52:	e010      	b.n	800bc76 <_DrawBitmap+0x406>
 800bc54:	4642      	mov	r2, r8
 800bc56:	07e9      	lsls	r1, r5, #31
 800bc58:	d505      	bpl.n	800bc66 <_DrawBitmap+0x3f6>
 800bc5a:	f833 1c02 	ldrh.w	r1, [r3, #-2]
 800bc5e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bc60:	4041      	eors	r1, r0
 800bc62:	f823 1c02 	strh.w	r1, [r3, #-2]
 800bc66:	3a01      	subs	r2, #1
 800bc68:	ea4f 0555 	mov.w	r5, r5, lsr #1
 800bc6c:	f103 0302 	add.w	r3, r3, #2
 800bc70:	d1f1      	bne.n	800bc56 <_DrawBitmap+0x3e6>
 800bc72:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 800bc76:	b146      	cbz	r6, 800bc8a <_DrawBitmap+0x41a>
 800bc78:	f899 3000 	ldrb.w	r3, [r9]
 800bc7c:	4a37      	ldr	r2, [pc, #220]	; (800bd5c <_DrawBitmap+0x4ec>)
 800bc7e:	f109 0901 	add.w	r9, r9, #1
 800bc82:	5cd5      	ldrb	r5, [r2, r3]
 800bc84:	f04f 0808 	mov.w	r8, #8
 800bc88:	e7b9      	b.n	800bbfe <_DrawBitmap+0x38e>
 800bc8a:	a810      	add	r0, sp, #64	; 0x40
 800bc8c:	f7fe fc32 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 800bc90:	e16b      	b.n	800bf6a <_DrawBitmap+0x6fa>
 800bc92:	4b33      	ldr	r3, [pc, #204]	; (800bd60 <_DrawBitmap+0x4f0>)
 800bc94:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800bc9a:	7c1b      	ldrb	r3, [r3, #16]
 800bc9c:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 800bca0:	f1c6 0504 	rsb	r5, r6, #4
 800bca4:	f89a 6000 	ldrb.w	r6, [sl]
 800bca8:	f003 0303 	and.w	r3, r3, #3
 800bcac:	40be      	lsls	r6, r7
 800bcae:	2b01      	cmp	r3, #1
 800bcb0:	b2ed      	uxtb	r5, r5
 800bcb2:	b2f6      	uxtb	r6, r6
 800bcb4:	d06a      	beq.n	800bd8c <_DrawBitmap+0x51c>
 800bcb6:	d308      	bcc.n	800bcca <_DrawBitmap+0x45a>
 800bcb8:	2b02      	cmp	r3, #2
 800bcba:	f040 8156 	bne.w	800bf6a <_DrawBitmap+0x6fa>
 800bcbe:	f8cd a018 	str.w	sl, [sp, #24]
 800bcc2:	465f      	mov	r7, fp
 800bcc4:	f8dd c010 	ldr.w	ip, [sp, #16]
 800bcc8:	e03e      	b.n	800bd48 <_DrawBitmap+0x4d8>
 800bcca:	4652      	mov	r2, sl
 800bccc:	465b      	mov	r3, fp
 800bcce:	429d      	cmp	r5, r3
 800bcd0:	bfc8      	it	gt
 800bcd2:	b2dd      	uxtbgt	r5, r3
 800bcd4:	1b5b      	subs	r3, r3, r5
 800bcd6:	4629      	mov	r1, r5
 800bcd8:	4620      	mov	r0, r4
 800bcda:	ea4f 1c96 	mov.w	ip, r6, lsr #6
 800bcde:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800bce0:	3901      	subs	r1, #1
 800bce2:	f857 c02c 	ldr.w	ip, [r7, ip, lsl #2]
 800bce6:	f820 cb02 	strh.w	ip, [r0], #2
 800bcea:	00b6      	lsls	r6, r6, #2
 800bcec:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 800bcf0:	b2f6      	uxtb	r6, r6
 800bcf2:	d1f2      	bne.n	800bcda <_DrawBitmap+0x46a>
 800bcf4:	3d01      	subs	r5, #1
 800bcf6:	b2ed      	uxtb	r5, r5
 800bcf8:	3501      	adds	r5, #1
 800bcfa:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	f000 8133 	beq.w	800bf6a <_DrawBitmap+0x6fa>
 800bd04:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 800bd08:	2504      	movs	r5, #4
 800bd0a:	e7e0      	b.n	800bcce <_DrawBitmap+0x45e>
 800bd0c:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 800bd10:	eb08 010c 	add.w	r1, r8, ip
 800bd14:	d126      	bne.n	800bd64 <_DrawBitmap+0x4f4>
 800bd16:	f108 0801 	add.w	r8, r8, #1
 800bd1a:	fa5f f388 	uxtb.w	r3, r8
 800bd1e:	00b6      	lsls	r6, r6, #2
 800bd20:	429d      	cmp	r5, r3
 800bd22:	b2f6      	uxtb	r6, r6
 800bd24:	d1f2      	bne.n	800bd0c <_DrawBitmap+0x49c>
 800bd26:	3d01      	subs	r5, #1
 800bd28:	b2ed      	uxtb	r5, r5
 800bd2a:	1c6b      	adds	r3, r5, #1
 800bd2c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800bd30:	f10c 0301 	add.w	r3, ip, #1
 800bd34:	eb03 0c05 	add.w	ip, r3, r5
 800bd38:	2f00      	cmp	r7, #0
 800bd3a:	f000 8116 	beq.w	800bf6a <_DrawBitmap+0x6fa>
 800bd3e:	9b06      	ldr	r3, [sp, #24]
 800bd40:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 800bd44:	9306      	str	r3, [sp, #24]
 800bd46:	2504      	movs	r5, #4
 800bd48:	42bd      	cmp	r5, r7
 800bd4a:	bfc8      	it	gt
 800bd4c:	b2fd      	uxtbgt	r5, r7
 800bd4e:	1b7f      	subs	r7, r7, r5
 800bd50:	f04f 0800 	mov.w	r8, #0
 800bd54:	e7da      	b.n	800bd0c <_DrawBitmap+0x49c>
 800bd56:	bf00      	nop
 800bd58:	0800f4a0 	.word	0x0800f4a0
 800bd5c:	0800f300 	.word	0x0800f300
 800bd60:	20000018 	.word	0x20000018
 800bd64:	09b3      	lsrs	r3, r6, #6
 800bd66:	9821      	ldr	r0, [sp, #132]	; 0x84
 800bd68:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800bd6c:	f824 3018 	strh.w	r3, [r4, r8, lsl #1]
 800bd70:	f1b9 0f00 	cmp.w	r9, #0
 800bd74:	d0cf      	beq.n	800bd16 <_DrawBitmap+0x4a6>
 800bd76:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800bd7a:	9a05      	ldr	r2, [sp, #20]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	f8cd c008 	str.w	ip, [sp, #8]
 800bd82:	4648      	mov	r0, r9
 800bd84:	4798      	blx	r3
 800bd86:	f8dd c008 	ldr.w	ip, [sp, #8]
 800bd8a:	e7c4      	b.n	800bd16 <_DrawBitmap+0x4a6>
 800bd8c:	4651      	mov	r1, sl
 800bd8e:	465b      	mov	r3, fp
 800bd90:	429d      	cmp	r5, r3
 800bd92:	bfc8      	it	gt
 800bd94:	b2dd      	uxtbgt	r5, r3
 800bd96:	1b5b      	subs	r3, r3, r5
 800bd98:	1ca2      	adds	r2, r4, #2
 800bd9a:	4628      	mov	r0, r5
 800bd9c:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 800bda0:	d005      	beq.n	800bdae <_DrawBitmap+0x53e>
 800bda2:	f832 7c02 	ldrh.w	r7, [r2, #-2]
 800bda6:	f087 07ff 	eor.w	r7, r7, #255	; 0xff
 800bdaa:	f822 7c02 	strh.w	r7, [r2, #-2]
 800bdae:	3801      	subs	r0, #1
 800bdb0:	00b6      	lsls	r6, r6, #2
 800bdb2:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 800bdb6:	b2f6      	uxtb	r6, r6
 800bdb8:	f102 0202 	add.w	r2, r2, #2
 800bdbc:	d1ee      	bne.n	800bd9c <_DrawBitmap+0x52c>
 800bdbe:	3d01      	subs	r5, #1
 800bdc0:	b2ed      	uxtb	r5, r5
 800bdc2:	3501      	adds	r5, #1
 800bdc4:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	f000 80ce 	beq.w	800bf6a <_DrawBitmap+0x6fa>
 800bdce:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 800bdd2:	2504      	movs	r5, #4
 800bdd4:	e7dc      	b.n	800bd90 <_DrawBitmap+0x520>
 800bdd6:	4a6e      	ldr	r2, [pc, #440]	; (800bf90 <_DrawBitmap+0x720>)
 800bdd8:	f89a 3000 	ldrb.w	r3, [sl]
 800bddc:	6812      	ldr	r2, [r2, #0]
 800bdde:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800bde0:	7c12      	ldrb	r2, [r2, #16]
 800bde2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800bde4:	f002 0203 	and.w	r2, r2, #3
 800bde8:	40bb      	lsls	r3, r7
 800bdea:	2a01      	cmp	r2, #1
 800bdec:	b2dd      	uxtb	r5, r3
 800bdee:	f000 8095 	beq.w	800bf1c <_DrawBitmap+0x6ac>
 800bdf2:	d302      	bcc.n	800bdfa <_DrawBitmap+0x58a>
 800bdf4:	2a02      	cmp	r2, #2
 800bdf6:	d036      	beq.n	800be66 <_DrawBitmap+0x5f6>
 800bdf8:	e0b7      	b.n	800bf6a <_DrawBitmap+0x6fa>
 800bdfa:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800bdfc:	b166      	cbz	r6, 800be18 <_DrawBitmap+0x5a8>
 800bdfe:	092d      	lsrs	r5, r5, #4
 800be00:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800be02:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 800be06:	8023      	strh	r3, [r4, #0]
 800be08:	f10a 0201 	add.w	r2, sl, #1
 800be0c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800be0e:	f89a 5001 	ldrb.w	r5, [sl, #1]
 800be12:	f10b 33ff 	add.w	r3, fp, #4294967295
 800be16:	e001      	b.n	800be1c <_DrawBitmap+0x5ac>
 800be18:	465b      	mov	r3, fp
 800be1a:	4652      	mov	r2, sl
 800be1c:	2b01      	cmp	r3, #1
 800be1e:	dd19      	ble.n	800be54 <_DrawBitmap+0x5e4>
 800be20:	1058      	asrs	r0, r3, #1
 800be22:	1d21      	adds	r1, r4, #4
 800be24:	f003 0301 	and.w	r3, r3, #1
 800be28:	eb02 0c00 	add.w	ip, r2, r0
 800be2c:	092f      	lsrs	r7, r5, #4
 800be2e:	9e21      	ldr	r6, [sp, #132]	; 0x84
 800be30:	f005 050f 	and.w	r5, r5, #15
 800be34:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 800be38:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800be3c:	f821 7c04 	strh.w	r7, [r1, #-4]
 800be40:	f821 5c02 	strh.w	r5, [r1, #-2]
 800be44:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800be48:	4562      	cmp	r2, ip
 800be4a:	f101 0104 	add.w	r1, r1, #4
 800be4e:	d1ed      	bne.n	800be2c <_DrawBitmap+0x5bc>
 800be50:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800be54:	2b00      	cmp	r3, #0
 800be56:	f000 8088 	beq.w	800bf6a <_DrawBitmap+0x6fa>
 800be5a:	092d      	lsrs	r5, r5, #4
 800be5c:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800be5e:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 800be62:	8023      	strh	r3, [r4, #0]
 800be64:	e081      	b.n	800bf6a <_DrawBitmap+0x6fa>
 800be66:	9f20      	ldr	r7, [sp, #128]	; 0x80
 800be68:	b1c7      	cbz	r7, 800be9c <_DrawBitmap+0x62c>
 800be6a:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800be6e:	d00b      	beq.n	800be88 <_DrawBitmap+0x618>
 800be70:	092d      	lsrs	r5, r5, #4
 800be72:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800be74:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 800be78:	8023      	strh	r3, [r4, #0]
 800be7a:	b12e      	cbz	r6, 800be88 <_DrawBitmap+0x618>
 800be7c:	68b3      	ldr	r3, [r6, #8]
 800be7e:	9904      	ldr	r1, [sp, #16]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	9a05      	ldr	r2, [sp, #20]
 800be84:	4630      	mov	r0, r6
 800be86:	4798      	blx	r3
 800be88:	9804      	ldr	r0, [sp, #16]
 800be8a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800be8c:	f89a 5001 	ldrb.w	r5, [sl, #1]
 800be90:	1c47      	adds	r7, r0, #1
 800be92:	f10b 39ff 	add.w	r9, fp, #4294967295
 800be96:	f10a 0801 	add.w	r8, sl, #1
 800be9a:	e00f      	b.n	800bebc <_DrawBitmap+0x64c>
 800be9c:	46d9      	mov	r9, fp
 800be9e:	46d0      	mov	r8, sl
 800bea0:	9f04      	ldr	r7, [sp, #16]
 800bea2:	e00b      	b.n	800bebc <_DrawBitmap+0x64c>
 800bea4:	f015 0ff0 	tst.w	r5, #240	; 0xf0
 800bea8:	d10c      	bne.n	800bec4 <_DrawBitmap+0x654>
 800beaa:	f015 050f 	ands.w	r5, r5, #15
 800beae:	d117      	bne.n	800bee0 <_DrawBitmap+0x670>
 800beb0:	f818 5f01 	ldrb.w	r5, [r8, #1]!
 800beb4:	3404      	adds	r4, #4
 800beb6:	3702      	adds	r7, #2
 800beb8:	f1a9 0902 	sub.w	r9, r9, #2
 800bebc:	f1b9 0f01 	cmp.w	r9, #1
 800bec0:	dcf0      	bgt.n	800bea4 <_DrawBitmap+0x634>
 800bec2:	e01a      	b.n	800befa <_DrawBitmap+0x68a>
 800bec4:	092b      	lsrs	r3, r5, #4
 800bec6:	9921      	ldr	r1, [sp, #132]	; 0x84
 800bec8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800becc:	8023      	strh	r3, [r4, #0]
 800bece:	2e00      	cmp	r6, #0
 800bed0:	d0eb      	beq.n	800beaa <_DrawBitmap+0x63a>
 800bed2:	68b3      	ldr	r3, [r6, #8]
 800bed4:	9a05      	ldr	r2, [sp, #20]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	4630      	mov	r0, r6
 800beda:	4639      	mov	r1, r7
 800bedc:	4798      	blx	r3
 800bede:	e7e4      	b.n	800beaa <_DrawBitmap+0x63a>
 800bee0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bee2:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
 800bee6:	8063      	strh	r3, [r4, #2]
 800bee8:	2e00      	cmp	r6, #0
 800beea:	d0e1      	beq.n	800beb0 <_DrawBitmap+0x640>
 800beec:	68b3      	ldr	r3, [r6, #8]
 800beee:	9a05      	ldr	r2, [sp, #20]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	4630      	mov	r0, r6
 800bef4:	1c79      	adds	r1, r7, #1
 800bef6:	4798      	blx	r3
 800bef8:	e7da      	b.n	800beb0 <_DrawBitmap+0x640>
 800befa:	f1b9 0f00 	cmp.w	r9, #0
 800befe:	d034      	beq.n	800bf6a <_DrawBitmap+0x6fa>
 800bf00:	092d      	lsrs	r5, r5, #4
 800bf02:	d032      	beq.n	800bf6a <_DrawBitmap+0x6fa>
 800bf04:	9821      	ldr	r0, [sp, #132]	; 0x84
 800bf06:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
 800bf0a:	8023      	strh	r3, [r4, #0]
 800bf0c:	b36e      	cbz	r6, 800bf6a <_DrawBitmap+0x6fa>
 800bf0e:	68b3      	ldr	r3, [r6, #8]
 800bf10:	9a05      	ldr	r2, [sp, #20]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	4630      	mov	r0, r6
 800bf16:	4639      	mov	r1, r7
 800bf18:	4798      	blx	r3
 800bf1a:	e026      	b.n	800bf6a <_DrawBitmap+0x6fa>
 800bf1c:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800bf1e:	f1c6 0302 	rsb	r3, r6, #2
 800bf22:	b2db      	uxtb	r3, r3
 800bf24:	4650      	mov	r0, sl
 800bf26:	465a      	mov	r2, fp
 800bf28:	4293      	cmp	r3, r2
 800bf2a:	bfc8      	it	gt
 800bf2c:	b2d3      	uxtbgt	r3, r2
 800bf2e:	1ad2      	subs	r2, r2, r3
 800bf30:	1ca1      	adds	r1, r4, #2
 800bf32:	461e      	mov	r6, r3
 800bf34:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 800bf38:	d005      	beq.n	800bf46 <_DrawBitmap+0x6d6>
 800bf3a:	f831 7c02 	ldrh.w	r7, [r1, #-2]
 800bf3e:	f087 07ff 	eor.w	r7, r7, #255	; 0xff
 800bf42:	f821 7c02 	strh.w	r7, [r1, #-2]
 800bf46:	3e01      	subs	r6, #1
 800bf48:	012d      	lsls	r5, r5, #4
 800bf4a:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 800bf4e:	b2ed      	uxtb	r5, r5
 800bf50:	f101 0102 	add.w	r1, r1, #2
 800bf54:	d1ee      	bne.n	800bf34 <_DrawBitmap+0x6c4>
 800bf56:	3b01      	subs	r3, #1
 800bf58:	b2db      	uxtb	r3, r3
 800bf5a:	3301      	adds	r3, #1
 800bf5c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800bf60:	b11a      	cbz	r2, 800bf6a <_DrawBitmap+0x6fa>
 800bf62:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800bf66:	2302      	movs	r3, #2
 800bf68:	e7de      	b.n	800bf28 <_DrawBitmap+0x6b8>
 800bf6a:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800bf6c:	9b05      	ldr	r3, [sp, #20]
 800bf6e:	9e08      	ldr	r6, [sp, #32]
 800bf70:	44ba      	add	sl, r7
 800bf72:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800bf74:	3301      	adds	r3, #1
 800bf76:	4437      	add	r7, r6
 800bf78:	9305      	str	r3, [sp, #20]
 800bf7a:	9709      	str	r7, [sp, #36]	; 0x24
 800bf7c:	e5a3      	b.n	800bac6 <_DrawBitmap+0x256>
 800bf7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bf80:	b113      	cbz	r3, 800bf88 <_DrawBitmap+0x718>
 800bf82:	a811      	add	r0, sp, #68	; 0x44
 800bf84:	f7fe fab6 	bl	800a4f4 <GUI_ALLOC_UnlockH>
 800bf88:	b013      	add	sp, #76	; 0x4c
 800bf8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf8e:	bf00      	nop
 800bf90:	20000018 	.word	0x20000018

0800bf94 <LCD_SelectLCD>:
 800bf94:	b510      	push	{r4, lr}
 800bf96:	4b0d      	ldr	r3, [pc, #52]	; (800bfcc <LCD_SelectLCD+0x38>)
 800bf98:	681a      	ldr	r2, [r3, #0]
 800bf9a:	7c51      	ldrb	r1, [r2, #17]
 800bf9c:	4a0c      	ldr	r2, [pc, #48]	; (800bfd0 <LCD_SelectLCD+0x3c>)
 800bf9e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800bfa2:	461c      	mov	r4, r3
 800bfa4:	b140      	cbz	r0, 800bfb8 <LCD_SelectLCD+0x24>
 800bfa6:	68c3      	ldr	r3, [r0, #12]
 800bfa8:	b113      	cbz	r3, 800bfb0 <LCD_SelectLCD+0x1c>
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	2b04      	cmp	r3, #4
 800bfae:	d001      	beq.n	800bfb4 <LCD_SelectLCD+0x20>
 800bfb0:	6800      	ldr	r0, [r0, #0]
 800bfb2:	e7f7      	b.n	800bfa4 <LCD_SelectLCD+0x10>
 800bfb4:	f7fd fd6e 	bl	8009a94 <GUI_DEVICE_Unlink>
 800bfb8:	6823      	ldr	r3, [r4, #0]
 800bfba:	2200      	movs	r2, #0
 800bfbc:	661a      	str	r2, [r3, #96]	; 0x60
 800bfbe:	f103 0208 	add.w	r2, r3, #8
 800bfc2:	615a      	str	r2, [r3, #20]
 800bfc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfc8:	f7fc bcc8 	b.w	800895c <LCD_SetClipRectMax>
 800bfcc:	20000018 	.word	0x20000018
 800bfd0:	20019624 	.word	0x20019624

0800bfd4 <_OnExit>:
 800bfd4:	b510      	push	{r4, lr}
 800bfd6:	4c03      	ldr	r4, [pc, #12]	; (800bfe4 <_OnExit+0x10>)
 800bfd8:	6820      	ldr	r0, [r4, #0]
 800bfda:	f7fe fa69 	bl	800a4b0 <GUI_ALLOC_FreeFixedBlock>
 800bfde:	2300      	movs	r3, #0
 800bfe0:	6023      	str	r3, [r4, #0]
 800bfe2:	bd10      	pop	{r4, pc}
 800bfe4:	20019724 	.word	0x20019724

0800bfe8 <LCD_InitColors>:
 800bfe8:	b538      	push	{r3, r4, r5, lr}
 800bfea:	4d09      	ldr	r5, [pc, #36]	; (800c010 <LCD_InitColors+0x28>)
 800bfec:	682c      	ldr	r4, [r5, #0]
 800bfee:	b95c      	cbnz	r4, 800c008 <LCD_InitColors+0x20>
 800bff0:	4b08      	ldr	r3, [pc, #32]	; (800c014 <LCD_InitColors+0x2c>)
 800bff2:	6818      	ldr	r0, [r3, #0]
 800bff4:	0080      	lsls	r0, r0, #2
 800bff6:	f7fe fbbb 	bl	800a770 <GUI_ALLOC_GetFixedBlock>
 800bffa:	6028      	str	r0, [r5, #0]
 800bffc:	b130      	cbz	r0, 800c00c <LCD_InitColors+0x24>
 800bffe:	4806      	ldr	r0, [pc, #24]	; (800c018 <LCD_InitColors+0x30>)
 800c000:	4b06      	ldr	r3, [pc, #24]	; (800c01c <LCD_InitColors+0x34>)
 800c002:	6003      	str	r3, [r0, #0]
 800c004:	f7fd fe48 	bl	8009c98 <GUI__RegisterExit>
 800c008:	2000      	movs	r0, #0
 800c00a:	bd38      	pop	{r3, r4, r5, pc}
 800c00c:	2001      	movs	r0, #1
 800c00e:	bd38      	pop	{r3, r4, r5, pc}
 800c010:	20019724 	.word	0x20019724
 800c014:	20000024 	.word	0x20000024
 800c018:	200191a0 	.word	0x200191a0
 800c01c:	0800bfd5 	.word	0x0800bfd5

0800c020 <LCD_InitLUT>:
 800c020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c024:	f000 fb09 	bl	800c63a <LCD_GetNumLayers>
 800c028:	2400      	movs	r4, #0
 800c02a:	4680      	mov	r8, r0
 800c02c:	4544      	cmp	r4, r8
 800c02e:	da2c      	bge.n	800c08a <LCD_InitLUT+0x6a>
 800c030:	4620      	mov	r0, r4
 800c032:	f7fd fcf7 	bl	8009a24 <GUI_DEVICE__GetpDriver>
 800c036:	b330      	cbz	r0, 800c086 <LCD_InitLUT+0x66>
 800c038:	4e15      	ldr	r6, [pc, #84]	; (800c090 <LCD_InitLUT+0x70>)
 800c03a:	6833      	ldr	r3, [r6, #0]
 800c03c:	4620      	mov	r0, r4
 800c03e:	f893 9011 	ldrb.w	r9, [r3, #17]
 800c042:	745c      	strb	r4, [r3, #17]
 800c044:	f7fc f932 	bl	80082ac <LCD_GetBitsPerPixelEx>
 800c048:	2808      	cmp	r0, #8
 800c04a:	dd03      	ble.n	800c054 <LCD_InitLUT+0x34>
 800c04c:	6833      	ldr	r3, [r6, #0]
 800c04e:	f883 9011 	strb.w	r9, [r3, #17]
 800c052:	e018      	b.n	800c086 <LCD_InitLUT+0x66>
 800c054:	4b0f      	ldr	r3, [pc, #60]	; (800c094 <LCD_InitLUT+0x74>)
 800c056:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c05a:	691a      	ldr	r2, [r3, #16]
 800c05c:	4b0e      	ldr	r3, [pc, #56]	; (800c098 <LCD_InitLUT+0x78>)
 800c05e:	429a      	cmp	r2, r3
 800c060:	d0f4      	beq.n	800c04c <LCD_InitLUT+0x2c>
 800c062:	4620      	mov	r0, r4
 800c064:	f7fc f925 	bl	80082b2 <LCD_GetNumColorsEx>
 800c068:	2500      	movs	r5, #0
 800c06a:	4682      	mov	sl, r0
 800c06c:	4555      	cmp	r5, sl
 800c06e:	daed      	bge.n	800c04c <LCD_InitLUT+0x2c>
 800c070:	b2ef      	uxtb	r7, r5
 800c072:	4638      	mov	r0, r7
 800c074:	f7fc fcdc 	bl	8008a30 <LCD_Index2Color>
 800c078:	4639      	mov	r1, r7
 800c07a:	4602      	mov	r2, r0
 800c07c:	4620      	mov	r0, r4
 800c07e:	f7fc f8d7 	bl	8008230 <LCD_SetLUTEntryEx>
 800c082:	3501      	adds	r5, #1
 800c084:	e7f2      	b.n	800c06c <LCD_InitLUT+0x4c>
 800c086:	3401      	adds	r4, #1
 800c088:	e7d0      	b.n	800c02c <LCD_InitLUT+0xc>
 800c08a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c08e:	bf00      	nop
 800c090:	20000018 	.word	0x20000018
 800c094:	20019624 	.word	0x20019624
 800c098:	0800f784 	.word	0x0800f784

0800c09c <GUI__CompactPixelIndices>:
 800c09c:	2a08      	cmp	r2, #8
 800c09e:	b510      	push	{r4, lr}
 800c0a0:	dd0e      	ble.n	800c0c0 <GUI__CompactPixelIndices+0x24>
 800c0a2:	2a10      	cmp	r2, #16
 800c0a4:	dc0a      	bgt.n	800c0bc <GUI__CompactPixelIndices+0x20>
 800c0a6:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	f850 2b04 	ldr.w	r2, [r0], #4
 800c0b0:	f823 2b02 	strh.w	r2, [r3], #2
 800c0b4:	428b      	cmp	r3, r1
 800c0b6:	d1f9      	bne.n	800c0ac <GUI__CompactPixelIndices+0x10>
 800c0b8:	2001      	movs	r0, #1
 800c0ba:	bd10      	pop	{r4, pc}
 800c0bc:	2000      	movs	r0, #0
 800c0be:	bd10      	pop	{r4, pc}
 800c0c0:	2a02      	cmp	r2, #2
 800c0c2:	d06d      	beq.n	800c1a0 <GUI__CompactPixelIndices+0x104>
 800c0c4:	2a04      	cmp	r2, #4
 800c0c6:	d054      	beq.n	800c172 <GUI__CompactPixelIndices+0xd6>
 800c0c8:	2a01      	cmp	r2, #1
 800c0ca:	f040 8095 	bne.w	800c1f8 <GUI__CompactPixelIndices+0x15c>
 800c0ce:	4604      	mov	r4, r0
 800c0d0:	6803      	ldr	r3, [r0, #0]
 800c0d2:	2901      	cmp	r1, #1
 800c0d4:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 800c0d8:	b2db      	uxtb	r3, r3
 800c0da:	d047      	beq.n	800c16c <GUI__CompactPixelIndices+0xd0>
 800c0dc:	6842      	ldr	r2, [r0, #4]
 800c0de:	2902      	cmp	r1, #2
 800c0e0:	f002 0201 	and.w	r2, r2, #1
 800c0e4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800c0e8:	d102      	bne.n	800c0f0 <GUI__CompactPixelIndices+0x54>
 800c0ea:	f100 0208 	add.w	r2, r0, #8
 800c0ee:	e03e      	b.n	800c16e <GUI__CompactPixelIndices+0xd2>
 800c0f0:	6882      	ldr	r2, [r0, #8]
 800c0f2:	2903      	cmp	r1, #3
 800c0f4:	f002 0201 	and.w	r2, r2, #1
 800c0f8:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800c0fc:	d102      	bne.n	800c104 <GUI__CompactPixelIndices+0x68>
 800c0fe:	f100 020c 	add.w	r2, r0, #12
 800c102:	e034      	b.n	800c16e <GUI__CompactPixelIndices+0xd2>
 800c104:	68c2      	ldr	r2, [r0, #12]
 800c106:	2904      	cmp	r1, #4
 800c108:	f002 0201 	and.w	r2, r2, #1
 800c10c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800c110:	d102      	bne.n	800c118 <GUI__CompactPixelIndices+0x7c>
 800c112:	f100 0210 	add.w	r2, r0, #16
 800c116:	e02a      	b.n	800c16e <GUI__CompactPixelIndices+0xd2>
 800c118:	6902      	ldr	r2, [r0, #16]
 800c11a:	2905      	cmp	r1, #5
 800c11c:	f002 0201 	and.w	r2, r2, #1
 800c120:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800c124:	d102      	bne.n	800c12c <GUI__CompactPixelIndices+0x90>
 800c126:	f100 0214 	add.w	r2, r0, #20
 800c12a:	e020      	b.n	800c16e <GUI__CompactPixelIndices+0xd2>
 800c12c:	6942      	ldr	r2, [r0, #20]
 800c12e:	2906      	cmp	r1, #6
 800c130:	f002 0201 	and.w	r2, r2, #1
 800c134:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 800c138:	d102      	bne.n	800c140 <GUI__CompactPixelIndices+0xa4>
 800c13a:	f100 0218 	add.w	r2, r0, #24
 800c13e:	e016      	b.n	800c16e <GUI__CompactPixelIndices+0xd2>
 800c140:	6982      	ldr	r2, [r0, #24]
 800c142:	3907      	subs	r1, #7
 800c144:	f002 0201 	and.w	r2, r2, #1
 800c148:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 800c14c:	d102      	bne.n	800c154 <GUI__CompactPixelIndices+0xb8>
 800c14e:	f100 021c 	add.w	r2, r0, #28
 800c152:	e005      	b.n	800c160 <GUI__CompactPixelIndices+0xc4>
 800c154:	f100 0220 	add.w	r2, r0, #32
 800c158:	69c0      	ldr	r0, [r0, #28]
 800c15a:	f000 0001 	and.w	r0, r0, #1
 800c15e:	4303      	orrs	r3, r0
 800c160:	f804 3b01 	strb.w	r3, [r4], #1
 800c164:	2900      	cmp	r1, #0
 800c166:	d0a7      	beq.n	800c0b8 <GUI__CompactPixelIndices+0x1c>
 800c168:	4610      	mov	r0, r2
 800c16a:	e7b1      	b.n	800c0d0 <GUI__CompactPixelIndices+0x34>
 800c16c:	1d02      	adds	r2, r0, #4
 800c16e:	2100      	movs	r1, #0
 800c170:	e7f6      	b.n	800c160 <GUI__CompactPixelIndices+0xc4>
 800c172:	4602      	mov	r2, r0
 800c174:	6803      	ldr	r3, [r0, #0]
 800c176:	2901      	cmp	r1, #1
 800c178:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800c17c:	b2db      	uxtb	r3, r3
 800c17e:	d102      	bne.n	800c186 <GUI__CompactPixelIndices+0xea>
 800c180:	1d04      	adds	r4, r0, #4
 800c182:	2100      	movs	r1, #0
 800c184:	e006      	b.n	800c194 <GUI__CompactPixelIndices+0xf8>
 800c186:	f100 0408 	add.w	r4, r0, #8
 800c18a:	6840      	ldr	r0, [r0, #4]
 800c18c:	f000 000f 	and.w	r0, r0, #15
 800c190:	4303      	orrs	r3, r0
 800c192:	3902      	subs	r1, #2
 800c194:	f802 3b01 	strb.w	r3, [r2], #1
 800c198:	2900      	cmp	r1, #0
 800c19a:	d08d      	beq.n	800c0b8 <GUI__CompactPixelIndices+0x1c>
 800c19c:	4620      	mov	r0, r4
 800c19e:	e7e9      	b.n	800c174 <GUI__CompactPixelIndices+0xd8>
 800c1a0:	4604      	mov	r4, r0
 800c1a2:	6803      	ldr	r3, [r0, #0]
 800c1a4:	2901      	cmp	r1, #1
 800c1a6:	ea4f 1383 	mov.w	r3, r3, lsl #6
 800c1aa:	b2db      	uxtb	r3, r3
 800c1ac:	d021      	beq.n	800c1f2 <GUI__CompactPixelIndices+0x156>
 800c1ae:	6842      	ldr	r2, [r0, #4]
 800c1b0:	2902      	cmp	r1, #2
 800c1b2:	f002 0203 	and.w	r2, r2, #3
 800c1b6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800c1ba:	d102      	bne.n	800c1c2 <GUI__CompactPixelIndices+0x126>
 800c1bc:	f100 0208 	add.w	r2, r0, #8
 800c1c0:	e018      	b.n	800c1f4 <GUI__CompactPixelIndices+0x158>
 800c1c2:	6882      	ldr	r2, [r0, #8]
 800c1c4:	2903      	cmp	r1, #3
 800c1c6:	f002 0203 	and.w	r2, r2, #3
 800c1ca:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 800c1ce:	d102      	bne.n	800c1d6 <GUI__CompactPixelIndices+0x13a>
 800c1d0:	f100 020c 	add.w	r2, r0, #12
 800c1d4:	e00e      	b.n	800c1f4 <GUI__CompactPixelIndices+0x158>
 800c1d6:	f100 0210 	add.w	r2, r0, #16
 800c1da:	68c0      	ldr	r0, [r0, #12]
 800c1dc:	f000 0003 	and.w	r0, r0, #3
 800c1e0:	4303      	orrs	r3, r0
 800c1e2:	3904      	subs	r1, #4
 800c1e4:	f804 3b01 	strb.w	r3, [r4], #1
 800c1e8:	2900      	cmp	r1, #0
 800c1ea:	f43f af65 	beq.w	800c0b8 <GUI__CompactPixelIndices+0x1c>
 800c1ee:	4610      	mov	r0, r2
 800c1f0:	e7d7      	b.n	800c1a2 <GUI__CompactPixelIndices+0x106>
 800c1f2:	1d02      	adds	r2, r0, #4
 800c1f4:	2100      	movs	r1, #0
 800c1f6:	e7f5      	b.n	800c1e4 <GUI__CompactPixelIndices+0x148>
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800c1fe:	54c2      	strb	r2, [r0, r3]
 800c200:	3301      	adds	r3, #1
 800c202:	428b      	cmp	r3, r1
 800c204:	d1f9      	bne.n	800c1fa <GUI__CompactPixelIndices+0x15e>
 800c206:	e757      	b.n	800c0b8 <GUI__CompactPixelIndices+0x1c>

0800c208 <_GetCharCode>:
 800c208:	7800      	ldrb	r0, [r0, #0]
 800c20a:	4770      	bx	lr

0800c20c <_GetCharSize>:
 800c20c:	2001      	movs	r0, #1
 800c20e:	4770      	bx	lr

0800c210 <_CalcSizeOfChar>:
 800c210:	2001      	movs	r0, #1
 800c212:	4770      	bx	lr

0800c214 <_Encode>:
 800c214:	7001      	strb	r1, [r0, #0]
 800c216:	2001      	movs	r0, #1
 800c218:	4770      	bx	lr
	...

0800c21c <GUI_SetTextAlign>:
 800c21c:	4b03      	ldr	r3, [pc, #12]	; (800c22c <GUI_SetTextAlign+0x10>)
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 800c224:	8598      	strh	r0, [r3, #44]	; 0x2c
 800c226:	4610      	mov	r0, r2
 800c228:	4770      	bx	lr
 800c22a:	bf00      	nop
 800c22c:	20000018 	.word	0x20000018

0800c230 <GUI_SetOrg>:
 800c230:	460a      	mov	r2, r1
 800c232:	4908      	ldr	r1, [pc, #32]	; (800c254 <GUI_SetOrg+0x24>)
 800c234:	b510      	push	{r4, lr}
 800c236:	8008      	strh	r0, [r1, #0]
 800c238:	4907      	ldr	r1, [pc, #28]	; (800c258 <GUI_SetOrg+0x28>)
 800c23a:	800a      	strh	r2, [r1, #0]
 800c23c:	4907      	ldr	r1, [pc, #28]	; (800c25c <GUI_SetOrg+0x2c>)
 800c23e:	6809      	ldr	r1, [r1, #0]
 800c240:	4603      	mov	r3, r0
 800c242:	7c48      	ldrb	r0, [r1, #17]
 800c244:	4906      	ldr	r1, [pc, #24]	; (800c260 <GUI_SetOrg+0x30>)
 800c246:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800c24a:	68c1      	ldr	r1, [r0, #12]
 800c24c:	6a0c      	ldr	r4, [r1, #32]
 800c24e:	4619      	mov	r1, r3
 800c250:	47a0      	blx	r4
 800c252:	bd10      	pop	{r4, pc}
 800c254:	2001960c 	.word	0x2001960c
 800c258:	20019600 	.word	0x20019600
 800c25c:	20000018 	.word	0x20000018
 800c260:	20019624 	.word	0x20019624

0800c264 <GUI_GetBkColor>:
 800c264:	b508      	push	{r3, lr}
 800c266:	f000 f9f7 	bl	800c658 <LCD_GetBkColorIndex>
 800c26a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c26e:	f7fc bbdf 	b.w	8008a30 <LCD_Index2Color>

0800c272 <GUI_GetColor>:
 800c272:	b508      	push	{r3, lr}
 800c274:	f000 f9f8 	bl	800c668 <LCD_GetColorIndex>
 800c278:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c27c:	f7fc bbd8 	b.w	8008a30 <LCD_Index2Color>

0800c280 <_Add>:
 800c280:	4a0d      	ldr	r2, [pc, #52]	; (800c2b8 <_Add+0x38>)
 800c282:	6813      	ldr	r3, [r2, #0]
 800c284:	2b0b      	cmp	r3, #11
 800c286:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c288:	4615      	mov	r5, r2
 800c28a:	dc14      	bgt.n	800c2b6 <_Add+0x36>
 800c28c:	4c0b      	ldr	r4, [pc, #44]	; (800c2bc <_Add+0x3c>)
 800c28e:	461a      	mov	r2, r3
 800c290:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 800c294:	4626      	mov	r6, r4
 800c296:	b152      	cbz	r2, 800c2ae <_Add+0x2e>
 800c298:	f831 4d02 	ldrh.w	r4, [r1, #-2]!
 800c29c:	fa0f fc84 	sxth.w	ip, r4
 800c2a0:	4584      	cmp	ip, r0
 800c2a2:	f102 37ff 	add.w	r7, r2, #4294967295
 800c2a6:	db02      	blt.n	800c2ae <_Add+0x2e>
 800c2a8:	804c      	strh	r4, [r1, #2]
 800c2aa:	463a      	mov	r2, r7
 800c2ac:	e7f3      	b.n	800c296 <_Add+0x16>
 800c2ae:	3301      	adds	r3, #1
 800c2b0:	f826 0012 	strh.w	r0, [r6, r2, lsl #1]
 800c2b4:	602b      	str	r3, [r5, #0]
 800c2b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2b8:	200191a8 	.word	0x200191a8
 800c2bc:	200191ac 	.word	0x200191ac

0800c2c0 <GL_FillPolygon>:
 800c2c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2c4:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 800c480 <GL_FillPolygon+0x1c0>
 800c2c8:	9101      	str	r1, [sp, #4]
 800c2ca:	4692      	mov	sl, r2
 800c2cc:	4606      	mov	r6, r0
 800c2ce:	f643 74ff 	movw	r4, #16383	; 0x3fff
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	9901      	ldr	r1, [sp, #4]
 800c2d6:	428a      	cmp	r2, r1
 800c2d8:	da0b      	bge.n	800c2f2 <GL_FillPolygon+0x32>
 800c2da:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800c2de:	3201      	adds	r2, #1
 800c2e0:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800c2e4:	428c      	cmp	r4, r1
 800c2e6:	bfa8      	it	ge
 800c2e8:	460c      	movge	r4, r1
 800c2ea:	4589      	cmp	r9, r1
 800c2ec:	bfb8      	it	lt
 800c2ee:	4689      	movlt	r9, r1
 800c2f0:	e7f0      	b.n	800c2d4 <GL_FillPolygon+0x14>
 800c2f2:	4960      	ldr	r1, [pc, #384]	; (800c474 <GL_FillPolygon+0x1b4>)
 800c2f4:	680a      	ldr	r2, [r1, #0]
 800c2f6:	6952      	ldr	r2, [r2, #20]
 800c2f8:	468b      	mov	fp, r1
 800c2fa:	b15a      	cbz	r2, 800c314 <GL_FillPolygon+0x54>
 800c2fc:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 800c300:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800c304:	1ac9      	subs	r1, r1, r3
 800c306:	1ad2      	subs	r2, r2, r3
 800c308:	4589      	cmp	r9, r1
 800c30a:	bfa8      	it	ge
 800c30c:	4689      	movge	r9, r1
 800c30e:	4294      	cmp	r4, r2
 800c310:	bfb8      	it	lt
 800c312:	4614      	movlt	r4, r2
 800c314:	eb04 0803 	add.w	r8, r4, r3
 800c318:	454c      	cmp	r4, r9
 800c31a:	f300 80a7 	bgt.w	800c46c <GL_FillPolygon+0x1ac>
 800c31e:	4b56      	ldr	r3, [pc, #344]	; (800c478 <GL_FillPolygon+0x1b8>)
 800c320:	2700      	movs	r7, #0
 800c322:	601f      	str	r7, [r3, #0]
 800c324:	4635      	mov	r5, r6
 800c326:	9901      	ldr	r1, [sp, #4]
 800c328:	428f      	cmp	r7, r1
 800c32a:	da55      	bge.n	800c3d8 <GL_FillPolygon+0x118>
 800c32c:	9b01      	ldr	r3, [sp, #4]
 800c32e:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800c332:	1e59      	subs	r1, r3, #1
 800c334:	428f      	cmp	r7, r1
 800c336:	bfb4      	ite	lt
 800c338:	f107 0c01 	addlt.w	ip, r7, #1
 800c33c:	f04f 0c00 	movge.w	ip, #0
 800c340:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800c344:	eb06 030c 	add.w	r3, r6, ip
 800c348:	42a2      	cmp	r2, r4
 800c34a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c34e:	d136      	bne.n	800c3be <GL_FillPolygon+0xfe>
 800c350:	42a3      	cmp	r3, r4
 800c352:	d002      	beq.n	800c35a <GL_FillPolygon+0x9a>
 800c354:	463a      	mov	r2, r7
 800c356:	2000      	movs	r0, #0
 800c358:	e01b      	b.n	800c392 <GL_FillPolygon+0xd2>
 800c35a:	f9b5 e000 	ldrsh.w	lr, [r5]
 800c35e:	f936 200c 	ldrsh.w	r2, [r6, ip]
 800c362:	f8db 3000 	ldr.w	r3, [fp]
 800c366:	44d6      	add	lr, sl
 800c368:	4452      	add	r2, sl
 800c36a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c36c:	4596      	cmp	lr, r2
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	da02      	bge.n	800c378 <GL_FillPolygon+0xb8>
 800c372:	4670      	mov	r0, lr
 800c374:	4641      	mov	r1, r8
 800c376:	e020      	b.n	800c3ba <GL_FillPolygon+0xfa>
 800c378:	4610      	mov	r0, r2
 800c37a:	4641      	mov	r1, r8
 800c37c:	4672      	mov	r2, lr
 800c37e:	e01c      	b.n	800c3ba <GL_FillPolygon+0xfa>
 800c380:	b152      	cbz	r2, 800c398 <GL_FillPolygon+0xd8>
 800c382:	3a01      	subs	r2, #1
 800c384:	eb06 0c82 	add.w	ip, r6, r2, lsl #2
 800c388:	f9bc c002 	ldrsh.w	ip, [ip, #2]
 800c38c:	45a4      	cmp	ip, r4
 800c38e:	d105      	bne.n	800c39c <GL_FillPolygon+0xdc>
 800c390:	3001      	adds	r0, #1
 800c392:	4288      	cmp	r0, r1
 800c394:	dbf4      	blt.n	800c380 <GL_FillPolygon+0xc0>
 800c396:	e01c      	b.n	800c3d2 <GL_FillPolygon+0x112>
 800c398:	460a      	mov	r2, r1
 800c39a:	e7f3      	b.n	800c384 <GL_FillPolygon+0xc4>
 800c39c:	ebc4 0c0c 	rsb	ip, r4, ip
 800c3a0:	1b1b      	subs	r3, r3, r4
 800c3a2:	ea9c 0f03 	teq	ip, r3
 800c3a6:	f9b5 0000 	ldrsh.w	r0, [r5]
 800c3aa:	d44d      	bmi.n	800c448 <GL_FillPolygon+0x188>
 800c3ac:	f8db 3000 	ldr.w	r3, [fp]
 800c3b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c3b2:	4450      	add	r0, sl
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	4641      	mov	r1, r8
 800c3b8:	4602      	mov	r2, r0
 800c3ba:	4798      	blx	r3
 800c3bc:	e009      	b.n	800c3d2 <GL_FillPolygon+0x112>
 800c3be:	42a3      	cmp	r3, r4
 800c3c0:	d007      	beq.n	800c3d2 <GL_FillPolygon+0x112>
 800c3c2:	db44      	blt.n	800c44e <GL_FillPolygon+0x18e>
 800c3c4:	42a2      	cmp	r2, r4
 800c3c6:	dd27      	ble.n	800c418 <GL_FillPolygon+0x158>
 800c3c8:	42a3      	cmp	r3, r4
 800c3ca:	dd42      	ble.n	800c452 <GL_FillPolygon+0x192>
 800c3cc:	e001      	b.n	800c3d2 <GL_FillPolygon+0x112>
 800c3ce:	42a3      	cmp	r3, r4
 800c3d0:	dd49      	ble.n	800c466 <GL_FillPolygon+0x1a6>
 800c3d2:	3701      	adds	r7, #1
 800c3d4:	3504      	adds	r5, #4
 800c3d6:	e7a6      	b.n	800c326 <GL_FillPolygon+0x66>
 800c3d8:	2500      	movs	r5, #0
 800c3da:	4628      	mov	r0, r5
 800c3dc:	462f      	mov	r7, r5
 800c3de:	4b26      	ldr	r3, [pc, #152]	; (800c478 <GL_FillPolygon+0x1b8>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	429f      	cmp	r7, r3
 800c3e4:	da14      	bge.n	800c410 <GL_FillPolygon+0x150>
 800c3e6:	4b25      	ldr	r3, [pc, #148]	; (800c47c <GL_FillPolygon+0x1bc>)
 800c3e8:	f933 3017 	ldrsh.w	r3, [r3, r7, lsl #1]
 800c3ec:	b15d      	cbz	r5, 800c406 <GL_FillPolygon+0x146>
 800c3ee:	f8db 2000 	ldr.w	r2, [fp]
 800c3f2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800c3f4:	4450      	add	r0, sl
 800c3f6:	f8d2 c000 	ldr.w	ip, [r2]
 800c3fa:	9300      	str	r3, [sp, #0]
 800c3fc:	eb0a 0203 	add.w	r2, sl, r3
 800c400:	4641      	mov	r1, r8
 800c402:	47e0      	blx	ip
 800c404:	9b00      	ldr	r3, [sp, #0]
 800c406:	f085 0501 	eor.w	r5, r5, #1
 800c40a:	3701      	adds	r7, #1
 800c40c:	4618      	mov	r0, r3
 800c40e:	e7e6      	b.n	800c3de <GL_FillPolygon+0x11e>
 800c410:	3401      	adds	r4, #1
 800c412:	f108 0801 	add.w	r8, r8, #1
 800c416:	e77f      	b.n	800c318 <GL_FillPolygon+0x58>
 800c418:	429a      	cmp	r2, r3
 800c41a:	dcd8      	bgt.n	800c3ce <GL_FillPolygon+0x10e>
 800c41c:	f9b5 1000 	ldrsh.w	r1, [r5]
 800c420:	f936 000c 	ldrsh.w	r0, [r6, ip]
 800c424:	ebc2 0e04 	rsb	lr, r2, r4
 800c428:	1a40      	subs	r0, r0, r1
 800c42a:	fb0e f000 	mul.w	r0, lr, r0
 800c42e:	2800      	cmp	r0, #0
 800c430:	ebc2 0303 	rsb	r3, r2, r3
 800c434:	bfdb      	ittet	le
 800c436:	105a      	asrle	r2, r3, #1
 800c438:	f1c2 0201 	rsble	r2, r2, #1
 800c43c:	eb00 0063 	addgt.w	r0, r0, r3, asr #1
 800c440:	1880      	addle	r0, r0, r2
 800c442:	fb90 f0f3 	sdiv	r0, r0, r3
 800c446:	4408      	add	r0, r1
 800c448:	f7ff ff1a 	bl	800c280 <_Add>
 800c44c:	e7c1      	b.n	800c3d2 <GL_FillPolygon+0x112>
 800c44e:	42a2      	cmp	r2, r4
 800c450:	dbbf      	blt.n	800c3d2 <GL_FillPolygon+0x112>
 800c452:	429a      	cmp	r2, r3
 800c454:	ddbd      	ble.n	800c3d2 <GL_FillPolygon+0x112>
 800c456:	4696      	mov	lr, r2
 800c458:	f936 100c 	ldrsh.w	r1, [r6, ip]
 800c45c:	f9b5 0000 	ldrsh.w	r0, [r5]
 800c460:	461a      	mov	r2, r3
 800c462:	4673      	mov	r3, lr
 800c464:	e7de      	b.n	800c424 <GL_FillPolygon+0x164>
 800c466:	42a2      	cmp	r2, r4
 800c468:	daf5      	bge.n	800c456 <GL_FillPolygon+0x196>
 800c46a:	e7b2      	b.n	800c3d2 <GL_FillPolygon+0x112>
 800c46c:	b003      	add	sp, #12
 800c46e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c472:	bf00      	nop
 800c474:	20000018 	.word	0x20000018
 800c478:	200191a8 	.word	0x200191a8
 800c47c:	200191ac 	.word	0x200191ac
 800c480:	ffffc001 	.word	0xffffc001

0800c484 <GL_DrawPoint>:
 800c484:	b508      	push	{r3, lr}
 800c486:	4b08      	ldr	r3, [pc, #32]	; (800c4a8 <GL_DrawPoint+0x24>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	7e1a      	ldrb	r2, [r3, #24]
 800c48c:	2a01      	cmp	r2, #1
 800c48e:	d103      	bne.n	800c498 <GL_DrawPoint+0x14>
 800c490:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c492:	685b      	ldr	r3, [r3, #4]
 800c494:	4798      	blx	r3
 800c496:	bd08      	pop	{r3, pc}
 800c498:	2302      	movs	r3, #2
 800c49a:	3a01      	subs	r2, #1
 800c49c:	fb92 f2f3 	sdiv	r2, r2, r3
 800c4a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c4a4:	f000 b802 	b.w	800c4ac <GL_FillCircle>
 800c4a8:	20000018 	.word	0x20000018

0800c4ac <GL_FillCircle>:
 800c4ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4b0:	f240 29c3 	movw	r9, #707	; 0x2c3
 800c4b4:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 800c56c <GL_FillCircle+0xc0>
 800c4b8:	fb09 f902 	mul.w	r9, r9, r2
 800c4bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c4c0:	fb99 f9f3 	sdiv	r9, r9, r3
 800c4c4:	f8d8 3000 	ldr.w	r3, [r8]
 800c4c8:	f04f 0b02 	mov.w	fp, #2
 800c4cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c4ce:	4606      	mov	r6, r0
 800c4d0:	fb92 fbfb 	sdiv	fp, r2, fp
 800c4d4:	1a80      	subs	r0, r0, r2
 800c4d6:	4614      	mov	r4, r2
 800c4d8:	fb02 bb02 	mla	fp, r2, r2, fp
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	18b2      	adds	r2, r6, r2
 800c4e0:	460f      	mov	r7, r1
 800c4e2:	4798      	blx	r3
 800c4e4:	f109 0901 	add.w	r9, r9, #1
 800c4e8:	2501      	movs	r5, #1
 800c4ea:	454d      	cmp	r5, r9
 800c4ec:	dc3a      	bgt.n	800c564 <GL_FillCircle+0xb8>
 800c4ee:	fb04 f304 	mul.w	r3, r4, r4
 800c4f2:	fb05 3305 	mla	r3, r5, r5, r3
 800c4f6:	455b      	cmp	r3, fp
 800c4f8:	dd1b      	ble.n	800c532 <GL_FillCircle+0x86>
 800c4fa:	454c      	cmp	r4, r9
 800c4fc:	dd18      	ble.n	800c530 <GL_FillCircle+0x84>
 800c4fe:	f8d8 2000 	ldr.w	r2, [r8]
 800c502:	1c73      	adds	r3, r6, #1
 800c504:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800c506:	f106 3aff 	add.w	sl, r6, #4294967295
 800c50a:	1b5b      	subs	r3, r3, r5
 800c50c:	44aa      	add	sl, r5
 800c50e:	f8d2 c000 	ldr.w	ip, [r2]
 800c512:	9301      	str	r3, [sp, #4]
 800c514:	4618      	mov	r0, r3
 800c516:	1939      	adds	r1, r7, r4
 800c518:	4652      	mov	r2, sl
 800c51a:	47e0      	blx	ip
 800c51c:	f8d8 2000 	ldr.w	r2, [r8]
 800c520:	9b01      	ldr	r3, [sp, #4]
 800c522:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800c524:	4618      	mov	r0, r3
 800c526:	f8d2 c000 	ldr.w	ip, [r2]
 800c52a:	1b39      	subs	r1, r7, r4
 800c52c:	4652      	mov	r2, sl
 800c52e:	47e0      	blx	ip
 800c530:	3c01      	subs	r4, #1
 800c532:	f8d8 2000 	ldr.w	r2, [r8]
 800c536:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800c538:	1b33      	subs	r3, r6, r4
 800c53a:	eb06 0a04 	add.w	sl, r6, r4
 800c53e:	f8d2 c000 	ldr.w	ip, [r2]
 800c542:	9301      	str	r3, [sp, #4]
 800c544:	4618      	mov	r0, r3
 800c546:	19e9      	adds	r1, r5, r7
 800c548:	4652      	mov	r2, sl
 800c54a:	47e0      	blx	ip
 800c54c:	f8d8 2000 	ldr.w	r2, [r8]
 800c550:	9b01      	ldr	r3, [sp, #4]
 800c552:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800c554:	1b79      	subs	r1, r7, r5
 800c556:	f8d2 c000 	ldr.w	ip, [r2]
 800c55a:	4618      	mov	r0, r3
 800c55c:	4652      	mov	r2, sl
 800c55e:	47e0      	blx	ip
 800c560:	3501      	adds	r5, #1
 800c562:	e7c2      	b.n	800c4ea <GL_FillCircle+0x3e>
 800c564:	b003      	add	sp, #12
 800c566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c56a:	bf00      	nop
 800c56c:	20000018 	.word	0x20000018

0800c570 <_GetIndexMask_0>:
 800c570:	b508      	push	{r3, lr}
 800c572:	f7fb fea1 	bl	80082b8 <LCD_GetNumColors>
 800c576:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800c57a:	d010      	beq.n	800c59e <_GetIndexMask_0+0x2e>
 800c57c:	287f      	cmp	r0, #127	; 0x7f
 800c57e:	d810      	bhi.n	800c5a2 <_GetIndexMask_0+0x32>
 800c580:	283f      	cmp	r0, #63	; 0x3f
 800c582:	d810      	bhi.n	800c5a6 <_GetIndexMask_0+0x36>
 800c584:	281f      	cmp	r0, #31
 800c586:	d810      	bhi.n	800c5aa <_GetIndexMask_0+0x3a>
 800c588:	280f      	cmp	r0, #15
 800c58a:	d810      	bhi.n	800c5ae <_GetIndexMask_0+0x3e>
 800c58c:	2807      	cmp	r0, #7
 800c58e:	d810      	bhi.n	800c5b2 <_GetIndexMask_0+0x42>
 800c590:	2803      	cmp	r0, #3
 800c592:	d810      	bhi.n	800c5b6 <_GetIndexMask_0+0x46>
 800c594:	2801      	cmp	r0, #1
 800c596:	bf94      	ite	ls
 800c598:	2000      	movls	r0, #0
 800c59a:	2001      	movhi	r0, #1
 800c59c:	e00c      	b.n	800c5b8 <_GetIndexMask_0+0x48>
 800c59e:	2008      	movs	r0, #8
 800c5a0:	e00a      	b.n	800c5b8 <_GetIndexMask_0+0x48>
 800c5a2:	2007      	movs	r0, #7
 800c5a4:	e008      	b.n	800c5b8 <_GetIndexMask_0+0x48>
 800c5a6:	2006      	movs	r0, #6
 800c5a8:	e006      	b.n	800c5b8 <_GetIndexMask_0+0x48>
 800c5aa:	2005      	movs	r0, #5
 800c5ac:	e004      	b.n	800c5b8 <_GetIndexMask_0+0x48>
 800c5ae:	2004      	movs	r0, #4
 800c5b0:	e002      	b.n	800c5b8 <_GetIndexMask_0+0x48>
 800c5b2:	2003      	movs	r0, #3
 800c5b4:	e000      	b.n	800c5b8 <_GetIndexMask_0+0x48>
 800c5b6:	2002      	movs	r0, #2
 800c5b8:	2301      	movs	r3, #1
 800c5ba:	fa03 f000 	lsl.w	r0, r3, r0
 800c5be:	3801      	subs	r0, #1
 800c5c0:	bd08      	pop	{r3, pc}

0800c5c2 <_Index2Color_0>:
 800c5c2:	b538      	push	{r3, r4, r5, lr}
 800c5c4:	4604      	mov	r4, r0
 800c5c6:	f7fb fe77 	bl	80082b8 <LCD_GetNumColors>
 800c5ca:	4605      	mov	r5, r0
 800c5cc:	f7fb fe92 	bl	80082f4 <LCD_GetPalette>
 800c5d0:	42ac      	cmp	r4, r5
 800c5d2:	d203      	bcs.n	800c5dc <_Index2Color_0+0x1a>
 800c5d4:	b118      	cbz	r0, 800c5de <_Index2Color_0+0x1c>
 800c5d6:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800c5da:	bd38      	pop	{r3, r4, r5, pc}
 800c5dc:	2000      	movs	r0, #0
 800c5de:	bd38      	pop	{r3, r4, r5, pc}

0800c5e0 <_Color2Index_0>:
 800c5e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5e4:	4681      	mov	r9, r0
 800c5e6:	f7fb fe67 	bl	80082b8 <LCD_GetNumColors>
 800c5ea:	4680      	mov	r8, r0
 800c5ec:	f7fb fe82 	bl	80082f4 <LCD_GetPalette>
 800c5f0:	4606      	mov	r6, r0
 800c5f2:	b1d8      	cbz	r0, 800c62c <_Color2Index_0+0x4c>
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 800c5fa:	4591      	cmp	r9, r2
 800c5fc:	d01a      	beq.n	800c634 <_Color2Index_0+0x54>
 800c5fe:	3301      	adds	r3, #1
 800c600:	4543      	cmp	r3, r8
 800c602:	dbf8      	blt.n	800c5f6 <_Color2Index_0+0x16>
 800c604:	2500      	movs	r5, #0
 800c606:	f06f 477f 	mvn.w	r7, #4278190080	; 0xff000000
 800c60a:	462c      	mov	r4, r5
 800c60c:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 800c610:	4648      	mov	r0, r9
 800c612:	f000 f831 	bl	800c678 <GUI_CalcColorDist>
 800c616:	42b8      	cmp	r0, r7
 800c618:	bf38      	it	cc
 800c61a:	4625      	movcc	r5, r4
 800c61c:	f104 0401 	add.w	r4, r4, #1
 800c620:	bf28      	it	cs
 800c622:	4638      	movcs	r0, r7
 800c624:	4544      	cmp	r4, r8
 800c626:	da02      	bge.n	800c62e <_Color2Index_0+0x4e>
 800c628:	4607      	mov	r7, r0
 800c62a:	e7ef      	b.n	800c60c <_Color2Index_0+0x2c>
 800c62c:	4605      	mov	r5, r0
 800c62e:	4628      	mov	r0, r5
 800c630:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c634:	4618      	mov	r0, r3
 800c636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800c63a <LCD_GetNumLayers>:
 800c63a:	b510      	push	{r4, lr}
 800c63c:	2000      	movs	r0, #0
 800c63e:	f7fd f9f1 	bl	8009a24 <GUI_DEVICE__GetpDriver>
 800c642:	1c04      	adds	r4, r0, #0
 800c644:	f04f 0001 	mov.w	r0, #1
 800c648:	bf18      	it	ne
 800c64a:	2401      	movne	r4, #1
 800c64c:	f7fd f9ea 	bl	8009a24 <GUI_DEVICE__GetpDriver>
 800c650:	b100      	cbz	r0, 800c654 <LCD_GetNumLayers+0x1a>
 800c652:	3401      	adds	r4, #1
 800c654:	4620      	mov	r0, r4
 800c656:	bd10      	pop	{r4, pc}

0800c658 <LCD_GetBkColorIndex>:
 800c658:	4b02      	ldr	r3, [pc, #8]	; (800c664 <LCD_GetBkColorIndex+0xc>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c65e:	6818      	ldr	r0, [r3, #0]
 800c660:	4770      	bx	lr
 800c662:	bf00      	nop
 800c664:	20000018 	.word	0x20000018

0800c668 <LCD_GetColorIndex>:
 800c668:	4b02      	ldr	r3, [pc, #8]	; (800c674 <LCD_GetColorIndex+0xc>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c66e:	6818      	ldr	r0, [r3, #0]
 800c670:	4770      	bx	lr
 800c672:	bf00      	nop
 800c674:	20000018 	.word	0x20000018

0800c678 <GUI_CalcColorDist>:
 800c678:	b2cb      	uxtb	r3, r1
 800c67a:	b2c2      	uxtb	r2, r0
 800c67c:	1ad2      	subs	r2, r2, r3
 800c67e:	b292      	uxth	r2, r2
 800c680:	b293      	uxth	r3, r2
 800c682:	b530      	push	{r4, r5, lr}
 800c684:	041c      	lsls	r4, r3, #16
 800c686:	bf48      	it	mi
 800c688:	4253      	negmi	r3, r2
 800c68a:	f3c1 2507 	ubfx	r5, r1, #8, #8
 800c68e:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800c692:	ebc5 0202 	rsb	r2, r5, r2
 800c696:	bf48      	it	mi
 800c698:	b29b      	uxthmi	r3, r3
 800c69a:	b292      	uxth	r2, r2
 800c69c:	0c09      	lsrs	r1, r1, #16
 800c69e:	fb13 f403 	smulbb	r4, r3, r3
 800c6a2:	ebc1 4110 	rsb	r1, r1, r0, lsr #16
 800c6a6:	b293      	uxth	r3, r2
 800c6a8:	041d      	lsls	r5, r3, #16
 800c6aa:	b289      	uxth	r1, r1
 800c6ac:	b288      	uxth	r0, r1
 800c6ae:	bf44      	itt	mi
 800c6b0:	4253      	negmi	r3, r2
 800c6b2:	b29b      	uxthmi	r3, r3
 800c6b4:	0402      	lsls	r2, r0, #16
 800c6b6:	bf48      	it	mi
 800c6b8:	4248      	negmi	r0, r1
 800c6ba:	fb13 4303 	smlabb	r3, r3, r3, r4
 800c6be:	bf48      	it	mi
 800c6c0:	b280      	uxthmi	r0, r0
 800c6c2:	fb00 3000 	mla	r0, r0, r0, r3
 800c6c6:	bd30      	pop	{r4, r5, pc}

0800c6c8 <__libc_init_array>:
 800c6c8:	b570      	push	{r4, r5, r6, lr}
 800c6ca:	4e0d      	ldr	r6, [pc, #52]	; (800c700 <__libc_init_array+0x38>)
 800c6cc:	4c0d      	ldr	r4, [pc, #52]	; (800c704 <__libc_init_array+0x3c>)
 800c6ce:	1ba4      	subs	r4, r4, r6
 800c6d0:	10a4      	asrs	r4, r4, #2
 800c6d2:	2500      	movs	r5, #0
 800c6d4:	42a5      	cmp	r5, r4
 800c6d6:	d109      	bne.n	800c6ec <__libc_init_array+0x24>
 800c6d8:	4e0b      	ldr	r6, [pc, #44]	; (800c708 <__libc_init_array+0x40>)
 800c6da:	4c0c      	ldr	r4, [pc, #48]	; (800c70c <__libc_init_array+0x44>)
 800c6dc:	f001 f89a 	bl	800d814 <_init>
 800c6e0:	1ba4      	subs	r4, r4, r6
 800c6e2:	10a4      	asrs	r4, r4, #2
 800c6e4:	2500      	movs	r5, #0
 800c6e6:	42a5      	cmp	r5, r4
 800c6e8:	d105      	bne.n	800c6f6 <__libc_init_array+0x2e>
 800c6ea:	bd70      	pop	{r4, r5, r6, pc}
 800c6ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c6f0:	4798      	blx	r3
 800c6f2:	3501      	adds	r5, #1
 800c6f4:	e7ee      	b.n	800c6d4 <__libc_init_array+0xc>
 800c6f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c6fa:	4798      	blx	r3
 800c6fc:	3501      	adds	r5, #1
 800c6fe:	e7f2      	b.n	800c6e6 <__libc_init_array+0x1e>
 800c700:	0800f980 	.word	0x0800f980
 800c704:	0800f980 	.word	0x0800f980
 800c708:	0800f980 	.word	0x0800f980
 800c70c:	0800f984 	.word	0x0800f984

0800c710 <memcpy>:
 800c710:	b510      	push	{r4, lr}
 800c712:	1e43      	subs	r3, r0, #1
 800c714:	440a      	add	r2, r1
 800c716:	4291      	cmp	r1, r2
 800c718:	d100      	bne.n	800c71c <memcpy+0xc>
 800c71a:	bd10      	pop	{r4, pc}
 800c71c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c720:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c724:	e7f7      	b.n	800c716 <memcpy+0x6>

0800c726 <memmove>:
 800c726:	4288      	cmp	r0, r1
 800c728:	b510      	push	{r4, lr}
 800c72a:	eb01 0302 	add.w	r3, r1, r2
 800c72e:	d807      	bhi.n	800c740 <memmove+0x1a>
 800c730:	1e42      	subs	r2, r0, #1
 800c732:	4299      	cmp	r1, r3
 800c734:	d00a      	beq.n	800c74c <memmove+0x26>
 800c736:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c73a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c73e:	e7f8      	b.n	800c732 <memmove+0xc>
 800c740:	4283      	cmp	r3, r0
 800c742:	d9f5      	bls.n	800c730 <memmove+0xa>
 800c744:	1881      	adds	r1, r0, r2
 800c746:	1ad2      	subs	r2, r2, r3
 800c748:	42d3      	cmn	r3, r2
 800c74a:	d100      	bne.n	800c74e <memmove+0x28>
 800c74c:	bd10      	pop	{r4, pc}
 800c74e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c752:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c756:	e7f7      	b.n	800c748 <memmove+0x22>

0800c758 <memset>:
 800c758:	4402      	add	r2, r0
 800c75a:	4603      	mov	r3, r0
 800c75c:	4293      	cmp	r3, r2
 800c75e:	d100      	bne.n	800c762 <memset+0xa>
 800c760:	4770      	bx	lr
 800c762:	f803 1b01 	strb.w	r1, [r3], #1
 800c766:	e7f9      	b.n	800c75c <memset+0x4>

0800c768 <cos>:
 800c768:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c76a:	ec51 0b10 	vmov	r0, r1, d0
 800c76e:	4a1e      	ldr	r2, [pc, #120]	; (800c7e8 <cos+0x80>)
 800c770:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c774:	4293      	cmp	r3, r2
 800c776:	dc06      	bgt.n	800c786 <cos+0x1e>
 800c778:	ed9f 1b19 	vldr	d1, [pc, #100]	; 800c7e0 <cos+0x78>
 800c77c:	f000 fa74 	bl	800cc68 <__kernel_cos>
 800c780:	ec51 0b10 	vmov	r0, r1, d0
 800c784:	e007      	b.n	800c796 <cos+0x2e>
 800c786:	4a19      	ldr	r2, [pc, #100]	; (800c7ec <cos+0x84>)
 800c788:	4293      	cmp	r3, r2
 800c78a:	dd09      	ble.n	800c7a0 <cos+0x38>
 800c78c:	ee10 2a10 	vmov	r2, s0
 800c790:	460b      	mov	r3, r1
 800c792:	f7f3 fd3d 	bl	8000210 <__aeabi_dsub>
 800c796:	ec41 0b10 	vmov	d0, r0, r1
 800c79a:	b005      	add	sp, #20
 800c79c:	f85d fb04 	ldr.w	pc, [sp], #4
 800c7a0:	4668      	mov	r0, sp
 800c7a2:	f000 f86d 	bl	800c880 <__ieee754_rem_pio2>
 800c7a6:	f000 0003 	and.w	r0, r0, #3
 800c7aa:	2801      	cmp	r0, #1
 800c7ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c7b0:	ed9d 0b00 	vldr	d0, [sp]
 800c7b4:	d007      	beq.n	800c7c6 <cos+0x5e>
 800c7b6:	2802      	cmp	r0, #2
 800c7b8:	d00e      	beq.n	800c7d8 <cos+0x70>
 800c7ba:	2800      	cmp	r0, #0
 800c7bc:	d0de      	beq.n	800c77c <cos+0x14>
 800c7be:	2001      	movs	r0, #1
 800c7c0:	f000 fe5a 	bl	800d478 <__kernel_sin>
 800c7c4:	e7dc      	b.n	800c780 <cos+0x18>
 800c7c6:	f000 fe57 	bl	800d478 <__kernel_sin>
 800c7ca:	ec53 2b10 	vmov	r2, r3, d0
 800c7ce:	ee10 0a10 	vmov	r0, s0
 800c7d2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c7d6:	e7de      	b.n	800c796 <cos+0x2e>
 800c7d8:	f000 fa46 	bl	800cc68 <__kernel_cos>
 800c7dc:	e7f5      	b.n	800c7ca <cos+0x62>
 800c7de:	bf00      	nop
	...
 800c7e8:	3fe921fb 	.word	0x3fe921fb
 800c7ec:	7fefffff 	.word	0x7fefffff

0800c7f0 <sin>:
 800c7f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c7f2:	ec51 0b10 	vmov	r0, r1, d0
 800c7f6:	4a20      	ldr	r2, [pc, #128]	; (800c878 <sin+0x88>)
 800c7f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c7fc:	4293      	cmp	r3, r2
 800c7fe:	dc07      	bgt.n	800c810 <sin+0x20>
 800c800:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800c870 <sin+0x80>
 800c804:	2000      	movs	r0, #0
 800c806:	f000 fe37 	bl	800d478 <__kernel_sin>
 800c80a:	ec51 0b10 	vmov	r0, r1, d0
 800c80e:	e007      	b.n	800c820 <sin+0x30>
 800c810:	4a1a      	ldr	r2, [pc, #104]	; (800c87c <sin+0x8c>)
 800c812:	4293      	cmp	r3, r2
 800c814:	dd09      	ble.n	800c82a <sin+0x3a>
 800c816:	ee10 2a10 	vmov	r2, s0
 800c81a:	460b      	mov	r3, r1
 800c81c:	f7f3 fcf8 	bl	8000210 <__aeabi_dsub>
 800c820:	ec41 0b10 	vmov	d0, r0, r1
 800c824:	b005      	add	sp, #20
 800c826:	f85d fb04 	ldr.w	pc, [sp], #4
 800c82a:	4668      	mov	r0, sp
 800c82c:	f000 f828 	bl	800c880 <__ieee754_rem_pio2>
 800c830:	f000 0003 	and.w	r0, r0, #3
 800c834:	2801      	cmp	r0, #1
 800c836:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c83a:	ed9d 0b00 	vldr	d0, [sp]
 800c83e:	d004      	beq.n	800c84a <sin+0x5a>
 800c840:	2802      	cmp	r0, #2
 800c842:	d005      	beq.n	800c850 <sin+0x60>
 800c844:	b970      	cbnz	r0, 800c864 <sin+0x74>
 800c846:	2001      	movs	r0, #1
 800c848:	e7dd      	b.n	800c806 <sin+0x16>
 800c84a:	f000 fa0d 	bl	800cc68 <__kernel_cos>
 800c84e:	e7dc      	b.n	800c80a <sin+0x1a>
 800c850:	2001      	movs	r0, #1
 800c852:	f000 fe11 	bl	800d478 <__kernel_sin>
 800c856:	ec53 2b10 	vmov	r2, r3, d0
 800c85a:	ee10 0a10 	vmov	r0, s0
 800c85e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c862:	e7dd      	b.n	800c820 <sin+0x30>
 800c864:	f000 fa00 	bl	800cc68 <__kernel_cos>
 800c868:	e7f5      	b.n	800c856 <sin+0x66>
 800c86a:	bf00      	nop
 800c86c:	f3af 8000 	nop.w
	...
 800c878:	3fe921fb 	.word	0x3fe921fb
 800c87c:	7fefffff 	.word	0x7fefffff

0800c880 <__ieee754_rem_pio2>:
 800c880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c884:	ec57 6b10 	vmov	r6, r7, d0
 800c888:	4bc3      	ldr	r3, [pc, #780]	; (800cb98 <__ieee754_rem_pio2+0x318>)
 800c88a:	b08d      	sub	sp, #52	; 0x34
 800c88c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800c890:	4598      	cmp	r8, r3
 800c892:	4604      	mov	r4, r0
 800c894:	9704      	str	r7, [sp, #16]
 800c896:	dc07      	bgt.n	800c8a8 <__ieee754_rem_pio2+0x28>
 800c898:	2200      	movs	r2, #0
 800c89a:	2300      	movs	r3, #0
 800c89c:	ed84 0b00 	vstr	d0, [r4]
 800c8a0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c8a4:	2500      	movs	r5, #0
 800c8a6:	e027      	b.n	800c8f8 <__ieee754_rem_pio2+0x78>
 800c8a8:	4bbc      	ldr	r3, [pc, #752]	; (800cb9c <__ieee754_rem_pio2+0x31c>)
 800c8aa:	4598      	cmp	r8, r3
 800c8ac:	dc75      	bgt.n	800c99a <__ieee754_rem_pio2+0x11a>
 800c8ae:	9b04      	ldr	r3, [sp, #16]
 800c8b0:	4dbb      	ldr	r5, [pc, #748]	; (800cba0 <__ieee754_rem_pio2+0x320>)
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	ee10 0a10 	vmov	r0, s0
 800c8b8:	a3a9      	add	r3, pc, #676	; (adr r3, 800cb60 <__ieee754_rem_pio2+0x2e0>)
 800c8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8be:	4639      	mov	r1, r7
 800c8c0:	dd36      	ble.n	800c930 <__ieee754_rem_pio2+0xb0>
 800c8c2:	f7f3 fca5 	bl	8000210 <__aeabi_dsub>
 800c8c6:	45a8      	cmp	r8, r5
 800c8c8:	4606      	mov	r6, r0
 800c8ca:	460f      	mov	r7, r1
 800c8cc:	d018      	beq.n	800c900 <__ieee754_rem_pio2+0x80>
 800c8ce:	a3a6      	add	r3, pc, #664	; (adr r3, 800cb68 <__ieee754_rem_pio2+0x2e8>)
 800c8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8d4:	f7f3 fc9c 	bl	8000210 <__aeabi_dsub>
 800c8d8:	4602      	mov	r2, r0
 800c8da:	460b      	mov	r3, r1
 800c8dc:	e9c4 2300 	strd	r2, r3, [r4]
 800c8e0:	4630      	mov	r0, r6
 800c8e2:	4639      	mov	r1, r7
 800c8e4:	f7f3 fc94 	bl	8000210 <__aeabi_dsub>
 800c8e8:	a39f      	add	r3, pc, #636	; (adr r3, 800cb68 <__ieee754_rem_pio2+0x2e8>)
 800c8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ee:	f7f3 fc8f 	bl	8000210 <__aeabi_dsub>
 800c8f2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c8f6:	2501      	movs	r5, #1
 800c8f8:	4628      	mov	r0, r5
 800c8fa:	b00d      	add	sp, #52	; 0x34
 800c8fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c900:	a39b      	add	r3, pc, #620	; (adr r3, 800cb70 <__ieee754_rem_pio2+0x2f0>)
 800c902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c906:	f7f3 fc83 	bl	8000210 <__aeabi_dsub>
 800c90a:	a39b      	add	r3, pc, #620	; (adr r3, 800cb78 <__ieee754_rem_pio2+0x2f8>)
 800c90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c910:	4606      	mov	r6, r0
 800c912:	460f      	mov	r7, r1
 800c914:	f7f3 fc7c 	bl	8000210 <__aeabi_dsub>
 800c918:	4602      	mov	r2, r0
 800c91a:	460b      	mov	r3, r1
 800c91c:	e9c4 2300 	strd	r2, r3, [r4]
 800c920:	4630      	mov	r0, r6
 800c922:	4639      	mov	r1, r7
 800c924:	f7f3 fc74 	bl	8000210 <__aeabi_dsub>
 800c928:	a393      	add	r3, pc, #588	; (adr r3, 800cb78 <__ieee754_rem_pio2+0x2f8>)
 800c92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c92e:	e7de      	b.n	800c8ee <__ieee754_rem_pio2+0x6e>
 800c930:	f7f3 fc70 	bl	8000214 <__adddf3>
 800c934:	45a8      	cmp	r8, r5
 800c936:	4606      	mov	r6, r0
 800c938:	460f      	mov	r7, r1
 800c93a:	d016      	beq.n	800c96a <__ieee754_rem_pio2+0xea>
 800c93c:	a38a      	add	r3, pc, #552	; (adr r3, 800cb68 <__ieee754_rem_pio2+0x2e8>)
 800c93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c942:	f7f3 fc67 	bl	8000214 <__adddf3>
 800c946:	4602      	mov	r2, r0
 800c948:	460b      	mov	r3, r1
 800c94a:	e9c4 2300 	strd	r2, r3, [r4]
 800c94e:	4630      	mov	r0, r6
 800c950:	4639      	mov	r1, r7
 800c952:	f7f3 fc5d 	bl	8000210 <__aeabi_dsub>
 800c956:	a384      	add	r3, pc, #528	; (adr r3, 800cb68 <__ieee754_rem_pio2+0x2e8>)
 800c958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c95c:	f7f3 fc5a 	bl	8000214 <__adddf3>
 800c960:	f04f 35ff 	mov.w	r5, #4294967295
 800c964:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c968:	e7c6      	b.n	800c8f8 <__ieee754_rem_pio2+0x78>
 800c96a:	a381      	add	r3, pc, #516	; (adr r3, 800cb70 <__ieee754_rem_pio2+0x2f0>)
 800c96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c970:	f7f3 fc50 	bl	8000214 <__adddf3>
 800c974:	a380      	add	r3, pc, #512	; (adr r3, 800cb78 <__ieee754_rem_pio2+0x2f8>)
 800c976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c97a:	4606      	mov	r6, r0
 800c97c:	460f      	mov	r7, r1
 800c97e:	f7f3 fc49 	bl	8000214 <__adddf3>
 800c982:	4602      	mov	r2, r0
 800c984:	460b      	mov	r3, r1
 800c986:	e9c4 2300 	strd	r2, r3, [r4]
 800c98a:	4630      	mov	r0, r6
 800c98c:	4639      	mov	r1, r7
 800c98e:	f7f3 fc3f 	bl	8000210 <__aeabi_dsub>
 800c992:	a379      	add	r3, pc, #484	; (adr r3, 800cb78 <__ieee754_rem_pio2+0x2f8>)
 800c994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c998:	e7e0      	b.n	800c95c <__ieee754_rem_pio2+0xdc>
 800c99a:	4b82      	ldr	r3, [pc, #520]	; (800cba4 <__ieee754_rem_pio2+0x324>)
 800c99c:	4598      	cmp	r8, r3
 800c99e:	f300 80d0 	bgt.w	800cb42 <__ieee754_rem_pio2+0x2c2>
 800c9a2:	f000 fe23 	bl	800d5ec <fabs>
 800c9a6:	ec57 6b10 	vmov	r6, r7, d0
 800c9aa:	ee10 0a10 	vmov	r0, s0
 800c9ae:	a374      	add	r3, pc, #464	; (adr r3, 800cb80 <__ieee754_rem_pio2+0x300>)
 800c9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b4:	4639      	mov	r1, r7
 800c9b6:	f7f3 fde3 	bl	8000580 <__aeabi_dmul>
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	4b7a      	ldr	r3, [pc, #488]	; (800cba8 <__ieee754_rem_pio2+0x328>)
 800c9be:	f7f3 fc29 	bl	8000214 <__adddf3>
 800c9c2:	f7f4 f877 	bl	8000ab4 <__aeabi_d2iz>
 800c9c6:	4605      	mov	r5, r0
 800c9c8:	f7f3 fd70 	bl	80004ac <__aeabi_i2d>
 800c9cc:	a364      	add	r3, pc, #400	; (adr r3, 800cb60 <__ieee754_rem_pio2+0x2e0>)
 800c9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c9d6:	f7f3 fdd3 	bl	8000580 <__aeabi_dmul>
 800c9da:	4602      	mov	r2, r0
 800c9dc:	460b      	mov	r3, r1
 800c9de:	4630      	mov	r0, r6
 800c9e0:	4639      	mov	r1, r7
 800c9e2:	f7f3 fc15 	bl	8000210 <__aeabi_dsub>
 800c9e6:	a360      	add	r3, pc, #384	; (adr r3, 800cb68 <__ieee754_rem_pio2+0x2e8>)
 800c9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ec:	4682      	mov	sl, r0
 800c9ee:	468b      	mov	fp, r1
 800c9f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9f4:	f7f3 fdc4 	bl	8000580 <__aeabi_dmul>
 800c9f8:	2d1f      	cmp	r5, #31
 800c9fa:	4606      	mov	r6, r0
 800c9fc:	460f      	mov	r7, r1
 800c9fe:	dc0c      	bgt.n	800ca1a <__ieee754_rem_pio2+0x19a>
 800ca00:	1e6a      	subs	r2, r5, #1
 800ca02:	4b6a      	ldr	r3, [pc, #424]	; (800cbac <__ieee754_rem_pio2+0x32c>)
 800ca04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca08:	4543      	cmp	r3, r8
 800ca0a:	d006      	beq.n	800ca1a <__ieee754_rem_pio2+0x19a>
 800ca0c:	4632      	mov	r2, r6
 800ca0e:	463b      	mov	r3, r7
 800ca10:	4650      	mov	r0, sl
 800ca12:	4659      	mov	r1, fp
 800ca14:	f7f3 fbfc 	bl	8000210 <__aeabi_dsub>
 800ca18:	e00e      	b.n	800ca38 <__ieee754_rem_pio2+0x1b8>
 800ca1a:	4632      	mov	r2, r6
 800ca1c:	463b      	mov	r3, r7
 800ca1e:	4650      	mov	r0, sl
 800ca20:	4659      	mov	r1, fp
 800ca22:	f7f3 fbf5 	bl	8000210 <__aeabi_dsub>
 800ca26:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ca2a:	9305      	str	r3, [sp, #20]
 800ca2c:	9a05      	ldr	r2, [sp, #20]
 800ca2e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ca32:	1ad3      	subs	r3, r2, r3
 800ca34:	2b10      	cmp	r3, #16
 800ca36:	dc02      	bgt.n	800ca3e <__ieee754_rem_pio2+0x1be>
 800ca38:	e9c4 0100 	strd	r0, r1, [r4]
 800ca3c:	e039      	b.n	800cab2 <__ieee754_rem_pio2+0x232>
 800ca3e:	a34c      	add	r3, pc, #304	; (adr r3, 800cb70 <__ieee754_rem_pio2+0x2f0>)
 800ca40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca48:	f7f3 fd9a 	bl	8000580 <__aeabi_dmul>
 800ca4c:	4606      	mov	r6, r0
 800ca4e:	460f      	mov	r7, r1
 800ca50:	4602      	mov	r2, r0
 800ca52:	460b      	mov	r3, r1
 800ca54:	4650      	mov	r0, sl
 800ca56:	4659      	mov	r1, fp
 800ca58:	f7f3 fbda 	bl	8000210 <__aeabi_dsub>
 800ca5c:	4602      	mov	r2, r0
 800ca5e:	460b      	mov	r3, r1
 800ca60:	4680      	mov	r8, r0
 800ca62:	4689      	mov	r9, r1
 800ca64:	4650      	mov	r0, sl
 800ca66:	4659      	mov	r1, fp
 800ca68:	f7f3 fbd2 	bl	8000210 <__aeabi_dsub>
 800ca6c:	4632      	mov	r2, r6
 800ca6e:	463b      	mov	r3, r7
 800ca70:	f7f3 fbce 	bl	8000210 <__aeabi_dsub>
 800ca74:	a340      	add	r3, pc, #256	; (adr r3, 800cb78 <__ieee754_rem_pio2+0x2f8>)
 800ca76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca7a:	4606      	mov	r6, r0
 800ca7c:	460f      	mov	r7, r1
 800ca7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca82:	f7f3 fd7d 	bl	8000580 <__aeabi_dmul>
 800ca86:	4632      	mov	r2, r6
 800ca88:	463b      	mov	r3, r7
 800ca8a:	f7f3 fbc1 	bl	8000210 <__aeabi_dsub>
 800ca8e:	4602      	mov	r2, r0
 800ca90:	460b      	mov	r3, r1
 800ca92:	4606      	mov	r6, r0
 800ca94:	460f      	mov	r7, r1
 800ca96:	4640      	mov	r0, r8
 800ca98:	4649      	mov	r1, r9
 800ca9a:	f7f3 fbb9 	bl	8000210 <__aeabi_dsub>
 800ca9e:	9a05      	ldr	r2, [sp, #20]
 800caa0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800caa4:	1ad3      	subs	r3, r2, r3
 800caa6:	2b31      	cmp	r3, #49	; 0x31
 800caa8:	dc20      	bgt.n	800caec <__ieee754_rem_pio2+0x26c>
 800caaa:	e9c4 0100 	strd	r0, r1, [r4]
 800caae:	46c2      	mov	sl, r8
 800cab0:	46cb      	mov	fp, r9
 800cab2:	e9d4 8900 	ldrd	r8, r9, [r4]
 800cab6:	4650      	mov	r0, sl
 800cab8:	4642      	mov	r2, r8
 800caba:	464b      	mov	r3, r9
 800cabc:	4659      	mov	r1, fp
 800cabe:	f7f3 fba7 	bl	8000210 <__aeabi_dsub>
 800cac2:	463b      	mov	r3, r7
 800cac4:	4632      	mov	r2, r6
 800cac6:	f7f3 fba3 	bl	8000210 <__aeabi_dsub>
 800caca:	9b04      	ldr	r3, [sp, #16]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800cad2:	f6bf af11 	bge.w	800c8f8 <__ieee754_rem_pio2+0x78>
 800cad6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800cada:	6063      	str	r3, [r4, #4]
 800cadc:	f8c4 8000 	str.w	r8, [r4]
 800cae0:	60a0      	str	r0, [r4, #8]
 800cae2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cae6:	60e3      	str	r3, [r4, #12]
 800cae8:	426d      	negs	r5, r5
 800caea:	e705      	b.n	800c8f8 <__ieee754_rem_pio2+0x78>
 800caec:	a326      	add	r3, pc, #152	; (adr r3, 800cb88 <__ieee754_rem_pio2+0x308>)
 800caee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800caf6:	f7f3 fd43 	bl	8000580 <__aeabi_dmul>
 800cafa:	4606      	mov	r6, r0
 800cafc:	460f      	mov	r7, r1
 800cafe:	4602      	mov	r2, r0
 800cb00:	460b      	mov	r3, r1
 800cb02:	4640      	mov	r0, r8
 800cb04:	4649      	mov	r1, r9
 800cb06:	f7f3 fb83 	bl	8000210 <__aeabi_dsub>
 800cb0a:	4602      	mov	r2, r0
 800cb0c:	460b      	mov	r3, r1
 800cb0e:	4682      	mov	sl, r0
 800cb10:	468b      	mov	fp, r1
 800cb12:	4640      	mov	r0, r8
 800cb14:	4649      	mov	r1, r9
 800cb16:	f7f3 fb7b 	bl	8000210 <__aeabi_dsub>
 800cb1a:	4632      	mov	r2, r6
 800cb1c:	463b      	mov	r3, r7
 800cb1e:	f7f3 fb77 	bl	8000210 <__aeabi_dsub>
 800cb22:	a31b      	add	r3, pc, #108	; (adr r3, 800cb90 <__ieee754_rem_pio2+0x310>)
 800cb24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb28:	4606      	mov	r6, r0
 800cb2a:	460f      	mov	r7, r1
 800cb2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb30:	f7f3 fd26 	bl	8000580 <__aeabi_dmul>
 800cb34:	4632      	mov	r2, r6
 800cb36:	463b      	mov	r3, r7
 800cb38:	f7f3 fb6a 	bl	8000210 <__aeabi_dsub>
 800cb3c:	4606      	mov	r6, r0
 800cb3e:	460f      	mov	r7, r1
 800cb40:	e764      	b.n	800ca0c <__ieee754_rem_pio2+0x18c>
 800cb42:	4b1b      	ldr	r3, [pc, #108]	; (800cbb0 <__ieee754_rem_pio2+0x330>)
 800cb44:	4598      	cmp	r8, r3
 800cb46:	dd35      	ble.n	800cbb4 <__ieee754_rem_pio2+0x334>
 800cb48:	ee10 2a10 	vmov	r2, s0
 800cb4c:	463b      	mov	r3, r7
 800cb4e:	4630      	mov	r0, r6
 800cb50:	4639      	mov	r1, r7
 800cb52:	f7f3 fb5d 	bl	8000210 <__aeabi_dsub>
 800cb56:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800cb5a:	e9c4 0100 	strd	r0, r1, [r4]
 800cb5e:	e6a1      	b.n	800c8a4 <__ieee754_rem_pio2+0x24>
 800cb60:	54400000 	.word	0x54400000
 800cb64:	3ff921fb 	.word	0x3ff921fb
 800cb68:	1a626331 	.word	0x1a626331
 800cb6c:	3dd0b461 	.word	0x3dd0b461
 800cb70:	1a600000 	.word	0x1a600000
 800cb74:	3dd0b461 	.word	0x3dd0b461
 800cb78:	2e037073 	.word	0x2e037073
 800cb7c:	3ba3198a 	.word	0x3ba3198a
 800cb80:	6dc9c883 	.word	0x6dc9c883
 800cb84:	3fe45f30 	.word	0x3fe45f30
 800cb88:	2e000000 	.word	0x2e000000
 800cb8c:	3ba3198a 	.word	0x3ba3198a
 800cb90:	252049c1 	.word	0x252049c1
 800cb94:	397b839a 	.word	0x397b839a
 800cb98:	3fe921fb 	.word	0x3fe921fb
 800cb9c:	4002d97b 	.word	0x4002d97b
 800cba0:	3ff921fb 	.word	0x3ff921fb
 800cba4:	413921fb 	.word	0x413921fb
 800cba8:	3fe00000 	.word	0x3fe00000
 800cbac:	0800f79c 	.word	0x0800f79c
 800cbb0:	7fefffff 	.word	0x7fefffff
 800cbb4:	ea4f 5528 	mov.w	r5, r8, asr #20
 800cbb8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800cbbc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800cbc0:	4630      	mov	r0, r6
 800cbc2:	460f      	mov	r7, r1
 800cbc4:	f7f3 ff76 	bl	8000ab4 <__aeabi_d2iz>
 800cbc8:	f7f3 fc70 	bl	80004ac <__aeabi_i2d>
 800cbcc:	4602      	mov	r2, r0
 800cbce:	460b      	mov	r3, r1
 800cbd0:	4630      	mov	r0, r6
 800cbd2:	4639      	mov	r1, r7
 800cbd4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cbd8:	f7f3 fb1a 	bl	8000210 <__aeabi_dsub>
 800cbdc:	2200      	movs	r2, #0
 800cbde:	4b1f      	ldr	r3, [pc, #124]	; (800cc5c <__ieee754_rem_pio2+0x3dc>)
 800cbe0:	f7f3 fcce 	bl	8000580 <__aeabi_dmul>
 800cbe4:	460f      	mov	r7, r1
 800cbe6:	4606      	mov	r6, r0
 800cbe8:	f7f3 ff64 	bl	8000ab4 <__aeabi_d2iz>
 800cbec:	f7f3 fc5e 	bl	80004ac <__aeabi_i2d>
 800cbf0:	4602      	mov	r2, r0
 800cbf2:	460b      	mov	r3, r1
 800cbf4:	4630      	mov	r0, r6
 800cbf6:	4639      	mov	r1, r7
 800cbf8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cbfc:	f7f3 fb08 	bl	8000210 <__aeabi_dsub>
 800cc00:	2200      	movs	r2, #0
 800cc02:	4b16      	ldr	r3, [pc, #88]	; (800cc5c <__ieee754_rem_pio2+0x3dc>)
 800cc04:	f7f3 fcbc 	bl	8000580 <__aeabi_dmul>
 800cc08:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800cc0c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800cc10:	f04f 0803 	mov.w	r8, #3
 800cc14:	2600      	movs	r6, #0
 800cc16:	2700      	movs	r7, #0
 800cc18:	4632      	mov	r2, r6
 800cc1a:	463b      	mov	r3, r7
 800cc1c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800cc20:	f108 3aff 	add.w	sl, r8, #4294967295
 800cc24:	f7f3 ff14 	bl	8000a50 <__aeabi_dcmpeq>
 800cc28:	b9b0      	cbnz	r0, 800cc58 <__ieee754_rem_pio2+0x3d8>
 800cc2a:	4b0d      	ldr	r3, [pc, #52]	; (800cc60 <__ieee754_rem_pio2+0x3e0>)
 800cc2c:	9301      	str	r3, [sp, #4]
 800cc2e:	2302      	movs	r3, #2
 800cc30:	9300      	str	r3, [sp, #0]
 800cc32:	462a      	mov	r2, r5
 800cc34:	4643      	mov	r3, r8
 800cc36:	4621      	mov	r1, r4
 800cc38:	a806      	add	r0, sp, #24
 800cc3a:	f000 f8dd 	bl	800cdf8 <__kernel_rem_pio2>
 800cc3e:	9b04      	ldr	r3, [sp, #16]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	4605      	mov	r5, r0
 800cc44:	f6bf ae58 	bge.w	800c8f8 <__ieee754_rem_pio2+0x78>
 800cc48:	6863      	ldr	r3, [r4, #4]
 800cc4a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cc4e:	6063      	str	r3, [r4, #4]
 800cc50:	68e3      	ldr	r3, [r4, #12]
 800cc52:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cc56:	e746      	b.n	800cae6 <__ieee754_rem_pio2+0x266>
 800cc58:	46d0      	mov	r8, sl
 800cc5a:	e7dd      	b.n	800cc18 <__ieee754_rem_pio2+0x398>
 800cc5c:	41700000 	.word	0x41700000
 800cc60:	0800f81c 	.word	0x0800f81c
 800cc64:	00000000 	.word	0x00000000

0800cc68 <__kernel_cos>:
 800cc68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc6c:	ec59 8b10 	vmov	r8, r9, d0
 800cc70:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800cc74:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800cc78:	ed2d 8b02 	vpush	{d8}
 800cc7c:	eeb0 8a41 	vmov.f32	s16, s2
 800cc80:	eef0 8a61 	vmov.f32	s17, s3
 800cc84:	da07      	bge.n	800cc96 <__kernel_cos+0x2e>
 800cc86:	ee10 0a10 	vmov	r0, s0
 800cc8a:	4649      	mov	r1, r9
 800cc8c:	f7f3 ff12 	bl	8000ab4 <__aeabi_d2iz>
 800cc90:	2800      	cmp	r0, #0
 800cc92:	f000 8089 	beq.w	800cda8 <__kernel_cos+0x140>
 800cc96:	4642      	mov	r2, r8
 800cc98:	464b      	mov	r3, r9
 800cc9a:	4640      	mov	r0, r8
 800cc9c:	4649      	mov	r1, r9
 800cc9e:	f7f3 fc6f 	bl	8000580 <__aeabi_dmul>
 800cca2:	2200      	movs	r2, #0
 800cca4:	4b4e      	ldr	r3, [pc, #312]	; (800cde0 <__kernel_cos+0x178>)
 800cca6:	4604      	mov	r4, r0
 800cca8:	460d      	mov	r5, r1
 800ccaa:	f7f3 fc69 	bl	8000580 <__aeabi_dmul>
 800ccae:	a340      	add	r3, pc, #256	; (adr r3, 800cdb0 <__kernel_cos+0x148>)
 800ccb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb4:	4682      	mov	sl, r0
 800ccb6:	468b      	mov	fp, r1
 800ccb8:	4620      	mov	r0, r4
 800ccba:	4629      	mov	r1, r5
 800ccbc:	f7f3 fc60 	bl	8000580 <__aeabi_dmul>
 800ccc0:	a33d      	add	r3, pc, #244	; (adr r3, 800cdb8 <__kernel_cos+0x150>)
 800ccc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccc6:	f7f3 faa5 	bl	8000214 <__adddf3>
 800ccca:	4622      	mov	r2, r4
 800cccc:	462b      	mov	r3, r5
 800ccce:	f7f3 fc57 	bl	8000580 <__aeabi_dmul>
 800ccd2:	a33b      	add	r3, pc, #236	; (adr r3, 800cdc0 <__kernel_cos+0x158>)
 800ccd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccd8:	f7f3 fa9a 	bl	8000210 <__aeabi_dsub>
 800ccdc:	4622      	mov	r2, r4
 800ccde:	462b      	mov	r3, r5
 800cce0:	f7f3 fc4e 	bl	8000580 <__aeabi_dmul>
 800cce4:	a338      	add	r3, pc, #224	; (adr r3, 800cdc8 <__kernel_cos+0x160>)
 800cce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccea:	f7f3 fa93 	bl	8000214 <__adddf3>
 800ccee:	4622      	mov	r2, r4
 800ccf0:	462b      	mov	r3, r5
 800ccf2:	f7f3 fc45 	bl	8000580 <__aeabi_dmul>
 800ccf6:	a336      	add	r3, pc, #216	; (adr r3, 800cdd0 <__kernel_cos+0x168>)
 800ccf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccfc:	f7f3 fa88 	bl	8000210 <__aeabi_dsub>
 800cd00:	4622      	mov	r2, r4
 800cd02:	462b      	mov	r3, r5
 800cd04:	f7f3 fc3c 	bl	8000580 <__aeabi_dmul>
 800cd08:	a333      	add	r3, pc, #204	; (adr r3, 800cdd8 <__kernel_cos+0x170>)
 800cd0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd0e:	f7f3 fa81 	bl	8000214 <__adddf3>
 800cd12:	4622      	mov	r2, r4
 800cd14:	462b      	mov	r3, r5
 800cd16:	f7f3 fc33 	bl	8000580 <__aeabi_dmul>
 800cd1a:	4622      	mov	r2, r4
 800cd1c:	462b      	mov	r3, r5
 800cd1e:	f7f3 fc2f 	bl	8000580 <__aeabi_dmul>
 800cd22:	ec53 2b18 	vmov	r2, r3, d8
 800cd26:	4604      	mov	r4, r0
 800cd28:	460d      	mov	r5, r1
 800cd2a:	4640      	mov	r0, r8
 800cd2c:	4649      	mov	r1, r9
 800cd2e:	f7f3 fc27 	bl	8000580 <__aeabi_dmul>
 800cd32:	460b      	mov	r3, r1
 800cd34:	4602      	mov	r2, r0
 800cd36:	4629      	mov	r1, r5
 800cd38:	4620      	mov	r0, r4
 800cd3a:	f7f3 fa69 	bl	8000210 <__aeabi_dsub>
 800cd3e:	4b29      	ldr	r3, [pc, #164]	; (800cde4 <__kernel_cos+0x17c>)
 800cd40:	429e      	cmp	r6, r3
 800cd42:	4680      	mov	r8, r0
 800cd44:	4689      	mov	r9, r1
 800cd46:	dc11      	bgt.n	800cd6c <__kernel_cos+0x104>
 800cd48:	4602      	mov	r2, r0
 800cd4a:	460b      	mov	r3, r1
 800cd4c:	4650      	mov	r0, sl
 800cd4e:	4659      	mov	r1, fp
 800cd50:	f7f3 fa5e 	bl	8000210 <__aeabi_dsub>
 800cd54:	460b      	mov	r3, r1
 800cd56:	4924      	ldr	r1, [pc, #144]	; (800cde8 <__kernel_cos+0x180>)
 800cd58:	4602      	mov	r2, r0
 800cd5a:	2000      	movs	r0, #0
 800cd5c:	f7f3 fa58 	bl	8000210 <__aeabi_dsub>
 800cd60:	ecbd 8b02 	vpop	{d8}
 800cd64:	ec41 0b10 	vmov	d0, r0, r1
 800cd68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd6c:	4b1f      	ldr	r3, [pc, #124]	; (800cdec <__kernel_cos+0x184>)
 800cd6e:	491e      	ldr	r1, [pc, #120]	; (800cde8 <__kernel_cos+0x180>)
 800cd70:	429e      	cmp	r6, r3
 800cd72:	bfcc      	ite	gt
 800cd74:	4d1e      	ldrgt	r5, [pc, #120]	; (800cdf0 <__kernel_cos+0x188>)
 800cd76:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800cd7a:	2400      	movs	r4, #0
 800cd7c:	4622      	mov	r2, r4
 800cd7e:	462b      	mov	r3, r5
 800cd80:	2000      	movs	r0, #0
 800cd82:	f7f3 fa45 	bl	8000210 <__aeabi_dsub>
 800cd86:	4622      	mov	r2, r4
 800cd88:	4606      	mov	r6, r0
 800cd8a:	460f      	mov	r7, r1
 800cd8c:	462b      	mov	r3, r5
 800cd8e:	4650      	mov	r0, sl
 800cd90:	4659      	mov	r1, fp
 800cd92:	f7f3 fa3d 	bl	8000210 <__aeabi_dsub>
 800cd96:	4642      	mov	r2, r8
 800cd98:	464b      	mov	r3, r9
 800cd9a:	f7f3 fa39 	bl	8000210 <__aeabi_dsub>
 800cd9e:	4602      	mov	r2, r0
 800cda0:	460b      	mov	r3, r1
 800cda2:	4630      	mov	r0, r6
 800cda4:	4639      	mov	r1, r7
 800cda6:	e7d9      	b.n	800cd5c <__kernel_cos+0xf4>
 800cda8:	2000      	movs	r0, #0
 800cdaa:	490f      	ldr	r1, [pc, #60]	; (800cde8 <__kernel_cos+0x180>)
 800cdac:	e7d8      	b.n	800cd60 <__kernel_cos+0xf8>
 800cdae:	bf00      	nop
 800cdb0:	be8838d4 	.word	0xbe8838d4
 800cdb4:	bda8fae9 	.word	0xbda8fae9
 800cdb8:	bdb4b1c4 	.word	0xbdb4b1c4
 800cdbc:	3e21ee9e 	.word	0x3e21ee9e
 800cdc0:	809c52ad 	.word	0x809c52ad
 800cdc4:	3e927e4f 	.word	0x3e927e4f
 800cdc8:	19cb1590 	.word	0x19cb1590
 800cdcc:	3efa01a0 	.word	0x3efa01a0
 800cdd0:	16c15177 	.word	0x16c15177
 800cdd4:	3f56c16c 	.word	0x3f56c16c
 800cdd8:	5555554c 	.word	0x5555554c
 800cddc:	3fa55555 	.word	0x3fa55555
 800cde0:	3fe00000 	.word	0x3fe00000
 800cde4:	3fd33332 	.word	0x3fd33332
 800cde8:	3ff00000 	.word	0x3ff00000
 800cdec:	3fe90000 	.word	0x3fe90000
 800cdf0:	3fd20000 	.word	0x3fd20000
 800cdf4:	00000000 	.word	0x00000000

0800cdf8 <__kernel_rem_pio2>:
 800cdf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdfc:	ed2d 8b02 	vpush	{d8}
 800ce00:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800ce04:	1ed4      	subs	r4, r2, #3
 800ce06:	9308      	str	r3, [sp, #32]
 800ce08:	9101      	str	r1, [sp, #4]
 800ce0a:	4bc5      	ldr	r3, [pc, #788]	; (800d120 <__kernel_rem_pio2+0x328>)
 800ce0c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800ce0e:	9009      	str	r0, [sp, #36]	; 0x24
 800ce10:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ce14:	9304      	str	r3, [sp, #16]
 800ce16:	9b08      	ldr	r3, [sp, #32]
 800ce18:	3b01      	subs	r3, #1
 800ce1a:	9307      	str	r3, [sp, #28]
 800ce1c:	2318      	movs	r3, #24
 800ce1e:	fb94 f4f3 	sdiv	r4, r4, r3
 800ce22:	f06f 0317 	mvn.w	r3, #23
 800ce26:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800ce2a:	fb04 3303 	mla	r3, r4, r3, r3
 800ce2e:	eb03 0a02 	add.w	sl, r3, r2
 800ce32:	9b04      	ldr	r3, [sp, #16]
 800ce34:	9a07      	ldr	r2, [sp, #28]
 800ce36:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800d110 <__kernel_rem_pio2+0x318>
 800ce3a:	eb03 0802 	add.w	r8, r3, r2
 800ce3e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800ce40:	1aa7      	subs	r7, r4, r2
 800ce42:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ce46:	ae22      	add	r6, sp, #136	; 0x88
 800ce48:	2500      	movs	r5, #0
 800ce4a:	4545      	cmp	r5, r8
 800ce4c:	dd13      	ble.n	800ce76 <__kernel_rem_pio2+0x7e>
 800ce4e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800d110 <__kernel_rem_pio2+0x318>
 800ce52:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800ce56:	2600      	movs	r6, #0
 800ce58:	9b04      	ldr	r3, [sp, #16]
 800ce5a:	429e      	cmp	r6, r3
 800ce5c:	dc32      	bgt.n	800cec4 <__kernel_rem_pio2+0xcc>
 800ce5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce60:	9302      	str	r3, [sp, #8]
 800ce62:	9b08      	ldr	r3, [sp, #32]
 800ce64:	199d      	adds	r5, r3, r6
 800ce66:	ab22      	add	r3, sp, #136	; 0x88
 800ce68:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ce6c:	9306      	str	r3, [sp, #24]
 800ce6e:	ec59 8b18 	vmov	r8, r9, d8
 800ce72:	2700      	movs	r7, #0
 800ce74:	e01f      	b.n	800ceb6 <__kernel_rem_pio2+0xbe>
 800ce76:	42ef      	cmn	r7, r5
 800ce78:	d407      	bmi.n	800ce8a <__kernel_rem_pio2+0x92>
 800ce7a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ce7e:	f7f3 fb15 	bl	80004ac <__aeabi_i2d>
 800ce82:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ce86:	3501      	adds	r5, #1
 800ce88:	e7df      	b.n	800ce4a <__kernel_rem_pio2+0x52>
 800ce8a:	ec51 0b18 	vmov	r0, r1, d8
 800ce8e:	e7f8      	b.n	800ce82 <__kernel_rem_pio2+0x8a>
 800ce90:	9906      	ldr	r1, [sp, #24]
 800ce92:	9d02      	ldr	r5, [sp, #8]
 800ce94:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800ce98:	9106      	str	r1, [sp, #24]
 800ce9a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800ce9e:	9502      	str	r5, [sp, #8]
 800cea0:	f7f3 fb6e 	bl	8000580 <__aeabi_dmul>
 800cea4:	4602      	mov	r2, r0
 800cea6:	460b      	mov	r3, r1
 800cea8:	4640      	mov	r0, r8
 800ceaa:	4649      	mov	r1, r9
 800ceac:	f7f3 f9b2 	bl	8000214 <__adddf3>
 800ceb0:	3701      	adds	r7, #1
 800ceb2:	4680      	mov	r8, r0
 800ceb4:	4689      	mov	r9, r1
 800ceb6:	9b07      	ldr	r3, [sp, #28]
 800ceb8:	429f      	cmp	r7, r3
 800ceba:	dde9      	ble.n	800ce90 <__kernel_rem_pio2+0x98>
 800cebc:	e8eb 8902 	strd	r8, r9, [fp], #8
 800cec0:	3601      	adds	r6, #1
 800cec2:	e7c9      	b.n	800ce58 <__kernel_rem_pio2+0x60>
 800cec4:	9b04      	ldr	r3, [sp, #16]
 800cec6:	aa0e      	add	r2, sp, #56	; 0x38
 800cec8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cecc:	930c      	str	r3, [sp, #48]	; 0x30
 800cece:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800ced0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ced4:	9c04      	ldr	r4, [sp, #16]
 800ced6:	930b      	str	r3, [sp, #44]	; 0x2c
 800ced8:	ab9a      	add	r3, sp, #616	; 0x268
 800ceda:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800cede:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cee2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cee6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800ceea:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800ceee:	ab9a      	add	r3, sp, #616	; 0x268
 800cef0:	445b      	add	r3, fp
 800cef2:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800cef6:	2500      	movs	r5, #0
 800cef8:	1b63      	subs	r3, r4, r5
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	dc78      	bgt.n	800cff0 <__kernel_rem_pio2+0x1f8>
 800cefe:	4650      	mov	r0, sl
 800cf00:	ec49 8b10 	vmov	d0, r8, r9
 800cf04:	f000 fc00 	bl	800d708 <scalbn>
 800cf08:	ec57 6b10 	vmov	r6, r7, d0
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800cf12:	ee10 0a10 	vmov	r0, s0
 800cf16:	4639      	mov	r1, r7
 800cf18:	f7f3 fb32 	bl	8000580 <__aeabi_dmul>
 800cf1c:	ec41 0b10 	vmov	d0, r0, r1
 800cf20:	f000 fb6e 	bl	800d600 <floor>
 800cf24:	2200      	movs	r2, #0
 800cf26:	ec51 0b10 	vmov	r0, r1, d0
 800cf2a:	4b7e      	ldr	r3, [pc, #504]	; (800d124 <__kernel_rem_pio2+0x32c>)
 800cf2c:	f7f3 fb28 	bl	8000580 <__aeabi_dmul>
 800cf30:	4602      	mov	r2, r0
 800cf32:	460b      	mov	r3, r1
 800cf34:	4630      	mov	r0, r6
 800cf36:	4639      	mov	r1, r7
 800cf38:	f7f3 f96a 	bl	8000210 <__aeabi_dsub>
 800cf3c:	460f      	mov	r7, r1
 800cf3e:	4606      	mov	r6, r0
 800cf40:	f7f3 fdb8 	bl	8000ab4 <__aeabi_d2iz>
 800cf44:	9006      	str	r0, [sp, #24]
 800cf46:	f7f3 fab1 	bl	80004ac <__aeabi_i2d>
 800cf4a:	4602      	mov	r2, r0
 800cf4c:	460b      	mov	r3, r1
 800cf4e:	4630      	mov	r0, r6
 800cf50:	4639      	mov	r1, r7
 800cf52:	f7f3 f95d 	bl	8000210 <__aeabi_dsub>
 800cf56:	f1ba 0f00 	cmp.w	sl, #0
 800cf5a:	4606      	mov	r6, r0
 800cf5c:	460f      	mov	r7, r1
 800cf5e:	dd6c      	ble.n	800d03a <__kernel_rem_pio2+0x242>
 800cf60:	1e62      	subs	r2, r4, #1
 800cf62:	ab0e      	add	r3, sp, #56	; 0x38
 800cf64:	f1ca 0118 	rsb	r1, sl, #24
 800cf68:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800cf6c:	9d06      	ldr	r5, [sp, #24]
 800cf6e:	fa40 f301 	asr.w	r3, r0, r1
 800cf72:	441d      	add	r5, r3
 800cf74:	408b      	lsls	r3, r1
 800cf76:	1ac0      	subs	r0, r0, r3
 800cf78:	ab0e      	add	r3, sp, #56	; 0x38
 800cf7a:	9506      	str	r5, [sp, #24]
 800cf7c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800cf80:	f1ca 0317 	rsb	r3, sl, #23
 800cf84:	fa40 f303 	asr.w	r3, r0, r3
 800cf88:	9302      	str	r3, [sp, #8]
 800cf8a:	9b02      	ldr	r3, [sp, #8]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	dd62      	ble.n	800d056 <__kernel_rem_pio2+0x25e>
 800cf90:	9b06      	ldr	r3, [sp, #24]
 800cf92:	2200      	movs	r2, #0
 800cf94:	3301      	adds	r3, #1
 800cf96:	9306      	str	r3, [sp, #24]
 800cf98:	4615      	mov	r5, r2
 800cf9a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800cf9e:	4294      	cmp	r4, r2
 800cfa0:	f300 8095 	bgt.w	800d0ce <__kernel_rem_pio2+0x2d6>
 800cfa4:	f1ba 0f00 	cmp.w	sl, #0
 800cfa8:	dd07      	ble.n	800cfba <__kernel_rem_pio2+0x1c2>
 800cfaa:	f1ba 0f01 	cmp.w	sl, #1
 800cfae:	f000 80a2 	beq.w	800d0f6 <__kernel_rem_pio2+0x2fe>
 800cfb2:	f1ba 0f02 	cmp.w	sl, #2
 800cfb6:	f000 80c1 	beq.w	800d13c <__kernel_rem_pio2+0x344>
 800cfba:	9b02      	ldr	r3, [sp, #8]
 800cfbc:	2b02      	cmp	r3, #2
 800cfbe:	d14a      	bne.n	800d056 <__kernel_rem_pio2+0x25e>
 800cfc0:	4632      	mov	r2, r6
 800cfc2:	463b      	mov	r3, r7
 800cfc4:	2000      	movs	r0, #0
 800cfc6:	4958      	ldr	r1, [pc, #352]	; (800d128 <__kernel_rem_pio2+0x330>)
 800cfc8:	f7f3 f922 	bl	8000210 <__aeabi_dsub>
 800cfcc:	4606      	mov	r6, r0
 800cfce:	460f      	mov	r7, r1
 800cfd0:	2d00      	cmp	r5, #0
 800cfd2:	d040      	beq.n	800d056 <__kernel_rem_pio2+0x25e>
 800cfd4:	4650      	mov	r0, sl
 800cfd6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800d118 <__kernel_rem_pio2+0x320>
 800cfda:	f000 fb95 	bl	800d708 <scalbn>
 800cfde:	4630      	mov	r0, r6
 800cfe0:	4639      	mov	r1, r7
 800cfe2:	ec53 2b10 	vmov	r2, r3, d0
 800cfe6:	f7f3 f913 	bl	8000210 <__aeabi_dsub>
 800cfea:	4606      	mov	r6, r0
 800cfec:	460f      	mov	r7, r1
 800cfee:	e032      	b.n	800d056 <__kernel_rem_pio2+0x25e>
 800cff0:	2200      	movs	r2, #0
 800cff2:	4b4e      	ldr	r3, [pc, #312]	; (800d12c <__kernel_rem_pio2+0x334>)
 800cff4:	4640      	mov	r0, r8
 800cff6:	4649      	mov	r1, r9
 800cff8:	f7f3 fac2 	bl	8000580 <__aeabi_dmul>
 800cffc:	f7f3 fd5a 	bl	8000ab4 <__aeabi_d2iz>
 800d000:	f7f3 fa54 	bl	80004ac <__aeabi_i2d>
 800d004:	2200      	movs	r2, #0
 800d006:	4b4a      	ldr	r3, [pc, #296]	; (800d130 <__kernel_rem_pio2+0x338>)
 800d008:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d00c:	f7f3 fab8 	bl	8000580 <__aeabi_dmul>
 800d010:	4602      	mov	r2, r0
 800d012:	460b      	mov	r3, r1
 800d014:	4640      	mov	r0, r8
 800d016:	4649      	mov	r1, r9
 800d018:	f7f3 f8fa 	bl	8000210 <__aeabi_dsub>
 800d01c:	f7f3 fd4a 	bl	8000ab4 <__aeabi_d2iz>
 800d020:	ab0e      	add	r3, sp, #56	; 0x38
 800d022:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800d026:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800d02a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d02e:	f7f3 f8f1 	bl	8000214 <__adddf3>
 800d032:	3501      	adds	r5, #1
 800d034:	4680      	mov	r8, r0
 800d036:	4689      	mov	r9, r1
 800d038:	e75e      	b.n	800cef8 <__kernel_rem_pio2+0x100>
 800d03a:	d105      	bne.n	800d048 <__kernel_rem_pio2+0x250>
 800d03c:	1e63      	subs	r3, r4, #1
 800d03e:	aa0e      	add	r2, sp, #56	; 0x38
 800d040:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d044:	15c3      	asrs	r3, r0, #23
 800d046:	e79f      	b.n	800cf88 <__kernel_rem_pio2+0x190>
 800d048:	2200      	movs	r2, #0
 800d04a:	4b3a      	ldr	r3, [pc, #232]	; (800d134 <__kernel_rem_pio2+0x33c>)
 800d04c:	f7f3 fd1e 	bl	8000a8c <__aeabi_dcmpge>
 800d050:	2800      	cmp	r0, #0
 800d052:	d139      	bne.n	800d0c8 <__kernel_rem_pio2+0x2d0>
 800d054:	9002      	str	r0, [sp, #8]
 800d056:	2200      	movs	r2, #0
 800d058:	2300      	movs	r3, #0
 800d05a:	4630      	mov	r0, r6
 800d05c:	4639      	mov	r1, r7
 800d05e:	f7f3 fcf7 	bl	8000a50 <__aeabi_dcmpeq>
 800d062:	2800      	cmp	r0, #0
 800d064:	f000 80c7 	beq.w	800d1f6 <__kernel_rem_pio2+0x3fe>
 800d068:	1e65      	subs	r5, r4, #1
 800d06a:	462b      	mov	r3, r5
 800d06c:	2200      	movs	r2, #0
 800d06e:	9904      	ldr	r1, [sp, #16]
 800d070:	428b      	cmp	r3, r1
 800d072:	da6a      	bge.n	800d14a <__kernel_rem_pio2+0x352>
 800d074:	2a00      	cmp	r2, #0
 800d076:	f000 8088 	beq.w	800d18a <__kernel_rem_pio2+0x392>
 800d07a:	ab0e      	add	r3, sp, #56	; 0x38
 800d07c:	f1aa 0a18 	sub.w	sl, sl, #24
 800d080:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800d084:	2b00      	cmp	r3, #0
 800d086:	f000 80b4 	beq.w	800d1f2 <__kernel_rem_pio2+0x3fa>
 800d08a:	4650      	mov	r0, sl
 800d08c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800d118 <__kernel_rem_pio2+0x320>
 800d090:	f000 fb3a 	bl	800d708 <scalbn>
 800d094:	00ec      	lsls	r4, r5, #3
 800d096:	ab72      	add	r3, sp, #456	; 0x1c8
 800d098:	191e      	adds	r6, r3, r4
 800d09a:	ec59 8b10 	vmov	r8, r9, d0
 800d09e:	f106 0a08 	add.w	sl, r6, #8
 800d0a2:	462f      	mov	r7, r5
 800d0a4:	2f00      	cmp	r7, #0
 800d0a6:	f280 80df 	bge.w	800d268 <__kernel_rem_pio2+0x470>
 800d0aa:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800d110 <__kernel_rem_pio2+0x318>
 800d0ae:	f04f 0a00 	mov.w	sl, #0
 800d0b2:	eba5 030a 	sub.w	r3, r5, sl
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	f2c0 810a 	blt.w	800d2d0 <__kernel_rem_pio2+0x4d8>
 800d0bc:	f8df b078 	ldr.w	fp, [pc, #120]	; 800d138 <__kernel_rem_pio2+0x340>
 800d0c0:	ec59 8b18 	vmov	r8, r9, d8
 800d0c4:	2700      	movs	r7, #0
 800d0c6:	e0f5      	b.n	800d2b4 <__kernel_rem_pio2+0x4bc>
 800d0c8:	2302      	movs	r3, #2
 800d0ca:	9302      	str	r3, [sp, #8]
 800d0cc:	e760      	b.n	800cf90 <__kernel_rem_pio2+0x198>
 800d0ce:	ab0e      	add	r3, sp, #56	; 0x38
 800d0d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0d4:	b94d      	cbnz	r5, 800d0ea <__kernel_rem_pio2+0x2f2>
 800d0d6:	b12b      	cbz	r3, 800d0e4 <__kernel_rem_pio2+0x2ec>
 800d0d8:	a80e      	add	r0, sp, #56	; 0x38
 800d0da:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d0de:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	3201      	adds	r2, #1
 800d0e6:	461d      	mov	r5, r3
 800d0e8:	e759      	b.n	800cf9e <__kernel_rem_pio2+0x1a6>
 800d0ea:	a80e      	add	r0, sp, #56	; 0x38
 800d0ec:	1acb      	subs	r3, r1, r3
 800d0ee:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800d0f2:	462b      	mov	r3, r5
 800d0f4:	e7f6      	b.n	800d0e4 <__kernel_rem_pio2+0x2ec>
 800d0f6:	1e62      	subs	r2, r4, #1
 800d0f8:	ab0e      	add	r3, sp, #56	; 0x38
 800d0fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0fe:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d102:	a90e      	add	r1, sp, #56	; 0x38
 800d104:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d108:	e757      	b.n	800cfba <__kernel_rem_pio2+0x1c2>
 800d10a:	bf00      	nop
 800d10c:	f3af 8000 	nop.w
	...
 800d11c:	3ff00000 	.word	0x3ff00000
 800d120:	0800f968 	.word	0x0800f968
 800d124:	40200000 	.word	0x40200000
 800d128:	3ff00000 	.word	0x3ff00000
 800d12c:	3e700000 	.word	0x3e700000
 800d130:	41700000 	.word	0x41700000
 800d134:	3fe00000 	.word	0x3fe00000
 800d138:	0800f928 	.word	0x0800f928
 800d13c:	1e62      	subs	r2, r4, #1
 800d13e:	ab0e      	add	r3, sp, #56	; 0x38
 800d140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d144:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d148:	e7db      	b.n	800d102 <__kernel_rem_pio2+0x30a>
 800d14a:	a90e      	add	r1, sp, #56	; 0x38
 800d14c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d150:	3b01      	subs	r3, #1
 800d152:	430a      	orrs	r2, r1
 800d154:	e78b      	b.n	800d06e <__kernel_rem_pio2+0x276>
 800d156:	3301      	adds	r3, #1
 800d158:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800d15c:	2900      	cmp	r1, #0
 800d15e:	d0fa      	beq.n	800d156 <__kernel_rem_pio2+0x35e>
 800d160:	9a08      	ldr	r2, [sp, #32]
 800d162:	4422      	add	r2, r4
 800d164:	00d2      	lsls	r2, r2, #3
 800d166:	a922      	add	r1, sp, #136	; 0x88
 800d168:	18e3      	adds	r3, r4, r3
 800d16a:	9206      	str	r2, [sp, #24]
 800d16c:	440a      	add	r2, r1
 800d16e:	9302      	str	r3, [sp, #8]
 800d170:	f10b 0108 	add.w	r1, fp, #8
 800d174:	f102 0308 	add.w	r3, r2, #8
 800d178:	1c66      	adds	r6, r4, #1
 800d17a:	910a      	str	r1, [sp, #40]	; 0x28
 800d17c:	2500      	movs	r5, #0
 800d17e:	930d      	str	r3, [sp, #52]	; 0x34
 800d180:	9b02      	ldr	r3, [sp, #8]
 800d182:	42b3      	cmp	r3, r6
 800d184:	da04      	bge.n	800d190 <__kernel_rem_pio2+0x398>
 800d186:	461c      	mov	r4, r3
 800d188:	e6a6      	b.n	800ced8 <__kernel_rem_pio2+0xe0>
 800d18a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d18c:	2301      	movs	r3, #1
 800d18e:	e7e3      	b.n	800d158 <__kernel_rem_pio2+0x360>
 800d190:	9b06      	ldr	r3, [sp, #24]
 800d192:	18ef      	adds	r7, r5, r3
 800d194:	ab22      	add	r3, sp, #136	; 0x88
 800d196:	441f      	add	r7, r3
 800d198:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d19a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d19e:	f7f3 f985 	bl	80004ac <__aeabi_i2d>
 800d1a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1a4:	461c      	mov	r4, r3
 800d1a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d1a8:	e9c7 0100 	strd	r0, r1, [r7]
 800d1ac:	eb03 0b05 	add.w	fp, r3, r5
 800d1b0:	2700      	movs	r7, #0
 800d1b2:	f04f 0800 	mov.w	r8, #0
 800d1b6:	f04f 0900 	mov.w	r9, #0
 800d1ba:	9b07      	ldr	r3, [sp, #28]
 800d1bc:	429f      	cmp	r7, r3
 800d1be:	dd08      	ble.n	800d1d2 <__kernel_rem_pio2+0x3da>
 800d1c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1c2:	aa72      	add	r2, sp, #456	; 0x1c8
 800d1c4:	18eb      	adds	r3, r5, r3
 800d1c6:	4413      	add	r3, r2
 800d1c8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800d1cc:	3601      	adds	r6, #1
 800d1ce:	3508      	adds	r5, #8
 800d1d0:	e7d6      	b.n	800d180 <__kernel_rem_pio2+0x388>
 800d1d2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800d1d6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800d1da:	f7f3 f9d1 	bl	8000580 <__aeabi_dmul>
 800d1de:	4602      	mov	r2, r0
 800d1e0:	460b      	mov	r3, r1
 800d1e2:	4640      	mov	r0, r8
 800d1e4:	4649      	mov	r1, r9
 800d1e6:	f7f3 f815 	bl	8000214 <__adddf3>
 800d1ea:	3701      	adds	r7, #1
 800d1ec:	4680      	mov	r8, r0
 800d1ee:	4689      	mov	r9, r1
 800d1f0:	e7e3      	b.n	800d1ba <__kernel_rem_pio2+0x3c2>
 800d1f2:	3d01      	subs	r5, #1
 800d1f4:	e741      	b.n	800d07a <__kernel_rem_pio2+0x282>
 800d1f6:	f1ca 0000 	rsb	r0, sl, #0
 800d1fa:	ec47 6b10 	vmov	d0, r6, r7
 800d1fe:	f000 fa83 	bl	800d708 <scalbn>
 800d202:	ec57 6b10 	vmov	r6, r7, d0
 800d206:	2200      	movs	r2, #0
 800d208:	4b99      	ldr	r3, [pc, #612]	; (800d470 <__kernel_rem_pio2+0x678>)
 800d20a:	ee10 0a10 	vmov	r0, s0
 800d20e:	4639      	mov	r1, r7
 800d210:	f7f3 fc3c 	bl	8000a8c <__aeabi_dcmpge>
 800d214:	b1f8      	cbz	r0, 800d256 <__kernel_rem_pio2+0x45e>
 800d216:	2200      	movs	r2, #0
 800d218:	4b96      	ldr	r3, [pc, #600]	; (800d474 <__kernel_rem_pio2+0x67c>)
 800d21a:	4630      	mov	r0, r6
 800d21c:	4639      	mov	r1, r7
 800d21e:	f7f3 f9af 	bl	8000580 <__aeabi_dmul>
 800d222:	f7f3 fc47 	bl	8000ab4 <__aeabi_d2iz>
 800d226:	4680      	mov	r8, r0
 800d228:	f7f3 f940 	bl	80004ac <__aeabi_i2d>
 800d22c:	2200      	movs	r2, #0
 800d22e:	4b90      	ldr	r3, [pc, #576]	; (800d470 <__kernel_rem_pio2+0x678>)
 800d230:	f7f3 f9a6 	bl	8000580 <__aeabi_dmul>
 800d234:	460b      	mov	r3, r1
 800d236:	4602      	mov	r2, r0
 800d238:	4639      	mov	r1, r7
 800d23a:	4630      	mov	r0, r6
 800d23c:	f7f2 ffe8 	bl	8000210 <__aeabi_dsub>
 800d240:	f7f3 fc38 	bl	8000ab4 <__aeabi_d2iz>
 800d244:	1c65      	adds	r5, r4, #1
 800d246:	ab0e      	add	r3, sp, #56	; 0x38
 800d248:	f10a 0a18 	add.w	sl, sl, #24
 800d24c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d250:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800d254:	e719      	b.n	800d08a <__kernel_rem_pio2+0x292>
 800d256:	4630      	mov	r0, r6
 800d258:	4639      	mov	r1, r7
 800d25a:	f7f3 fc2b 	bl	8000ab4 <__aeabi_d2iz>
 800d25e:	ab0e      	add	r3, sp, #56	; 0x38
 800d260:	4625      	mov	r5, r4
 800d262:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d266:	e710      	b.n	800d08a <__kernel_rem_pio2+0x292>
 800d268:	ab0e      	add	r3, sp, #56	; 0x38
 800d26a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800d26e:	f7f3 f91d 	bl	80004ac <__aeabi_i2d>
 800d272:	4642      	mov	r2, r8
 800d274:	464b      	mov	r3, r9
 800d276:	f7f3 f983 	bl	8000580 <__aeabi_dmul>
 800d27a:	2200      	movs	r2, #0
 800d27c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800d280:	4b7c      	ldr	r3, [pc, #496]	; (800d474 <__kernel_rem_pio2+0x67c>)
 800d282:	4640      	mov	r0, r8
 800d284:	4649      	mov	r1, r9
 800d286:	f7f3 f97b 	bl	8000580 <__aeabi_dmul>
 800d28a:	3f01      	subs	r7, #1
 800d28c:	4680      	mov	r8, r0
 800d28e:	4689      	mov	r9, r1
 800d290:	e708      	b.n	800d0a4 <__kernel_rem_pio2+0x2ac>
 800d292:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800d296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d29a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800d29e:	f7f3 f96f 	bl	8000580 <__aeabi_dmul>
 800d2a2:	4602      	mov	r2, r0
 800d2a4:	460b      	mov	r3, r1
 800d2a6:	4640      	mov	r0, r8
 800d2a8:	4649      	mov	r1, r9
 800d2aa:	f7f2 ffb3 	bl	8000214 <__adddf3>
 800d2ae:	3701      	adds	r7, #1
 800d2b0:	4680      	mov	r8, r0
 800d2b2:	4689      	mov	r9, r1
 800d2b4:	9b04      	ldr	r3, [sp, #16]
 800d2b6:	429f      	cmp	r7, r3
 800d2b8:	dc01      	bgt.n	800d2be <__kernel_rem_pio2+0x4c6>
 800d2ba:	45ba      	cmp	sl, r7
 800d2bc:	dae9      	bge.n	800d292 <__kernel_rem_pio2+0x49a>
 800d2be:	ab4a      	add	r3, sp, #296	; 0x128
 800d2c0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d2c4:	e9c3 8900 	strd	r8, r9, [r3]
 800d2c8:	f10a 0a01 	add.w	sl, sl, #1
 800d2cc:	3e08      	subs	r6, #8
 800d2ce:	e6f0      	b.n	800d0b2 <__kernel_rem_pio2+0x2ba>
 800d2d0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800d2d2:	2b03      	cmp	r3, #3
 800d2d4:	d85b      	bhi.n	800d38e <__kernel_rem_pio2+0x596>
 800d2d6:	e8df f003 	tbb	[pc, r3]
 800d2da:	264a      	.short	0x264a
 800d2dc:	0226      	.short	0x0226
 800d2de:	ab9a      	add	r3, sp, #616	; 0x268
 800d2e0:	441c      	add	r4, r3
 800d2e2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800d2e6:	46a2      	mov	sl, r4
 800d2e8:	46ab      	mov	fp, r5
 800d2ea:	f1bb 0f00 	cmp.w	fp, #0
 800d2ee:	dc6c      	bgt.n	800d3ca <__kernel_rem_pio2+0x5d2>
 800d2f0:	46a2      	mov	sl, r4
 800d2f2:	46ab      	mov	fp, r5
 800d2f4:	f1bb 0f01 	cmp.w	fp, #1
 800d2f8:	f300 8086 	bgt.w	800d408 <__kernel_rem_pio2+0x610>
 800d2fc:	2000      	movs	r0, #0
 800d2fe:	2100      	movs	r1, #0
 800d300:	2d01      	cmp	r5, #1
 800d302:	f300 80a0 	bgt.w	800d446 <__kernel_rem_pio2+0x64e>
 800d306:	9b02      	ldr	r3, [sp, #8]
 800d308:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800d30c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800d310:	2b00      	cmp	r3, #0
 800d312:	f040 809e 	bne.w	800d452 <__kernel_rem_pio2+0x65a>
 800d316:	9b01      	ldr	r3, [sp, #4]
 800d318:	e9c3 7800 	strd	r7, r8, [r3]
 800d31c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800d320:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800d324:	e033      	b.n	800d38e <__kernel_rem_pio2+0x596>
 800d326:	3408      	adds	r4, #8
 800d328:	ab4a      	add	r3, sp, #296	; 0x128
 800d32a:	441c      	add	r4, r3
 800d32c:	462e      	mov	r6, r5
 800d32e:	2000      	movs	r0, #0
 800d330:	2100      	movs	r1, #0
 800d332:	2e00      	cmp	r6, #0
 800d334:	da3a      	bge.n	800d3ac <__kernel_rem_pio2+0x5b4>
 800d336:	9b02      	ldr	r3, [sp, #8]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d03d      	beq.n	800d3b8 <__kernel_rem_pio2+0x5c0>
 800d33c:	4602      	mov	r2, r0
 800d33e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d342:	9c01      	ldr	r4, [sp, #4]
 800d344:	e9c4 2300 	strd	r2, r3, [r4]
 800d348:	4602      	mov	r2, r0
 800d34a:	460b      	mov	r3, r1
 800d34c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800d350:	f7f2 ff5e 	bl	8000210 <__aeabi_dsub>
 800d354:	ae4c      	add	r6, sp, #304	; 0x130
 800d356:	2401      	movs	r4, #1
 800d358:	42a5      	cmp	r5, r4
 800d35a:	da30      	bge.n	800d3be <__kernel_rem_pio2+0x5c6>
 800d35c:	9b02      	ldr	r3, [sp, #8]
 800d35e:	b113      	cbz	r3, 800d366 <__kernel_rem_pio2+0x56e>
 800d360:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d364:	4619      	mov	r1, r3
 800d366:	9b01      	ldr	r3, [sp, #4]
 800d368:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d36c:	e00f      	b.n	800d38e <__kernel_rem_pio2+0x596>
 800d36e:	ab9a      	add	r3, sp, #616	; 0x268
 800d370:	441c      	add	r4, r3
 800d372:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800d376:	2000      	movs	r0, #0
 800d378:	2100      	movs	r1, #0
 800d37a:	2d00      	cmp	r5, #0
 800d37c:	da10      	bge.n	800d3a0 <__kernel_rem_pio2+0x5a8>
 800d37e:	9b02      	ldr	r3, [sp, #8]
 800d380:	b113      	cbz	r3, 800d388 <__kernel_rem_pio2+0x590>
 800d382:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d386:	4619      	mov	r1, r3
 800d388:	9b01      	ldr	r3, [sp, #4]
 800d38a:	e9c3 0100 	strd	r0, r1, [r3]
 800d38e:	9b06      	ldr	r3, [sp, #24]
 800d390:	f003 0007 	and.w	r0, r3, #7
 800d394:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800d398:	ecbd 8b02 	vpop	{d8}
 800d39c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3a0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d3a4:	f7f2 ff36 	bl	8000214 <__adddf3>
 800d3a8:	3d01      	subs	r5, #1
 800d3aa:	e7e6      	b.n	800d37a <__kernel_rem_pio2+0x582>
 800d3ac:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d3b0:	f7f2 ff30 	bl	8000214 <__adddf3>
 800d3b4:	3e01      	subs	r6, #1
 800d3b6:	e7bc      	b.n	800d332 <__kernel_rem_pio2+0x53a>
 800d3b8:	4602      	mov	r2, r0
 800d3ba:	460b      	mov	r3, r1
 800d3bc:	e7c1      	b.n	800d342 <__kernel_rem_pio2+0x54a>
 800d3be:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800d3c2:	f7f2 ff27 	bl	8000214 <__adddf3>
 800d3c6:	3401      	adds	r4, #1
 800d3c8:	e7c6      	b.n	800d358 <__kernel_rem_pio2+0x560>
 800d3ca:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800d3ce:	ed3a 7b02 	vldmdb	sl!, {d7}
 800d3d2:	4640      	mov	r0, r8
 800d3d4:	ec53 2b17 	vmov	r2, r3, d7
 800d3d8:	4649      	mov	r1, r9
 800d3da:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d3de:	f7f2 ff19 	bl	8000214 <__adddf3>
 800d3e2:	4602      	mov	r2, r0
 800d3e4:	460b      	mov	r3, r1
 800d3e6:	4606      	mov	r6, r0
 800d3e8:	460f      	mov	r7, r1
 800d3ea:	4640      	mov	r0, r8
 800d3ec:	4649      	mov	r1, r9
 800d3ee:	f7f2 ff0f 	bl	8000210 <__aeabi_dsub>
 800d3f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d3f6:	f7f2 ff0d 	bl	8000214 <__adddf3>
 800d3fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d3fe:	e9ca 0100 	strd	r0, r1, [sl]
 800d402:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800d406:	e770      	b.n	800d2ea <__kernel_rem_pio2+0x4f2>
 800d408:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800d40c:	ed3a 7b02 	vldmdb	sl!, {d7}
 800d410:	4630      	mov	r0, r6
 800d412:	ec53 2b17 	vmov	r2, r3, d7
 800d416:	4639      	mov	r1, r7
 800d418:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d41c:	f7f2 fefa 	bl	8000214 <__adddf3>
 800d420:	4602      	mov	r2, r0
 800d422:	460b      	mov	r3, r1
 800d424:	4680      	mov	r8, r0
 800d426:	4689      	mov	r9, r1
 800d428:	4630      	mov	r0, r6
 800d42a:	4639      	mov	r1, r7
 800d42c:	f7f2 fef0 	bl	8000210 <__aeabi_dsub>
 800d430:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d434:	f7f2 feee 	bl	8000214 <__adddf3>
 800d438:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d43c:	e9ca 0100 	strd	r0, r1, [sl]
 800d440:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800d444:	e756      	b.n	800d2f4 <__kernel_rem_pio2+0x4fc>
 800d446:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d44a:	f7f2 fee3 	bl	8000214 <__adddf3>
 800d44e:	3d01      	subs	r5, #1
 800d450:	e756      	b.n	800d300 <__kernel_rem_pio2+0x508>
 800d452:	9b01      	ldr	r3, [sp, #4]
 800d454:	9a01      	ldr	r2, [sp, #4]
 800d456:	601f      	str	r7, [r3, #0]
 800d458:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800d45c:	605c      	str	r4, [r3, #4]
 800d45e:	609d      	str	r5, [r3, #8]
 800d460:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d464:	60d3      	str	r3, [r2, #12]
 800d466:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d46a:	6110      	str	r0, [r2, #16]
 800d46c:	6153      	str	r3, [r2, #20]
 800d46e:	e78e      	b.n	800d38e <__kernel_rem_pio2+0x596>
 800d470:	41700000 	.word	0x41700000
 800d474:	3e700000 	.word	0x3e700000

0800d478 <__kernel_sin>:
 800d478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d47c:	ec55 4b10 	vmov	r4, r5, d0
 800d480:	b085      	sub	sp, #20
 800d482:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d486:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800d48a:	ed8d 1b00 	vstr	d1, [sp]
 800d48e:	9002      	str	r0, [sp, #8]
 800d490:	da06      	bge.n	800d4a0 <__kernel_sin+0x28>
 800d492:	ee10 0a10 	vmov	r0, s0
 800d496:	4629      	mov	r1, r5
 800d498:	f7f3 fb0c 	bl	8000ab4 <__aeabi_d2iz>
 800d49c:	2800      	cmp	r0, #0
 800d49e:	d051      	beq.n	800d544 <__kernel_sin+0xcc>
 800d4a0:	4622      	mov	r2, r4
 800d4a2:	462b      	mov	r3, r5
 800d4a4:	4620      	mov	r0, r4
 800d4a6:	4629      	mov	r1, r5
 800d4a8:	f7f3 f86a 	bl	8000580 <__aeabi_dmul>
 800d4ac:	4682      	mov	sl, r0
 800d4ae:	468b      	mov	fp, r1
 800d4b0:	4602      	mov	r2, r0
 800d4b2:	460b      	mov	r3, r1
 800d4b4:	4620      	mov	r0, r4
 800d4b6:	4629      	mov	r1, r5
 800d4b8:	f7f3 f862 	bl	8000580 <__aeabi_dmul>
 800d4bc:	a341      	add	r3, pc, #260	; (adr r3, 800d5c4 <__kernel_sin+0x14c>)
 800d4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4c2:	4680      	mov	r8, r0
 800d4c4:	4689      	mov	r9, r1
 800d4c6:	4650      	mov	r0, sl
 800d4c8:	4659      	mov	r1, fp
 800d4ca:	f7f3 f859 	bl	8000580 <__aeabi_dmul>
 800d4ce:	a33f      	add	r3, pc, #252	; (adr r3, 800d5cc <__kernel_sin+0x154>)
 800d4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4d4:	f7f2 fe9c 	bl	8000210 <__aeabi_dsub>
 800d4d8:	4652      	mov	r2, sl
 800d4da:	465b      	mov	r3, fp
 800d4dc:	f7f3 f850 	bl	8000580 <__aeabi_dmul>
 800d4e0:	a33c      	add	r3, pc, #240	; (adr r3, 800d5d4 <__kernel_sin+0x15c>)
 800d4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4e6:	f7f2 fe95 	bl	8000214 <__adddf3>
 800d4ea:	4652      	mov	r2, sl
 800d4ec:	465b      	mov	r3, fp
 800d4ee:	f7f3 f847 	bl	8000580 <__aeabi_dmul>
 800d4f2:	a33a      	add	r3, pc, #232	; (adr r3, 800d5dc <__kernel_sin+0x164>)
 800d4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4f8:	f7f2 fe8a 	bl	8000210 <__aeabi_dsub>
 800d4fc:	4652      	mov	r2, sl
 800d4fe:	465b      	mov	r3, fp
 800d500:	f7f3 f83e 	bl	8000580 <__aeabi_dmul>
 800d504:	a337      	add	r3, pc, #220	; (adr r3, 800d5e4 <__kernel_sin+0x16c>)
 800d506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d50a:	f7f2 fe83 	bl	8000214 <__adddf3>
 800d50e:	9b02      	ldr	r3, [sp, #8]
 800d510:	4606      	mov	r6, r0
 800d512:	460f      	mov	r7, r1
 800d514:	b9db      	cbnz	r3, 800d54e <__kernel_sin+0xd6>
 800d516:	4602      	mov	r2, r0
 800d518:	460b      	mov	r3, r1
 800d51a:	4650      	mov	r0, sl
 800d51c:	4659      	mov	r1, fp
 800d51e:	f7f3 f82f 	bl	8000580 <__aeabi_dmul>
 800d522:	a325      	add	r3, pc, #148	; (adr r3, 800d5b8 <__kernel_sin+0x140>)
 800d524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d528:	f7f2 fe72 	bl	8000210 <__aeabi_dsub>
 800d52c:	4642      	mov	r2, r8
 800d52e:	464b      	mov	r3, r9
 800d530:	f7f3 f826 	bl	8000580 <__aeabi_dmul>
 800d534:	4602      	mov	r2, r0
 800d536:	460b      	mov	r3, r1
 800d538:	4620      	mov	r0, r4
 800d53a:	4629      	mov	r1, r5
 800d53c:	f7f2 fe6a 	bl	8000214 <__adddf3>
 800d540:	4604      	mov	r4, r0
 800d542:	460d      	mov	r5, r1
 800d544:	ec45 4b10 	vmov	d0, r4, r5
 800d548:	b005      	add	sp, #20
 800d54a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d54e:	2200      	movs	r2, #0
 800d550:	4b1b      	ldr	r3, [pc, #108]	; (800d5c0 <__kernel_sin+0x148>)
 800d552:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d556:	f7f3 f813 	bl	8000580 <__aeabi_dmul>
 800d55a:	4632      	mov	r2, r6
 800d55c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d560:	463b      	mov	r3, r7
 800d562:	4640      	mov	r0, r8
 800d564:	4649      	mov	r1, r9
 800d566:	f7f3 f80b 	bl	8000580 <__aeabi_dmul>
 800d56a:	4602      	mov	r2, r0
 800d56c:	460b      	mov	r3, r1
 800d56e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d572:	f7f2 fe4d 	bl	8000210 <__aeabi_dsub>
 800d576:	4652      	mov	r2, sl
 800d578:	465b      	mov	r3, fp
 800d57a:	f7f3 f801 	bl	8000580 <__aeabi_dmul>
 800d57e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d582:	f7f2 fe45 	bl	8000210 <__aeabi_dsub>
 800d586:	a30c      	add	r3, pc, #48	; (adr r3, 800d5b8 <__kernel_sin+0x140>)
 800d588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d58c:	4606      	mov	r6, r0
 800d58e:	460f      	mov	r7, r1
 800d590:	4640      	mov	r0, r8
 800d592:	4649      	mov	r1, r9
 800d594:	f7f2 fff4 	bl	8000580 <__aeabi_dmul>
 800d598:	4602      	mov	r2, r0
 800d59a:	460b      	mov	r3, r1
 800d59c:	4630      	mov	r0, r6
 800d59e:	4639      	mov	r1, r7
 800d5a0:	f7f2 fe38 	bl	8000214 <__adddf3>
 800d5a4:	4602      	mov	r2, r0
 800d5a6:	460b      	mov	r3, r1
 800d5a8:	4620      	mov	r0, r4
 800d5aa:	4629      	mov	r1, r5
 800d5ac:	f7f2 fe30 	bl	8000210 <__aeabi_dsub>
 800d5b0:	e7c6      	b.n	800d540 <__kernel_sin+0xc8>
 800d5b2:	bf00      	nop
 800d5b4:	f3af 8000 	nop.w
 800d5b8:	55555549 	.word	0x55555549
 800d5bc:	3fc55555 	.word	0x3fc55555
 800d5c0:	3fe00000 	.word	0x3fe00000
 800d5c4:	5acfd57c 	.word	0x5acfd57c
 800d5c8:	3de5d93a 	.word	0x3de5d93a
 800d5cc:	8a2b9ceb 	.word	0x8a2b9ceb
 800d5d0:	3e5ae5e6 	.word	0x3e5ae5e6
 800d5d4:	57b1fe7d 	.word	0x57b1fe7d
 800d5d8:	3ec71de3 	.word	0x3ec71de3
 800d5dc:	19c161d5 	.word	0x19c161d5
 800d5e0:	3f2a01a0 	.word	0x3f2a01a0
 800d5e4:	1110f8a6 	.word	0x1110f8a6
 800d5e8:	3f811111 	.word	0x3f811111

0800d5ec <fabs>:
 800d5ec:	ec51 0b10 	vmov	r0, r1, d0
 800d5f0:	ee10 2a10 	vmov	r2, s0
 800d5f4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d5f8:	ec43 2b10 	vmov	d0, r2, r3
 800d5fc:	4770      	bx	lr
	...

0800d600 <floor>:
 800d600:	ec51 0b10 	vmov	r0, r1, d0
 800d604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d608:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800d60c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800d610:	2e13      	cmp	r6, #19
 800d612:	460c      	mov	r4, r1
 800d614:	ee10 5a10 	vmov	r5, s0
 800d618:	4680      	mov	r8, r0
 800d61a:	dc34      	bgt.n	800d686 <floor+0x86>
 800d61c:	2e00      	cmp	r6, #0
 800d61e:	da16      	bge.n	800d64e <floor+0x4e>
 800d620:	a335      	add	r3, pc, #212	; (adr r3, 800d6f8 <floor+0xf8>)
 800d622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d626:	f7f2 fdf5 	bl	8000214 <__adddf3>
 800d62a:	2200      	movs	r2, #0
 800d62c:	2300      	movs	r3, #0
 800d62e:	f7f3 fa37 	bl	8000aa0 <__aeabi_dcmpgt>
 800d632:	b148      	cbz	r0, 800d648 <floor+0x48>
 800d634:	2c00      	cmp	r4, #0
 800d636:	da59      	bge.n	800d6ec <floor+0xec>
 800d638:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d63c:	4a30      	ldr	r2, [pc, #192]	; (800d700 <floor+0x100>)
 800d63e:	432b      	orrs	r3, r5
 800d640:	2500      	movs	r5, #0
 800d642:	42ab      	cmp	r3, r5
 800d644:	bf18      	it	ne
 800d646:	4614      	movne	r4, r2
 800d648:	4621      	mov	r1, r4
 800d64a:	4628      	mov	r0, r5
 800d64c:	e025      	b.n	800d69a <floor+0x9a>
 800d64e:	4f2d      	ldr	r7, [pc, #180]	; (800d704 <floor+0x104>)
 800d650:	4137      	asrs	r7, r6
 800d652:	ea01 0307 	and.w	r3, r1, r7
 800d656:	4303      	orrs	r3, r0
 800d658:	d01f      	beq.n	800d69a <floor+0x9a>
 800d65a:	a327      	add	r3, pc, #156	; (adr r3, 800d6f8 <floor+0xf8>)
 800d65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d660:	f7f2 fdd8 	bl	8000214 <__adddf3>
 800d664:	2200      	movs	r2, #0
 800d666:	2300      	movs	r3, #0
 800d668:	f7f3 fa1a 	bl	8000aa0 <__aeabi_dcmpgt>
 800d66c:	2800      	cmp	r0, #0
 800d66e:	d0eb      	beq.n	800d648 <floor+0x48>
 800d670:	2c00      	cmp	r4, #0
 800d672:	bfbe      	ittt	lt
 800d674:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d678:	fa43 f606 	asrlt.w	r6, r3, r6
 800d67c:	19a4      	addlt	r4, r4, r6
 800d67e:	ea24 0407 	bic.w	r4, r4, r7
 800d682:	2500      	movs	r5, #0
 800d684:	e7e0      	b.n	800d648 <floor+0x48>
 800d686:	2e33      	cmp	r6, #51	; 0x33
 800d688:	dd0b      	ble.n	800d6a2 <floor+0xa2>
 800d68a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d68e:	d104      	bne.n	800d69a <floor+0x9a>
 800d690:	ee10 2a10 	vmov	r2, s0
 800d694:	460b      	mov	r3, r1
 800d696:	f7f2 fdbd 	bl	8000214 <__adddf3>
 800d69a:	ec41 0b10 	vmov	d0, r0, r1
 800d69e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6a2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800d6a6:	f04f 33ff 	mov.w	r3, #4294967295
 800d6aa:	fa23 f707 	lsr.w	r7, r3, r7
 800d6ae:	4207      	tst	r7, r0
 800d6b0:	d0f3      	beq.n	800d69a <floor+0x9a>
 800d6b2:	a311      	add	r3, pc, #68	; (adr r3, 800d6f8 <floor+0xf8>)
 800d6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6b8:	f7f2 fdac 	bl	8000214 <__adddf3>
 800d6bc:	2200      	movs	r2, #0
 800d6be:	2300      	movs	r3, #0
 800d6c0:	f7f3 f9ee 	bl	8000aa0 <__aeabi_dcmpgt>
 800d6c4:	2800      	cmp	r0, #0
 800d6c6:	d0bf      	beq.n	800d648 <floor+0x48>
 800d6c8:	2c00      	cmp	r4, #0
 800d6ca:	da02      	bge.n	800d6d2 <floor+0xd2>
 800d6cc:	2e14      	cmp	r6, #20
 800d6ce:	d103      	bne.n	800d6d8 <floor+0xd8>
 800d6d0:	3401      	adds	r4, #1
 800d6d2:	ea25 0507 	bic.w	r5, r5, r7
 800d6d6:	e7b7      	b.n	800d648 <floor+0x48>
 800d6d8:	2301      	movs	r3, #1
 800d6da:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d6de:	fa03 f606 	lsl.w	r6, r3, r6
 800d6e2:	4435      	add	r5, r6
 800d6e4:	4545      	cmp	r5, r8
 800d6e6:	bf38      	it	cc
 800d6e8:	18e4      	addcc	r4, r4, r3
 800d6ea:	e7f2      	b.n	800d6d2 <floor+0xd2>
 800d6ec:	2500      	movs	r5, #0
 800d6ee:	462c      	mov	r4, r5
 800d6f0:	e7aa      	b.n	800d648 <floor+0x48>
 800d6f2:	bf00      	nop
 800d6f4:	f3af 8000 	nop.w
 800d6f8:	8800759c 	.word	0x8800759c
 800d6fc:	7e37e43c 	.word	0x7e37e43c
 800d700:	bff00000 	.word	0xbff00000
 800d704:	000fffff 	.word	0x000fffff

0800d708 <scalbn>:
 800d708:	b570      	push	{r4, r5, r6, lr}
 800d70a:	ec55 4b10 	vmov	r4, r5, d0
 800d70e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800d712:	4606      	mov	r6, r0
 800d714:	462b      	mov	r3, r5
 800d716:	b9aa      	cbnz	r2, 800d744 <scalbn+0x3c>
 800d718:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d71c:	4323      	orrs	r3, r4
 800d71e:	d03b      	beq.n	800d798 <scalbn+0x90>
 800d720:	4b31      	ldr	r3, [pc, #196]	; (800d7e8 <scalbn+0xe0>)
 800d722:	4629      	mov	r1, r5
 800d724:	2200      	movs	r2, #0
 800d726:	ee10 0a10 	vmov	r0, s0
 800d72a:	f7f2 ff29 	bl	8000580 <__aeabi_dmul>
 800d72e:	4b2f      	ldr	r3, [pc, #188]	; (800d7ec <scalbn+0xe4>)
 800d730:	429e      	cmp	r6, r3
 800d732:	4604      	mov	r4, r0
 800d734:	460d      	mov	r5, r1
 800d736:	da12      	bge.n	800d75e <scalbn+0x56>
 800d738:	a327      	add	r3, pc, #156	; (adr r3, 800d7d8 <scalbn+0xd0>)
 800d73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d73e:	f7f2 ff1f 	bl	8000580 <__aeabi_dmul>
 800d742:	e009      	b.n	800d758 <scalbn+0x50>
 800d744:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800d748:	428a      	cmp	r2, r1
 800d74a:	d10c      	bne.n	800d766 <scalbn+0x5e>
 800d74c:	ee10 2a10 	vmov	r2, s0
 800d750:	4620      	mov	r0, r4
 800d752:	4629      	mov	r1, r5
 800d754:	f7f2 fd5e 	bl	8000214 <__adddf3>
 800d758:	4604      	mov	r4, r0
 800d75a:	460d      	mov	r5, r1
 800d75c:	e01c      	b.n	800d798 <scalbn+0x90>
 800d75e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d762:	460b      	mov	r3, r1
 800d764:	3a36      	subs	r2, #54	; 0x36
 800d766:	4432      	add	r2, r6
 800d768:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d76c:	428a      	cmp	r2, r1
 800d76e:	dd0b      	ble.n	800d788 <scalbn+0x80>
 800d770:	ec45 4b11 	vmov	d1, r4, r5
 800d774:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800d7e0 <scalbn+0xd8>
 800d778:	f000 f83c 	bl	800d7f4 <copysign>
 800d77c:	a318      	add	r3, pc, #96	; (adr r3, 800d7e0 <scalbn+0xd8>)
 800d77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d782:	ec51 0b10 	vmov	r0, r1, d0
 800d786:	e7da      	b.n	800d73e <scalbn+0x36>
 800d788:	2a00      	cmp	r2, #0
 800d78a:	dd08      	ble.n	800d79e <scalbn+0x96>
 800d78c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d790:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d794:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d798:	ec45 4b10 	vmov	d0, r4, r5
 800d79c:	bd70      	pop	{r4, r5, r6, pc}
 800d79e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d7a2:	da0d      	bge.n	800d7c0 <scalbn+0xb8>
 800d7a4:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d7a8:	429e      	cmp	r6, r3
 800d7aa:	ec45 4b11 	vmov	d1, r4, r5
 800d7ae:	dce1      	bgt.n	800d774 <scalbn+0x6c>
 800d7b0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800d7d8 <scalbn+0xd0>
 800d7b4:	f000 f81e 	bl	800d7f4 <copysign>
 800d7b8:	a307      	add	r3, pc, #28	; (adr r3, 800d7d8 <scalbn+0xd0>)
 800d7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7be:	e7e0      	b.n	800d782 <scalbn+0x7a>
 800d7c0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d7c4:	3236      	adds	r2, #54	; 0x36
 800d7c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d7ca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d7ce:	4620      	mov	r0, r4
 800d7d0:	4629      	mov	r1, r5
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	4b06      	ldr	r3, [pc, #24]	; (800d7f0 <scalbn+0xe8>)
 800d7d6:	e7b2      	b.n	800d73e <scalbn+0x36>
 800d7d8:	c2f8f359 	.word	0xc2f8f359
 800d7dc:	01a56e1f 	.word	0x01a56e1f
 800d7e0:	8800759c 	.word	0x8800759c
 800d7e4:	7e37e43c 	.word	0x7e37e43c
 800d7e8:	43500000 	.word	0x43500000
 800d7ec:	ffff3cb0 	.word	0xffff3cb0
 800d7f0:	3c900000 	.word	0x3c900000

0800d7f4 <copysign>:
 800d7f4:	ec51 0b10 	vmov	r0, r1, d0
 800d7f8:	ee11 0a90 	vmov	r0, s3
 800d7fc:	ee10 2a10 	vmov	r2, s0
 800d800:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d804:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800d808:	ea41 0300 	orr.w	r3, r1, r0
 800d80c:	ec43 2b10 	vmov	d0, r2, r3
 800d810:	4770      	bx	lr
	...

0800d814 <_init>:
 800d814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d816:	bf00      	nop
 800d818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d81a:	bc08      	pop	{r3}
 800d81c:	469e      	mov	lr, r3
 800d81e:	4770      	bx	lr

0800d820 <_fini>:
 800d820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d822:	bf00      	nop
 800d824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d826:	bc08      	pop	{r3}
 800d828:	469e      	mov	lr, r3
 800d82a:	4770      	bx	lr
