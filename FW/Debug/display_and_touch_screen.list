
display_and_touch_screen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e0ac  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000022f8  0800e280  0800e280  0001e280  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010578  08010578  0003008c  2**0
                  CONTENTS
  4 .ARM          00000008  08010578  08010578  00020578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010580  08010580  0003008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010580  08010580  00020580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010584  08010584  00020584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08010588  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019680  2000008c  08010614  0003008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001970c  08010614  0003970c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000277b6  00000000  00000000  000300ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003f6f  00000000  00000000  00057870  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017895  00000000  00000000  0005b7df  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000010a8  00000000  00000000  00073078  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000050a0  00000000  00000000  00074120  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0002bda8  00000000  00000000  000791c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00014e42  00000000  00000000  000a4f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0010b105  00000000  00000000  000b9daa  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      000000fd  00000000  00000000  001c4eaf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004514  00000000  00000000  001c4fac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e264 	.word	0x0800e264

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000090 	.word	0x20000090
 800020c:	0800e264 	.word	0x0800e264

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_uldivmod>:
 8000c5c:	b953      	cbnz	r3, 8000c74 <__aeabi_uldivmod+0x18>
 8000c5e:	b94a      	cbnz	r2, 8000c74 <__aeabi_uldivmod+0x18>
 8000c60:	2900      	cmp	r1, #0
 8000c62:	bf08      	it	eq
 8000c64:	2800      	cmpeq	r0, #0
 8000c66:	bf1c      	itt	ne
 8000c68:	f04f 31ff 	movne.w	r1, #4294967295
 8000c6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c70:	f000 b972 	b.w	8000f58 <__aeabi_idiv0>
 8000c74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7c:	f000 f806 	bl	8000c8c <__udivmoddi4>
 8000c80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c88:	b004      	add	sp, #16
 8000c8a:	4770      	bx	lr

08000c8c <__udivmoddi4>:
 8000c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c90:	9e08      	ldr	r6, [sp, #32]
 8000c92:	4604      	mov	r4, r0
 8000c94:	4688      	mov	r8, r1
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d14b      	bne.n	8000d32 <__udivmoddi4+0xa6>
 8000c9a:	428a      	cmp	r2, r1
 8000c9c:	4615      	mov	r5, r2
 8000c9e:	d967      	bls.n	8000d70 <__udivmoddi4+0xe4>
 8000ca0:	fab2 f282 	clz	r2, r2
 8000ca4:	b14a      	cbz	r2, 8000cba <__udivmoddi4+0x2e>
 8000ca6:	f1c2 0720 	rsb	r7, r2, #32
 8000caa:	fa01 f302 	lsl.w	r3, r1, r2
 8000cae:	fa20 f707 	lsr.w	r7, r0, r7
 8000cb2:	4095      	lsls	r5, r2
 8000cb4:	ea47 0803 	orr.w	r8, r7, r3
 8000cb8:	4094      	lsls	r4, r2
 8000cba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cbe:	0c23      	lsrs	r3, r4, #16
 8000cc0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cc4:	fa1f fc85 	uxth.w	ip, r5
 8000cc8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ccc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cd0:	fb07 f10c 	mul.w	r1, r7, ip
 8000cd4:	4299      	cmp	r1, r3
 8000cd6:	d909      	bls.n	8000cec <__udivmoddi4+0x60>
 8000cd8:	18eb      	adds	r3, r5, r3
 8000cda:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cde:	f080 811b 	bcs.w	8000f18 <__udivmoddi4+0x28c>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 8118 	bls.w	8000f18 <__udivmoddi4+0x28c>
 8000ce8:	3f02      	subs	r7, #2
 8000cea:	442b      	add	r3, r5
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d00:	45a4      	cmp	ip, r4
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x8c>
 8000d04:	192c      	adds	r4, r5, r4
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x290>
 8000d0e:	45a4      	cmp	ip, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x290>
 8000d14:	3802      	subs	r0, #2
 8000d16:	442c      	add	r4, r5
 8000d18:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d1c:	eba4 040c 	sub.w	r4, r4, ip
 8000d20:	2700      	movs	r7, #0
 8000d22:	b11e      	cbz	r6, 8000d2c <__udivmoddi4+0xa0>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2c:	4639      	mov	r1, r7
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xbe>
 8000d36:	2e00      	cmp	r6, #0
 8000d38:	f000 80eb 	beq.w	8000f12 <__udivmoddi4+0x286>
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	e9c6 0100 	strd	r0, r1, [r6]
 8000d42:	4638      	mov	r0, r7
 8000d44:	4639      	mov	r1, r7
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f783 	clz	r7, r3
 8000d4e:	2f00      	cmp	r7, #0
 8000d50:	d147      	bne.n	8000de2 <__udivmoddi4+0x156>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd0>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80fa 	bhi.w	8000f50 <__udivmoddi4+0x2c4>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	4698      	mov	r8, r3
 8000d66:	2e00      	cmp	r6, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa0>
 8000d6a:	e9c6 4800 	strd	r4, r8, [r6]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa0>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xe8>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 808f 	bne.w	8000e9c <__udivmoddi4+0x210>
 8000d7e:	1b49      	subs	r1, r1, r5
 8000d80:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d84:	fa1f f885 	uxth.w	r8, r5
 8000d88:	2701      	movs	r7, #1
 8000d8a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d8e:	0c23      	lsrs	r3, r4, #16
 8000d90:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d98:	fb08 f10c 	mul.w	r1, r8, ip
 8000d9c:	4299      	cmp	r1, r3
 8000d9e:	d907      	bls.n	8000db0 <__udivmoddi4+0x124>
 8000da0:	18eb      	adds	r3, r5, r3
 8000da2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da6:	d202      	bcs.n	8000dae <__udivmoddi4+0x122>
 8000da8:	4299      	cmp	r1, r3
 8000daa:	f200 80cd 	bhi.w	8000f48 <__udivmoddi4+0x2bc>
 8000dae:	4684      	mov	ip, r0
 8000db0:	1a59      	subs	r1, r3, r1
 8000db2:	b2a3      	uxth	r3, r4
 8000db4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dbc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dc0:	fb08 f800 	mul.w	r8, r8, r0
 8000dc4:	45a0      	cmp	r8, r4
 8000dc6:	d907      	bls.n	8000dd8 <__udivmoddi4+0x14c>
 8000dc8:	192c      	adds	r4, r5, r4
 8000dca:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dce:	d202      	bcs.n	8000dd6 <__udivmoddi4+0x14a>
 8000dd0:	45a0      	cmp	r8, r4
 8000dd2:	f200 80b6 	bhi.w	8000f42 <__udivmoddi4+0x2b6>
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	eba4 0408 	sub.w	r4, r4, r8
 8000ddc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000de0:	e79f      	b.n	8000d22 <__udivmoddi4+0x96>
 8000de2:	f1c7 0c20 	rsb	ip, r7, #32
 8000de6:	40bb      	lsls	r3, r7
 8000de8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dec:	ea4e 0e03 	orr.w	lr, lr, r3
 8000df0:	fa01 f407 	lsl.w	r4, r1, r7
 8000df4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000df8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dfc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e00:	4325      	orrs	r5, r4
 8000e02:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e06:	0c2c      	lsrs	r4, r5, #16
 8000e08:	fb08 3319 	mls	r3, r8, r9, r3
 8000e0c:	fa1f fa8e 	uxth.w	sl, lr
 8000e10:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e14:	fb09 f40a 	mul.w	r4, r9, sl
 8000e18:	429c      	cmp	r4, r3
 8000e1a:	fa02 f207 	lsl.w	r2, r2, r7
 8000e1e:	fa00 f107 	lsl.w	r1, r0, r7
 8000e22:	d90b      	bls.n	8000e3c <__udivmoddi4+0x1b0>
 8000e24:	eb1e 0303 	adds.w	r3, lr, r3
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	f080 8087 	bcs.w	8000f3e <__udivmoddi4+0x2b2>
 8000e30:	429c      	cmp	r4, r3
 8000e32:	f240 8084 	bls.w	8000f3e <__udivmoddi4+0x2b2>
 8000e36:	f1a9 0902 	sub.w	r9, r9, #2
 8000e3a:	4473      	add	r3, lr
 8000e3c:	1b1b      	subs	r3, r3, r4
 8000e3e:	b2ad      	uxth	r5, r5
 8000e40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e44:	fb08 3310 	mls	r3, r8, r0, r3
 8000e48:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e4c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e50:	45a2      	cmp	sl, r4
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x1da>
 8000e54:	eb1e 0404 	adds.w	r4, lr, r4
 8000e58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5c:	d26b      	bcs.n	8000f36 <__udivmoddi4+0x2aa>
 8000e5e:	45a2      	cmp	sl, r4
 8000e60:	d969      	bls.n	8000f36 <__udivmoddi4+0x2aa>
 8000e62:	3802      	subs	r0, #2
 8000e64:	4474      	add	r4, lr
 8000e66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	eba4 040a 	sub.w	r4, r4, sl
 8000e72:	454c      	cmp	r4, r9
 8000e74:	46c2      	mov	sl, r8
 8000e76:	464b      	mov	r3, r9
 8000e78:	d354      	bcc.n	8000f24 <__udivmoddi4+0x298>
 8000e7a:	d051      	beq.n	8000f20 <__udivmoddi4+0x294>
 8000e7c:	2e00      	cmp	r6, #0
 8000e7e:	d069      	beq.n	8000f54 <__udivmoddi4+0x2c8>
 8000e80:	ebb1 050a 	subs.w	r5, r1, sl
 8000e84:	eb64 0403 	sbc.w	r4, r4, r3
 8000e88:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e8c:	40fd      	lsrs	r5, r7
 8000e8e:	40fc      	lsrs	r4, r7
 8000e90:	ea4c 0505 	orr.w	r5, ip, r5
 8000e94:	e9c6 5400 	strd	r5, r4, [r6]
 8000e98:	2700      	movs	r7, #0
 8000e9a:	e747      	b.n	8000d2c <__udivmoddi4+0xa0>
 8000e9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ea0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ea4:	4095      	lsls	r5, r2
 8000ea6:	fa01 f002 	lsl.w	r0, r1, r2
 8000eaa:	fa21 f303 	lsr.w	r3, r1, r3
 8000eae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eb2:	4338      	orrs	r0, r7
 8000eb4:	0c01      	lsrs	r1, r0, #16
 8000eb6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eba:	fa1f f885 	uxth.w	r8, r5
 8000ebe:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ec2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec6:	fb07 f308 	mul.w	r3, r7, r8
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed0:	d907      	bls.n	8000ee2 <__udivmoddi4+0x256>
 8000ed2:	1869      	adds	r1, r5, r1
 8000ed4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ed8:	d22f      	bcs.n	8000f3a <__udivmoddi4+0x2ae>
 8000eda:	428b      	cmp	r3, r1
 8000edc:	d92d      	bls.n	8000f3a <__udivmoddi4+0x2ae>
 8000ede:	3f02      	subs	r7, #2
 8000ee0:	4429      	add	r1, r5
 8000ee2:	1acb      	subs	r3, r1, r3
 8000ee4:	b281      	uxth	r1, r0
 8000ee6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eea:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb00 f308 	mul.w	r3, r0, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	d907      	bls.n	8000f0a <__udivmoddi4+0x27e>
 8000efa:	1869      	adds	r1, r5, r1
 8000efc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f00:	d217      	bcs.n	8000f32 <__udivmoddi4+0x2a6>
 8000f02:	428b      	cmp	r3, r1
 8000f04:	d915      	bls.n	8000f32 <__udivmoddi4+0x2a6>
 8000f06:	3802      	subs	r0, #2
 8000f08:	4429      	add	r1, r5
 8000f0a:	1ac9      	subs	r1, r1, r3
 8000f0c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f10:	e73b      	b.n	8000d8a <__udivmoddi4+0xfe>
 8000f12:	4637      	mov	r7, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e709      	b.n	8000d2c <__udivmoddi4+0xa0>
 8000f18:	4607      	mov	r7, r0
 8000f1a:	e6e7      	b.n	8000cec <__udivmoddi4+0x60>
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x8c>
 8000f20:	4541      	cmp	r1, r8
 8000f22:	d2ab      	bcs.n	8000e7c <__udivmoddi4+0x1f0>
 8000f24:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f28:	eb69 020e 	sbc.w	r2, r9, lr
 8000f2c:	3801      	subs	r0, #1
 8000f2e:	4613      	mov	r3, r2
 8000f30:	e7a4      	b.n	8000e7c <__udivmoddi4+0x1f0>
 8000f32:	4660      	mov	r0, ip
 8000f34:	e7e9      	b.n	8000f0a <__udivmoddi4+0x27e>
 8000f36:	4618      	mov	r0, r3
 8000f38:	e795      	b.n	8000e66 <__udivmoddi4+0x1da>
 8000f3a:	4667      	mov	r7, ip
 8000f3c:	e7d1      	b.n	8000ee2 <__udivmoddi4+0x256>
 8000f3e:	4681      	mov	r9, r0
 8000f40:	e77c      	b.n	8000e3c <__udivmoddi4+0x1b0>
 8000f42:	3802      	subs	r0, #2
 8000f44:	442c      	add	r4, r5
 8000f46:	e747      	b.n	8000dd8 <__udivmoddi4+0x14c>
 8000f48:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f4c:	442b      	add	r3, r5
 8000f4e:	e72f      	b.n	8000db0 <__udivmoddi4+0x124>
 8000f50:	4638      	mov	r0, r7
 8000f52:	e708      	b.n	8000d66 <__udivmoddi4+0xda>
 8000f54:	4637      	mov	r7, r6
 8000f56:	e6e9      	b.n	8000d2c <__udivmoddi4+0xa0>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f5c:	4a0e      	ldr	r2, [pc, #56]	; (8000f98 <HAL_InitTick+0x3c>)
 8000f5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f62:	490e      	ldr	r1, [pc, #56]	; (8000f9c <HAL_InitTick+0x40>)
 8000f64:	7812      	ldrb	r2, [r2, #0]
 8000f66:	fbb3 f3f2 	udiv	r3, r3, r2
{
 8000f6a:	b510      	push	{r4, lr}
 8000f6c:	4604      	mov	r4, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f6e:	6808      	ldr	r0, [r1, #0]
 8000f70:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f74:	f000 fb12 	bl	800159c <HAL_SYSTICK_Config>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f78:	b908      	cbnz	r0, 8000f7e <HAL_InitTick+0x22>
 8000f7a:	2c0f      	cmp	r4, #15
 8000f7c:	d901      	bls.n	8000f82 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000f7e:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 8000f80:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f82:	2200      	movs	r2, #0
 8000f84:	4621      	mov	r1, r4
 8000f86:	f04f 30ff 	mov.w	r0, #4294967295
 8000f8a:	f000 fac3 	bl	8001514 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f8e:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <HAL_InitTick+0x44>)
 8000f90:	2000      	movs	r0, #0
 8000f92:	601c      	str	r4, [r3, #0]
}
 8000f94:	bd10      	pop	{r4, pc}
 8000f96:	bf00      	nop
 8000f98:	20000000 	.word	0x20000000
 8000f9c:	20000008 	.word	0x20000008
 8000fa0:	20000004 	.word	0x20000004

08000fa4 <HAL_Init>:
{
 8000fa4:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa6:	2003      	movs	r0, #3
 8000fa8:	f000 faa0 	bl	80014ec <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fac:	2000      	movs	r0, #0
 8000fae:	f7ff ffd5 	bl	8000f5c <HAL_InitTick>
  HAL_MspInit();
 8000fb2:	f004 fb89 	bl	80056c8 <HAL_MspInit>
}
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	bd08      	pop	{r3, pc}
 8000fba:	bf00      	nop

08000fbc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000fbc:	4a03      	ldr	r2, [pc, #12]	; (8000fcc <HAL_IncTick+0x10>)
 8000fbe:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <HAL_IncTick+0x14>)
 8000fc0:	6811      	ldr	r1, [r2, #0]
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	440b      	add	r3, r1
 8000fc6:	6013      	str	r3, [r2, #0]
}
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	20019234 	.word	0x20019234
 8000fd0:	20000000 	.word	0x20000000

08000fd4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000fd4:	4b01      	ldr	r3, [pc, #4]	; (8000fdc <HAL_GetTick+0x8>)
 8000fd6:	6818      	ldr	r0, [r3, #0]
}
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	20019234 	.word	0x20019234

08000fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe0:	b538      	push	{r3, r4, r5, lr}
 8000fe2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000fe4:	f7ff fff6 	bl	8000fd4 <HAL_GetTick>
 8000fe8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fea:	1c63      	adds	r3, r4, #1
 8000fec:	d002      	beq.n	8000ff4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fee:	4b04      	ldr	r3, [pc, #16]	; (8001000 <HAL_Delay+0x20>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ff4:	f7ff ffee 	bl	8000fd4 <HAL_GetTick>
 8000ff8:	1b40      	subs	r0, r0, r5
 8000ffa:	42a0      	cmp	r0, r4
 8000ffc:	d3fa      	bcc.n	8000ff4 <HAL_Delay+0x14>
  {
  }
}
 8000ffe:	bd38      	pop	{r3, r4, r5, pc}
 8001000:	20000000 	.word	0x20000000

08001004 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001004:	2800      	cmp	r0, #0
 8001006:	f000 8092 	beq.w	800112e <HAL_ADC_Init+0x12a>
{
 800100a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800100c:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800100e:	4604      	mov	r4, r0
 8001010:	2d00      	cmp	r5, #0
 8001012:	f000 8082 	beq.w	800111a <HAL_ADC_Init+0x116>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001016:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001018:	06db      	lsls	r3, r3, #27
 800101a:	d504      	bpl.n	8001026 <HAL_ADC_Init+0x22>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800101c:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 800101e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001020:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 8001024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8001026:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001028:	4a4e      	ldr	r2, [pc, #312]	; (8001164 <HAL_ADC_Init+0x160>)
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800102a:	494f      	ldr	r1, [pc, #316]	; (8001168 <HAL_ADC_Init+0x164>)
    ADC_STATE_CLR_SET(hadc->State,
 800102c:	401a      	ands	r2, r3
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800102e:	6823      	ldr	r3, [r4, #0]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001030:	4d4e      	ldr	r5, [pc, #312]	; (800116c <HAL_ADC_Init+0x168>)
    ADC_STATE_CLR_SET(hadc->State,
 8001032:	f042 0202 	orr.w	r2, r2, #2
 8001036:	6422      	str	r2, [r4, #64]	; 0x40
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001038:	684a      	ldr	r2, [r1, #4]
 800103a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800103e:	604a      	str	r2, [r1, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001040:	684a      	ldr	r2, [r1, #4]
 8001042:	6860      	ldr	r0, [r4, #4]
 8001044:	4302      	orrs	r2, r0
 8001046:	604a      	str	r2, [r1, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001048:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800104a:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800104c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001050:	f8d4 c008 	ldr.w	ip, [r4, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001054:	68e7      	ldr	r7, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001056:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001058:	6858      	ldr	r0, [r3, #4]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800105a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800105c:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001060:	42ae      	cmp	r6, r5
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001062:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001064:	6858      	ldr	r0, [r3, #4]
 8001066:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 800106a:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800106c:	6859      	ldr	r1, [r3, #4]
 800106e:	ea41 010c 	orr.w	r1, r1, ip
 8001072:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001074:	6899      	ldr	r1, [r3, #8]
 8001076:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800107a:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800107c:	689a      	ldr	r2, [r3, #8]
 800107e:	ea42 0207 	orr.w	r2, r2, r7
 8001082:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001084:	d055      	beq.n	8001132 <HAL_ADC_Init+0x12e>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001086:	6899      	ldr	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001088:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800108a:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 800108e:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001090:	689a      	ldr	r2, [r3, #8]
 8001092:	4316      	orrs	r6, r2
 8001094:	609e      	str	r6, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001096:	6899      	ldr	r1, [r3, #8]
 8001098:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 800109c:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800109e:	689a      	ldr	r2, [r3, #8]
 80010a0:	4302      	orrs	r2, r0
 80010a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80010a4:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80010a6:	69a5      	ldr	r5, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80010a8:	f021 0102 	bic.w	r1, r1, #2
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80010ac:	f894 0020 	ldrb.w	r0, [r4, #32]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80010b0:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80010b2:	689a      	ldr	r2, [r3, #8]
 80010b4:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 80010b8:	609a      	str	r2, [r3, #8]
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80010ba:	2800      	cmp	r0, #0
 80010bc:	d142      	bne.n	8001144 <HAL_ADC_Init+0x140>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80010be:	685a      	ldr	r2, [r3, #4]
 80010c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010c4:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80010c6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    ADC_CLEAR_ERRORCODE(hadc);
 80010c8:	2600      	movs	r6, #0
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80010ca:	69e5      	ldr	r5, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80010cc:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80010d0:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80010d4:	1e6a      	subs	r2, r5, #1
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80010d6:	6967      	ldr	r7, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80010d8:	62d8      	str	r0, [r3, #44]	; 0x2c
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010da:	4630      	mov	r0, r6
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80010dc:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80010de:	ea45 5502 	orr.w	r5, r5, r2, lsl #20
 80010e2:	62dd      	str	r5, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80010e4:	689d      	ldr	r5, [r3, #8]
 80010e6:	f425 7500 	bic.w	r5, r5, #512	; 0x200
 80010ea:	609d      	str	r5, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80010ec:	6899      	ldr	r1, [r3, #8]
 80010ee:	ea41 214c 	orr.w	r1, r1, ip, lsl #9
 80010f2:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80010f4:	6899      	ldr	r1, [r3, #8]
 80010f6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80010fa:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80010fc:	689a      	ldr	r2, [r3, #8]
 80010fe:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8001102:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001104:	6466      	str	r6, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001106:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001108:	f023 0303 	bic.w	r3, r3, #3
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8001112:	2300      	movs	r3, #0
 8001114:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 800111a:	f004 faed 	bl	80056f8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800111e:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001120:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 8001122:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001126:	06db      	lsls	r3, r3, #27
 8001128:	f53f af78 	bmi.w	800101c <HAL_ADC_Init+0x18>
 800112c:	e77b      	b.n	8001026 <HAL_ADC_Init+0x22>
    return HAL_ERROR;
 800112e:	2001      	movs	r0, #1
}
 8001130:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001132:	689a      	ldr	r2, [r3, #8]
 8001134:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001138:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800113a:	689a      	ldr	r2, [r3, #8]
 800113c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	e7af      	b.n	80010a4 <HAL_ADC_Init+0xa0>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001144:	6858      	ldr	r0, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001146:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001148:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800114c:	1e51      	subs	r1, r2, #1
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800114e:	6058      	str	r0, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001150:	685a      	ldr	r2, [r3, #4]
 8001152:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001156:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001158:	685a      	ldr	r2, [r3, #4]
 800115a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	e7b1      	b.n	80010c6 <HAL_ADC_Init+0xc2>
 8001162:	bf00      	nop
 8001164:	ffffeefd 	.word	0xffffeefd
 8001168:	40012300 	.word	0x40012300
 800116c:	0f000001 	.word	0x0f000001

08001170 <HAL_ADC_Start_DMA>:
{
 8001170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001172:	4604      	mov	r4, r0
 8001174:	b083      	sub	sp, #12
  __IO uint32_t counter = 0;
 8001176:	2000      	movs	r0, #0
  __HAL_LOCK(hadc);
 8001178:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
  __IO uint32_t counter = 0;
 800117c:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 800117e:	2b01      	cmp	r3, #1
 8001180:	f000 8089 	beq.w	8001296 <HAL_ADC_Start_DMA+0x126>
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001184:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hadc);
 8001186:	2001      	movs	r0, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001188:	68ab      	ldr	r3, [r5, #8]
  __HAL_LOCK(hadc);
 800118a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800118e:	07de      	lsls	r6, r3, #31
 8001190:	d414      	bmi.n	80011bc <HAL_ADC_Start_DMA+0x4c>
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001192:	4b47      	ldr	r3, [pc, #284]	; (80012b0 <HAL_ADC_Start_DMA+0x140>)
 8001194:	4e47      	ldr	r6, [pc, #284]	; (80012b4 <HAL_ADC_Start_DMA+0x144>)
 8001196:	6818      	ldr	r0, [r3, #0]
    __HAL_ADC_ENABLE(hadc);
 8001198:	68ab      	ldr	r3, [r5, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800119a:	fba6 6000 	umull	r6, r0, r6, r0
    __HAL_ADC_ENABLE(hadc);
 800119e:	f043 0301 	orr.w	r3, r3, #1
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80011a2:	0c80      	lsrs	r0, r0, #18
    __HAL_ADC_ENABLE(hadc);
 80011a4:	60ab      	str	r3, [r5, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80011a6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80011aa:	9001      	str	r0, [sp, #4]
    while(counter != 0)
 80011ac:	9b01      	ldr	r3, [sp, #4]
 80011ae:	b12b      	cbz	r3, 80011bc <HAL_ADC_Start_DMA+0x4c>
      counter--;
 80011b0:	9801      	ldr	r0, [sp, #4]
 80011b2:	3801      	subs	r0, #1
 80011b4:	9001      	str	r0, [sp, #4]
    while(counter != 0)
 80011b6:	9801      	ldr	r0, [sp, #4]
 80011b8:	2800      	cmp	r0, #0
 80011ba:	d1f9      	bne.n	80011b0 <HAL_ADC_Start_DMA+0x40>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80011bc:	68a8      	ldr	r0, [r5, #8]
    ADC_STATE_CLR_SET(hadc->State,
 80011be:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80011c0:	f010 0001 	ands.w	r0, r0, #1
 80011c4:	d044      	beq.n	8001250 <HAL_ADC_Start_DMA+0xe0>
    ADC_STATE_CLR_SET(hadc->State,
 80011c6:	483c      	ldr	r0, [pc, #240]	; (80012b8 <HAL_ADC_Start_DMA+0x148>)
 80011c8:	4018      	ands	r0, r3
 80011ca:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 80011ce:	6420      	str	r0, [r4, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011d0:	686b      	ldr	r3, [r5, #4]
 80011d2:	0558      	lsls	r0, r3, #21
 80011d4:	d505      	bpl.n	80011e2 <HAL_ADC_Start_DMA+0x72>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011d8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011e0:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011e4:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 80011e8:	d047      	beq.n	800127a <HAL_ADC_Start_DMA+0x10a>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80011ec:	f023 0306 	bic.w	r3, r3, #6
 80011f0:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80011f2:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 80011f4:	4613      	mov	r3, r2
 80011f6:	f8df e0d8 	ldr.w	lr, [pc, #216]	; 80012d0 <HAL_ADC_Start_DMA+0x160>
 80011fa:	460a      	mov	r2, r1
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011fc:	f06f 0c22 	mvn.w	ip, #34	; 0x22
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001200:	482e      	ldr	r0, [pc, #184]	; (80012bc <HAL_ADC_Start_DMA+0x14c>)
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001202:	492f      	ldr	r1, [pc, #188]	; (80012c0 <HAL_ADC_Start_DMA+0x150>)
    __HAL_UNLOCK(hadc);   
 8001204:	2600      	movs	r6, #0
 8001206:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800120a:	64f9      	str	r1, [r7, #76]	; 0x4c
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800120c:	f105 014c 	add.w	r1, r5, #76	; 0x4c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001210:	e9c7 e00f 	strd	lr, r0, [r7, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001214:	f8c5 c000 	str.w	ip, [r5]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001218:	4638      	mov	r0, r7
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800121a:	686f      	ldr	r7, [r5, #4]
 800121c:	f047 6780 	orr.w	r7, r7, #67108864	; 0x4000000
 8001220:	606f      	str	r7, [r5, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001222:	68af      	ldr	r7, [r5, #8]
 8001224:	f447 7780 	orr.w	r7, r7, #256	; 0x100
 8001228:	60af      	str	r7, [r5, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800122a:	f000 fa6f 	bl	800170c <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800122e:	4b25      	ldr	r3, [pc, #148]	; (80012c4 <HAL_ADC_Start_DMA+0x154>)
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001230:	6822      	ldr	r2, [r4, #0]
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001232:	6858      	ldr	r0, [r3, #4]
 8001234:	f010 001f 	ands.w	r0, r0, #31
 8001238:	d113      	bne.n	8001262 <HAL_ADC_Start_DMA+0xf2>
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800123a:	6893      	ldr	r3, [r2, #8]
 800123c:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8001240:	d10d      	bne.n	800125e <HAL_ADC_Start_DMA+0xee>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001242:	6891      	ldr	r1, [r2, #8]
  return HAL_OK;
 8001244:	4618      	mov	r0, r3
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001246:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800124a:	6091      	str	r1, [r2, #8]
}
 800124c:	b003      	add	sp, #12
 800124e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001250:	f043 0310 	orr.w	r3, r3, #16
 8001254:	6423      	str	r3, [r4, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001256:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	6463      	str	r3, [r4, #68]	; 0x44
}
 800125e:	b003      	add	sp, #12
 8001260:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001262:	4919      	ldr	r1, [pc, #100]	; (80012c8 <HAL_ADC_Start_DMA+0x158>)
 8001264:	428a      	cmp	r2, r1
 8001266:	d00a      	beq.n	800127e <HAL_ADC_Start_DMA+0x10e>
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001268:	685b      	ldr	r3, [r3, #4]
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800126a:	06db      	lsls	r3, r3, #27
 800126c:	d402      	bmi.n	8001274 <HAL_ADC_Start_DMA+0x104>
 800126e:	4917      	ldr	r1, [pc, #92]	; (80012cc <HAL_ADC_Start_DMA+0x15c>)
 8001270:	428a      	cmp	r2, r1
 8001272:	d013      	beq.n	800129c <HAL_ADC_Start_DMA+0x12c>
  return HAL_OK;
 8001274:	2000      	movs	r0, #0
}
 8001276:	b003      	add	sp, #12
 8001278:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ADC_CLEAR_ERRORCODE(hadc);
 800127a:	6463      	str	r3, [r4, #68]	; 0x44
 800127c:	e7b9      	b.n	80011f2 <HAL_ADC_Start_DMA+0x82>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800127e:	6893      	ldr	r3, [r2, #8]
 8001280:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 8001284:	d103      	bne.n	800128e <HAL_ADC_Start_DMA+0x11e>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001286:	6893      	ldr	r3, [r2, #8]
 8001288:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800128c:	6093      	str	r3, [r2, #8]
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800128e:	4b0d      	ldr	r3, [pc, #52]	; (80012c4 <HAL_ADC_Start_DMA+0x154>)
  return HAL_OK;
 8001290:	2000      	movs	r0, #0
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	e7e3      	b.n	800125e <HAL_ADC_Start_DMA+0xee>
  __HAL_LOCK(hadc);
 8001296:	2002      	movs	r0, #2
}
 8001298:	b003      	add	sp, #12
 800129a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800129c:	6888      	ldr	r0, [r1, #8]
 800129e:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 80012a2:	d1e7      	bne.n	8001274 <HAL_ADC_Start_DMA+0x104>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012a4:	688b      	ldr	r3, [r1, #8]
 80012a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80012aa:	608b      	str	r3, [r1, #8]
 80012ac:	e7d7      	b.n	800125e <HAL_ADC_Start_DMA+0xee>
 80012ae:	bf00      	nop
 80012b0:	20000008 	.word	0x20000008
 80012b4:	431bde83 	.word	0x431bde83
 80012b8:	fffff8fe 	.word	0xfffff8fe
 80012bc:	080012d9 	.word	0x080012d9
 80012c0:	080012e9 	.word	0x080012e9
 80012c4:	40012300 	.word	0x40012300
 80012c8:	40012000 	.word	0x40012000
 80012cc:	40012200 	.word	0x40012200
 80012d0:	08001301 	.word	0x08001301

080012d4 <HAL_ADC_ConvHalfCpltCallback>:
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop

080012d8 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80012d8:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80012da:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80012dc:	f7ff fffa 	bl	80012d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80012e0:	bd08      	pop	{r3, pc}
 80012e2:	bf00      	nop

080012e4 <HAL_ADC_ErrorCallback>:
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop

080012e8 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80012e8:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80012ea:	2240      	movs	r2, #64	; 0x40
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80012ec:	6b83      	ldr	r3, [r0, #56]	; 0x38
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80012ee:	641a      	str	r2, [r3, #64]	; 0x40
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80012f0:	4618      	mov	r0, r3
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80012f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012f4:	f042 0204 	orr.w	r2, r2, #4
 80012f8:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_ADC_ErrorCallback(hadc);
 80012fa:	f7ff fff3 	bl	80012e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80012fe:	bd08      	pop	{r3, pc}

08001300 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001300:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001302:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001304:	f012 0f50 	tst.w	r2, #80	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001308:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800130a:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800130c:	d123      	bne.n	8001356 <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800130e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001312:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001314:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001316:	688a      	ldr	r2, [r1, #8]
 8001318:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800131c:	d117      	bne.n	800134e <ADC_DMAConvCplt+0x4e>
 800131e:	699a      	ldr	r2, [r3, #24]
 8001320:	b9aa      	cbnz	r2, 800134e <ADC_DMAConvCplt+0x4e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001322:	6aca      	ldr	r2, [r1, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001324:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8001328:	d002      	beq.n	8001330 <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800132a:	688a      	ldr	r2, [r1, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800132c:	0550      	lsls	r0, r2, #21
 800132e:	d40e      	bmi.n	800134e <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001330:	684a      	ldr	r2, [r1, #4]
 8001332:	f022 0220 	bic.w	r2, r2, #32
 8001336:	604a      	str	r2, [r1, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001338:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800133a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800133e:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001340:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001342:	04d1      	lsls	r1, r2, #19
 8001344:	d403      	bmi.n	800134e <ADC_DMAConvCplt+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001346:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001348:	f042 0201 	orr.w	r2, r2, #1
 800134c:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 800134e:	4618      	mov	r0, r3
 8001350:	f003 fc9a 	bl	8004c88 <HAL_ADC_ConvCpltCallback>
}
 8001354:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001356:	06d2      	lsls	r2, r2, #27
 8001358:	d404      	bmi.n	8001364 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800135a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 800135c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001362:	4718      	bx	r3
      HAL_ADC_ErrorCallback(hadc);
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ffbd 	bl	80012e4 <HAL_ADC_ErrorCallback>
}
 800136a:	bd10      	pop	{r4, pc}

0800136c <HAL_ADC_ConfigChannel>:
  __HAL_LOCK(hadc);
 800136c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  __IO uint32_t counter = 0;
 8001370:	2200      	movs	r2, #0
{
 8001372:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8001374:	2b01      	cmp	r3, #1
{
 8001376:	b083      	sub	sp, #12
  __IO uint32_t counter = 0;
 8001378:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800137a:	f000 809d 	beq.w	80014b8 <HAL_ADC_ConfigChannel+0x14c>
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800137e:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 8001380:	2201      	movs	r2, #1
 8001382:	6803      	ldr	r3, [r0, #0]
 8001384:	b2b7      	uxth	r7, r6
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001386:	2e09      	cmp	r6, #9
  __HAL_LOCK(hadc);
 8001388:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
 800138c:	eb07 0547 	add.w	r5, r7, r7, lsl #1
 8001390:	688a      	ldr	r2, [r1, #8]
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001392:	d92f      	bls.n	80013f4 <HAL_ADC_ConfigChannel+0x88>
 8001394:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
 8001398:	d02c      	beq.n	80013f4 <HAL_ADC_ConfigChannel+0x88>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800139a:	3d1e      	subs	r5, #30
 800139c:	f04f 0c07 	mov.w	ip, #7
 80013a0:	68dc      	ldr	r4, [r3, #12]
 80013a2:	fa0c fc05 	lsl.w	ip, ip, r5
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013a6:	f8df e138 	ldr.w	lr, [pc, #312]	; 80014e0 <HAL_ADC_ConfigChannel+0x174>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013aa:	ea24 040c 	bic.w	r4, r4, ip
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013ae:	4576      	cmp	r6, lr
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013b0:	60dc      	str	r4, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013b2:	f000 8084 	beq.w	80014be <HAL_ADC_ConfigChannel+0x152>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013b6:	fa02 f505 	lsl.w	r5, r2, r5
 80013ba:	68da      	ldr	r2, [r3, #12]
 80013bc:	4315      	orrs	r5, r2
 80013be:	60dd      	str	r5, [r3, #12]
  if (sConfig->Rank < 7)
 80013c0:	6849      	ldr	r1, [r1, #4]
 80013c2:	2906      	cmp	r1, #6
 80013c4:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 80013c8:	d826      	bhi.n	8001418 <HAL_ADC_ConfigChannel+0xac>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013ca:	3a05      	subs	r2, #5
 80013cc:	241f      	movs	r4, #31
 80013ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013d0:	4094      	lsls	r4, r2
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013d2:	fa07 f202 	lsl.w	r2, r7, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013d6:	ea21 0104 	bic.w	r1, r1, r4
 80013da:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013de:	430a      	orrs	r2, r1
 80013e0:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80013e2:	4a3e      	ldr	r2, [pc, #248]	; (80014dc <HAL_ADC_ConfigChannel+0x170>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d029      	beq.n	800143c <HAL_ADC_ConfigChannel+0xd0>
  __HAL_UNLOCK(hadc);
 80013e8:	2300      	movs	r3, #0
 80013ea:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80013ee:	4618      	mov	r0, r3
}
 80013f0:	b003      	add	sp, #12
 80013f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80013f4:	f04f 0c07 	mov.w	ip, #7
 80013f8:	691c      	ldr	r4, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013fa:	40aa      	lsls	r2, r5
  if (sConfig->Rank < 7)
 80013fc:	6849      	ldr	r1, [r1, #4]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80013fe:	fa0c f505 	lsl.w	r5, ip, r5
  if (sConfig->Rank < 7)
 8001402:	2906      	cmp	r1, #6
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001404:	ea24 0505 	bic.w	r5, r4, r5
 8001408:	611d      	str	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800140a:	691d      	ldr	r5, [r3, #16]
 800140c:	ea45 0502 	orr.w	r5, r5, r2
 8001410:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8001414:	611d      	str	r5, [r3, #16]
  if (sConfig->Rank < 7)
 8001416:	d9d8      	bls.n	80013ca <HAL_ADC_ConfigChannel+0x5e>
  else if (sConfig->Rank < 13)
 8001418:	290c      	cmp	r1, #12
 800141a:	d838      	bhi.n	800148e <HAL_ADC_ConfigChannel+0x122>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800141c:	f1a2 0423 	sub.w	r4, r2, #35	; 0x23
 8001420:	251f      	movs	r5, #31
 8001422:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001424:	40a5      	lsls	r5, r4
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001426:	fa07 f204 	lsl.w	r2, r7, r4
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800142a:	ea21 0105 	bic.w	r1, r1, r5
 800142e:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001430:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8001432:	4314      	orrs	r4, r2
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001434:	4a29      	ldr	r2, [pc, #164]	; (80014dc <HAL_ADC_ConfigChannel+0x170>)
 8001436:	4293      	cmp	r3, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001438:	631c      	str	r4, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800143a:	d1d5      	bne.n	80013e8 <HAL_ADC_ConfigChannel+0x7c>
 800143c:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
 8001440:	d033      	beq.n	80014aa <HAL_ADC_ConfigChannel+0x13e>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001442:	2e12      	cmp	r6, #18
 8001444:	d040      	beq.n	80014c8 <HAL_ADC_ConfigChannel+0x15c>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001446:	4b26      	ldr	r3, [pc, #152]	; (80014e0 <HAL_ADC_ConfigChannel+0x174>)
 8001448:	429e      	cmp	r6, r3
 800144a:	d143      	bne.n	80014d4 <HAL_ADC_ConfigChannel+0x168>
    ADC->CCR |= ADC_CCR_TSVREFE;
 800144c:	4a25      	ldr	r2, [pc, #148]	; (80014e4 <HAL_ADC_ConfigChannel+0x178>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800144e:	4924      	ldr	r1, [pc, #144]	; (80014e0 <HAL_ADC_ConfigChannel+0x174>)
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001450:	6853      	ldr	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001452:	428e      	cmp	r6, r1
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001454:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001458:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800145a:	d1c5      	bne.n	80013e8 <HAL_ADC_ConfigChannel+0x7c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800145c:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 8001460:	4b21      	ldr	r3, [pc, #132]	; (80014e8 <HAL_ADC_ConfigChannel+0x17c>)
 8001462:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f202 3283 	addw	r2, r2, #899	; 0x383
 800146c:	fba2 2303 	umull	r2, r3, r2, r3
 8001470:	0c9b      	lsrs	r3, r3, #18
 8001472:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 800147a:	9b01      	ldr	r3, [sp, #4]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d0b3      	beq.n	80013e8 <HAL_ADC_ConfigChannel+0x7c>
        counter--;
 8001480:	9b01      	ldr	r3, [sp, #4]
 8001482:	3b01      	subs	r3, #1
 8001484:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8001486:	9b01      	ldr	r3, [sp, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1f9      	bne.n	8001480 <HAL_ADC_ConfigChannel+0x114>
 800148c:	e7ac      	b.n	80013e8 <HAL_ADC_ConfigChannel+0x7c>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800148e:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 8001492:	251f      	movs	r5, #31
 8001494:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001496:	408d      	lsls	r5, r1
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001498:	fa07 f201 	lsl.w	r2, r7, r1
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800149c:	ea24 0405 	bic.w	r4, r4, r5
 80014a0:	62dc      	str	r4, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80014a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014a4:	430a      	orrs	r2, r1
 80014a6:	62da      	str	r2, [r3, #44]	; 0x2c
 80014a8:	e79b      	b.n	80013e2 <HAL_ADC_ConfigChannel+0x76>
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80014aa:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 80014ae:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80014b2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
 80014b6:	e797      	b.n	80013e8 <HAL_ADC_ConfigChannel+0x7c>
  __HAL_LOCK(hadc);
 80014b8:	2002      	movs	r0, #2
}
 80014ba:	b003      	add	sp, #12
 80014bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80014be:	68dd      	ldr	r5, [r3, #12]
 80014c0:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
 80014c4:	60dd      	str	r5, [r3, #12]
 80014c6:	e77b      	b.n	80013c0 <HAL_ADC_ConfigChannel+0x54>
    ADC->CCR |= ADC_CCR_VBATE;
 80014c8:	4a06      	ldr	r2, [pc, #24]	; (80014e4 <HAL_ADC_ConfigChannel+0x178>)
 80014ca:	6853      	ldr	r3, [r2, #4]
 80014cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014d0:	6053      	str	r3, [r2, #4]
 80014d2:	e789      	b.n	80013e8 <HAL_ADC_ConfigChannel+0x7c>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014d4:	2e11      	cmp	r6, #17
 80014d6:	d0b9      	beq.n	800144c <HAL_ADC_ConfigChannel+0xe0>
 80014d8:	e786      	b.n	80013e8 <HAL_ADC_ConfigChannel+0x7c>
 80014da:	bf00      	nop
 80014dc:	40012000 	.word	0x40012000
 80014e0:	10000012 	.word	0x10000012
 80014e4:	40012300 	.word	0x40012300
 80014e8:	20000008 	.word	0x20000008

080014ec <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014ec:	4907      	ldr	r1, [pc, #28]	; (800150c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014ee:	0200      	lsls	r0, r0, #8
 80014f0:	4b07      	ldr	r3, [pc, #28]	; (8001510 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f2:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014f4:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f8:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014fa:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 80014fe:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001500:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001504:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001506:	4318      	orrs	r0, r3
  SCB->AIRCR =  reg_value;
 8001508:	60c8      	str	r0, [r1, #12]
 800150a:	4770      	bx	lr
 800150c:	e000ed00 	.word	0xe000ed00
 8001510:	05fa0000 	.word	0x05fa0000

08001514 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001514:	4b17      	ldr	r3, [pc, #92]	; (8001574 <HAL_NVIC_SetPriority+0x60>)
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800151c:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800151e:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001522:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001524:	2d04      	cmp	r5, #4
 8001526:	bf28      	it	cs
 8001528:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800152a:	2c06      	cmp	r4, #6
 800152c:	d918      	bls.n	8001560 <HAL_NVIC_SetPriority+0x4c>
 800152e:	3b03      	subs	r3, #3
 8001530:	f04f 34ff 	mov.w	r4, #4294967295
 8001534:	409c      	lsls	r4, r3
 8001536:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800153a:	f04f 32ff 	mov.w	r2, #4294967295
  if ((int32_t)(IRQn) >= 0)
 800153e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001540:	fa02 f205 	lsl.w	r2, r2, r5
 8001544:	ea21 0102 	bic.w	r1, r1, r2
 8001548:	fa01 f203 	lsl.w	r2, r1, r3
 800154c:	ea42 0204 	orr.w	r2, r2, r4
 8001550:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8001554:	b2d2      	uxtb	r2, r2
  if ((int32_t)(IRQn) >= 0)
 8001556:	db06      	blt.n	8001566 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001558:	4b07      	ldr	r3, [pc, #28]	; (8001578 <HAL_NVIC_SetPriority+0x64>)
 800155a:	541a      	strb	r2, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800155c:	bc30      	pop	{r4, r5}
 800155e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001560:	2400      	movs	r4, #0
 8001562:	4623      	mov	r3, r4
 8001564:	e7e9      	b.n	800153a <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001566:	f000 000f 	and.w	r0, r0, #15
 800156a:	4b04      	ldr	r3, [pc, #16]	; (800157c <HAL_NVIC_SetPriority+0x68>)
 800156c:	541a      	strb	r2, [r3, r0]
 800156e:	bc30      	pop	{r4, r5}
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000ed00 	.word	0xe000ed00
 8001578:	e000e400 	.word	0xe000e400
 800157c:	e000ed14 	.word	0xe000ed14

08001580 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001580:	2800      	cmp	r0, #0
 8001582:	db07      	blt.n	8001594 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001584:	f000 011f 	and.w	r1, r0, #31
 8001588:	2301      	movs	r3, #1
 800158a:	0940      	lsrs	r0, r0, #5
 800158c:	4a02      	ldr	r2, [pc, #8]	; (8001598 <HAL_NVIC_EnableIRQ+0x18>)
 800158e:	408b      	lsls	r3, r1
 8001590:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	e000e100 	.word	0xe000e100

0800159c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800159c:	3801      	subs	r0, #1
 800159e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80015a2:	d20d      	bcs.n	80015c0 <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015a4:	4b07      	ldr	r3, [pc, #28]	; (80015c4 <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a6:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015a8:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015aa:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ac:	25f0      	movs	r5, #240	; 0xf0
 80015ae:	4c06      	ldr	r4, [pc, #24]	; (80015c8 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015b0:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015b2:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b4:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ba:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 80015bc:	bc30      	pop	{r4, r5}
 80015be:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80015c0:	2001      	movs	r0, #1
 80015c2:	4770      	bx	lr
 80015c4:	e000e010 	.word	0xe000e010
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80015cc:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80015ce:	f003 fb53 	bl	8004c78 <HAL_SYSTICK_Callback>
}
 80015d2:	bd08      	pop	{r3, pc}

080015d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015d6:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 80015d8:	f7ff fcfc 	bl	8000fd4 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80015dc:	2c00      	cmp	r4, #0
 80015de:	d053      	beq.n	8001688 <HAL_DMA_Init+0xb4>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015e0:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80015e2:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 80015e4:	2100      	movs	r1, #0
 80015e6:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 80015e8:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80015ec:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 80015ee:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80015f2:	f022 0201 	bic.w	r2, r2, #1
 80015f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015f8:	e005      	b.n	8001606 <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015fa:	f7ff fceb 	bl	8000fd4 <HAL_GetTick>
 80015fe:	1b40      	subs	r0, r0, r5
 8001600:	2805      	cmp	r0, #5
 8001602:	d83a      	bhi.n	800167a <HAL_DMA_Init+0xa6>
 8001604:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	07d1      	lsls	r1, r2, #31
 800160a:	d4f6      	bmi.n	80015fa <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800160c:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8001610:	68e1      	ldr	r1, [r4, #12]
 8001612:	4302      	orrs	r2, r0
  tmp = hdma->Instance->CR;
 8001614:	681f      	ldr	r7, [r3, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001616:	e9d4 0504 	ldrd	r0, r5, [r4, #16]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800161a:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800161c:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;
 800161e:	6a20      	ldr	r0, [r4, #32]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001620:	e9d4 6106 	ldrd	r6, r1, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001624:	432a      	orrs	r2, r5
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001626:	4d35      	ldr	r5, [pc, #212]	; (80016fc <HAL_DMA_Init+0x128>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001628:	4332      	orrs	r2, r6
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800162a:	403d      	ands	r5, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800162c:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800162e:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hdma->Init.Mode                | hdma->Init.Priority;
 8001630:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001632:	2904      	cmp	r1, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001634:	ea42 0205 	orr.w	r2, r2, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001638:	d028      	beq.n	800168c <HAL_DMA_Init+0xb8>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800163a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800163c:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800163e:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001642:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001644:	b2da      	uxtb	r2, r3
 8001646:	4d2e      	ldr	r5, [pc, #184]	; (8001700 <HAL_DMA_Init+0x12c>)
  hdma->Instance->FCR = tmp;
 8001648:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800164a:	3a10      	subs	r2, #16
 800164c:	492d      	ldr	r1, [pc, #180]	; (8001704 <HAL_DMA_Init+0x130>)
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800164e:	482e      	ldr	r0, [pc, #184]	; (8001708 <HAL_DMA_Init+0x134>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001650:	fba5 5202 	umull	r5, r2, r5, r2
 8001654:	4019      	ands	r1, r3
  hdma->State = HAL_DMA_STATE_READY;
 8001656:	2501      	movs	r5, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001658:	0913      	lsrs	r3, r2, #4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800165a:	2200      	movs	r2, #0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800165c:	5cc0      	ldrb	r0, [r0, r3]
  
  if (stream_number > 3U)
 800165e:	2b03      	cmp	r3, #3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001660:	f04f 033f 	mov.w	r3, #63	; 0x3f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001664:	bf88      	it	hi
 8001666:	3104      	addhi	r1, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001668:	65e0      	str	r0, [r4, #92]	; 0x5c
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800166a:	4083      	lsls	r3, r0
  return HAL_OK;
 800166c:	4610      	mov	r0, r2
 800166e:	65a1      	str	r1, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001670:	608b      	str	r3, [r1, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001672:	6562      	str	r2, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001674:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 8001678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800167a:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800167c:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 800167e:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001680:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001682:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8001686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001688:	2001      	movs	r0, #1
}
 800168a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800168c:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8001690:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001692:	ea45 0001 	orr.w	r0, r5, r1
    tmp |= hdma->Init.FIFOThreshold;
 8001696:	f047 0104 	orr.w	r1, r7, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800169a:	4302      	orrs	r2, r0
  hdma->Instance->CR = tmp;  
 800169c:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 800169e:	695a      	ldr	r2, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80016a0:	f022 0207 	bic.w	r2, r2, #7
    tmp |= hdma->Init.FIFOThreshold;
 80016a4:	4311      	orrs	r1, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80016a6:	2d00      	cmp	r5, #0
 80016a8:	d0cc      	beq.n	8001644 <HAL_DMA_Init+0x70>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80016aa:	b17e      	cbz	r6, 80016cc <HAL_DMA_Init+0xf8>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80016ac:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 80016b0:	d016      	beq.n	80016e0 <HAL_DMA_Init+0x10c>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80016b2:	2f02      	cmp	r7, #2
 80016b4:	d903      	bls.n	80016be <HAL_DMA_Init+0xea>
 80016b6:	2f03      	cmp	r7, #3
 80016b8:	d1c4      	bne.n	8001644 <HAL_DMA_Init+0x70>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016ba:	01ea      	lsls	r2, r5, #7
 80016bc:	d5c2      	bpl.n	8001644 <HAL_DMA_Init+0x70>
        hdma->State = HAL_DMA_STATE_READY;
 80016be:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016c0:	2240      	movs	r2, #64	; 0x40
        return HAL_ERROR; 
 80016c2:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016c4:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80016c6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80016ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 80016cc:	2f01      	cmp	r7, #1
 80016ce:	d003      	beq.n	80016d8 <HAL_DMA_Init+0x104>
 80016d0:	d3f3      	bcc.n	80016ba <HAL_DMA_Init+0xe6>
 80016d2:	2f02      	cmp	r7, #2
 80016d4:	d1b6      	bne.n	8001644 <HAL_DMA_Init+0x70>
 80016d6:	e7f0      	b.n	80016ba <HAL_DMA_Init+0xe6>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016d8:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80016dc:	d1b2      	bne.n	8001644 <HAL_DMA_Init+0x70>
 80016de:	e7ee      	b.n	80016be <HAL_DMA_Init+0xea>
    switch (tmp)
 80016e0:	2f03      	cmp	r7, #3
 80016e2:	d8af      	bhi.n	8001644 <HAL_DMA_Init+0x70>
 80016e4:	a201      	add	r2, pc, #4	; (adr r2, 80016ec <HAL_DMA_Init+0x118>)
 80016e6:	f852 f027 	ldr.w	pc, [r2, r7, lsl #2]
 80016ea:	bf00      	nop
 80016ec:	080016bf 	.word	0x080016bf
 80016f0:	080016bb 	.word	0x080016bb
 80016f4:	080016bf 	.word	0x080016bf
 80016f8:	080016d9 	.word	0x080016d9
 80016fc:	f010803f 	.word	0xf010803f
 8001700:	aaaaaaab 	.word	0xaaaaaaab
 8001704:	fffffc00 	.word	0xfffffc00
 8001708:	0800e2c8 	.word	0x0800e2c8

0800170c <HAL_DMA_Start_IT>:
{
 800170c:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 800170e:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8001712:	2c01      	cmp	r4, #1
 8001714:	d038      	beq.n	8001788 <HAL_DMA_Start_IT+0x7c>
 8001716:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8001718:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800171c:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 800171e:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 8001720:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001724:	d129      	bne.n	800177a <HAL_DMA_Start_IT+0x6e>
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001726:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8001728:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800172a:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 800172c:	f880 7035 	strb.w	r7, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001730:	6545      	str	r5, [r0, #84]	; 0x54
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001732:	6887      	ldr	r7, [r0, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001734:	6825      	ldr	r5, [r4, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001736:	2f40      	cmp	r7, #64	; 0x40
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001738:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 800173c:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 800173e:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001740:	d026      	beq.n	8001790 <HAL_DMA_Start_IT+0x84>
    hdma->Instance->PAR = SrcAddress;
 8001742:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8001744:	60e2      	str	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001746:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8001748:	233f      	movs	r3, #63	; 0x3f
    if(hdma->XferHalfCpltCallback != NULL)
 800174a:	6c02      	ldr	r2, [r0, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800174c:	408b      	lsls	r3, r1
 800174e:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001750:	6823      	ldr	r3, [r4, #0]
 8001752:	f043 0316 	orr.w	r3, r3, #22
 8001756:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001758:	6963      	ldr	r3, [r4, #20]
 800175a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800175e:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8001760:	b11a      	cbz	r2, 800176a <HAL_DMA_Start_IT+0x5e>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001762:	6823      	ldr	r3, [r4, #0]
 8001764:	f043 0308 	orr.w	r3, r3, #8
 8001768:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800176a:	6822      	ldr	r2, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800176c:	2300      	movs	r3, #0
    __HAL_DMA_ENABLE(hdma);
 800176e:	f042 0201 	orr.w	r2, r2, #1
}
 8001772:	4618      	mov	r0, r3
    __HAL_DMA_ENABLE(hdma);
 8001774:	6022      	str	r2, [r4, #0]
}
 8001776:	bcf0      	pop	{r4, r5, r6, r7}
 8001778:	4770      	bx	lr
    __HAL_UNLOCK(hdma);	  
 800177a:	2200      	movs	r2, #0
    status = HAL_BUSY;
 800177c:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);	  
 800177e:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
}
 8001782:	4618      	mov	r0, r3
 8001784:	bcf0      	pop	{r4, r5, r6, r7}
 8001786:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8001788:	2302      	movs	r3, #2
}
 800178a:	bcf0      	pop	{r4, r5, r6, r7}
 800178c:	4618      	mov	r0, r3
 800178e:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8001790:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8001792:	60e1      	str	r1, [r4, #12]
 8001794:	e7d7      	b.n	8001746 <HAL_DMA_Start_IT+0x3a>
 8001796:	bf00      	nop

08001798 <HAL_DMA_Abort>:
{
 8001798:	b570      	push	{r4, r5, r6, lr}
 800179a:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800179c:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 800179e:	f7ff fc19 	bl	8000fd4 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017a2:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d006      	beq.n	80017b8 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017aa:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 80017ac:	2300      	movs	r3, #0
    return HAL_ERROR;
 80017ae:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017b0:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80017b2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80017b6:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017b8:	6823      	ldr	r3, [r4, #0]
 80017ba:	4605      	mov	r5, r0
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017bc:	6c21      	ldr	r1, [r4, #64]	; 0x40
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	f022 0216 	bic.w	r2, r2, #22
 80017c4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017c6:	695a      	ldr	r2, [r3, #20]
 80017c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017cc:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017ce:	b339      	cbz	r1, 8001820 <HAL_DMA_Abort+0x88>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	f022 0208 	bic.w	r2, r2, #8
 80017d6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	f022 0201 	bic.w	r2, r2, #1
 80017de:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017e0:	e005      	b.n	80017ee <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017e2:	f7ff fbf7 	bl	8000fd4 <HAL_GetTick>
 80017e6:	1b40      	subs	r0, r0, r5
 80017e8:	2805      	cmp	r0, #5
 80017ea:	d80f      	bhi.n	800180c <HAL_DMA_Abort+0x74>
 80017ec:	6823      	ldr	r3, [r4, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f013 0301 	ands.w	r3, r3, #1
 80017f4:	d1f5      	bne.n	80017e2 <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017f6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80017f8:	223f      	movs	r2, #63	; 0x3f
  return HAL_OK;
 80017fa:	4618      	mov	r0, r3
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017fc:	408a      	lsls	r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 80017fe:	2101      	movs	r1, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001800:	60b2      	str	r2, [r6, #8]
    __HAL_UNLOCK(hdma);
 8001802:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8001806:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
}
 800180a:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800180c:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800180e:	2120      	movs	r1, #32
        __HAL_UNLOCK(hdma);
 8001810:	2200      	movs	r2, #0
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001812:	6561      	str	r1, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8001814:	4618      	mov	r0, r3
        __HAL_UNLOCK(hdma);
 8001816:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800181a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800181e:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001820:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001822:	2a00      	cmp	r2, #0
 8001824:	d1d4      	bne.n	80017d0 <HAL_DMA_Abort+0x38>
 8001826:	e7d7      	b.n	80017d8 <HAL_DMA_Abort+0x40>

08001828 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001828:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
{
 800182c:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800182e:	2a02      	cmp	r2, #2
 8001830:	d003      	beq.n	800183a <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001832:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8001834:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001836:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001838:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 800183a:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800183c:	2105      	movs	r1, #5
  return HAL_OK;
 800183e:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_ABORT;
 8001840:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8001844:	6813      	ldr	r3, [r2, #0]
 8001846:	f023 0301 	bic.w	r3, r3, #1
 800184a:	6013      	str	r3, [r2, #0]
}
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop

08001850 <HAL_DMA_IRQHandler>:
{
 8001850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001852:	4604      	mov	r4, r0
 8001854:	b083      	sub	sp, #12
  __IO uint32_t count = 0;
 8001856:	2000      	movs	r0, #0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001858:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 800185a:	4966      	ldr	r1, [pc, #408]	; (80019f4 <HAL_DMA_IRQHandler+0x1a4>)
  __IO uint32_t count = 0;
 800185c:	9001      	str	r0, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;
 800185e:	680e      	ldr	r6, [r1, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001860:	e9d4 7316 	ldrd	r7, r3, [r4, #88]	; 0x58
 8001864:	409a      	lsls	r2, r3
  tmpisr = regs->ISR;
 8001866:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001868:	422a      	tst	r2, r5
 800186a:	d003      	beq.n	8001874 <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800186c:	6821      	ldr	r1, [r4, #0]
 800186e:	6808      	ldr	r0, [r1, #0]
 8001870:	0740      	lsls	r0, r0, #29
 8001872:	d459      	bmi.n	8001928 <HAL_DMA_IRQHandler+0xd8>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001874:	2201      	movs	r2, #1
 8001876:	409a      	lsls	r2, r3
 8001878:	422a      	tst	r2, r5
 800187a:	d003      	beq.n	8001884 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800187c:	6821      	ldr	r1, [r4, #0]
 800187e:	6949      	ldr	r1, [r1, #20]
 8001880:	0608      	lsls	r0, r1, #24
 8001882:	d474      	bmi.n	800196e <HAL_DMA_IRQHandler+0x11e>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001884:	2204      	movs	r2, #4
 8001886:	409a      	lsls	r2, r3
 8001888:	422a      	tst	r2, r5
 800188a:	d003      	beq.n	8001894 <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800188c:	6821      	ldr	r1, [r4, #0]
 800188e:	6809      	ldr	r1, [r1, #0]
 8001890:	0789      	lsls	r1, r1, #30
 8001892:	d466      	bmi.n	8001962 <HAL_DMA_IRQHandler+0x112>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001894:	2210      	movs	r2, #16
 8001896:	409a      	lsls	r2, r3
 8001898:	422a      	tst	r2, r5
 800189a:	d003      	beq.n	80018a4 <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800189c:	6821      	ldr	r1, [r4, #0]
 800189e:	6808      	ldr	r0, [r1, #0]
 80018a0:	0700      	lsls	r0, r0, #28
 80018a2:	d44b      	bmi.n	800193c <HAL_DMA_IRQHandler+0xec>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80018a4:	2220      	movs	r2, #32
 80018a6:	409a      	lsls	r2, r3
 80018a8:	422a      	tst	r2, r5
 80018aa:	d014      	beq.n	80018d6 <HAL_DMA_IRQHandler+0x86>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80018ac:	6821      	ldr	r1, [r4, #0]
 80018ae:	6808      	ldr	r0, [r1, #0]
 80018b0:	06c0      	lsls	r0, r0, #27
 80018b2:	d510      	bpl.n	80018d6 <HAL_DMA_IRQHandler+0x86>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80018b4:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80018b6:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80018ba:	2a05      	cmp	r2, #5
 80018bc:	d063      	beq.n	8001986 <HAL_DMA_IRQHandler+0x136>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018be:	680b      	ldr	r3, [r1, #0]
 80018c0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018c4:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018c6:	d07e      	beq.n	80019c6 <HAL_DMA_IRQHandler+0x176>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018c8:	0319      	lsls	r1, r3, #12
 80018ca:	f140 8089 	bpl.w	80019e0 <HAL_DMA_IRQHandler+0x190>
        if(hdma->XferCpltCallback != NULL)
 80018ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80018d0:	b10b      	cbz	r3, 80018d6 <HAL_DMA_IRQHandler+0x86>
          hdma->XferCpltCallback(hdma);
 80018d2:	4620      	mov	r0, r4
 80018d4:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80018d6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80018d8:	b323      	cbz	r3, 8001924 <HAL_DMA_IRQHandler+0xd4>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80018da:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80018dc:	07da      	lsls	r2, r3, #31
 80018de:	d51a      	bpl.n	8001916 <HAL_DMA_IRQHandler+0xc6>
      __HAL_DMA_DISABLE(hdma);
 80018e0:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 80018e2:	2105      	movs	r1, #5
  uint32_t timeout = SystemCoreClock / 9600;
 80018e4:	4b44      	ldr	r3, [pc, #272]	; (80019f8 <HAL_DMA_IRQHandler+0x1a8>)
      hdma->State = HAL_DMA_STATE_ABORT;
 80018e6:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  uint32_t timeout = SystemCoreClock / 9600;
 80018ea:	fba3 3606 	umull	r3, r6, r3, r6
      __HAL_DMA_DISABLE(hdma);
 80018ee:	6813      	ldr	r3, [r2, #0]
 80018f0:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600;
 80018f4:	0ab6      	lsrs	r6, r6, #10
      __HAL_DMA_DISABLE(hdma);
 80018f6:	6013      	str	r3, [r2, #0]
 80018f8:	e002      	b.n	8001900 <HAL_DMA_IRQHandler+0xb0>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80018fa:	6813      	ldr	r3, [r2, #0]
 80018fc:	07db      	lsls	r3, r3, #31
 80018fe:	d504      	bpl.n	800190a <HAL_DMA_IRQHandler+0xba>
        if (++count > timeout)
 8001900:	9b01      	ldr	r3, [sp, #4]
 8001902:	3301      	adds	r3, #1
 8001904:	42b3      	cmp	r3, r6
 8001906:	9301      	str	r3, [sp, #4]
 8001908:	d9f7      	bls.n	80018fa <HAL_DMA_IRQHandler+0xaa>
      __HAL_UNLOCK(hdma);
 800190a:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 800190c:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 800190e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8001912:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8001916:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001918:	b123      	cbz	r3, 8001924 <HAL_DMA_IRQHandler+0xd4>
      hdma->XferErrorCallback(hdma);
 800191a:	4620      	mov	r0, r4
}
 800191c:	b003      	add	sp, #12
 800191e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8001922:	4718      	bx	r3
}
 8001924:	b003      	add	sp, #12
 8001926:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001928:	6808      	ldr	r0, [r1, #0]
 800192a:	f020 0004 	bic.w	r0, r0, #4
 800192e:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001930:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001932:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001934:	f042 0201 	orr.w	r2, r2, #1
 8001938:	6562      	str	r2, [r4, #84]	; 0x54
 800193a:	e79b      	b.n	8001874 <HAL_DMA_IRQHandler+0x24>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800193c:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800193e:	680a      	ldr	r2, [r1, #0]
 8001940:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001944:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001946:	d118      	bne.n	800197a <HAL_DMA_IRQHandler+0x12a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001948:	05d2      	lsls	r2, r2, #23
 800194a:	d403      	bmi.n	8001954 <HAL_DMA_IRQHandler+0x104>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800194c:	680a      	ldr	r2, [r1, #0]
 800194e:	f022 0208 	bic.w	r2, r2, #8
 8001952:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8001954:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001956:	2a00      	cmp	r2, #0
 8001958:	d0a4      	beq.n	80018a4 <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 800195a:	4620      	mov	r0, r4
 800195c:	4790      	blx	r2
 800195e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001960:	e7a0      	b.n	80018a4 <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001962:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001964:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001966:	f042 0204 	orr.w	r2, r2, #4
 800196a:	6562      	str	r2, [r4, #84]	; 0x54
 800196c:	e792      	b.n	8001894 <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800196e:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001970:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001972:	f042 0202 	orr.w	r2, r2, #2
 8001976:	6562      	str	r2, [r4, #84]	; 0x54
 8001978:	e784      	b.n	8001884 <HAL_DMA_IRQHandler+0x34>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800197a:	0311      	lsls	r1, r2, #12
 800197c:	d5ea      	bpl.n	8001954 <HAL_DMA_IRQHandler+0x104>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800197e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001980:	2a00      	cmp	r2, #0
 8001982:	d1ea      	bne.n	800195a <HAL_DMA_IRQHandler+0x10a>
 8001984:	e78e      	b.n	80018a4 <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001986:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001988:	6c20      	ldr	r0, [r4, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800198a:	f022 0216 	bic.w	r2, r2, #22
 800198e:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001990:	694a      	ldr	r2, [r1, #20]
 8001992:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001996:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001998:	b338      	cbz	r0, 80019ea <HAL_DMA_IRQHandler+0x19a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800199a:	680a      	ldr	r2, [r1, #0]
 800199c:	f022 0208 	bic.w	r2, r2, #8
 80019a0:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019a2:	223f      	movs	r2, #63	; 0x3f
        __HAL_UNLOCK(hdma);
 80019a4:	2000      	movs	r0, #0
        hdma->State = HAL_DMA_STATE_READY;
 80019a6:	2101      	movs	r1, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 80019ac:	6d22      	ldr	r2, [r4, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019ae:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 80019b0:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80019b4:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80019b8:	2a00      	cmp	r2, #0
 80019ba:	d0b3      	beq.n	8001924 <HAL_DMA_IRQHandler+0xd4>
          hdma->XferAbortCallback(hdma);
 80019bc:	4620      	mov	r0, r4
}
 80019be:	b003      	add	sp, #12
 80019c0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferAbortCallback(hdma);
 80019c4:	4710      	bx	r2
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019c6:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 80019ca:	d180      	bne.n	80018ce <HAL_DMA_IRQHandler+0x7e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80019cc:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80019ce:	2001      	movs	r0, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80019d0:	f022 0210 	bic.w	r2, r2, #16
 80019d4:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 80019d6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80019da:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 80019de:	e776      	b.n	80018ce <HAL_DMA_IRQHandler+0x7e>
          if(hdma->XferM1CpltCallback != NULL)
 80019e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f47f af75 	bne.w	80018d2 <HAL_DMA_IRQHandler+0x82>
 80019e8:	e775      	b.n	80018d6 <HAL_DMA_IRQHandler+0x86>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019ea:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80019ec:	2a00      	cmp	r2, #0
 80019ee:	d1d4      	bne.n	800199a <HAL_DMA_IRQHandler+0x14a>
 80019f0:	e7d7      	b.n	80019a2 <HAL_DMA_IRQHandler+0x152>
 80019f2:	bf00      	nop
 80019f4:	20000008 	.word	0x20000008
 80019f8:	1b4e81b5 	.word	0x1b4e81b5

080019fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a00:	4688      	mov	r8, r1
 8001a02:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a04:	2400      	movs	r4, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a06:	f8d1 9000 	ldr.w	r9, [r1]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a0a:	f8df e1f8 	ldr.w	lr, [pc, #504]	; 8001c04 <HAL_GPIO_Init+0x208>
 8001a0e:	e003      	b.n	8001a18 <HAL_GPIO_Init+0x1c>
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a10:	3401      	adds	r4, #1
 8001a12:	2c10      	cmp	r4, #16
 8001a14:	f000 80b6 	beq.w	8001b84 <HAL_GPIO_Init+0x188>
    ioposition = ((uint32_t)0x01) << position;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a1c:	ea09 0203 	and.w	r2, r9, r3
    if(iocurrent == ioposition)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d1f5      	bne.n	8001a10 <HAL_GPIO_Init+0x14>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a24:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8001a28:	0067      	lsls	r7, r4, #1
 8001a2a:	2103      	movs	r1, #3
 8001a2c:	f025 0c10 	bic.w	ip, r5, #16
 8001a30:	40b9      	lsls	r1, r7
 8001a32:	f10c 33ff 	add.w	r3, ip, #4294967295
 8001a36:	43c9      	mvns	r1, r1
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d810      	bhi.n	8001a5e <HAL_GPIO_Init+0x62>
        temp = GPIOx->OSPEEDR; 
 8001a3c:	6886      	ldr	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001a3e:	f3c5 1300 	ubfx	r3, r5, #4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a42:	ea06 0a01 	and.w	sl, r6, r1
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a46:	f8d8 600c 	ldr.w	r6, [r8, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001a4a:	40a3      	lsls	r3, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a4c:	40be      	lsls	r6, r7
 8001a4e:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 8001a52:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001a54:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a56:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001a5a:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 8001a5c:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 8001a5e:	68c3      	ldr	r3, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a60:	f1bc 0f02 	cmp.w	ip, #2
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a64:	f8d8 6008 	ldr.w	r6, [r8, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a68:	ea03 0301 	and.w	r3, r3, r1
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a6c:	fa06 f607 	lsl.w	r6, r6, r7
 8001a70:	ea46 0603 	orr.w	r6, r6, r3
      GPIOx->PUPDR = temp;
 8001a74:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a76:	d115      	bne.n	8001aa4 <HAL_GPIO_Init+0xa8>
        temp = GPIOx->AFR[position >> 3];
 8001a78:	08e3      	lsrs	r3, r4, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a7a:	f004 0c07 	and.w	ip, r4, #7
 8001a7e:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001a82:	f8d8 6010 	ldr.w	r6, [r8, #16]
 8001a86:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a8a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8001a8e:	f8d3 a020 	ldr.w	sl, [r3, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a92:	fa0b fb0c 	lsl.w	fp, fp, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001a96:	fa06 f60c 	lsl.w	r6, r6, ip
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a9a:	ea2a 0a0b 	bic.w	sl, sl, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001a9e:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3] = temp;
 8001aa2:	621e      	str	r6, [r3, #32]
      temp = GPIOx->MODER;
 8001aa4:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001aa6:	f005 0303 	and.w	r3, r5, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001aaa:	4031      	ands	r1, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001aac:	40bb      	lsls	r3, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001aae:	00ef      	lsls	r7, r5, #3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001ab0:	ea43 0301 	orr.w	r3, r3, r1
      GPIOx->MODER = temp;
 8001ab4:	6003      	str	r3, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ab6:	d5ab      	bpl.n	8001a10 <HAL_GPIO_Init+0x14>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab8:	4b48      	ldr	r3, [pc, #288]	; (8001bdc <HAL_GPIO_Init+0x1e0>)
 8001aba:	f024 0603 	bic.w	r6, r4, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001abe:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ac2:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001aca:	f004 0303 	and.w	r3, r4, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ace:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001ad2:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ad6:	009b      	lsls	r3, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad8:	644f      	str	r7, [r1, #68]	; 0x44
 8001ada:	6c4f      	ldr	r7, [r1, #68]	; 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001adc:	fa0c f103 	lsl.w	r1, ip, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ae0:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001ae4:	9701      	str	r7, [sp, #4]
 8001ae6:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001ae8:	68b7      	ldr	r7, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001aea:	ea27 0101 	bic.w	r1, r7, r1
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001aee:	4f3c      	ldr	r7, [pc, #240]	; (8001be0 <HAL_GPIO_Init+0x1e4>)
 8001af0:	42b8      	cmp	r0, r7
 8001af2:	d020      	beq.n	8001b36 <HAL_GPIO_Init+0x13a>
 8001af4:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001af8:	42b8      	cmp	r0, r7
 8001afa:	d046      	beq.n	8001b8a <HAL_GPIO_Init+0x18e>
 8001afc:	4f39      	ldr	r7, [pc, #228]	; (8001be4 <HAL_GPIO_Init+0x1e8>)
 8001afe:	42b8      	cmp	r0, r7
 8001b00:	d048      	beq.n	8001b94 <HAL_GPIO_Init+0x198>
 8001b02:	4f39      	ldr	r7, [pc, #228]	; (8001be8 <HAL_GPIO_Init+0x1ec>)
 8001b04:	42b8      	cmp	r0, r7
 8001b06:	d04a      	beq.n	8001b9e <HAL_GPIO_Init+0x1a2>
 8001b08:	4f38      	ldr	r7, [pc, #224]	; (8001bec <HAL_GPIO_Init+0x1f0>)
 8001b0a:	42b8      	cmp	r0, r7
 8001b0c:	d04c      	beq.n	8001ba8 <HAL_GPIO_Init+0x1ac>
 8001b0e:	4f38      	ldr	r7, [pc, #224]	; (8001bf0 <HAL_GPIO_Init+0x1f4>)
 8001b10:	42b8      	cmp	r0, r7
 8001b12:	d053      	beq.n	8001bbc <HAL_GPIO_Init+0x1c0>
 8001b14:	4f37      	ldr	r7, [pc, #220]	; (8001bf4 <HAL_GPIO_Init+0x1f8>)
 8001b16:	42b8      	cmp	r0, r7
 8001b18:	d055      	beq.n	8001bc6 <HAL_GPIO_Init+0x1ca>
 8001b1a:	4f37      	ldr	r7, [pc, #220]	; (8001bf8 <HAL_GPIO_Init+0x1fc>)
 8001b1c:	42b8      	cmp	r0, r7
 8001b1e:	d048      	beq.n	8001bb2 <HAL_GPIO_Init+0x1b6>
 8001b20:	4f36      	ldr	r7, [pc, #216]	; (8001bfc <HAL_GPIO_Init+0x200>)
 8001b22:	42b8      	cmp	r0, r7
 8001b24:	d054      	beq.n	8001bd0 <HAL_GPIO_Init+0x1d4>
 8001b26:	4f36      	ldr	r7, [pc, #216]	; (8001c00 <HAL_GPIO_Init+0x204>)
 8001b28:	42b8      	cmp	r0, r7
 8001b2a:	bf0c      	ite	eq
 8001b2c:	2709      	moveq	r7, #9
 8001b2e:	270a      	movne	r7, #10
 8001b30:	fa07 f303 	lsl.w	r3, r7, r3
 8001b34:	4319      	orrs	r1, r3
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b36:	60b1      	str	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8001b38:	43d1      	mvns	r1, r2
        temp = EXTI->IMR;
 8001b3a:	f8de 3000 	ldr.w	r3, [lr]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b3e:	03ee      	lsls	r6, r5, #15
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b40:	f104 0401 	add.w	r4, r4, #1
        temp &= ~((uint32_t)iocurrent);
 8001b44:	bf54      	ite	pl
 8001b46:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 8001b48:	4313      	orrmi	r3, r2
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b4a:	03af      	lsls	r7, r5, #14
        EXTI->IMR = temp;
 8001b4c:	f8ce 3000 	str.w	r3, [lr]
        temp = EXTI->EMR;
 8001b50:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
 8001b54:	bf54      	ite	pl
 8001b56:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 8001b58:	4313      	orrmi	r3, r2
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b5a:	02ee      	lsls	r6, r5, #11
        EXTI->EMR = temp;
 8001b5c:	f8ce 3004 	str.w	r3, [lr, #4]
        temp = EXTI->RTSR;
 8001b60:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
 8001b64:	bf54      	ite	pl
 8001b66:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 8001b68:	4313      	orrmi	r3, r2
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b6a:	02ad      	lsls	r5, r5, #10
        EXTI->RTSR = temp;
 8001b6c:	f8ce 3008 	str.w	r3, [lr, #8]
        temp = EXTI->FTSR;
 8001b70:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
 8001b74:	bf54      	ite	pl
 8001b76:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 8001b78:	4313      	orrmi	r3, r2
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b7a:	2c10      	cmp	r4, #16
        }
        EXTI->FTSR = temp;
 8001b7c:	f8ce 300c 	str.w	r3, [lr, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b80:	f47f af4a 	bne.w	8001a18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b84:	b003      	add	sp, #12
 8001b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b8a:	2701      	movs	r7, #1
 8001b8c:	fa07 f303 	lsl.w	r3, r7, r3
 8001b90:	4319      	orrs	r1, r3
 8001b92:	e7d0      	b.n	8001b36 <HAL_GPIO_Init+0x13a>
 8001b94:	2702      	movs	r7, #2
 8001b96:	fa07 f303 	lsl.w	r3, r7, r3
 8001b9a:	4319      	orrs	r1, r3
 8001b9c:	e7cb      	b.n	8001b36 <HAL_GPIO_Init+0x13a>
 8001b9e:	2703      	movs	r7, #3
 8001ba0:	fa07 f303 	lsl.w	r3, r7, r3
 8001ba4:	4319      	orrs	r1, r3
 8001ba6:	e7c6      	b.n	8001b36 <HAL_GPIO_Init+0x13a>
 8001ba8:	2704      	movs	r7, #4
 8001baa:	fa07 f303 	lsl.w	r3, r7, r3
 8001bae:	4319      	orrs	r1, r3
 8001bb0:	e7c1      	b.n	8001b36 <HAL_GPIO_Init+0x13a>
 8001bb2:	2707      	movs	r7, #7
 8001bb4:	fa07 f303 	lsl.w	r3, r7, r3
 8001bb8:	4319      	orrs	r1, r3
 8001bba:	e7bc      	b.n	8001b36 <HAL_GPIO_Init+0x13a>
 8001bbc:	2705      	movs	r7, #5
 8001bbe:	fa07 f303 	lsl.w	r3, r7, r3
 8001bc2:	4319      	orrs	r1, r3
 8001bc4:	e7b7      	b.n	8001b36 <HAL_GPIO_Init+0x13a>
 8001bc6:	2706      	movs	r7, #6
 8001bc8:	fa07 f303 	lsl.w	r3, r7, r3
 8001bcc:	4319      	orrs	r1, r3
 8001bce:	e7b2      	b.n	8001b36 <HAL_GPIO_Init+0x13a>
 8001bd0:	2708      	movs	r7, #8
 8001bd2:	fa07 f303 	lsl.w	r3, r7, r3
 8001bd6:	4319      	orrs	r1, r3
 8001bd8:	e7ad      	b.n	8001b36 <HAL_GPIO_Init+0x13a>
 8001bda:	bf00      	nop
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	40020000 	.word	0x40020000
 8001be4:	40020800 	.word	0x40020800
 8001be8:	40020c00 	.word	0x40020c00
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	40021400 	.word	0x40021400
 8001bf4:	40021800 	.word	0x40021800
 8001bf8:	40021c00 	.word	0x40021c00
 8001bfc:	40022000 	.word	0x40022000
 8001c00:	40022400 	.word	0x40022400
 8001c04:	40013c00 	.word	0x40013c00

08001c08 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c08:	b902      	cbnz	r2, 8001c0c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001c0a:	0409      	lsls	r1, r1, #16
 8001c0c:	6181      	str	r1, [r0, #24]
  }
}
 8001c0e:	4770      	bx	lr

08001c10 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c10:	b570      	push	{r4, r5, r6, lr}
 8001c12:	4604      	mov	r4, r0
 8001c14:	460d      	mov	r5, r1
 8001c16:	4616      	mov	r6, r2
 8001c18:	1c6a      	adds	r2, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c1a:	6823      	ldr	r3, [r4, #0]
 8001c1c:	d12c      	bne.n	8001c78 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
 8001c1e:	699a      	ldr	r2, [r3, #24]
 8001c20:	0790      	lsls	r0, r2, #30
 8001c22:	d427      	bmi.n	8001c74 <I2C_WaitOnTXISFlagUntilTimeout+0x64>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c24:	699a      	ldr	r2, [r3, #24]
 8001c26:	06d1      	lsls	r1, r2, #27
 8001c28:	d5f9      	bpl.n	8001c1e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c2a:	699a      	ldr	r2, [r3, #24]
 8001c2c:	0691      	lsls	r1, r2, #26
 8001c2e:	d5fc      	bpl.n	8001c2a <I2C_WaitOnTXISFlagUntilTimeout+0x1a>

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c30:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c32:	2110      	movs	r1, #16
 8001c34:	61d9      	str	r1, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c36:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001c38:	699a      	ldr	r2, [r3, #24]
 8001c3a:	0790      	lsls	r0, r2, #30
 8001c3c:	d501      	bpl.n	8001c42 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
    hi2c->Instance->TXDR = 0x00U;
 8001c3e:	2200      	movs	r2, #0
 8001c40:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c42:	699a      	ldr	r2, [r3, #24]
 8001c44:	07d1      	lsls	r1, r2, #31
 8001c46:	d403      	bmi.n	8001c50 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001c48:	699a      	ldr	r2, [r3, #24]
 8001c4a:	f042 0201 	orr.w	r2, r2, #1
 8001c4e:	619a      	str	r2, [r3, #24]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c50:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c52:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 8001c54:	4e1b      	ldr	r6, [pc, #108]	; (8001cc4 <I2C_WaitOnTXISFlagUntilTimeout+0xb4>)
    hi2c->State = HAL_I2C_STATE_READY;
 8001c56:	2520      	movs	r5, #32
      return HAL_ERROR;
 8001c58:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8001c5a:	4032      	ands	r2, r6
 8001c5c:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c5e:	6c63      	ldr	r3, [r4, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c60:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c64:	f043 0304 	orr.w	r3, r3, #4
 8001c68:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001c6a:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c6e:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 8001c72:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8001c74:	2000      	movs	r0, #0
}
 8001c76:	bd70      	pop	{r4, r5, r6, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c78:	699a      	ldr	r2, [r3, #24]
 8001c7a:	0792      	lsls	r2, r2, #30
 8001c7c:	d4fa      	bmi.n	8001c74 <I2C_WaitOnTXISFlagUntilTimeout+0x64>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c7e:	699a      	ldr	r2, [r3, #24]
 8001c80:	06d0      	lsls	r0, r2, #27
 8001c82:	d41b      	bmi.n	8001cbc <I2C_WaitOnTXISFlagUntilTimeout+0xac>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c84:	f7ff f9a6 	bl	8000fd4 <HAL_GetTick>
 8001c88:	1b80      	subs	r0, r0, r6
 8001c8a:	42a8      	cmp	r0, r5
 8001c8c:	d801      	bhi.n	8001c92 <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 8001c8e:	2d00      	cmp	r5, #0
 8001c90:	d1c2      	bne.n	8001c18 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c92:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c94:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c96:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 8001c98:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c9a:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8001c9c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ca0:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ca2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ca6:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 8001caa:	bd70      	pop	{r4, r5, r6, pc}
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cac:	f7ff f992 	bl	8000fd4 <HAL_GetTick>
 8001cb0:	1b80      	subs	r0, r0, r6
 8001cb2:	4285      	cmp	r5, r0
 8001cb4:	d3ed      	bcc.n	8001c92 <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 8001cb6:	2d00      	cmp	r5, #0
 8001cb8:	d0eb      	beq.n	8001c92 <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 8001cba:	6823      	ldr	r3, [r4, #0]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cbc:	699a      	ldr	r2, [r3, #24]
 8001cbe:	0692      	lsls	r2, r2, #26
 8001cc0:	d5f4      	bpl.n	8001cac <I2C_WaitOnTXISFlagUntilTimeout+0x9c>
 8001cc2:	e7b5      	b.n	8001c30 <I2C_WaitOnTXISFlagUntilTimeout+0x20>
 8001cc4:	fe00e800 	.word	0xfe00e800

08001cc8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001cc8:	b570      	push	{r4, r5, r6, lr}
 8001cca:	4604      	mov	r4, r0
 8001ccc:	460d      	mov	r5, r1
 8001cce:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cd0:	6823      	ldr	r3, [r4, #0]
 8001cd2:	699a      	ldr	r2, [r3, #24]
 8001cd4:	0692      	lsls	r2, r2, #26
 8001cd6:	d449      	bmi.n	8001d6c <I2C_WaitOnSTOPFlagUntilTimeout+0xa4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001cd8:	699a      	ldr	r2, [r3, #24]
 8001cda:	06d2      	lsls	r2, r2, #27
 8001cdc:	d526      	bpl.n	8001d2c <I2C_WaitOnSTOPFlagUntilTimeout+0x64>
 8001cde:	1c68      	adds	r0, r5, #1
 8001ce0:	d138      	bne.n	8001d54 <I2C_WaitOnSTOPFlagUntilTimeout+0x8c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ce2:	699a      	ldr	r2, [r3, #24]
 8001ce4:	0691      	lsls	r1, r2, #26
 8001ce6:	d5fc      	bpl.n	8001ce2 <I2C_WaitOnSTOPFlagUntilTimeout+0x1a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ce8:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cea:	2110      	movs	r1, #16
 8001cec:	61d9      	str	r1, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cee:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001cf0:	699a      	ldr	r2, [r3, #24]
 8001cf2:	0790      	lsls	r0, r2, #30
 8001cf4:	d501      	bpl.n	8001cfa <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
    hi2c->Instance->TXDR = 0x00U;
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cfa:	699a      	ldr	r2, [r3, #24]
 8001cfc:	07d1      	lsls	r1, r2, #31
 8001cfe:	d403      	bmi.n	8001d08 <I2C_WaitOnSTOPFlagUntilTimeout+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001d00:	699a      	ldr	r2, [r3, #24]
 8001d02:	f042 0201 	orr.w	r2, r2, #1
 8001d06:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 8001d08:	685a      	ldr	r2, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d0a:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 8001d0c:	4e18      	ldr	r6, [pc, #96]	; (8001d70 <I2C_WaitOnSTOPFlagUntilTimeout+0xa8>)
    hi2c->State = HAL_I2C_STATE_READY;
 8001d0e:	2520      	movs	r5, #32
      return HAL_ERROR;
 8001d10:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8001d12:	4032      	ands	r2, r6
 8001d14:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d16:	6c63      	ldr	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8001d18:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d1c:	f043 0304 	orr.w	r3, r3, #4
 8001d20:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001d22:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d26:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 8001d2a:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d2c:	f7ff f952 	bl	8000fd4 <HAL_GetTick>
 8001d30:	1b80      	subs	r0, r0, r6
 8001d32:	42a8      	cmp	r0, r5
 8001d34:	d801      	bhi.n	8001d3a <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
 8001d36:	2d00      	cmp	r5, #0
 8001d38:	d1ca      	bne.n	8001cd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d3a:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d3c:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d3e:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 8001d40:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d42:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8001d44:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d48:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d4a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d4e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 8001d52:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d54:	699a      	ldr	r2, [r3, #24]
 8001d56:	0692      	lsls	r2, r2, #26
 8001d58:	d4c6      	bmi.n	8001ce8 <I2C_WaitOnSTOPFlagUntilTimeout+0x20>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d5a:	f7ff f93b 	bl	8000fd4 <HAL_GetTick>
 8001d5e:	1b80      	subs	r0, r0, r6
 8001d60:	4285      	cmp	r5, r0
 8001d62:	d3ea      	bcc.n	8001d3a <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
 8001d64:	2d00      	cmp	r5, #0
 8001d66:	d0e8      	beq.n	8001d3a <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
 8001d68:	6823      	ldr	r3, [r4, #0]
 8001d6a:	e7b8      	b.n	8001cde <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8001d6c:	2000      	movs	r0, #0
}
 8001d6e:	bd70      	pop	{r4, r5, r6, pc}
 8001d70:	fe00e800 	.word	0xfe00e800

08001d74 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001d74:	2800      	cmp	r0, #0
 8001d76:	d04d      	beq.n	8001e14 <HAL_I2C_Init+0xa0>
{
 8001d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d7a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001d7e:	4604      	mov	r4, r0
 8001d80:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d040      	beq.n	8001e0a <HAL_I2C_Init+0x96>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d88:	2124      	movs	r1, #36	; 0x24
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d8a:	68e5      	ldr	r5, [r4, #12]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d8c:	e9d4 3200 	ldrd	r3, r2, [r4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d90:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d94:	2d01      	cmp	r5, #1
  __HAL_I2C_DISABLE(hi2c);
 8001d96:	6818      	ldr	r0, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d98:	f022 6170 	bic.w	r1, r2, #251658240	; 0xf000000
 8001d9c:	68a2      	ldr	r2, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8001d9e:	f020 0001 	bic.w	r0, r0, #1
 8001da2:	6018      	str	r0, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001da4:	6119      	str	r1, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001da6:	6899      	ldr	r1, [r3, #8]
 8001da8:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8001dac:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001dae:	d028      	beq.n	8001e02 <HAL_I2C_Init+0x8e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001db0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001db4:	2d02      	cmp	r5, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001db6:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001db8:	d102      	bne.n	8001dc0 <HAL_I2C_Init+0x4c>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001dba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001dbe:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001dc0:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dc2:	2100      	movs	r1, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001dc4:	4814      	ldr	r0, [pc, #80]	; (8001e18 <HAL_I2C_Init+0xa4>)
  hi2c->State = HAL_I2C_STATE_READY;
 8001dc6:	2720      	movs	r7, #32
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001dc8:	69a6      	ldr	r6, [r4, #24]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001dca:	4310      	orrs	r0, r2
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001dcc:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001dd0:	6058      	str	r0, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001dd2:	432a      	orrs	r2, r5
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001dd4:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001dd6:	69e5      	ldr	r5, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001dd8:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ddc:	6a26      	ldr	r6, [r4, #32]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001dde:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001de2:	4335      	orrs	r5, r6
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001de4:	60d8      	str	r0, [r3, #12]
  return HAL_OK;
 8001de6:	4608      	mov	r0, r1
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001de8:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001dea:	601d      	str	r5, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	f042 0201 	orr.w	r2, r2, #1
 8001df2:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001df4:	6461      	str	r1, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001df6:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dfa:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dfc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 8001e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	e7da      	b.n	8001dc0 <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 8001e0a:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001e0e:	f003 fccb 	bl	80057a8 <HAL_I2C_MspInit>
 8001e12:	e7b9      	b.n	8001d88 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8001e14:	2001      	movs	r0, #1
}
 8001e16:	4770      	bx	lr
 8001e18:	02008000 	.word	0x02008000

08001e1c <HAL_I2C_Master_Transmit>:
{
 8001e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e20:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
{
 8001e24:	9e08      	ldr	r6, [sp, #32]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e26:	2c20      	cmp	r4, #32
 8001e28:	d16f      	bne.n	8001f0a <HAL_I2C_Master_Transmit+0xee>
    __HAL_LOCK(hi2c);
 8001e2a:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8001e2e:	2c01      	cmp	r4, #1
 8001e30:	d06b      	beq.n	8001f0a <HAL_I2C_Master_Transmit+0xee>
 8001e32:	4698      	mov	r8, r3
 8001e34:	2301      	movs	r3, #1
 8001e36:	4691      	mov	r9, r2
 8001e38:	460f      	mov	r7, r1
 8001e3a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8001e3e:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 8001e40:	f7ff f8c8 	bl	8000fd4 <HAL_GetTick>
 8001e44:	4605      	mov	r5, r0
 8001e46:	e004      	b.n	8001e52 <HAL_I2C_Master_Transmit+0x36>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e48:	f7ff f8c4 	bl	8000fd4 <HAL_GetTick>
 8001e4c:	1b40      	subs	r0, r0, r5
 8001e4e:	2819      	cmp	r0, #25
 8001e50:	d875      	bhi.n	8001f3e <HAL_I2C_Master_Transmit+0x122>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e52:	6823      	ldr	r3, [r4, #0]
 8001e54:	6998      	ldr	r0, [r3, #24]
 8001e56:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 8001e5a:	d1f5      	bne.n	8001e48 <HAL_I2C_Master_Transmit+0x2c>
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001e5c:	2210      	movs	r2, #16
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e5e:	2121      	movs	r1, #33	; 0x21
    hi2c->pBuffPtr  = pData;
 8001e60:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 8001e64:	f3c7 0709 	ubfx	r7, r7, #0, #10
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e68:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001e6c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e70:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8001e72:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e76:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001e78:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e7a:	2aff      	cmp	r2, #255	; 0xff
 8001e7c:	d848      	bhi.n	8001f10 <HAL_I2C_Master_Transmit+0xf4>
      hi2c->XferSize = hi2c->XferCount;
 8001e7e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001e80:	4a48      	ldr	r2, [pc, #288]	; (8001fa4 <HAL_I2C_Master_Transmit+0x188>)
      hi2c->XferSize = hi2c->XferCount;
 8001e82:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2,
 8001e84:	6858      	ldr	r0, [r3, #4]
 8001e86:	433a      	orrs	r2, r7
 8001e88:	f8df e124 	ldr.w	lr, [pc, #292]	; 8001fb0 <HAL_I2C_Master_Transmit+0x194>
 8001e8c:	fa5f fc81 	uxtb.w	ip, r1
      hi2c->XferSize = hi2c->XferCount;
 8001e90:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8001e92:	ea00 010e 	and.w	r1, r0, lr
 8001e96:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8001fb4 <HAL_I2C_Master_Transmit+0x198>
 8001ea2:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8001fb8 <HAL_I2C_Master_Transmit+0x19c>
 8001ea6:	ea47 0808 	orr.w	r8, r7, r8
    while (hi2c->XferCount > 0U)
 8001eaa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eac:	462a      	mov	r2, r5
 8001eae:	4631      	mov	r1, r6
 8001eb0:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d062      	beq.n	8001f7e <HAL_I2C_Master_Transmit+0x162>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eb8:	f7ff feaa 	bl	8001c10 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ebc:	2800      	cmp	r0, #0
 8001ebe:	d15b      	bne.n	8001f78 <HAL_I2C_Master_Transmit+0x15c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ec0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001ec2:	6821      	ldr	r1, [r4, #0]
 8001ec4:	f810 2b01 	ldrb.w	r2, [r0], #1
      hi2c->XferSize--;
 8001ec8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001eca:	628a      	str	r2, [r1, #40]	; 0x28
      hi2c->XferCount--;
 8001ecc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001ece:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 8001ed0:	6260      	str	r0, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001ed2:	3a01      	subs	r2, #1
      hi2c->XferSize--;
 8001ed4:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 8001ed6:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 8001ed8:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001eda:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001edc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001ede:	b292      	uxth	r2, r2
 8001ee0:	2a00      	cmp	r2, #0
 8001ee2:	d0e2      	beq.n	8001eaa <HAL_I2C_Master_Transmit+0x8e>
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1e0      	bne.n	8001eaa <HAL_I2C_Master_Transmit+0x8e>
 8001ee8:	1c70      	adds	r0, r6, #1
 8001eea:	d11d      	bne.n	8001f28 <HAL_I2C_Master_Transmit+0x10c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001eec:	698b      	ldr	r3, [r1, #24]
 8001eee:	061a      	lsls	r2, r3, #24
 8001ef0:	d5fc      	bpl.n	8001eec <HAL_I2C_Master_Transmit+0xd0>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ef2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001ef4:	2bff      	cmp	r3, #255	; 0xff
 8001ef6:	d930      	bls.n	8001f5a <HAL_I2C_Master_Transmit+0x13e>
  MODIFY_REG(hi2c->Instance->CR2,
 8001ef8:	684b      	ldr	r3, [r1, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001efa:	22ff      	movs	r2, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2,
 8001efc:	ea03 0309 	and.w	r3, r3, r9
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f00:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8001f02:	ea43 0308 	orr.w	r3, r3, r8
 8001f06:	604b      	str	r3, [r1, #4]
 8001f08:	e7cf      	b.n	8001eaa <HAL_I2C_Master_Transmit+0x8e>
    return HAL_BUSY;
 8001f0a:	2002      	movs	r0, #2
}
 8001f0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  MODIFY_REG(hi2c->Instance->CR2,
 8001f10:	685a      	ldr	r2, [r3, #4]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f12:	20ff      	movs	r0, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2,
 8001f14:	f8df c098 	ldr.w	ip, [pc, #152]	; 8001fb0 <HAL_I2C_Master_Transmit+0x194>
 8001f18:	4923      	ldr	r1, [pc, #140]	; (8001fa8 <HAL_I2C_Master_Transmit+0x18c>)
 8001f1a:	ea02 020c 	and.w	r2, r2, ip
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f1e:	8520      	strh	r0, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8001f20:	4339      	orrs	r1, r7
 8001f22:	430a      	orrs	r2, r1
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	e7ba      	b.n	8001e9e <HAL_I2C_Master_Transmit+0x82>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f28:	698b      	ldr	r3, [r1, #24]
 8001f2a:	061b      	lsls	r3, r3, #24
 8001f2c:	d4e1      	bmi.n	8001ef2 <HAL_I2C_Master_Transmit+0xd6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f2e:	f7ff f851 	bl	8000fd4 <HAL_GetTick>
 8001f32:	1b40      	subs	r0, r0, r5
 8001f34:	4286      	cmp	r6, r0
 8001f36:	d302      	bcc.n	8001f3e <HAL_I2C_Master_Transmit+0x122>
 8001f38:	b10e      	cbz	r6, 8001f3e <HAL_I2C_Master_Transmit+0x122>
 8001f3a:	6821      	ldr	r1, [r4, #0]
 8001f3c:	e7d4      	b.n	8001ee8 <HAL_I2C_Master_Transmit+0xcc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f3e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f40:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f42:	2200      	movs	r2, #0
          return HAL_ERROR;
 8001f44:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f46:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8001f48:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f4c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f4e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f52:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 8001f56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          hi2c->XferSize = hi2c->XferCount;
 8001f5a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 8001f5c:	f047 7300 	orr.w	r3, r7, #33554432	; 0x2000000
 8001f60:	6848      	ldr	r0, [r1, #4]
          hi2c->XferSize = hi2c->XferCount;
 8001f62:	b292      	uxth	r2, r2
  MODIFY_REG(hi2c->Instance->CR2,
 8001f64:	ea00 0009 	and.w	r0, r0, r9
 8001f68:	fa5f fc82 	uxtb.w	ip, r2
          hi2c->XferSize = hi2c->XferCount;
 8001f6c:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8001f6e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8001f72:	4303      	orrs	r3, r0
 8001f74:	604b      	str	r3, [r1, #4]
 8001f76:	e798      	b.n	8001eaa <HAL_I2C_Master_Transmit+0x8e>
        return HAL_ERROR;
 8001f78:	2001      	movs	r0, #1
}
 8001f7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f7e:	f7ff fea3 	bl	8001cc8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f82:	2800      	cmp	r0, #0
 8001f84:	d1f8      	bne.n	8001f78 <HAL_I2C_Master_Transmit+0x15c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f86:	6823      	ldr	r3, [r4, #0]
 8001f88:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 8001f8a:	4d08      	ldr	r5, [pc, #32]	; (8001fac <HAL_I2C_Master_Transmit+0x190>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f8c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	402a      	ands	r2, r5
 8001f92:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001f94:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001f98:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f9c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8001fa0:	e7b4      	b.n	8001f0c <HAL_I2C_Master_Transmit+0xf0>
 8001fa2:	bf00      	nop
 8001fa4:	82002000 	.word	0x82002000
 8001fa8:	81ff2000 	.word	0x81ff2000
 8001fac:	fe00e800 	.word	0xfe00e800
 8001fb0:	fc009800 	.word	0xfc009800
 8001fb4:	01ff0000 	.word	0x01ff0000
 8001fb8:	fc009c00 	.word	0xfc009c00

08001fbc <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fbc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b20      	cmp	r3, #32
{
 8001fc4:	b470      	push	{r4, r5, r6}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fc6:	d11f      	bne.n	8002008 <HAL_I2CEx_ConfigAnalogFilter+0x4c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fc8:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8001fcc:	2a01      	cmp	r2, #1
 8001fce:	d01b      	beq.n	8002008 <HAL_I2CEx_ConfigAnalogFilter+0x4c>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fd0:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fd2:	2424      	movs	r4, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fd4:	2600      	movs	r6, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fd6:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8001fda:	6815      	ldr	r5, [r2, #0]

    return HAL_OK;
 8001fdc:	4634      	mov	r4, r6
    __HAL_I2C_DISABLE(hi2c);
 8001fde:	f025 0501 	bic.w	r5, r5, #1
 8001fe2:	6015      	str	r5, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001fe4:	6815      	ldr	r5, [r2, #0]
 8001fe6:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 8001fea:	6015      	str	r5, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8001fec:	6815      	ldr	r5, [r2, #0]
 8001fee:	4329      	orrs	r1, r5
 8001ff0:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8001ff2:	6811      	ldr	r1, [r2, #0]
 8001ff4:	f041 0101 	orr.w	r1, r1, #1
 8001ff8:	6011      	str	r1, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8001ffa:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8001ffe:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002002:	4620      	mov	r0, r4
 8002004:	bc70      	pop	{r4, r5, r6}
 8002006:	4770      	bx	lr
    return HAL_BUSY;
 8002008:	2402      	movs	r4, #2
}
 800200a:	4620      	mov	r0, r4
 800200c:	bc70      	pop	{r4, r5, r6}
 800200e:	4770      	bx	lr

08002010 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002010:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b20      	cmp	r3, #32
{
 8002018:	b470      	push	{r4, r5, r6}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800201a:	d11e      	bne.n	800205a <HAL_I2CEx_ConfigDigitalFilter+0x4a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800201c:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8002020:	2a01      	cmp	r2, #1
 8002022:	d01a      	beq.n	800205a <HAL_I2CEx_ConfigDigitalFilter+0x4a>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002024:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002026:	2424      	movs	r4, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002028:	2600      	movs	r6, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 800202a:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800202e:	6814      	ldr	r4, [r2, #0]

    return HAL_OK;
 8002030:	4635      	mov	r5, r6
    __HAL_I2C_DISABLE(hi2c);
 8002032:	f024 0401 	bic.w	r4, r4, #1
 8002036:	6014      	str	r4, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 8002038:	6814      	ldr	r4, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 800203a:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 800203e:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 8002042:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002044:	6811      	ldr	r1, [r2, #0]
 8002046:	f041 0101 	orr.w	r1, r1, #1
 800204a:	6011      	str	r1, [r2, #0]
    __HAL_UNLOCK(hi2c);
 800204c:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8002050:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002054:	4628      	mov	r0, r5
 8002056:	bc70      	pop	{r4, r5, r6}
 8002058:	4770      	bx	lr
    return HAL_BUSY;
 800205a:	2502      	movs	r5, #2
}
 800205c:	4628      	mov	r0, r5
 800205e:	bc70      	pop	{r4, r5, r6}
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop

08002064 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002064:	4a02      	ldr	r2, [pc, #8]	; (8002070 <HAL_PWR_EnableBkUpAccess+0xc>)
 8002066:	6813      	ldr	r3, [r2, #0]
 8002068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800206c:	6013      	str	r3, [r2, #0]
}
 800206e:	4770      	bx	lr
 8002070:	40007000 	.word	0x40007000

08002074 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002074:	4a1b      	ldr	r2, [pc, #108]	; (80020e4 <HAL_PWREx_EnableOverDrive+0x70>)
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002076:	4b1c      	ldr	r3, [pc, #112]	; (80020e8 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002078:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800207a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
{
 800207e:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8002080:	6411      	str	r1, [r2, #64]	; 0x40
{
 8002082:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 8002084:	6c12      	ldr	r2, [r2, #64]	; 0x40

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002086:	461c      	mov	r4, r3
  __HAL_RCC_PWR_CLK_ENABLE();
 8002088:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800208c:	9201      	str	r2, [sp, #4]
 800208e:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002096:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8002098:	f7fe ff9c 	bl	8000fd4 <HAL_GetTick>
 800209c:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800209e:	e005      	b.n	80020ac <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80020a0:	f7fe ff98 	bl	8000fd4 <HAL_GetTick>
 80020a4:	1b40      	subs	r0, r0, r5
 80020a6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80020aa:	d817      	bhi.n	80020dc <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80020ac:	6863      	ldr	r3, [r4, #4]
 80020ae:	03da      	lsls	r2, r3, #15
 80020b0:	d5f6      	bpl.n	80020a0 <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80020b2:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80020b4:	4d0c      	ldr	r5, [pc, #48]	; (80020e8 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80020b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020ba:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80020bc:	f7fe ff8a 	bl	8000fd4 <HAL_GetTick>
 80020c0:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80020c2:	e005      	b.n	80020d0 <HAL_PWREx_EnableOverDrive+0x5c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80020c4:	f7fe ff86 	bl	8000fd4 <HAL_GetTick>
 80020c8:	1b00      	subs	r0, r0, r4
 80020ca:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80020ce:	d805      	bhi.n	80020dc <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80020d0:	686b      	ldr	r3, [r5, #4]
 80020d2:	039b      	lsls	r3, r3, #14
 80020d4:	d5f6      	bpl.n	80020c4 <HAL_PWREx_EnableOverDrive+0x50>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80020d6:	2000      	movs	r0, #0
}
 80020d8:	b003      	add	sp, #12
 80020da:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 80020dc:	2003      	movs	r0, #3
}
 80020de:	b003      	add	sp, #12
 80020e0:	bd30      	pop	{r4, r5, pc}
 80020e2:	bf00      	nop
 80020e4:	40023800 	.word	0x40023800
 80020e8:	40007000 	.word	0x40007000

080020ec <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020ec:	2800      	cmp	r0, #0
 80020ee:	f000 814c 	beq.w	800238a <HAL_RCC_OscConfig+0x29e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020f2:	6803      	ldr	r3, [r0, #0]
{
 80020f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020f8:	07dd      	lsls	r5, r3, #31
{
 80020fa:	b082      	sub	sp, #8
 80020fc:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020fe:	d535      	bpl.n	800216c <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002100:	49ac      	ldr	r1, [pc, #688]	; (80023b4 <HAL_RCC_OscConfig+0x2c8>)
 8002102:	688a      	ldr	r2, [r1, #8]
 8002104:	f002 020c 	and.w	r2, r2, #12
 8002108:	2a04      	cmp	r2, #4
 800210a:	f000 80ff 	beq.w	800230c <HAL_RCC_OscConfig+0x220>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800210e:	688a      	ldr	r2, [r1, #8]
 8002110:	f002 020c 	and.w	r2, r2, #12
 8002114:	2a08      	cmp	r2, #8
 8002116:	f000 80f5 	beq.w	8002304 <HAL_RCC_OscConfig+0x218>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800211a:	6863      	ldr	r3, [r4, #4]
 800211c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002120:	d010      	beq.n	8002144 <HAL_RCC_OscConfig+0x58>
 8002122:	2b00      	cmp	r3, #0
 8002124:	f000 811a 	beq.w	800235c <HAL_RCC_OscConfig+0x270>
 8002128:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800212c:	4ba1      	ldr	r3, [pc, #644]	; (80023b4 <HAL_RCC_OscConfig+0x2c8>)
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	f000 8164 	beq.w	80023fc <HAL_RCC_OscConfig+0x310>
 8002134:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	e004      	b.n	800214e <HAL_RCC_OscConfig+0x62>
 8002144:	4a9b      	ldr	r2, [pc, #620]	; (80023b4 <HAL_RCC_OscConfig+0x2c8>)
 8002146:	6813      	ldr	r3, [r2, #0]
 8002148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800214c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214e:	f7fe ff41 	bl	8000fd4 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002152:	4d98      	ldr	r5, [pc, #608]	; (80023b4 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8002154:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002156:	e005      	b.n	8002164 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002158:	f7fe ff3c 	bl	8000fd4 <HAL_GetTick>
 800215c:	1b80      	subs	r0, r0, r6
 800215e:	2864      	cmp	r0, #100	; 0x64
 8002160:	f200 80ef 	bhi.w	8002342 <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002164:	682b      	ldr	r3, [r5, #0]
 8002166:	039a      	lsls	r2, r3, #14
 8002168:	d5f6      	bpl.n	8002158 <HAL_RCC_OscConfig+0x6c>
 800216a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800216c:	079f      	lsls	r7, r3, #30
 800216e:	d442      	bmi.n	80021f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002170:	071a      	lsls	r2, r3, #28
 8002172:	d517      	bpl.n	80021a4 <HAL_RCC_OscConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002174:	6963      	ldr	r3, [r4, #20]
 8002176:	2b00      	cmp	r3, #0
 8002178:	f000 80b1 	beq.w	80022de <HAL_RCC_OscConfig+0x1f2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800217c:	4b8d      	ldr	r3, [pc, #564]	; (80023b4 <HAL_RCC_OscConfig+0x2c8>)
 800217e:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002180:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 8002182:	f042 0201 	orr.w	r2, r2, #1
 8002186:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8002188:	f7fe ff24 	bl	8000fd4 <HAL_GetTick>
 800218c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800218e:	e005      	b.n	800219c <HAL_RCC_OscConfig+0xb0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002190:	f7fe ff20 	bl	8000fd4 <HAL_GetTick>
 8002194:	1b80      	subs	r0, r0, r6
 8002196:	2802      	cmp	r0, #2
 8002198:	f200 80d3 	bhi.w	8002342 <HAL_RCC_OscConfig+0x256>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800219c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800219e:	079b      	lsls	r3, r3, #30
 80021a0:	d5f6      	bpl.n	8002190 <HAL_RCC_OscConfig+0xa4>
 80021a2:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021a4:	075d      	lsls	r5, r3, #29
 80021a6:	d56b      	bpl.n	8002280 <HAL_RCC_OscConfig+0x194>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021a8:	4b82      	ldr	r3, [pc, #520]	; (80023b4 <HAL_RCC_OscConfig+0x2c8>)
 80021aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021ac:	00d0      	lsls	r0, r2, #3
 80021ae:	f100 80ee 	bmi.w	800238e <HAL_RCC_OscConfig+0x2a2>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80021b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 80021b4:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80021b6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80021ba:	641a      	str	r2, [r3, #64]	; 0x40
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c2:	9301      	str	r3, [sp, #4]
 80021c4:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021c6:	4b7c      	ldr	r3, [pc, #496]	; (80023b8 <HAL_RCC_OscConfig+0x2cc>)
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	05d1      	lsls	r1, r2, #23
 80021cc:	f140 80a8 	bpl.w	8002320 <HAL_RCC_OscConfig+0x234>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021d0:	68a3      	ldr	r3, [r4, #8]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d039      	beq.n	800224a <HAL_RCC_OscConfig+0x15e>
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f000 80db 	beq.w	8002392 <HAL_RCC_OscConfig+0x2a6>
 80021dc:	2b05      	cmp	r3, #5
 80021de:	4b75      	ldr	r3, [pc, #468]	; (80023b4 <HAL_RCC_OscConfig+0x2c8>)
 80021e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80021e2:	f000 8113 	beq.w	800240c <HAL_RCC_OscConfig+0x320>
 80021e6:	f022 0201 	bic.w	r2, r2, #1
 80021ea:	671a      	str	r2, [r3, #112]	; 0x70
 80021ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80021ee:	f022 0204 	bic.w	r2, r2, #4
 80021f2:	671a      	str	r2, [r3, #112]	; 0x70
 80021f4:	e02e      	b.n	8002254 <HAL_RCC_OscConfig+0x168>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021f6:	4a6f      	ldr	r2, [pc, #444]	; (80023b4 <HAL_RCC_OscConfig+0x2c8>)
 80021f8:	6891      	ldr	r1, [r2, #8]
 80021fa:	f011 0f0c 	tst.w	r1, #12
 80021fe:	d063      	beq.n	80022c8 <HAL_RCC_OscConfig+0x1dc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002200:	6891      	ldr	r1, [r2, #8]
 8002202:	f001 010c 	and.w	r1, r1, #12
 8002206:	2908      	cmp	r1, #8
 8002208:	d05b      	beq.n	80022c2 <HAL_RCC_OscConfig+0x1d6>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800220a:	68e3      	ldr	r3, [r4, #12]
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 80e1 	beq.w	80023d4 <HAL_RCC_OscConfig+0x2e8>
        __HAL_RCC_HSI_ENABLE();
 8002212:	4b68      	ldr	r3, [pc, #416]	; (80023b4 <HAL_RCC_OscConfig+0x2c8>)
 8002214:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002216:	461d      	mov	r5, r3
        __HAL_RCC_HSI_ENABLE();
 8002218:	f042 0201 	orr.w	r2, r2, #1
 800221c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800221e:	f7fe fed9 	bl	8000fd4 <HAL_GetTick>
 8002222:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002224:	e005      	b.n	8002232 <HAL_RCC_OscConfig+0x146>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002226:	f7fe fed5 	bl	8000fd4 <HAL_GetTick>
 800222a:	1b80      	subs	r0, r0, r6
 800222c:	2802      	cmp	r0, #2
 800222e:	f200 8088 	bhi.w	8002342 <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002232:	682b      	ldr	r3, [r5, #0]
 8002234:	0798      	lsls	r0, r3, #30
 8002236:	d5f6      	bpl.n	8002226 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002238:	682b      	ldr	r3, [r5, #0]
 800223a:	6922      	ldr	r2, [r4, #16]
 800223c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002240:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002244:	602b      	str	r3, [r5, #0]
 8002246:	6823      	ldr	r3, [r4, #0]
 8002248:	e792      	b.n	8002170 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800224a:	4a5a      	ldr	r2, [pc, #360]	; (80023b4 <HAL_RCC_OscConfig+0x2c8>)
 800224c:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800224e:	f043 0301 	orr.w	r3, r3, #1
 8002252:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002254:	f7fe febe 	bl	8000fd4 <HAL_GetTick>

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002258:	4e56      	ldr	r6, [pc, #344]	; (80023b4 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 800225a:	4680      	mov	r8, r0
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800225c:	f241 3788 	movw	r7, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002260:	e005      	b.n	800226e <HAL_RCC_OscConfig+0x182>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002262:	f7fe feb7 	bl	8000fd4 <HAL_GetTick>
 8002266:	eba0 0008 	sub.w	r0, r0, r8
 800226a:	42b8      	cmp	r0, r7
 800226c:	d869      	bhi.n	8002342 <HAL_RCC_OscConfig+0x256>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800226e:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8002270:	079b      	lsls	r3, r3, #30
 8002272:	d5f6      	bpl.n	8002262 <HAL_RCC_OscConfig+0x176>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002274:	b125      	cbz	r5, 8002280 <HAL_RCC_OscConfig+0x194>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002276:	4a4f      	ldr	r2, [pc, #316]	; (80023b4 <HAL_RCC_OscConfig+0x2c8>)
 8002278:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800227a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800227e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002280:	69a0      	ldr	r0, [r4, #24]
 8002282:	b1d0      	cbz	r0, 80022ba <HAL_RCC_OscConfig+0x1ce>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002284:	4b4b      	ldr	r3, [pc, #300]	; (80023b4 <HAL_RCC_OscConfig+0x2c8>)
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	f002 020c 	and.w	r2, r2, #12
 800228c:	2a08      	cmp	r2, #8
 800228e:	f000 80c5 	beq.w	800241c <HAL_RCC_OscConfig+0x330>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002292:	2802      	cmp	r0, #2
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002294:	681a      	ldr	r2, [r3, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002296:	f000 80eb 	beq.w	8002470 <HAL_RCC_OscConfig+0x384>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800229a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800229e:	461c      	mov	r4, r3
        __HAL_RCC_PLL_DISABLE();
 80022a0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80022a2:	f7fe fe97 	bl	8000fd4 <HAL_GetTick>
 80022a6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022a8:	e004      	b.n	80022b4 <HAL_RCC_OscConfig+0x1c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022aa:	f7fe fe93 	bl	8000fd4 <HAL_GetTick>
 80022ae:	1b40      	subs	r0, r0, r5
 80022b0:	2802      	cmp	r0, #2
 80022b2:	d846      	bhi.n	8002342 <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022b4:	6823      	ldr	r3, [r4, #0]
 80022b6:	019b      	lsls	r3, r3, #6
 80022b8:	d4f7      	bmi.n	80022aa <HAL_RCC_OscConfig+0x1be>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80022ba:	2000      	movs	r0, #0
}
 80022bc:	b002      	add	sp, #8
 80022be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022c2:	6852      	ldr	r2, [r2, #4]
 80022c4:	0256      	lsls	r6, r2, #9
 80022c6:	d4a0      	bmi.n	800220a <HAL_RCC_OscConfig+0x11e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022c8:	4a3a      	ldr	r2, [pc, #232]	; (80023b4 <HAL_RCC_OscConfig+0x2c8>)
 80022ca:	6812      	ldr	r2, [r2, #0]
 80022cc:	0795      	lsls	r5, r2, #30
 80022ce:	d53c      	bpl.n	800234a <HAL_RCC_OscConfig+0x25e>
 80022d0:	68e2      	ldr	r2, [r4, #12]
 80022d2:	2a01      	cmp	r2, #1
 80022d4:	d039      	beq.n	800234a <HAL_RCC_OscConfig+0x25e>
        return HAL_ERROR;
 80022d6:	2001      	movs	r0, #1
}
 80022d8:	b002      	add	sp, #8
 80022da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80022de:	4b35      	ldr	r3, [pc, #212]	; (80023b4 <HAL_RCC_OscConfig+0x2c8>)
 80022e0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e2:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 80022e4:	f022 0201 	bic.w	r2, r2, #1
 80022e8:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 80022ea:	f7fe fe73 	bl	8000fd4 <HAL_GetTick>
 80022ee:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f0:	e004      	b.n	80022fc <HAL_RCC_OscConfig+0x210>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022f2:	f7fe fe6f 	bl	8000fd4 <HAL_GetTick>
 80022f6:	1b80      	subs	r0, r0, r6
 80022f8:	2802      	cmp	r0, #2
 80022fa:	d822      	bhi.n	8002342 <HAL_RCC_OscConfig+0x256>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022fc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80022fe:	079f      	lsls	r7, r3, #30
 8002300:	d4f7      	bmi.n	80022f2 <HAL_RCC_OscConfig+0x206>
 8002302:	e74e      	b.n	80021a2 <HAL_RCC_OscConfig+0xb6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002304:	684a      	ldr	r2, [r1, #4]
 8002306:	0250      	lsls	r0, r2, #9
 8002308:	f57f af07 	bpl.w	800211a <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800230c:	4a29      	ldr	r2, [pc, #164]	; (80023b4 <HAL_RCC_OscConfig+0x2c8>)
 800230e:	6812      	ldr	r2, [r2, #0]
 8002310:	0391      	lsls	r1, r2, #14
 8002312:	f57f af2b 	bpl.w	800216c <HAL_RCC_OscConfig+0x80>
 8002316:	6862      	ldr	r2, [r4, #4]
 8002318:	2a00      	cmp	r2, #0
 800231a:	f47f af27 	bne.w	800216c <HAL_RCC_OscConfig+0x80>
 800231e:	e7da      	b.n	80022d6 <HAL_RCC_OscConfig+0x1ea>
      PWR->CR1 |= PWR_CR1_DBP;
 8002320:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002322:	461e      	mov	r6, r3
      PWR->CR1 |= PWR_CR1_DBP;
 8002324:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002328:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800232a:	f7fe fe53 	bl	8000fd4 <HAL_GetTick>
 800232e:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002330:	6833      	ldr	r3, [r6, #0]
 8002332:	05da      	lsls	r2, r3, #23
 8002334:	f53f af4c 	bmi.w	80021d0 <HAL_RCC_OscConfig+0xe4>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002338:	f7fe fe4c 	bl	8000fd4 <HAL_GetTick>
 800233c:	1bc0      	subs	r0, r0, r7
 800233e:	2864      	cmp	r0, #100	; 0x64
 8002340:	d9f6      	bls.n	8002330 <HAL_RCC_OscConfig+0x244>
            return HAL_TIMEOUT;
 8002342:	2003      	movs	r0, #3
}
 8002344:	b002      	add	sp, #8
 8002346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800234a:	491a      	ldr	r1, [pc, #104]	; (80023b4 <HAL_RCC_OscConfig+0x2c8>)
 800234c:	6920      	ldr	r0, [r4, #16]
 800234e:	680a      	ldr	r2, [r1, #0]
 8002350:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002354:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8002358:	600a      	str	r2, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800235a:	e709      	b.n	8002170 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800235c:	4b15      	ldr	r3, [pc, #84]	; (80023b4 <HAL_RCC_OscConfig+0x2c8>)
 800235e:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002360:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002362:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800236e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002370:	f7fe fe30 	bl	8000fd4 <HAL_GetTick>
 8002374:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002376:	e004      	b.n	8002382 <HAL_RCC_OscConfig+0x296>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002378:	f7fe fe2c 	bl	8000fd4 <HAL_GetTick>
 800237c:	1b80      	subs	r0, r0, r6
 800237e:	2864      	cmp	r0, #100	; 0x64
 8002380:	d8df      	bhi.n	8002342 <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002382:	682b      	ldr	r3, [r5, #0]
 8002384:	039b      	lsls	r3, r3, #14
 8002386:	d4f7      	bmi.n	8002378 <HAL_RCC_OscConfig+0x28c>
 8002388:	e6ef      	b.n	800216a <HAL_RCC_OscConfig+0x7e>
    return HAL_ERROR;
 800238a:	2001      	movs	r0, #1
}
 800238c:	4770      	bx	lr
  FlagStatus pwrclkchanged = RESET;
 800238e:	2500      	movs	r5, #0
 8002390:	e719      	b.n	80021c6 <HAL_RCC_OscConfig+0xda>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002392:	4b08      	ldr	r3, [pc, #32]	; (80023b4 <HAL_RCC_OscConfig+0x2c8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002394:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002398:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800239a:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800239c:	f022 0201 	bic.w	r2, r2, #1
 80023a0:	671a      	str	r2, [r3, #112]	; 0x70
 80023a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80023a4:	f022 0204 	bic.w	r2, r2, #4
 80023a8:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 80023aa:	f7fe fe13 	bl	8000fd4 <HAL_GetTick>
 80023ae:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b0:	e009      	b.n	80023c6 <HAL_RCC_OscConfig+0x2da>
 80023b2:	bf00      	nop
 80023b4:	40023800 	.word	0x40023800
 80023b8:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023bc:	f7fe fe0a 	bl	8000fd4 <HAL_GetTick>
 80023c0:	1bc0      	subs	r0, r0, r7
 80023c2:	4540      	cmp	r0, r8
 80023c4:	d8bd      	bhi.n	8002342 <HAL_RCC_OscConfig+0x256>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023c6:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80023c8:	0798      	lsls	r0, r3, #30
 80023ca:	d4f7      	bmi.n	80023bc <HAL_RCC_OscConfig+0x2d0>
    if (pwrclkchanged == SET)
 80023cc:	2d00      	cmp	r5, #0
 80023ce:	f43f af57 	beq.w	8002280 <HAL_RCC_OscConfig+0x194>
 80023d2:	e750      	b.n	8002276 <HAL_RCC_OscConfig+0x18a>
        __HAL_RCC_HSI_DISABLE();
 80023d4:	4b41      	ldr	r3, [pc, #260]	; (80024dc <HAL_RCC_OscConfig+0x3f0>)
 80023d6:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023d8:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 80023da:	f022 0201 	bic.w	r2, r2, #1
 80023de:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80023e0:	f7fe fdf8 	bl	8000fd4 <HAL_GetTick>
 80023e4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023e6:	e004      	b.n	80023f2 <HAL_RCC_OscConfig+0x306>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e8:	f7fe fdf4 	bl	8000fd4 <HAL_GetTick>
 80023ec:	1b80      	subs	r0, r0, r6
 80023ee:	2802      	cmp	r0, #2
 80023f0:	d8a7      	bhi.n	8002342 <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023f2:	682b      	ldr	r3, [r5, #0]
 80023f4:	0799      	lsls	r1, r3, #30
 80023f6:	d4f7      	bmi.n	80023e8 <HAL_RCC_OscConfig+0x2fc>
 80023f8:	6823      	ldr	r3, [r4, #0]
 80023fa:	e6b9      	b.n	8002170 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023fc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002400:	601a      	str	r2, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	e6a0      	b.n	800214e <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800240c:	f042 0204 	orr.w	r2, r2, #4
 8002410:	671a      	str	r2, [r3, #112]	; 0x70
 8002412:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002414:	f042 0201 	orr.w	r2, r2, #1
 8002418:	671a      	str	r2, [r3, #112]	; 0x70
 800241a:	e71b      	b.n	8002254 <HAL_RCC_OscConfig+0x168>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800241c:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 800241e:	685a      	ldr	r2, [r3, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002420:	f43f af5a 	beq.w	80022d8 <HAL_RCC_OscConfig+0x1ec>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002424:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002428:	69e1      	ldr	r1, [r4, #28]
 800242a:	428b      	cmp	r3, r1
 800242c:	f47f af53 	bne.w	80022d6 <HAL_RCC_OscConfig+0x1ea>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002430:	f002 033f 	and.w	r3, r2, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002434:	6a21      	ldr	r1, [r4, #32]
 8002436:	428b      	cmp	r3, r1
 8002438:	f47f af4d 	bne.w	80022d6 <HAL_RCC_OscConfig+0x1ea>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800243c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002440:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002442:	4013      	ands	r3, r2
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002444:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 8002448:	f47f af45 	bne.w	80022d6 <HAL_RCC_OscConfig+0x1ea>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800244c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800244e:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 8002452:	085b      	lsrs	r3, r3, #1
 8002454:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002456:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 800245a:	f47f af3c 	bne.w	80022d6 <HAL_RCC_OscConfig+0x1ea>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800245e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002460:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002464:	ebb2 6f03 	cmp.w	r2, r3, lsl #24
    return HAL_ERROR;
 8002468:	bf14      	ite	ne
 800246a:	2001      	movne	r0, #1
 800246c:	2000      	moveq	r0, #0
 800246e:	e733      	b.n	80022d8 <HAL_RCC_OscConfig+0x1ec>
        __HAL_RCC_PLL_DISABLE();
 8002470:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002474:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 8002476:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002478:	f7fe fdac 	bl	8000fd4 <HAL_GetTick>
 800247c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800247e:	e005      	b.n	800248c <HAL_RCC_OscConfig+0x3a0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002480:	f7fe fda8 	bl	8000fd4 <HAL_GetTick>
 8002484:	1b80      	subs	r0, r0, r6
 8002486:	2802      	cmp	r0, #2
 8002488:	f63f af5b 	bhi.w	8002342 <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800248c:	682b      	ldr	r3, [r5, #0]
 800248e:	0199      	lsls	r1, r3, #6
 8002490:	d4f6      	bmi.n	8002480 <HAL_RCC_OscConfig+0x394>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002492:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8002496:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002498:	4313      	orrs	r3, r2
 800249a:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 800249e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024a2:	4c0e      	ldr	r4, [pc, #56]	; (80024dc <HAL_RCC_OscConfig+0x3f0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024a4:	0852      	lsrs	r2, r2, #1
 80024a6:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80024aa:	3a01      	subs	r2, #1
 80024ac:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80024b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80024b4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80024b6:	682b      	ldr	r3, [r5, #0]
 80024b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024bc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80024be:	f7fe fd89 	bl	8000fd4 <HAL_GetTick>
 80024c2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024c4:	e005      	b.n	80024d2 <HAL_RCC_OscConfig+0x3e6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c6:	f7fe fd85 	bl	8000fd4 <HAL_GetTick>
 80024ca:	1b40      	subs	r0, r0, r5
 80024cc:	2802      	cmp	r0, #2
 80024ce:	f63f af38 	bhi.w	8002342 <HAL_RCC_OscConfig+0x256>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024d2:	6823      	ldr	r3, [r4, #0]
 80024d4:	019a      	lsls	r2, r3, #6
 80024d6:	d5f6      	bpl.n	80024c6 <HAL_RCC_OscConfig+0x3da>
 80024d8:	e6ef      	b.n	80022ba <HAL_RCC_OscConfig+0x1ce>
 80024da:	bf00      	nop
 80024dc:	40023800 	.word	0x40023800

080024e0 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024e0:	b178      	cbz	r0, 8002502 <HAL_RCC_ClockConfig+0x22>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024e2:	4a5e      	ldr	r2, [pc, #376]	; (800265c <HAL_RCC_ClockConfig+0x17c>)
 80024e4:	6813      	ldr	r3, [r2, #0]
 80024e6:	f003 030f 	and.w	r3, r3, #15
 80024ea:	428b      	cmp	r3, r1
 80024ec:	d20b      	bcs.n	8002506 <HAL_RCC_ClockConfig+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ee:	6813      	ldr	r3, [r2, #0]
 80024f0:	f023 030f 	bic.w	r3, r3, #15
 80024f4:	430b      	orrs	r3, r1
 80024f6:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f8:	6813      	ldr	r3, [r2, #0]
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	428b      	cmp	r3, r1
 8002500:	d001      	beq.n	8002506 <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 8002502:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);

  return HAL_OK;
}
 8002504:	4770      	bx	lr
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002506:	6803      	ldr	r3, [r0, #0]
{
 8002508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800250c:	079d      	lsls	r5, r3, #30
 800250e:	d514      	bpl.n	800253a <HAL_RCC_ClockConfig+0x5a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002510:	075c      	lsls	r4, r3, #29
 8002512:	d504      	bpl.n	800251e <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002514:	4c52      	ldr	r4, [pc, #328]	; (8002660 <HAL_RCC_ClockConfig+0x180>)
 8002516:	68a2      	ldr	r2, [r4, #8]
 8002518:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800251c:	60a2      	str	r2, [r4, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800251e:	071a      	lsls	r2, r3, #28
 8002520:	d504      	bpl.n	800252c <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002522:	4c4f      	ldr	r4, [pc, #316]	; (8002660 <HAL_RCC_ClockConfig+0x180>)
 8002524:	68a2      	ldr	r2, [r4, #8]
 8002526:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800252a:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800252c:	4c4c      	ldr	r4, [pc, #304]	; (8002660 <HAL_RCC_ClockConfig+0x180>)
 800252e:	6885      	ldr	r5, [r0, #8]
 8002530:	68a2      	ldr	r2, [r4, #8]
 8002532:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002536:	432a      	orrs	r2, r5
 8002538:	60a2      	str	r2, [r4, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800253a:	07df      	lsls	r7, r3, #31
 800253c:	4604      	mov	r4, r0
 800253e:	460d      	mov	r5, r1
 8002540:	d521      	bpl.n	8002586 <HAL_RCC_ClockConfig+0xa6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002542:	6842      	ldr	r2, [r0, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002544:	4b46      	ldr	r3, [pc, #280]	; (8002660 <HAL_RCC_ClockConfig+0x180>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002546:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002548:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800254a:	d063      	beq.n	8002614 <HAL_RCC_ClockConfig+0x134>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800254c:	2a02      	cmp	r2, #2
 800254e:	d079      	beq.n	8002644 <HAL_RCC_ClockConfig+0x164>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002550:	0799      	lsls	r1, r3, #30
 8002552:	d528      	bpl.n	80025a6 <HAL_RCC_ClockConfig+0xc6>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002554:	4942      	ldr	r1, [pc, #264]	; (8002660 <HAL_RCC_ClockConfig+0x180>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002556:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800255a:	688b      	ldr	r3, [r1, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800255c:	460e      	mov	r6, r1
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800255e:	f023 0303 	bic.w	r3, r3, #3
 8002562:	4313      	orrs	r3, r2
 8002564:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002566:	f7fe fd35 	bl	8000fd4 <HAL_GetTick>
 800256a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256c:	e004      	b.n	8002578 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800256e:	f7fe fd31 	bl	8000fd4 <HAL_GetTick>
 8002572:	1bc0      	subs	r0, r0, r7
 8002574:	4540      	cmp	r0, r8
 8002576:	d863      	bhi.n	8002640 <HAL_RCC_ClockConfig+0x160>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002578:	68b3      	ldr	r3, [r6, #8]
 800257a:	6862      	ldr	r2, [r4, #4]
 800257c:	f003 030c 	and.w	r3, r3, #12
 8002580:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002584:	d1f3      	bne.n	800256e <HAL_RCC_ClockConfig+0x8e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002586:	4a35      	ldr	r2, [pc, #212]	; (800265c <HAL_RCC_ClockConfig+0x17c>)
 8002588:	6813      	ldr	r3, [r2, #0]
 800258a:	f003 030f 	and.w	r3, r3, #15
 800258e:	42ab      	cmp	r3, r5
 8002590:	d90c      	bls.n	80025ac <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002592:	6813      	ldr	r3, [r2, #0]
 8002594:	f023 030f 	bic.w	r3, r3, #15
 8002598:	432b      	orrs	r3, r5
 800259a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800259c:	6813      	ldr	r3, [r2, #0]
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	42ab      	cmp	r3, r5
 80025a4:	d002      	beq.n	80025ac <HAL_RCC_ClockConfig+0xcc>
    return HAL_ERROR;
 80025a6:	2001      	movs	r0, #1
}
 80025a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ac:	6823      	ldr	r3, [r4, #0]
 80025ae:	075a      	lsls	r2, r3, #29
 80025b0:	d506      	bpl.n	80025c0 <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025b2:	492b      	ldr	r1, [pc, #172]	; (8002660 <HAL_RCC_ClockConfig+0x180>)
 80025b4:	68e0      	ldr	r0, [r4, #12]
 80025b6:	688a      	ldr	r2, [r1, #8]
 80025b8:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80025bc:	4302      	orrs	r2, r0
 80025be:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025c0:	071b      	lsls	r3, r3, #28
 80025c2:	d507      	bpl.n	80025d4 <HAL_RCC_ClockConfig+0xf4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025c4:	4a26      	ldr	r2, [pc, #152]	; (8002660 <HAL_RCC_ClockConfig+0x180>)
 80025c6:	6921      	ldr	r1, [r4, #16]
 80025c8:	6893      	ldr	r3, [r2, #8]
 80025ca:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80025ce:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80025d2:	6093      	str	r3, [r2, #8]
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025d4:	4922      	ldr	r1, [pc, #136]	; (8002660 <HAL_RCC_ClockConfig+0x180>)
 80025d6:	688b      	ldr	r3, [r1, #8]
 80025d8:	f003 030c 	and.w	r3, r3, #12
 80025dc:	2b04      	cmp	r3, #4
 80025de:	d01c      	beq.n	800261a <HAL_RCC_ClockConfig+0x13a>
 80025e0:	2b08      	cmp	r3, #8
 80025e2:	d12b      	bne.n	800263c <HAL_RCC_ClockConfig+0x15c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025e4:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80025e6:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025e8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ec:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80025ee:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 80025f2:	d12a      	bne.n	800264a <HAL_RCC_ClockConfig+0x16a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025f4:	481b      	ldr	r0, [pc, #108]	; (8002664 <HAL_RCC_ClockConfig+0x184>)
 80025f6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80025fa:	fba1 0100 	umull	r0, r1, r1, r0
 80025fe:	f7fe fb2d 	bl	8000c5c <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002602:	4b17      	ldr	r3, [pc, #92]	; (8002660 <HAL_RCC_ClockConfig+0x180>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800260a:	3301      	adds	r3, #1
 800260c:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800260e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002612:	e003      	b.n	800261c <HAL_RCC_ClockConfig+0x13c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002614:	039e      	lsls	r6, r3, #14
 8002616:	d49d      	bmi.n	8002554 <HAL_RCC_ClockConfig+0x74>
 8002618:	e7c5      	b.n	80025a6 <HAL_RCC_ClockConfig+0xc6>
      sysclockfreq = HSE_VALUE;
 800261a:	4b13      	ldr	r3, [pc, #76]	; (8002668 <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800261c:	4a10      	ldr	r2, [pc, #64]	; (8002660 <HAL_RCC_ClockConfig+0x180>)
 800261e:	4c13      	ldr	r4, [pc, #76]	; (800266c <HAL_RCC_ClockConfig+0x18c>)
 8002620:	6892      	ldr	r2, [r2, #8]
  HAL_InitTick(uwTickPrio);
 8002622:	4813      	ldr	r0, [pc, #76]	; (8002670 <HAL_RCC_ClockConfig+0x190>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002624:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002628:	4912      	ldr	r1, [pc, #72]	; (8002674 <HAL_RCC_ClockConfig+0x194>)
  HAL_InitTick(uwTickPrio);
 800262a:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800262c:	5ca2      	ldrb	r2, [r4, r2]
 800262e:	40d3      	lsrs	r3, r2
 8002630:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 8002632:	f7fe fc93 	bl	8000f5c <HAL_InitTick>
  return HAL_OK;
 8002636:	2000      	movs	r0, #0
}
 8002638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      sysclockfreq = HSI_VALUE;
 800263c:	4b09      	ldr	r3, [pc, #36]	; (8002664 <HAL_RCC_ClockConfig+0x184>)
 800263e:	e7ed      	b.n	800261c <HAL_RCC_ClockConfig+0x13c>
        return HAL_TIMEOUT;
 8002640:	2003      	movs	r0, #3
 8002642:	e7b1      	b.n	80025a8 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002644:	0198      	lsls	r0, r3, #6
 8002646:	d485      	bmi.n	8002554 <HAL_RCC_ClockConfig+0x74>
 8002648:	e7ad      	b.n	80025a6 <HAL_RCC_ClockConfig+0xc6>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800264a:	4807      	ldr	r0, [pc, #28]	; (8002668 <HAL_RCC_ClockConfig+0x188>)
 800264c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002650:	2300      	movs	r3, #0
 8002652:	fba1 0100 	umull	r0, r1, r1, r0
 8002656:	f7fe fb01 	bl	8000c5c <__aeabi_uldivmod>
 800265a:	e7d2      	b.n	8002602 <HAL_RCC_ClockConfig+0x122>
 800265c:	40023c00 	.word	0x40023c00
 8002660:	40023800 	.word	0x40023800
 8002664:	00f42400 	.word	0x00f42400
 8002668:	017d7840 	.word	0x017d7840
 800266c:	0800e2fc 	.word	0x0800e2fc
 8002670:	20000004 	.word	0x20000004
 8002674:	20000008 	.word	0x20000008

08002678 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002678:	4916      	ldr	r1, [pc, #88]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 800267a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800267c:	688b      	ldr	r3, [r1, #8]
 800267e:	f003 030c 	and.w	r3, r3, #12
 8002682:	2b04      	cmp	r3, #4
 8002684:	d01b      	beq.n	80026be <HAL_RCC_GetSysClockFreq+0x46>
 8002686:	2b08      	cmp	r3, #8
 8002688:	d117      	bne.n	80026ba <HAL_RCC_GetSysClockFreq+0x42>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800268a:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800268c:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800268e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002692:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002694:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 8002698:	d113      	bne.n	80026c2 <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800269a:	480f      	ldr	r0, [pc, #60]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x60>)
 800269c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80026a0:	fba1 0100 	umull	r0, r1, r1, r0
 80026a4:	f7fe fada 	bl	8000c5c <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80026a8:	4b0a      	ldr	r3, [pc, #40]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x5c>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80026b0:	3301      	adds	r3, #1
 80026b2:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 80026b4:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80026b8:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 80026ba:	4807      	ldr	r0, [pc, #28]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x60>)
}
 80026bc:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80026be:	4807      	ldr	r0, [pc, #28]	; (80026dc <HAL_RCC_GetSysClockFreq+0x64>)
}
 80026c0:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026c2:	4806      	ldr	r0, [pc, #24]	; (80026dc <HAL_RCC_GetSysClockFreq+0x64>)
 80026c4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80026c8:	2300      	movs	r3, #0
 80026ca:	fba1 0100 	umull	r0, r1, r1, r0
 80026ce:	f7fe fac5 	bl	8000c5c <__aeabi_uldivmod>
 80026d2:	e7e9      	b.n	80026a8 <HAL_RCC_GetSysClockFreq+0x30>
 80026d4:	40023800 	.word	0x40023800
 80026d8:	00f42400 	.word	0x00f42400
 80026dc:	017d7840 	.word	0x017d7840

080026e0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026e0:	4b04      	ldr	r3, [pc, #16]	; (80026f4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80026e2:	4a05      	ldr	r2, [pc, #20]	; (80026f8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80026e4:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80026e6:	4905      	ldr	r1, [pc, #20]	; (80026fc <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026e8:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80026ec:	6808      	ldr	r0, [r1, #0]
 80026ee:	5cd3      	ldrb	r3, [r2, r3]
}
 80026f0:	40d8      	lsrs	r0, r3
 80026f2:	4770      	bx	lr
 80026f4:	40023800 	.word	0x40023800
 80026f8:	0800e30c 	.word	0x0800e30c
 80026fc:	20000008 	.word	0x20000008

08002700 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002700:	4b04      	ldr	r3, [pc, #16]	; (8002714 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002702:	4a05      	ldr	r2, [pc, #20]	; (8002718 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002704:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8002706:	4905      	ldr	r1, [pc, #20]	; (800271c <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002708:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800270c:	6808      	ldr	r0, [r1, #0]
 800270e:	5cd3      	ldrb	r3, [r2, r3]
}
 8002710:	40d8      	lsrs	r0, r3
 8002712:	4770      	bx	lr
 8002714:	40023800 	.word	0x40023800
 8002718:	0800e30c 	.word	0x0800e30c
 800271c:	20000008 	.word	0x20000008

08002720 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002720:	6803      	ldr	r3, [r0, #0]
{
 8002722:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002726:	f013 0601 	ands.w	r6, r3, #1
{
 800272a:	b083      	sub	sp, #12
 800272c:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800272e:	d00b      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002730:	4ab6      	ldr	r2, [pc, #728]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002732:	6891      	ldr	r1, [r2, #8]
 8002734:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8002738:	6091      	str	r1, [r2, #8]
 800273a:	6b46      	ldr	r6, [r0, #52]	; 0x34
 800273c:	6891      	ldr	r1, [r2, #8]
 800273e:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002740:	fab6 f686 	clz	r6, r6
 8002744:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002746:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002748:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 800274c:	d010      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x50>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800274e:	49af      	ldr	r1, [pc, #700]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002750:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8002752:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002756:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800275a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800275e:	ea42 0205 	orr.w	r2, r2, r5
 8002762:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002766:	f000 821a 	beq.w	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x47e>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800276a:	fab5 f585 	clz	r5, r5
 800276e:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002770:	02d9      	lsls	r1, r3, #11
 8002772:	d510      	bpl.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002774:	48a5      	ldr	r0, [pc, #660]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002776:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002778:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800277c:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002780:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8002784:	ea42 0201 	orr.w	r2, r2, r1
 8002788:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800278c:	f000 820a 	beq.w	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x484>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8002790:	2900      	cmp	r1, #0
 8002792:	bf08      	it	eq
 8002794:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8002796:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800279a:	bf18      	it	ne
 800279c:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800279e:	069a      	lsls	r2, r3, #26
 80027a0:	f100 81b7 	bmi.w	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80027a4:	06d9      	lsls	r1, r3, #27
 80027a6:	d50c      	bpl.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80027a8:	4a98      	ldr	r2, [pc, #608]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80027aa:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80027ae:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80027b2:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 80027b6:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80027ba:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80027bc:	4301      	orrs	r1, r0
 80027be:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027c2:	045a      	lsls	r2, r3, #17
 80027c4:	d508      	bpl.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027c6:	4991      	ldr	r1, [pc, #580]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80027c8:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80027ca:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80027ce:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80027d2:	4302      	orrs	r2, r0
 80027d4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027d8:	041f      	lsls	r7, r3, #16
 80027da:	d508      	bpl.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027dc:	498b      	ldr	r1, [pc, #556]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80027de:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80027e0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80027e4:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80027e8:	4302      	orrs	r2, r0
 80027ea:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027ee:	03d8      	lsls	r0, r3, #15
 80027f0:	d508      	bpl.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027f2:	4986      	ldr	r1, [pc, #536]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80027f4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80027f6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80027fa:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80027fe:	4302      	orrs	r2, r0
 8002800:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002804:	0399      	lsls	r1, r3, #14
 8002806:	d508      	bpl.n	800281a <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002808:	4980      	ldr	r1, [pc, #512]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800280a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800280c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002810:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8002814:	4302      	orrs	r2, r0
 8002816:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800281a:	065a      	lsls	r2, r3, #25
 800281c:	d508      	bpl.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800281e:	497b      	ldr	r1, [pc, #492]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002820:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002822:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002826:	f022 0203 	bic.w	r2, r2, #3
 800282a:	4302      	orrs	r2, r0
 800282c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002830:	061f      	lsls	r7, r3, #24
 8002832:	d508      	bpl.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002834:	4975      	ldr	r1, [pc, #468]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002836:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002838:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800283c:	f022 020c 	bic.w	r2, r2, #12
 8002840:	4302      	orrs	r2, r0
 8002842:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002846:	05d8      	lsls	r0, r3, #23
 8002848:	d508      	bpl.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800284a:	4970      	ldr	r1, [pc, #448]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800284c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800284e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002852:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002856:	4302      	orrs	r2, r0
 8002858:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800285c:	0599      	lsls	r1, r3, #22
 800285e:	d508      	bpl.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002860:	496a      	ldr	r1, [pc, #424]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002862:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002864:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002868:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800286c:	4302      	orrs	r2, r0
 800286e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002872:	055a      	lsls	r2, r3, #21
 8002874:	d508      	bpl.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002876:	4965      	ldr	r1, [pc, #404]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002878:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800287a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800287e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002882:	4302      	orrs	r2, r0
 8002884:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002888:	051f      	lsls	r7, r3, #20
 800288a:	d508      	bpl.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800288c:	495f      	ldr	r1, [pc, #380]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800288e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002890:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002894:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002898:	4302      	orrs	r2, r0
 800289a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800289e:	04d8      	lsls	r0, r3, #19
 80028a0:	d508      	bpl.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80028a2:	495a      	ldr	r1, [pc, #360]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80028a4:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80028a6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80028aa:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80028ae:	4302      	orrs	r2, r0
 80028b0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80028b4:	0499      	lsls	r1, r3, #18
 80028b6:	d508      	bpl.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80028b8:	4954      	ldr	r1, [pc, #336]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80028ba:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80028bc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80028c0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80028c4:	4302      	orrs	r2, r0
 80028c6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80028ca:	025a      	lsls	r2, r3, #9
 80028cc:	d508      	bpl.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80028ce:	494f      	ldr	r1, [pc, #316]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80028d0:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80028d2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80028d6:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80028da:	4302      	orrs	r2, r0
 80028dc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80028e0:	029f      	lsls	r7, r3, #10
 80028e2:	d50c      	bpl.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80028e4:	4949      	ldr	r1, [pc, #292]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80028e6:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80028e8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 80028ec:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80028f0:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 80028f4:	bf08      	it	eq
 80028f6:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80028f8:	4302      	orrs	r2, r0
 80028fa:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 80028fe:	f013 0f08 	tst.w	r3, #8
 8002902:	bf18      	it	ne
 8002904:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002906:	0358      	lsls	r0, r3, #13
 8002908:	d508      	bpl.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800290a:	4940      	ldr	r1, [pc, #256]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800290c:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800290e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002912:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002916:	4302      	orrs	r2, r0
 8002918:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800291c:	0219      	lsls	r1, r3, #8
 800291e:	f100 80ed 	bmi.w	8002afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002922:	2e01      	cmp	r6, #1
 8002924:	d001      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002926:	019a      	lsls	r2, r3, #6
 8002928:	d560      	bpl.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x2cc>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800292a:	4b38      	ldr	r3, [pc, #224]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800292c:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800292e:	461e      	mov	r6, r3
    __HAL_RCC_PLLI2S_DISABLE();
 8002930:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002934:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002936:	f7fe fb4d 	bl	8000fd4 <HAL_GetTick>
 800293a:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800293c:	e005      	b.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800293e:	f7fe fb49 	bl	8000fd4 <HAL_GetTick>
 8002942:	1bc0      	subs	r0, r0, r7
 8002944:	2864      	cmp	r0, #100	; 0x64
 8002946:	f200 80d5 	bhi.w	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800294a:	6833      	ldr	r3, [r6, #0]
 800294c:	011b      	lsls	r3, r3, #4
 800294e:	d4f6      	bmi.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x21e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002950:	6823      	ldr	r3, [r4, #0]
 8002952:	07df      	lsls	r7, r3, #31
 8002954:	d512      	bpl.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x25c>
 8002956:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002958:	b982      	cbnz	r2, 800297c <HAL_RCCEx_PeriphCLKConfig+0x25c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800295a:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800295e:	f8d6 7084 	ldr.w	r7, [r6, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002962:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8002966:	6860      	ldr	r0, [r4, #4]
 8002968:	f007 6770 	and.w	r7, r7, #251658240	; 0xf000000
 800296c:	68a1      	ldr	r1, [r4, #8]
 800296e:	433a      	orrs	r2, r7
 8002970:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8002974:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8002978:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800297c:	031e      	lsls	r6, r3, #12
 800297e:	d504      	bpl.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8002980:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002982:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8002986:	f000 811e 	beq.w	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800298a:	02d8      	lsls	r0, r3, #11
 800298c:	d504      	bpl.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x278>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800298e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002990:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8002994:	f000 8117 	beq.w	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002998:	01d9      	lsls	r1, r3, #7
 800299a:	d511      	bpl.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800299c:	4e1b      	ldr	r6, [pc, #108]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800299e:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80029a0:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80029a4:	f8d6 7084 	ldr.w	r7, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80029a8:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 80029ac:	6921      	ldr	r1, [r4, #16]
 80029ae:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 80029b2:	433a      	orrs	r2, r7
 80029b4:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 80029b8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80029bc:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80029c0:	019a      	lsls	r2, r3, #6
 80029c2:	f100 80f1 	bmi.w	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80029c6:	4b11      	ldr	r3, [pc, #68]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80029c8:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029ca:	461e      	mov	r6, r3
    __HAL_RCC_PLLI2S_ENABLE();
 80029cc:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80029d0:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80029d2:	f7fe faff 	bl	8000fd4 <HAL_GetTick>
 80029d6:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029d8:	e005      	b.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80029da:	f7fe fafb 	bl	8000fd4 <HAL_GetTick>
 80029de:	1bc0      	subs	r0, r0, r7
 80029e0:	2864      	cmp	r0, #100	; 0x64
 80029e2:	f200 8087 	bhi.w	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029e6:	6833      	ldr	r3, [r6, #0]
 80029e8:	011b      	lsls	r3, r3, #4
 80029ea:	d5f6      	bpl.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80029ec:	2d01      	cmp	r5, #1
 80029ee:	d003      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80029f0:	2000      	movs	r0, #0
}
 80029f2:	b003      	add	sp, #12
 80029f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 80029f8:	4b04      	ldr	r3, [pc, #16]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80029fa:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80029fc:	461d      	mov	r5, r3
    __HAL_RCC_PLLSAI_DISABLE();
 80029fe:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002a02:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002a04:	f7fe fae6 	bl	8000fd4 <HAL_GetTick>
 8002a08:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a0a:	e006      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8002a0c:	40023800 	.word	0x40023800
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a10:	f7fe fae0 	bl	8000fd4 <HAL_GetTick>
 8002a14:	1b80      	subs	r0, r0, r6
 8002a16:	2864      	cmp	r0, #100	; 0x64
 8002a18:	d86c      	bhi.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a1a:	682b      	ldr	r3, [r5, #0]
 8002a1c:	009f      	lsls	r7, r3, #2
 8002a1e:	d4f7      	bmi.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002a20:	6823      	ldr	r3, [r4, #0]
 8002a22:	031d      	lsls	r5, r3, #12
 8002a24:	d501      	bpl.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8002a26:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002a28:	b11a      	cbz	r2, 8002a32 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8002a2a:	02d8      	lsls	r0, r3, #11
 8002a2c:	d51d      	bpl.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x34a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a2e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002a30:	b9da      	cbnz	r2, 8002a6a <HAL_RCCEx_PeriphCLKConfig+0x34a>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a32:	4982      	ldr	r1, [pc, #520]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x51c>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002a34:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a36:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002a3a:	f8d1 6088 	ldr.w	r6, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002a3e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8002a42:	69a0      	ldr	r0, [r4, #24]
 8002a44:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 8002a48:	4332      	orrs	r2, r6
 8002a4a:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 8002a4e:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002a52:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002a56:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8002a5a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002a5c:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8002a60:	3801      	subs	r0, #1
 8002a62:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002a66:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002a6a:	0299      	lsls	r1, r3, #10
 8002a6c:	d515      	bpl.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8002a6e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8002a70:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 8002a74:	d111      	bne.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a76:	4971      	ldr	r1, [pc, #452]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x51c>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002a78:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a7a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002a7e:	f8d1 6088 	ldr.w	r6, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002a82:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8002a86:	6a20      	ldr	r0, [r4, #32]
 8002a88:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 8002a8c:	4332      	orrs	r2, r6
 8002a8e:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 8002a92:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8002a96:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002a9a:	071a      	lsls	r2, r3, #28
 8002a9c:	d519      	bpl.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a9e:	4a67      	ldr	r2, [pc, #412]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x51c>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002aa0:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002aa2:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002aa6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002aaa:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8002aae:	69e0      	ldr	r0, [r4, #28]
 8002ab0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ab4:	430b      	orrs	r3, r1
 8002ab6:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8002aba:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 8002abe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002ac2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002ac6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002ac8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002acc:	430b      	orrs	r3, r1
 8002ace:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8002ad2:	4b5a      	ldr	r3, [pc, #360]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002ad4:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ad6:	461c      	mov	r4, r3
    __HAL_RCC_PLLSAI_ENABLE();
 8002ad8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002adc:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002ade:	f7fe fa79 	bl	8000fd4 <HAL_GetTick>
 8002ae2:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ae4:	6823      	ldr	r3, [r4, #0]
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	d482      	bmi.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002aea:	f7fe fa73 	bl	8000fd4 <HAL_GetTick>
 8002aee:	1b40      	subs	r0, r0, r5
 8002af0:	2864      	cmp	r0, #100	; 0x64
 8002af2:	d9f7      	bls.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
        return HAL_TIMEOUT;
 8002af4:	2003      	movs	r0, #3
}
 8002af6:	b003      	add	sp, #12
 8002af8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002afc:	494f      	ldr	r1, [pc, #316]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002afe:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8002b02:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002b06:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002b0a:	4302      	orrs	r2, r0
 8002b0c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
 8002b10:	e707      	b.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x202>
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b12:	4a4a      	ldr	r2, [pc, #296]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x51c>)
    PWR->CR1 |= PWR_CR1_DBP;
 8002b14:	4b4a      	ldr	r3, [pc, #296]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x520>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b16:	6c11      	ldr	r1, [r2, #64]	; 0x40
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b18:	461f      	mov	r7, r3
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b1a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002b1e:	6411      	str	r1, [r2, #64]	; 0x40
 8002b20:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b22:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8002b26:	9201      	str	r2, [sp, #4]
 8002b28:	9a01      	ldr	r2, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b30:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002b32:	f7fe fa4f 	bl	8000fd4 <HAL_GetTick>
 8002b36:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b38:	e005      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x426>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b3a:	f7fe fa4b 	bl	8000fd4 <HAL_GetTick>
 8002b3e:	eba0 0008 	sub.w	r0, r0, r8
 8002b42:	2864      	cmp	r0, #100	; 0x64
 8002b44:	d8d6      	bhi.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	05db      	lsls	r3, r3, #23
 8002b4a:	d5f6      	bpl.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b4c:	4a3b      	ldr	r2, [pc, #236]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002b4e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002b50:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002b52:	f403 7040 	and.w	r0, r3, #768	; 0x300
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b56:	f411 7140 	ands.w	r1, r1, #768	; 0x300
 8002b5a:	d010      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8002b5c:	4281      	cmp	r1, r0
 8002b5e:	d00e      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x45e>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b60:	6f11      	ldr	r1, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b62:	6f17      	ldr	r7, [r2, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b64:	f421 7140 	bic.w	r1, r1, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b68:	f447 3780 	orr.w	r7, r7, #65536	; 0x10000
 8002b6c:	6717      	str	r7, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b6e:	6f17      	ldr	r7, [r2, #112]	; 0x70
 8002b70:	f427 3780 	bic.w	r7, r7, #65536	; 0x10000
 8002b74:	6717      	str	r7, [r2, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8002b76:	6711      	str	r1, [r2, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002b78:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002b7a:	07cf      	lsls	r7, r1, #31
 8002b7c:	d448      	bmi.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b7e:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 8002b82:	d03c      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002b84:	492d      	ldr	r1, [pc, #180]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002b86:	688a      	ldr	r2, [r1, #8]
 8002b88:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8002b8c:	608a      	str	r2, [r1, #8]
 8002b8e:	4a2b      	ldr	r2, [pc, #172]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002b90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b94:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002b96:	430b      	orrs	r3, r1
 8002b98:	6713      	str	r3, [r2, #112]	; 0x70
 8002b9a:	6823      	ldr	r3, [r4, #0]
 8002b9c:	e602      	b.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x84>
  uint32_t pllsaiused = 0;
 8002b9e:	2500      	movs	r5, #0
      plli2sused = 1;
 8002ba0:	2601      	movs	r6, #1
 8002ba2:	e5e5      	b.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x50>
      plli2sused = 1;
 8002ba4:	2601      	movs	r6, #1
 8002ba6:	e5f6      	b.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x76>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ba8:	6923      	ldr	r3, [r4, #16]
 8002baa:	6862      	ldr	r2, [r4, #4]
 8002bac:	041b      	lsls	r3, r3, #16
 8002bae:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 8002bb2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002bb6:	4a21      	ldr	r2, [pc, #132]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002bb8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002bbc:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002bc0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8002bc4:	e6ff      	b.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002bc6:	4e1d      	ldr	r6, [pc, #116]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x51c>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002bc8:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002bca:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002bce:	f8d6 7084 	ldr.w	r7, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002bd2:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8002bd6:	68e1      	ldr	r1, [r4, #12]
 8002bd8:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 8002bdc:	433a      	orrs	r2, r7
 8002bde:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8002be2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002be6:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002bea:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 8002bee:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002bf0:	f021 011f 	bic.w	r1, r1, #31
 8002bf4:	3a01      	subs	r2, #1
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	f8c6 208c 	str.w	r2, [r6, #140]	; 0x8c
 8002bfc:	e6cc      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bfe:	480f      	ldr	r0, [pc, #60]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8002c00:	4910      	ldr	r1, [pc, #64]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x524>)
 8002c02:	6882      	ldr	r2, [r0, #8]
 8002c04:	4019      	ands	r1, r3
 8002c06:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	6082      	str	r2, [r0, #8]
 8002c0e:	e7be      	b.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c10:	4617      	mov	r7, r2
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c12:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002c16:	f7fe f9dd 	bl	8000fd4 <HAL_GetTick>
 8002c1a:	4681      	mov	r9, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c1c:	e006      	b.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x50c>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c1e:	f7fe f9d9 	bl	8000fd4 <HAL_GetTick>
 8002c22:	eba0 0009 	sub.w	r0, r0, r9
 8002c26:	4540      	cmp	r0, r8
 8002c28:	f63f af64 	bhi.w	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c2e:	0798      	lsls	r0, r3, #30
 8002c30:	d5f5      	bpl.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8002c32:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002c34:	f403 7040 	and.w	r0, r3, #768	; 0x300
 8002c38:	e7a1      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8002c3a:	bf00      	nop
 8002c3c:	40023800 	.word	0x40023800
 8002c40:	40007000 	.word	0x40007000
 8002c44:	0ffffcff 	.word	0x0ffffcff

08002c48 <HAL_RTC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002c48:	2800      	cmp	r0, #0
 8002c4a:	d066      	beq.n	8002d1a <HAL_RTC_Init+0xd2>
{
 8002c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002c4e:	7f43      	ldrb	r3, [r0, #29]
 8002c50:	4604      	mov	r4, r0
 8002c52:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d043      	beq.n	8002ce2 <HAL_RTC_Init+0x9a>

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c5a:	6823      	ldr	r3, [r4, #0]
 8002c5c:	2253      	movs	r2, #83	; 0x53
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c5e:	2002      	movs	r0, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c60:	21ca      	movs	r1, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c62:	7760      	strb	r0, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c64:	6259      	str	r1, [r3, #36]	; 0x24
 8002c66:	625a      	str	r2, [r3, #36]	; 0x24
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002c68:	68da      	ldr	r2, [r3, #12]
 8002c6a:	0655      	lsls	r5, r2, #25
 8002c6c:	d527      	bpl.n	8002cbe <HAL_RTC_Init+0x76>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002c6e:	6898      	ldr	r0, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002c70:	6925      	ldr	r5, [r4, #16]
 8002c72:	6862      	ldr	r2, [r4, #4]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002c74:	492a      	ldr	r1, [pc, #168]	; (8002d20 <HAL_RTC_Init+0xd8>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002c76:	432a      	orrs	r2, r5
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002c78:	4001      	ands	r1, r0
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002c7a:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002c7c:	6099      	str	r1, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002c7e:	4302      	orrs	r2, r0
 8002c80:	689d      	ldr	r5, [r3, #8]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8002c82:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002c86:	432a      	orrs	r2, r5
 8002c88:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002c8a:	6118      	str	r0, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8002c8c:	691a      	ldr	r2, [r3, #16]
 8002c8e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002c92:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002c94:	68da      	ldr	r2, [r3, #12]
 8002c96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c9a:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002c9c:	689a      	ldr	r2, [r3, #8]
 8002c9e:	0691      	lsls	r1, r2, #26
 8002ca0:	d523      	bpl.n	8002cea <HAL_RTC_Init+0xa2>
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8002ca2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ca4:	26ff      	movs	r6, #255	; 0xff
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8002ca6:	69a7      	ldr	r7, [r4, #24]
    hrtc->State = HAL_RTC_STATE_READY;
 8002ca8:	2501      	movs	r5, #1
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8002caa:	f021 0108 	bic.w	r1, r1, #8
    return HAL_OK;
 8002cae:	2000      	movs	r0, #0
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8002cb0:	64d9      	str	r1, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8002cb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002cb4:	433a      	orrs	r2, r7
 8002cb6:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cb8:	625e      	str	r6, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8002cba:	7765      	strb	r5, [r4, #29]
}
 8002cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8002cc2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002cc4:	f7fe f986 	bl	8000fd4 <HAL_GetTick>
 8002cc8:	4605      	mov	r5, r0
 8002cca:	e005      	b.n	8002cd8 <HAL_RTC_Init+0x90>

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002ccc:	f7fe f982 	bl	8000fd4 <HAL_GetTick>
 8002cd0:	1b40      	subs	r0, r0, r5
 8002cd2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002cd6:	d819      	bhi.n	8002d0c <HAL_RTC_Init+0xc4>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002cd8:	6823      	ldr	r3, [r4, #0]
 8002cda:	68da      	ldr	r2, [r3, #12]
 8002cdc:	0650      	lsls	r0, r2, #25
 8002cde:	d5f5      	bpl.n	8002ccc <HAL_RTC_Init+0x84>
 8002ce0:	e7c5      	b.n	8002c6e <HAL_RTC_Init+0x26>
    hrtc->Lock = HAL_UNLOCKED;
 8002ce2:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8002ce4:	f002 fd98 	bl	8005818 <HAL_RTC_MspInit>
 8002ce8:	e7b7      	b.n	8002c5a <HAL_RTC_Init+0x12>
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002cea:	68da      	ldr	r2, [r3, #12]
 8002cec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002cf0:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8002cf2:	f7fe f96f 	bl	8000fd4 <HAL_GetTick>
 8002cf6:	4605      	mov	r5, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002cf8:	6823      	ldr	r3, [r4, #0]
 8002cfa:	68da      	ldr	r2, [r3, #12]
 8002cfc:	0692      	lsls	r2, r2, #26
 8002cfe:	d4d0      	bmi.n	8002ca2 <HAL_RTC_Init+0x5a>
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002d00:	f7fe f968 	bl	8000fd4 <HAL_GetTick>
 8002d04:	1b40      	subs	r0, r0, r5
 8002d06:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002d0a:	d9f5      	bls.n	8002cf8 <HAL_RTC_Init+0xb0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d0c:	6822      	ldr	r2, [r4, #0]
 8002d0e:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002d10:	2304      	movs	r3, #4
        return HAL_ERROR;
 8002d12:	2001      	movs	r0, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d14:	6251      	str	r1, [r2, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002d16:	7763      	strb	r3, [r4, #29]
}
 8002d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     return HAL_ERROR;
 8002d1a:	2001      	movs	r0, #1
}
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	ff8fffbf 	.word	0xff8fffbf

08002d24 <HAL_RTC_SetTime>:
{
 8002d24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(hrtc);
 8002d28:	7f03      	ldrb	r3, [r0, #28]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	f000 808c 	beq.w	8002e48 <HAL_RTC_SetTime+0x124>
 8002d30:	460d      	mov	r5, r1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d32:	2302      	movs	r3, #2
  __HAL_LOCK(hrtc);
 8002d34:	2101      	movs	r1, #1
 8002d36:	6806      	ldr	r6, [r0, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d38:	7743      	strb	r3, [r0, #29]
 8002d3a:	4604      	mov	r4, r0
  __HAL_LOCK(hrtc);
 8002d3c:	7701      	strb	r1, [r0, #28]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002d3e:	68b7      	ldr	r7, [r6, #8]
  if(Format == RTC_FORMAT_BIN)
 8002d40:	2a00      	cmp	r2, #0
 8002d42:	d030      	beq.n	8002da6 <HAL_RTC_SetTime+0x82>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002d44:	f017 0740 	ands.w	r7, r7, #64	; 0x40
 8002d48:	d07a      	beq.n	8002e40 <HAL_RTC_SetTime+0x11c>
 8002d4a:	7b2f      	ldrb	r7, [r5, #12]
 8002d4c:	043f      	lsls	r7, r7, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8002d4e:	7868      	ldrb	r0, [r5, #1]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8002d50:	782a      	ldrb	r2, [r5, #0]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8002d52:	0200      	lsls	r0, r0, #8
              ((uint32_t)sTime->Seconds) | \
 8002d54:	78ab      	ldrb	r3, [r5, #2]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8002d56:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8002d5a:	4318      	orrs	r0, r3
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8002d5c:	4307      	orrs	r7, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d5e:	22ca      	movs	r2, #202	; 0xca
 8002d60:	2353      	movs	r3, #83	; 0x53
 8002d62:	6272      	str	r2, [r6, #36]	; 0x24
 8002d64:	6273      	str	r3, [r6, #36]	; 0x24
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002d66:	68f3      	ldr	r3, [r6, #12]
 8002d68:	065a      	lsls	r2, r3, #25
 8002d6a:	d54d      	bpl.n	8002e08 <HAL_RTC_SetTime+0xe4>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002d6c:	4a46      	ldr	r2, [pc, #280]	; (8002e88 <HAL_RTC_SetTime+0x164>)
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002d6e:	692b      	ldr	r3, [r5, #16]
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002d70:	403a      	ands	r2, r7
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002d72:	6969      	ldr	r1, [r5, #20]
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002d74:	6032      	str	r2, [r6, #0]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002d76:	430b      	orrs	r3, r1
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002d78:	68b2      	ldr	r2, [r6, #8]
 8002d7a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d7e:	60b2      	str	r2, [r6, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002d80:	68b2      	ldr	r2, [r6, #8]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	60b3      	str	r3, [r6, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002d86:	68f3      	ldr	r3, [r6, #12]
 8002d88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d8c:	60f3      	str	r3, [r6, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002d8e:	68b3      	ldr	r3, [r6, #8]
 8002d90:	069b      	lsls	r3, r3, #26
 8002d92:	d55c      	bpl.n	8002e4e <HAL_RTC_SetTime+0x12a>
   __HAL_UNLOCK(hrtc);
 8002d94:	2300      	movs	r3, #0
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d96:	21ff      	movs	r1, #255	; 0xff
   hrtc->State = HAL_RTC_STATE_READY;
 8002d98:	2201      	movs	r2, #1
   return HAL_OK;
 8002d9a:	4618      	mov	r0, r3
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d9c:	6271      	str	r1, [r6, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8002d9e:	7762      	strb	r2, [r4, #29]
   __HAL_UNLOCK(hrtc);
 8002da0:	7723      	strb	r3, [r4, #28]
}
 8002da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002da6:	f017 0740 	ands.w	r7, r7, #64	; 0x40
 8002daa:	d04b      	beq.n	8002e44 <HAL_RTC_SetTime+0x120>
 8002dac:	7b2f      	ldrb	r7, [r5, #12]
 8002dae:	043f      	lsls	r7, r7, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8002db0:	782b      	ldrb	r3, [r5, #0]
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 8002db2:	2100      	movs	r1, #0

  while(Value >= 10)
 8002db4:	2b09      	cmp	r3, #9
 8002db6:	d906      	bls.n	8002dc6 <HAL_RTC_SetTime+0xa2>
  {
    bcdhigh++;
    Value -= 10;
 8002db8:	3b0a      	subs	r3, #10
    bcdhigh++;
 8002dba:	3101      	adds	r1, #1
    Value -= 10;
 8002dbc:	b2db      	uxtb	r3, r3
  while(Value >= 10)
 8002dbe:	2b09      	cmp	r3, #9
 8002dc0:	d8fa      	bhi.n	8002db8 <HAL_RTC_SetTime+0x94>
 8002dc2:	0109      	lsls	r1, r1, #4
 8002dc4:	b2c9      	uxtb	r1, r1
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8002dc6:	4319      	orrs	r1, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8002dc8:	786b      	ldrb	r3, [r5, #1]
  uint32_t bcdhigh = 0;
 8002dca:	2000      	movs	r0, #0
  while(Value >= 10)
 8002dcc:	2b09      	cmp	r3, #9
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8002dce:	ea4f 4101 	mov.w	r1, r1, lsl #16
  while(Value >= 10)
 8002dd2:	d906      	bls.n	8002de2 <HAL_RTC_SetTime+0xbe>
    Value -= 10;
 8002dd4:	3b0a      	subs	r3, #10
    bcdhigh++;
 8002dd6:	3001      	adds	r0, #1
    Value -= 10;
 8002dd8:	b2db      	uxtb	r3, r3
  while(Value >= 10)
 8002dda:	2b09      	cmp	r3, #9
 8002ddc:	d8fa      	bhi.n	8002dd4 <HAL_RTC_SetTime+0xb0>
 8002dde:	0100      	lsls	r0, r0, #4
 8002de0:	b2c0      	uxtb	r0, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8002de2:	4303      	orrs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002de4:	78a8      	ldrb	r0, [r5, #2]
  while(Value >= 10)
 8002de6:	2809      	cmp	r0, #9
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8002de8:	ea4f 2303 	mov.w	r3, r3, lsl #8
  while(Value >= 10)
 8002dec:	d949      	bls.n	8002e82 <HAL_RTC_SetTime+0x15e>
    Value -= 10;
 8002dee:	380a      	subs	r0, #10
    bcdhigh++;
 8002df0:	3201      	adds	r2, #1
    Value -= 10;
 8002df2:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 8002df4:	2809      	cmp	r0, #9
 8002df6:	d8fa      	bhi.n	8002dee <HAL_RTC_SetTime+0xca>
 8002df8:	0112      	lsls	r2, r2, #4
 8002dfa:	b2d2      	uxtb	r2, r2
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8002dfc:	430f      	orrs	r7, r1
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002dfe:	4310      	orrs	r0, r2
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8002e00:	433b      	orrs	r3, r7
 8002e02:	ea43 0700 	orr.w	r7, r3, r0
 8002e06:	e7aa      	b.n	8002d5e <HAL_RTC_SetTime+0x3a>
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002e08:	f04f 33ff 	mov.w	r3, #4294967295
 8002e0c:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8002e0e:	f7fe f8e1 	bl	8000fd4 <HAL_GetTick>
 8002e12:	4681      	mov	r9, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002e14:	6826      	ldr	r6, [r4, #0]
 8002e16:	68f3      	ldr	r3, [r6, #12]
 8002e18:	f013 0840 	ands.w	r8, r3, #64	; 0x40
 8002e1c:	d1a6      	bne.n	8002d6c <HAL_RTC_SetTime+0x48>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002e1e:	f7fe f8d9 	bl	8000fd4 <HAL_GetTick>
 8002e22:	eba0 0009 	sub.w	r0, r0, r9
 8002e26:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002e2a:	d9f3      	bls.n	8002e14 <HAL_RTC_SetTime+0xf0>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e2c:	6822      	ldr	r2, [r4, #0]
 8002e2e:	21ff      	movs	r1, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002e30:	2304      	movs	r3, #4
    return HAL_ERROR;
 8002e32:	2001      	movs	r0, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e34:	6251      	str	r1, [r2, #36]	; 0x24
    __HAL_UNLOCK(hrtc);
 8002e36:	f884 801c 	strb.w	r8, [r4, #28]
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002e3a:	7763      	strb	r3, [r4, #29]
}
 8002e3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      sTime->TimeFormat = 0x00;
 8002e40:	732f      	strb	r7, [r5, #12]
 8002e42:	e784      	b.n	8002d4e <HAL_RTC_SetTime+0x2a>
      sTime->TimeFormat = 0x00;
 8002e44:	732f      	strb	r7, [r5, #12]
 8002e46:	e7b3      	b.n	8002db0 <HAL_RTC_SetTime+0x8c>
  __HAL_LOCK(hrtc);
 8002e48:	2002      	movs	r0, #2
}
 8002e4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002e4e:	68f3      	ldr	r3, [r6, #12]
 8002e50:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e54:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8002e56:	f7fe f8bd 	bl	8000fd4 <HAL_GetTick>
 8002e5a:	4607      	mov	r7, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002e5c:	6826      	ldr	r6, [r4, #0]
 8002e5e:	68f5      	ldr	r5, [r6, #12]
 8002e60:	f015 0520 	ands.w	r5, r5, #32
 8002e64:	d196      	bne.n	8002d94 <HAL_RTC_SetTime+0x70>
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002e66:	f7fe f8b5 	bl	8000fd4 <HAL_GetTick>
 8002e6a:	1bc0      	subs	r0, r0, r7
 8002e6c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002e70:	d9f4      	bls.n	8002e5c <HAL_RTC_SetTime+0x138>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e72:	6822      	ldr	r2, [r4, #0]
 8002e74:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002e76:	2304      	movs	r3, #4
        return HAL_ERROR;
 8002e78:	2001      	movs	r0, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e7a:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 8002e7c:	7725      	strb	r5, [r4, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002e7e:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 8002e80:	e78f      	b.n	8002da2 <HAL_RTC_SetTime+0x7e>
  while(Value >= 10)
 8002e82:	2200      	movs	r2, #0
 8002e84:	e7ba      	b.n	8002dfc <HAL_RTC_SetTime+0xd8>
 8002e86:	bf00      	nop
 8002e88:	007f7f7f 	.word	0x007f7f7f

08002e8c <HAL_RTC_GetTime>:
{
 8002e8c:	b470      	push	{r4, r5, r6}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002e8e:	6804      	ldr	r4, [r0, #0]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002e90:	4b18      	ldr	r3, [pc, #96]	; (8002ef4 <HAL_RTC_GetTime+0x68>)
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002e92:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002e94:	6920      	ldr	r0, [r4, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002e96:	6824      	ldr	r4, [r4, #0]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002e98:	f3c0 000e 	ubfx	r0, r0, #0, #15
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002e9c:	604d      	str	r5, [r1, #4]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002e9e:	4023      	ands	r3, r4
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002ea0:	6088      	str	r0, [r1, #8]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8002ea2:	0c18      	lsrs	r0, r3, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8002ea4:	f3c3 2406 	ubfx	r4, r3, #8, #7
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002ea8:	b2db      	uxtb	r3, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 8002eaa:	f000 0640 	and.w	r6, r0, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8002eae:	f000 053f 	and.w	r5, r0, #63	; 0x3f
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8002eb2:	704c      	strb	r4, [r1, #1]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 8002eb4:	730e      	strb	r6, [r1, #12]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8002eb6:	700d      	strb	r5, [r1, #0]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002eb8:	708b      	strb	r3, [r1, #2]
  if(Format == RTC_FORMAT_BIN)
 8002eba:	b9ba      	cbnz	r2, 8002eec <HAL_RTC_GetTime+0x60>
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8002ebc:	0926      	lsrs	r6, r4, #4
  return (tmp + (Value & (uint8_t)0x0F));
 8002ebe:	f000 000f 	and.w	r0, r0, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8002ec2:	091a      	lsrs	r2, r3, #4
  return (tmp + (Value & (uint8_t)0x0F));
 8002ec4:	f004 040f 	and.w	r4, r4, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8002ec8:	092d      	lsrs	r5, r5, #4
  return (tmp + (Value & (uint8_t)0x0F));
 8002eca:	f003 030f 	and.w	r3, r3, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8002ece:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8002ed2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002ed6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8002eda:	eb00 0045 	add.w	r0, r0, r5, lsl #1
 8002ede:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8002ee2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002ee6:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002ee8:	704c      	strb	r4, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002eea:	708b      	strb	r3, [r1, #2]
}
 8002eec:	2000      	movs	r0, #0
 8002eee:	bc70      	pop	{r4, r5, r6}
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	007f7f7f 	.word	0x007f7f7f

08002ef8 <HAL_RTC_SetDate>:
{
 8002ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 8002efa:	7f03      	ldrb	r3, [r0, #28]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d074      	beq.n	8002fea <HAL_RTC_SetDate+0xf2>
 8002f00:	4605      	mov	r5, r0
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f02:	2302      	movs	r3, #2
 __HAL_LOCK(hrtc);
 8002f04:	2001      	movs	r0, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f06:	776b      	strb	r3, [r5, #29]
 __HAL_LOCK(hrtc);
 8002f08:	7728      	strb	r0, [r5, #28]
 8002f0a:	780e      	ldrb	r6, [r1, #0]
 8002f0c:	78cb      	ldrb	r3, [r1, #3]
 8002f0e:	0376      	lsls	r6, r6, #13
 8002f10:	7848      	ldrb	r0, [r1, #1]
 8002f12:	788c      	ldrb	r4, [r1, #2]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002f14:	bb8a      	cbnz	r2, 8002f7a <HAL_RTC_SetDate+0x82>
 8002f16:	06c7      	lsls	r7, r0, #27
 8002f18:	d504      	bpl.n	8002f24 <HAL_RTC_SetDate+0x2c>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002f1a:	f020 0010 	bic.w	r0, r0, #16
 8002f1e:	300a      	adds	r0, #10
 8002f20:	b2c0      	uxtb	r0, r0
 8002f22:	7048      	strb	r0, [r1, #1]
  while(Value >= 10)
 8002f24:	2b09      	cmp	r3, #9
  uint32_t bcdhigh = 0;
 8002f26:	f04f 0100 	mov.w	r1, #0
  while(Value >= 10)
 8002f2a:	d906      	bls.n	8002f3a <HAL_RTC_SetDate+0x42>
    Value -= 10;
 8002f2c:	3b0a      	subs	r3, #10
    bcdhigh++;
 8002f2e:	3101      	adds	r1, #1
    Value -= 10;
 8002f30:	b2db      	uxtb	r3, r3
  while(Value >= 10)
 8002f32:	2b09      	cmp	r3, #9
 8002f34:	d8fa      	bhi.n	8002f2c <HAL_RTC_SetDate+0x34>
 8002f36:	0109      	lsls	r1, r1, #4
 8002f38:	b2c9      	uxtb	r1, r1
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8002f3a:	430b      	orrs	r3, r1
  while(Value >= 10)
 8002f3c:	2809      	cmp	r0, #9
  uint32_t bcdhigh = 0;
 8002f3e:	f04f 0100 	mov.w	r1, #0
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8002f42:	ea4f 4303 	mov.w	r3, r3, lsl #16
  while(Value >= 10)
 8002f46:	d906      	bls.n	8002f56 <HAL_RTC_SetDate+0x5e>
    Value -= 10;
 8002f48:	380a      	subs	r0, #10
    bcdhigh++;
 8002f4a:	3101      	adds	r1, #1
    Value -= 10;
 8002f4c:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 8002f4e:	2809      	cmp	r0, #9
 8002f50:	d8fa      	bhi.n	8002f48 <HAL_RTC_SetDate+0x50>
 8002f52:	0109      	lsls	r1, r1, #4
 8002f54:	b2c9      	uxtb	r1, r1
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8002f56:	4308      	orrs	r0, r1
  while(Value >= 10)
 8002f58:	2c09      	cmp	r4, #9
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8002f5a:	ea4f 2100 	mov.w	r1, r0, lsl #8
  while(Value >= 10)
 8002f5e:	d960      	bls.n	8003022 <HAL_RTC_SetDate+0x12a>
    Value -= 10;
 8002f60:	3c0a      	subs	r4, #10
    bcdhigh++;
 8002f62:	3201      	adds	r2, #1
    Value -= 10;
 8002f64:	b2e4      	uxtb	r4, r4
  while(Value >= 10)
 8002f66:	2c09      	cmp	r4, #9
 8002f68:	d8fa      	bhi.n	8002f60 <HAL_RTC_SetDate+0x68>
 8002f6a:	0112      	lsls	r2, r2, #4
 8002f6c:	b2d0      	uxtb	r0, r2
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8002f6e:	431e      	orrs	r6, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002f70:	4304      	orrs	r4, r0
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8002f72:	ea46 0001 	orr.w	r0, r6, r1
 8002f76:	4304      	orrs	r4, r0
 8002f78:	e004      	b.n	8002f84 <HAL_RTC_SetDate+0x8c>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8002f7a:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
 8002f7e:	431c      	orrs	r4, r3
 8002f80:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f84:	682b      	ldr	r3, [r5, #0]
 8002f86:	21ca      	movs	r1, #202	; 0xca
 8002f88:	2253      	movs	r2, #83	; 0x53
 8002f8a:	6259      	str	r1, [r3, #36]	; 0x24
 8002f8c:	625a      	str	r2, [r3, #36]	; 0x24
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002f8e:	68da      	ldr	r2, [r3, #12]
 8002f90:	0651      	lsls	r1, r2, #25
 8002f92:	d511      	bpl.n	8002fb8 <HAL_RTC_SetDate+0xc0>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002f94:	4a24      	ldr	r2, [pc, #144]	; (8003028 <HAL_RTC_SetDate+0x130>)
 8002f96:	4022      	ands	r2, r4
 8002f98:	605a      	str	r2, [r3, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002f9a:	68da      	ldr	r2, [r3, #12]
 8002f9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fa0:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002fa2:	689a      	ldr	r2, [r3, #8]
 8002fa4:	0692      	lsls	r2, r2, #26
 8002fa6:	d522      	bpl.n	8002fee <HAL_RTC_SetDate+0xf6>
    __HAL_UNLOCK(hrtc);
 8002fa8:	2200      	movs	r2, #0
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002faa:	20ff      	movs	r0, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_READY ;
 8002fac:	2101      	movs	r1, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fae:	6258      	str	r0, [r3, #36]	; 0x24
    return HAL_OK;
 8002fb0:	4610      	mov	r0, r2
    hrtc->State = HAL_RTC_STATE_READY ;
 8002fb2:	7769      	strb	r1, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8002fb4:	772a      	strb	r2, [r5, #28]
}
 8002fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8002fbc:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8002fbe:	f7fe f809 	bl	8000fd4 <HAL_GetTick>
 8002fc2:	4606      	mov	r6, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002fc4:	682b      	ldr	r3, [r5, #0]
 8002fc6:	68df      	ldr	r7, [r3, #12]
 8002fc8:	f017 0740 	ands.w	r7, r7, #64	; 0x40
 8002fcc:	d1e2      	bne.n	8002f94 <HAL_RTC_SetDate+0x9c>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002fce:	f7fe f801 	bl	8000fd4 <HAL_GetTick>
 8002fd2:	1b80      	subs	r0, r0, r6
 8002fd4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002fd8:	d9f4      	bls.n	8002fc4 <HAL_RTC_SetDate+0xcc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fda:	682a      	ldr	r2, [r5, #0]
 8002fdc:	21ff      	movs	r1, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002fde:	2304      	movs	r3, #4
    return HAL_ERROR;
 8002fe0:	2001      	movs	r0, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fe2:	6251      	str	r1, [r2, #36]	; 0x24
    __HAL_UNLOCK(hrtc);
 8002fe4:	772f      	strb	r7, [r5, #28]
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002fe6:	776b      	strb	r3, [r5, #29]
}
 8002fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 __HAL_LOCK(hrtc);
 8002fea:	2002      	movs	r0, #2
}
 8002fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002fee:	68da      	ldr	r2, [r3, #12]
 8002ff0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ff4:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8002ff6:	f7fd ffed 	bl	8000fd4 <HAL_GetTick>
 8002ffa:	4606      	mov	r6, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002ffc:	682b      	ldr	r3, [r5, #0]
 8002ffe:	68dc      	ldr	r4, [r3, #12]
 8003000:	f014 0420 	ands.w	r4, r4, #32
 8003004:	d1d0      	bne.n	8002fa8 <HAL_RTC_SetDate+0xb0>
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003006:	f7fd ffe5 	bl	8000fd4 <HAL_GetTick>
 800300a:	1b80      	subs	r0, r0, r6
 800300c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003010:	d9f4      	bls.n	8002ffc <HAL_RTC_SetDate+0x104>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003012:	682a      	ldr	r2, [r5, #0]
 8003014:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003016:	2304      	movs	r3, #4
        return HAL_ERROR;
 8003018:	2001      	movs	r0, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800301a:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 800301c:	772c      	strb	r4, [r5, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 800301e:	776b      	strb	r3, [r5, #29]
}
 8003020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while(Value >= 10)
 8003022:	2000      	movs	r0, #0
 8003024:	e7a3      	b.n	8002f6e <HAL_RTC_SetDate+0x76>
 8003026:	bf00      	nop
 8003028:	00ffff3f 	.word	0x00ffff3f

0800302c <HAL_RTC_GetDate>:
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800302c:	6800      	ldr	r0, [r0, #0]
 800302e:	4b16      	ldr	r3, [pc, #88]	; (8003088 <HAL_RTC_GetDate+0x5c>)
 8003030:	6840      	ldr	r0, [r0, #4]
 8003032:	4003      	ands	r3, r0
{
 8003034:	b4f0      	push	{r4, r5, r6, r7}
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8003036:	f3c3 2407 	ubfx	r4, r3, #8, #8
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 800303a:	f3c3 3642 	ubfx	r6, r3, #13, #3
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 800303e:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8003040:	f004 051f 	and.w	r5, r4, #31
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003044:	b2db      	uxtb	r3, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 8003046:	700e      	strb	r6, [r1, #0]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8003048:	704d      	strb	r5, [r1, #1]
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 800304a:	70c8      	strb	r0, [r1, #3]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800304c:	708b      	strb	r3, [r1, #2]
  if(Format == RTC_FORMAT_BIN)
 800304e:	b9ba      	cbnz	r2, 8003080 <HAL_RTC_GetDate+0x54>
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003050:	092d      	lsrs	r5, r5, #4
  return (tmp + (Value & (uint8_t)0x0F));
 8003052:	f003 060f 	and.w	r6, r3, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003056:	0902      	lsrs	r2, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 8003058:	f004 040f 	and.w	r4, r4, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800305c:	00af      	lsls	r7, r5, #2
  return (tmp + (Value & (uint8_t)0x0F));
 800305e:	f000 000f 	and.w	r0, r0, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003062:	091b      	lsrs	r3, r3, #4
 8003064:	443d      	add	r5, r7
 8003066:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800306a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 800306e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8003072:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8003076:	eb06 0343 	add.w	r3, r6, r3, lsl #1
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800307a:	704c      	strb	r4, [r1, #1]
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800307c:	70c8      	strb	r0, [r1, #3]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800307e:	708b      	strb	r3, [r1, #2]
}
 8003080:	2000      	movs	r0, #0
 8003082:	bcf0      	pop	{r4, r5, r6, r7}
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	00ffff3f 	.word	0x00ffff3f

0800308c <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800308c:	2800      	cmp	r0, #0
 800308e:	d07b      	beq.n	8003188 <HAL_TIM_Base_Init+0xfc>
{
 8003090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003092:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003096:	4604      	mov	r4, r0
 8003098:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800309c:	2b00      	cmp	r3, #0
 800309e:	d03b      	beq.n	8003118 <HAL_TIM_Base_Init+0x8c>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030a0:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80030a2:	2002      	movs	r0, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030a4:	4e41      	ldr	r6, [pc, #260]	; (80031ac <HAL_TIM_Base_Init+0x120>)
 80030a6:	4f42      	ldr	r7, [pc, #264]	; (80031b0 <HAL_TIM_Base_Init+0x124>)
 80030a8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80030ac:	eba2 0606 	sub.w	r6, r2, r6
  htim->State = HAL_TIM_STATE_BUSY;
 80030b0:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
 80030b4:	eba2 0707 	sub.w	r7, r2, r7
  tmpcr1 = TIMx->CR1;
 80030b8:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030ba:	fab6 f686 	clz	r6, r6
 80030be:	fab7 f787 	clz	r7, r7
 80030c2:	ea4f 1656 	mov.w	r6, r6, lsr #5
 80030c6:	ea4f 1757 	mov.w	r7, r7, lsr #5
 80030ca:	d02a      	beq.n	8003122 <HAL_TIM_Base_Init+0x96>
 80030cc:	bb4e      	cbnz	r6, 8003122 <HAL_TIM_Base_Init+0x96>
 80030ce:	4939      	ldr	r1, [pc, #228]	; (80031b4 <HAL_TIM_Base_Init+0x128>)
 80030d0:	428a      	cmp	r2, r1
 80030d2:	d05b      	beq.n	800318c <HAL_TIM_Base_Init+0x100>
 80030d4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80030d8:	428a      	cmp	r2, r1
 80030da:	d057      	beq.n	800318c <HAL_TIM_Base_Init+0x100>
 80030dc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80030e0:	428a      	cmp	r2, r1
 80030e2:	d058      	beq.n	8003196 <HAL_TIM_Base_Init+0x10a>
 80030e4:	2f00      	cmp	r7, #0
 80030e6:	d156      	bne.n	8003196 <HAL_TIM_Base_Init+0x10a>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030e8:	4933      	ldr	r1, [pc, #204]	; (80031b8 <HAL_TIM_Base_Init+0x12c>)
 80030ea:	428a      	cmp	r2, r1
 80030ec:	d01e      	beq.n	800312c <HAL_TIM_Base_Init+0xa0>
 80030ee:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80030f2:	428a      	cmp	r2, r1
 80030f4:	d01a      	beq.n	800312c <HAL_TIM_Base_Init+0xa0>
 80030f6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80030fa:	428a      	cmp	r2, r1
 80030fc:	d016      	beq.n	800312c <HAL_TIM_Base_Init+0xa0>
 80030fe:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 8003102:	428a      	cmp	r2, r1
 8003104:	d012      	beq.n	800312c <HAL_TIM_Base_Init+0xa0>
 8003106:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800310a:	428a      	cmp	r2, r1
 800310c:	d00e      	beq.n	800312c <HAL_TIM_Base_Init+0xa0>
 800310e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003112:	428a      	cmp	r2, r1
 8003114:	d10e      	bne.n	8003134 <HAL_TIM_Base_Init+0xa8>
 8003116:	e009      	b.n	800312c <HAL_TIM_Base_Init+0xa0>
    htim->Lock = HAL_UNLOCKED;
 8003118:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800311c:	f002 fb8a 	bl	8005834 <HAL_TIM_Base_MspInit>
 8003120:	e7be      	b.n	80030a0 <HAL_TIM_Base_Init+0x14>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003122:	f023 0570 	bic.w	r5, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003126:	68a0      	ldr	r0, [r4, #8]
 8003128:	ea45 0300 	orr.w	r3, r5, r0
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800312c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003130:	6920      	ldr	r0, [r4, #16]
 8003132:	4303      	orrs	r3, r0
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003134:	69a1      	ldr	r1, [r4, #24]
 8003136:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800313a:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800313c:	430b      	orrs	r3, r1

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800313e:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8003140:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003142:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003144:	6291      	str	r1, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003146:	b9e6      	cbnz	r6, 8003182 <HAL_TIM_Base_Init+0xf6>
 8003148:	b9df      	cbnz	r7, 8003182 <HAL_TIM_Base_Init+0xf6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800314a:	2301      	movs	r3, #1
  return HAL_OK;
 800314c:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 800314e:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003150:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003154:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003158:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800315c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003160:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003164:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003168:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800316c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003170:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003174:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8003178:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800317c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8003180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIMx->RCR = Structure->RepetitionCounter;
 8003182:	6963      	ldr	r3, [r4, #20]
 8003184:	6313      	str	r3, [r2, #48]	; 0x30
 8003186:	e7e0      	b.n	800314a <HAL_TIM_Base_Init+0xbe>
    return HAL_ERROR;
 8003188:	2001      	movs	r0, #1
}
 800318a:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800318c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003190:	68a1      	ldr	r1, [r4, #8]
 8003192:	430b      	orrs	r3, r1
 8003194:	e7ca      	b.n	800312c <HAL_TIM_Base_Init+0xa0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003196:	4909      	ldr	r1, [pc, #36]	; (80031bc <HAL_TIM_Base_Init+0x130>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800319c:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800319e:	428a      	cmp	r2, r1
    tmpcr1 |= Structure->CounterMode;
 80031a0:	ea43 0300 	orr.w	r3, r3, r0
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031a4:	d0c2      	beq.n	800312c <HAL_TIM_Base_Init+0xa0>
 80031a6:	2f00      	cmp	r7, #0
 80031a8:	d1c0      	bne.n	800312c <HAL_TIM_Base_Init+0xa0>
 80031aa:	e79d      	b.n	80030e8 <HAL_TIM_Base_Init+0x5c>
 80031ac:	40010000 	.word	0x40010000
 80031b0:	40010400 	.word	0x40010400
 80031b4:	40000400 	.word	0x40000400
 80031b8:	40014000 	.word	0x40014000
 80031bc:	40000c00 	.word	0x40000c00

080031c0 <HAL_TIM_PWM_MspInit>:
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop

080031c4 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80031c4:	2800      	cmp	r0, #0
 80031c6:	d07b      	beq.n	80032c0 <HAL_TIM_PWM_Init+0xfc>
{
 80031c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80031ca:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80031ce:	4604      	mov	r4, r0
 80031d0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d03b      	beq.n	8003250 <HAL_TIM_PWM_Init+0x8c>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031d8:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80031da:	2002      	movs	r0, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031dc:	4e41      	ldr	r6, [pc, #260]	; (80032e4 <HAL_TIM_PWM_Init+0x120>)
 80031de:	4f42      	ldr	r7, [pc, #264]	; (80032e8 <HAL_TIM_PWM_Init+0x124>)
 80031e0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80031e4:	eba2 0606 	sub.w	r6, r2, r6
  htim->State = HAL_TIM_STATE_BUSY;
 80031e8:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
 80031ec:	eba2 0707 	sub.w	r7, r2, r7
  tmpcr1 = TIMx->CR1;
 80031f0:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031f2:	fab6 f686 	clz	r6, r6
 80031f6:	fab7 f787 	clz	r7, r7
 80031fa:	ea4f 1656 	mov.w	r6, r6, lsr #5
 80031fe:	ea4f 1757 	mov.w	r7, r7, lsr #5
 8003202:	d02a      	beq.n	800325a <HAL_TIM_PWM_Init+0x96>
 8003204:	bb4e      	cbnz	r6, 800325a <HAL_TIM_PWM_Init+0x96>
 8003206:	4939      	ldr	r1, [pc, #228]	; (80032ec <HAL_TIM_PWM_Init+0x128>)
 8003208:	428a      	cmp	r2, r1
 800320a:	d05b      	beq.n	80032c4 <HAL_TIM_PWM_Init+0x100>
 800320c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003210:	428a      	cmp	r2, r1
 8003212:	d057      	beq.n	80032c4 <HAL_TIM_PWM_Init+0x100>
 8003214:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003218:	428a      	cmp	r2, r1
 800321a:	d058      	beq.n	80032ce <HAL_TIM_PWM_Init+0x10a>
 800321c:	2f00      	cmp	r7, #0
 800321e:	d156      	bne.n	80032ce <HAL_TIM_PWM_Init+0x10a>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003220:	4933      	ldr	r1, [pc, #204]	; (80032f0 <HAL_TIM_PWM_Init+0x12c>)
 8003222:	428a      	cmp	r2, r1
 8003224:	d01e      	beq.n	8003264 <HAL_TIM_PWM_Init+0xa0>
 8003226:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800322a:	428a      	cmp	r2, r1
 800322c:	d01a      	beq.n	8003264 <HAL_TIM_PWM_Init+0xa0>
 800322e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003232:	428a      	cmp	r2, r1
 8003234:	d016      	beq.n	8003264 <HAL_TIM_PWM_Init+0xa0>
 8003236:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 800323a:	428a      	cmp	r2, r1
 800323c:	d012      	beq.n	8003264 <HAL_TIM_PWM_Init+0xa0>
 800323e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003242:	428a      	cmp	r2, r1
 8003244:	d00e      	beq.n	8003264 <HAL_TIM_PWM_Init+0xa0>
 8003246:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800324a:	428a      	cmp	r2, r1
 800324c:	d10e      	bne.n	800326c <HAL_TIM_PWM_Init+0xa8>
 800324e:	e009      	b.n	8003264 <HAL_TIM_PWM_Init+0xa0>
    htim->Lock = HAL_UNLOCKED;
 8003250:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003254:	f7ff ffb4 	bl	80031c0 <HAL_TIM_PWM_MspInit>
 8003258:	e7be      	b.n	80031d8 <HAL_TIM_PWM_Init+0x14>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800325a:	f023 0570 	bic.w	r5, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800325e:	68a0      	ldr	r0, [r4, #8]
 8003260:	ea45 0300 	orr.w	r3, r5, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8003264:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003268:	6920      	ldr	r0, [r4, #16]
 800326a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800326c:	69a1      	ldr	r1, [r4, #24]
 800326e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003272:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003274:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8003276:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8003278:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800327a:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800327c:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800327e:	b9e6      	cbnz	r6, 80032ba <HAL_TIM_PWM_Init+0xf6>
 8003280:	b9df      	cbnz	r7, 80032ba <HAL_TIM_PWM_Init+0xf6>
  TIMx->EGR = TIM_EGR_UG;
 8003282:	2301      	movs	r3, #1
  return HAL_OK;
 8003284:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8003286:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003288:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800328c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003290:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003294:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003298:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800329c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80032a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032a4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80032a8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80032ac:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80032b0:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80032b4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80032b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIMx->RCR = Structure->RepetitionCounter;
 80032ba:	6963      	ldr	r3, [r4, #20]
 80032bc:	6313      	str	r3, [r2, #48]	; 0x30
 80032be:	e7e0      	b.n	8003282 <HAL_TIM_PWM_Init+0xbe>
    return HAL_ERROR;
 80032c0:	2001      	movs	r0, #1
}
 80032c2:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80032c8:	68a1      	ldr	r1, [r4, #8]
 80032ca:	430b      	orrs	r3, r1
 80032cc:	e7ca      	b.n	8003264 <HAL_TIM_PWM_Init+0xa0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032ce:	4909      	ldr	r1, [pc, #36]	; (80032f4 <HAL_TIM_PWM_Init+0x130>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80032d4:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032d6:	428a      	cmp	r2, r1
    tmpcr1 |= Structure->CounterMode;
 80032d8:	ea43 0300 	orr.w	r3, r3, r0
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032dc:	d0c2      	beq.n	8003264 <HAL_TIM_PWM_Init+0xa0>
 80032de:	2f00      	cmp	r7, #0
 80032e0:	d1c0      	bne.n	8003264 <HAL_TIM_PWM_Init+0xa0>
 80032e2:	e79d      	b.n	8003220 <HAL_TIM_PWM_Init+0x5c>
 80032e4:	40010000 	.word	0x40010000
 80032e8:	40010400 	.word	0x40010400
 80032ec:	40000400 	.word	0x40000400
 80032f0:	40014000 	.word	0x40014000
 80032f4:	40000c00 	.word	0x40000c00

080032f8 <HAL_TIM_PWM_Start>:
 80032f8:	2900      	cmp	r1, #0
 80032fa:	d14b      	bne.n	8003394 <HAL_TIM_PWM_Start+0x9c>
 80032fc:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003300:	2b01      	cmp	r3, #1
 8003302:	d15b      	bne.n	80033bc <HAL_TIM_PWM_Start+0xc4>
 8003304:	2302      	movs	r3, #2
 8003306:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 800330a:	6803      	ldr	r3, [r0, #0]
 800330c:	2201      	movs	r2, #1
 800330e:	f001 011f 	and.w	r1, r1, #31
 8003312:	6a18      	ldr	r0, [r3, #32]
 8003314:	fa02 f101 	lsl.w	r1, r2, r1
 8003318:	ea20 0001 	bic.w	r0, r0, r1
 800331c:	b410      	push	{r4}
 800331e:	6218      	str	r0, [r3, #32]
 8003320:	4c3e      	ldr	r4, [pc, #248]	; (800341c <HAL_TIM_PWM_Start+0x124>)
 8003322:	6a1a      	ldr	r2, [r3, #32]
 8003324:	42a3      	cmp	r3, r4
 8003326:	ea41 0102 	orr.w	r1, r1, r2
 800332a:	6219      	str	r1, [r3, #32]
 800332c:	d048      	beq.n	80033c0 <HAL_TIM_PWM_Start+0xc8>
 800332e:	4a3c      	ldr	r2, [pc, #240]	; (8003420 <HAL_TIM_PWM_Start+0x128>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d045      	beq.n	80033c0 <HAL_TIM_PWM_Start+0xc8>
 8003334:	4a3b      	ldr	r2, [pc, #236]	; (8003424 <HAL_TIM_PWM_Start+0x12c>)
 8003336:	4c3c      	ldr	r4, [pc, #240]	; (8003428 <HAL_TIM_PWM_Start+0x130>)
 8003338:	4293      	cmp	r3, r2
 800333a:	bf18      	it	ne
 800333c:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8003340:	483a      	ldr	r0, [pc, #232]	; (800342c <HAL_TIM_PWM_Start+0x134>)
 8003342:	493b      	ldr	r1, [pc, #236]	; (8003430 <HAL_TIM_PWM_Start+0x138>)
 8003344:	bf0c      	ite	eq
 8003346:	2201      	moveq	r2, #1
 8003348:	2200      	movne	r2, #0
 800334a:	42a3      	cmp	r3, r4
 800334c:	bf08      	it	eq
 800334e:	f042 0201 	orreq.w	r2, r2, #1
 8003352:	4283      	cmp	r3, r0
 8003354:	bf08      	it	eq
 8003356:	f042 0201 	orreq.w	r2, r2, #1
 800335a:	428b      	cmp	r3, r1
 800335c:	bf08      	it	eq
 800335e:	f042 0201 	orreq.w	r2, r2, #1
 8003362:	b93a      	cbnz	r2, 8003374 <HAL_TIM_PWM_Start+0x7c>
 8003364:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 8003368:	1a18      	subs	r0, r3, r0
 800336a:	fab0 f080 	clz	r0, r0
 800336e:	0940      	lsrs	r0, r0, #5
 8003370:	2800      	cmp	r0, #0
 8003372:	d046      	beq.n	8003402 <HAL_TIM_PWM_Start+0x10a>
 8003374:	6899      	ldr	r1, [r3, #8]
 8003376:	4a2f      	ldr	r2, [pc, #188]	; (8003434 <HAL_TIM_PWM_Start+0x13c>)
 8003378:	400a      	ands	r2, r1
 800337a:	2a06      	cmp	r2, #6
 800337c:	d029      	beq.n	80033d2 <HAL_TIM_PWM_Start+0xda>
 800337e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003382:	d026      	beq.n	80033d2 <HAL_TIM_PWM_Start+0xda>
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	2000      	movs	r0, #0
 8003388:	f042 0201 	orr.w	r2, r2, #1
 800338c:	601a      	str	r2, [r3, #0]
 800338e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003392:	4770      	bx	lr
 8003394:	2904      	cmp	r1, #4
 8003396:	d020      	beq.n	80033da <HAL_TIM_PWM_Start+0xe2>
 8003398:	2908      	cmp	r1, #8
 800339a:	d026      	beq.n	80033ea <HAL_TIM_PWM_Start+0xf2>
 800339c:	290c      	cmp	r1, #12
 800339e:	d009      	beq.n	80033b4 <HAL_TIM_PWM_Start+0xbc>
 80033a0:	2910      	cmp	r1, #16
 80033a2:	d033      	beq.n	800340c <HAL_TIM_PWM_Start+0x114>
 80033a4:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d107      	bne.n	80033bc <HAL_TIM_PWM_Start+0xc4>
 80033ac:	2302      	movs	r3, #2
 80033ae:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 80033b2:	e7aa      	b.n	800330a <HAL_TIM_PWM_Start+0x12>
 80033b4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d01e      	beq.n	80033fa <HAL_TIM_PWM_Start+0x102>
 80033bc:	2001      	movs	r0, #1
 80033be:	4770      	bx	lr
 80033c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033c6:	645a      	str	r2, [r3, #68]	; 0x44
 80033c8:	4a1a      	ldr	r2, [pc, #104]	; (8003434 <HAL_TIM_PWM_Start+0x13c>)
 80033ca:	6899      	ldr	r1, [r3, #8]
 80033cc:	400a      	ands	r2, r1
 80033ce:	2a06      	cmp	r2, #6
 80033d0:	d1d5      	bne.n	800337e <HAL_TIM_PWM_Start+0x86>
 80033d2:	2000      	movs	r0, #0
 80033d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d1ec      	bne.n	80033bc <HAL_TIM_PWM_Start+0xc4>
 80033e2:	2302      	movs	r3, #2
 80033e4:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 80033e8:	e78f      	b.n	800330a <HAL_TIM_PWM_Start+0x12>
 80033ea:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d1e4      	bne.n	80033bc <HAL_TIM_PWM_Start+0xc4>
 80033f2:	2302      	movs	r3, #2
 80033f4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80033f8:	e787      	b.n	800330a <HAL_TIM_PWM_Start+0x12>
 80033fa:	2302      	movs	r3, #2
 80033fc:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8003400:	e783      	b.n	800330a <HAL_TIM_PWM_Start+0x12>
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	f042 0201 	orr.w	r2, r2, #1
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	e7c0      	b.n	800338e <HAL_TIM_PWM_Start+0x96>
 800340c:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8003410:	2b01      	cmp	r3, #1
 8003412:	d1d3      	bne.n	80033bc <HAL_TIM_PWM_Start+0xc4>
 8003414:	2302      	movs	r3, #2
 8003416:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 800341a:	e776      	b.n	800330a <HAL_TIM_PWM_Start+0x12>
 800341c:	40010000 	.word	0x40010000
 8003420:	40010400 	.word	0x40010400
 8003424:	40000400 	.word	0x40000400
 8003428:	40000800 	.word	0x40000800
 800342c:	40000c00 	.word	0x40000c00
 8003430:	40014000 	.word	0x40014000
 8003434:	00010007 	.word	0x00010007

08003438 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8003438:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800343c:	2b01      	cmp	r3, #1
 800343e:	f000 8153 	beq.w	80036e8 <HAL_TIM_PWM_ConfigChannel+0x2b0>
 8003442:	2301      	movs	r3, #1
{
 8003444:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 8003446:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800344a:	2a14      	cmp	r2, #20
 800344c:	d843      	bhi.n	80034d6 <HAL_TIM_PWM_ConfigChannel+0x9e>
 800344e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003452:	0015      	.short	0x0015
 8003454:	00420042 	.word	0x00420042
 8003458:	007d0042 	.word	0x007d0042
 800345c:	00420042 	.word	0x00420042
 8003460:	00e60042 	.word	0x00e60042
 8003464:	00420042 	.word	0x00420042
 8003468:	00b10042 	.word	0x00b10042
 800346c:	00420042 	.word	0x00420042
 8003470:	01190042 	.word	0x01190042
 8003474:	00420042 	.word	0x00420042
 8003478:	00480042 	.word	0x00480042
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800347c:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800347e:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003482:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8003484:	680f      	ldr	r7, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003486:	f025 0501 	bic.w	r5, r5, #1
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800348a:	4cb0      	ldr	r4, [pc, #704]	; (800374c <HAL_TIM_PWM_ConfigChannel+0x314>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800348c:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 800348e:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003490:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8003492:	699d      	ldr	r5, [r3, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8003494:	f022 0202 	bic.w	r2, r2, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003498:	402c      	ands	r4, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800349a:	4dad      	ldr	r5, [pc, #692]	; (8003750 <HAL_TIM_PWM_ConfigChannel+0x318>)
  tmpccer |= OC_Config->OCPolarity;
 800349c:	ea42 020c 	orr.w	r2, r2, ip
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80034a0:	42ab      	cmp	r3, r5
  tmpccmrx |= OC_Config->OCMode;
 80034a2:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80034a6:	f000 812d 	beq.w	8003704 <HAL_TIM_PWM_ConfigChannel+0x2cc>
 80034aa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80034ae:	42ab      	cmp	r3, r5
 80034b0:	f000 8128 	beq.w	8003704 <HAL_TIM_PWM_ConfigChannel+0x2cc>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80034b4:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80034b6:	605e      	str	r6, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80034b8:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80034ba:	635d      	str	r5, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034bc:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034be:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034c0:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034c2:	f044 0408 	orr.w	r4, r4, #8
 80034c6:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034c8:	6999      	ldr	r1, [r3, #24]
 80034ca:	f021 0104 	bic.w	r1, r1, #4
 80034ce:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034d0:	699a      	ldr	r2, [r3, #24]
 80034d2:	432a      	orrs	r2, r5
 80034d4:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	bcf0      	pop	{r4, r5, r6, r7}
  __HAL_UNLOCK(htim);
 80034da:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80034de:	4618      	mov	r0, r3
}
 80034e0:	4770      	bx	lr
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80034e2:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80034e4:	688e      	ldr	r6, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80034e6:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034e8:	680f      	ldr	r7, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80034ea:	f425 1580 	bic.w	r5, r5, #1048576	; 0x100000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80034ee:	4c99      	ldr	r4, [pc, #612]	; (8003754 <HAL_TIM_PWM_ConfigChannel+0x31c>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80034f0:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 80034f2:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80034f4:	685d      	ldr	r5, [r3, #4]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80034f6:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx = TIMx->CCMR3;
 80034fa:	f8d3 c054 	ldr.w	ip, [r3, #84]	; 0x54
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80034fe:	ea42 5206 	orr.w	r2, r2, r6, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003502:	4e93      	ldr	r6, [pc, #588]	; (8003750 <HAL_TIM_PWM_ConfigChannel+0x318>)
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003504:	ea0c 0404 	and.w	r4, ip, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003508:	42b3      	cmp	r3, r6
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800350a:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800350e:	f000 80ed 	beq.w	80036ec <HAL_TIM_PWM_ConfigChannel+0x2b4>
 8003512:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003516:	42b3      	cmp	r3, r6
 8003518:	f000 80e8 	beq.w	80036ec <HAL_TIM_PWM_ConfigChannel+0x2b4>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800351c:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800351e:	605d      	str	r5, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8003520:	655c      	str	r4, [r3, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8003522:	65de      	str	r6, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003524:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003526:	6d5c      	ldr	r4, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003528:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800352a:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 800352e:	655c      	str	r4, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003530:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003532:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003536:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003538:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800353a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800353e:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(htim);
 8003540:	2300      	movs	r3, #0
}
 8003542:	bcf0      	pop	{r4, r5, r6, r7}
  __HAL_UNLOCK(htim);
 8003544:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8003548:	4618      	mov	r0, r3
}
 800354a:	4770      	bx	lr
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800354c:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800354e:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003552:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003554:	680f      	ldr	r7, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003556:	f025 0510 	bic.w	r5, r5, #16
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800355a:	4c7f      	ldr	r4, [pc, #508]	; (8003758 <HAL_TIM_PWM_ConfigChannel+0x320>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800355c:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 800355e:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003560:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8003562:	699d      	ldr	r5, [r3, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8003564:	f022 0220 	bic.w	r2, r2, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003568:	402c      	ands	r4, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800356a:	4d79      	ldr	r5, [pc, #484]	; (8003750 <HAL_TIM_PWM_ConfigChannel+0x318>)
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800356c:	ea42 120c 	orr.w	r2, r2, ip, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003570:	42ab      	cmp	r3, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003572:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003576:	f000 80d9 	beq.w	800372c <HAL_TIM_PWM_ConfigChannel+0x2f4>
 800357a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800357e:	42ab      	cmp	r3, r5
 8003580:	f000 80d4 	beq.w	800372c <HAL_TIM_PWM_ConfigChannel+0x2f4>
  TIMx->CCR2 = OC_Config->Pulse;
 8003584:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003586:	605e      	str	r6, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003588:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800358a:	639d      	str	r5, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800358c:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800358e:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003590:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003592:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8003596:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003598:	6999      	ldr	r1, [r3, #24]
 800359a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800359e:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035a0:	699a      	ldr	r2, [r3, #24]
 80035a2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80035a6:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	bcf0      	pop	{r4, r5, r6, r7}
  __HAL_UNLOCK(htim);
 80035ac:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80035b0:	4618      	mov	r0, r3
}
 80035b2:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035b4:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035b6:	688e      	ldr	r6, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035b8:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035ba:	680f      	ldr	r7, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035bc:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035c0:	4c65      	ldr	r4, [pc, #404]	; (8003758 <HAL_TIM_PWM_ConfigChannel+0x320>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035c2:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 80035c4:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80035c6:	685d      	ldr	r5, [r3, #4]
  tmpccer &= ~TIM_CCER_CC4P;
 80035c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx = TIMx->CCMR2;
 80035cc:	f8d3 c01c 	ldr.w	ip, [r3, #28]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035d0:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035d4:	4e5e      	ldr	r6, [pc, #376]	; (8003750 <HAL_TIM_PWM_ConfigChannel+0x318>)
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035d6:	ea0c 0404 	and.w	r4, ip, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035da:	42b3      	cmp	r3, r6
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035dc:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035e0:	f000 809e 	beq.w	8003720 <HAL_TIM_PWM_ConfigChannel+0x2e8>
 80035e4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80035e8:	42b3      	cmp	r3, r6
 80035ea:	f000 8099 	beq.w	8003720 <HAL_TIM_PWM_ConfigChannel+0x2e8>
  TIMx->CCR4 = OC_Config->Pulse;
 80035ee:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80035f0:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 80035f2:	61dc      	str	r4, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80035f4:	641e      	str	r6, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 80035f6:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035f8:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035fa:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035fc:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8003600:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003602:	69d9      	ldr	r1, [r3, #28]
 8003604:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003608:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800360a:	69da      	ldr	r2, [r3, #28]
 800360c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8003610:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8003612:	2300      	movs	r3, #0
}
 8003614:	bcf0      	pop	{r4, r5, r6, r7}
  __HAL_UNLOCK(htim);
 8003616:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800361a:	4618      	mov	r0, r3
}
 800361c:	4770      	bx	lr
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800361e:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003620:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003624:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8003626:	680f      	ldr	r7, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003628:	f425 7580 	bic.w	r5, r5, #256	; 0x100
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800362c:	4c47      	ldr	r4, [pc, #284]	; (800374c <HAL_TIM_PWM_ConfigChannel+0x314>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800362e:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8003630:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003632:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8003634:	69dd      	ldr	r5, [r3, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8003636:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800363a:	402c      	ands	r4, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800363c:	4d44      	ldr	r5, [pc, #272]	; (8003750 <HAL_TIM_PWM_ConfigChannel+0x318>)
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800363e:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003642:	42ab      	cmp	r3, r5
  tmpccmrx |= OC_Config->OCMode;
 8003644:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003648:	f000 808a 	beq.w	8003760 <HAL_TIM_PWM_ConfigChannel+0x328>
 800364c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003650:	42ab      	cmp	r3, r5
 8003652:	f000 8085 	beq.w	8003760 <HAL_TIM_PWM_ConfigChannel+0x328>
  TIMx->CCR3 = OC_Config->Pulse;
 8003656:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003658:	605e      	str	r6, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 800365a:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800365c:	63dd      	str	r5, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800365e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003660:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003662:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003664:	f044 0408 	orr.w	r4, r4, #8
 8003668:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800366a:	69d9      	ldr	r1, [r3, #28]
 800366c:	f021 0104 	bic.w	r1, r1, #4
 8003670:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003672:	69da      	ldr	r2, [r3, #28]
 8003674:	432a      	orrs	r2, r5
 8003676:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8003678:	2300      	movs	r3, #0
}
 800367a:	bcf0      	pop	{r4, r5, r6, r7}
  __HAL_UNLOCK(htim);
 800367c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8003680:	4618      	mov	r0, r3
}
 8003682:	4770      	bx	lr
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003684:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003686:	688e      	ldr	r6, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003688:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 800368a:	680f      	ldr	r7, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800368c:	f425 3580 	bic.w	r5, r5, #65536	; 0x10000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003690:	4c32      	ldr	r4, [pc, #200]	; (800375c <HAL_TIM_PWM_ConfigChannel+0x324>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003692:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8003694:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003696:	685d      	ldr	r5, [r3, #4]
  tmpccer &= ~TIM_CCER_CC5P;
 8003698:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx = TIMx->CCMR3;
 800369c:	f8d3 c054 	ldr.w	ip, [r3, #84]	; 0x54
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80036a0:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036a4:	4e2a      	ldr	r6, [pc, #168]	; (8003750 <HAL_TIM_PWM_ConfigChannel+0x318>)
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80036a6:	ea0c 0404 	and.w	r4, ip, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036aa:	42b3      	cmp	r3, r6
  tmpccmrx |= OC_Config->OCMode;
 80036ac:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036b0:	d022      	beq.n	80036f8 <HAL_TIM_PWM_ConfigChannel+0x2c0>
 80036b2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80036b6:	42b3      	cmp	r3, r6
 80036b8:	d01e      	beq.n	80036f8 <HAL_TIM_PWM_ConfigChannel+0x2c0>
  TIMx->CCR5 = OC_Config->Pulse;
 80036ba:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80036bc:	605d      	str	r5, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 80036be:	655c      	str	r4, [r3, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 80036c0:	659e      	str	r6, [r3, #88]	; 0x58
  TIMx->CCER = tmpccer;
 80036c2:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80036c4:	6d5c      	ldr	r4, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80036c6:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80036c8:	f044 0408 	orr.w	r4, r4, #8
 80036cc:	655c      	str	r4, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80036ce:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80036d0:	f021 0104 	bic.w	r1, r1, #4
 80036d4:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80036d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036d8:	432a      	orrs	r2, r5
 80036da:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(htim);
 80036dc:	2300      	movs	r3, #0
}
 80036de:	bcf0      	pop	{r4, r5, r6, r7}
  __HAL_UNLOCK(htim);
 80036e0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80036e4:	4618      	mov	r0, r3
}
 80036e6:	4770      	bx	lr
  __HAL_LOCK(htim);
 80036e8:	2002      	movs	r0, #2
}
 80036ea:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS6;
 80036ec:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80036f0:	694e      	ldr	r6, [r1, #20]
 80036f2:	ea45 2586 	orr.w	r5, r5, r6, lsl #10
 80036f6:	e711      	b.n	800351c <HAL_TIM_PWM_ConfigChannel+0xe4>
    tmpcr2 &= ~TIM_CR2_OIS5;
 80036f8:	f425 3580 	bic.w	r5, r5, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80036fc:	694e      	ldr	r6, [r1, #20]
 80036fe:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 8003702:	e7da      	b.n	80036ba <HAL_TIM_PWM_ConfigChannel+0x282>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003704:	f426 7c40 	bic.w	ip, r6, #768	; 0x300
    tmpccer &= ~TIM_CCER_CC1NP;
 8003708:	f022 0208 	bic.w	r2, r2, #8
    tmpcr2 |= OC_Config->OCNIdleState;
 800370c:	698e      	ldr	r6, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 800370e:	68cf      	ldr	r7, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8003710:	694d      	ldr	r5, [r1, #20]
    tmpccer |= OC_Config->OCNPolarity;
 8003712:	433a      	orrs	r2, r7
    tmpcr2 |= OC_Config->OCNIdleState;
 8003714:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8003716:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800371a:	ea45 060c 	orr.w	r6, r5, ip
 800371e:	e6c9      	b.n	80034b4 <HAL_TIM_PWM_ConfigChannel+0x7c>
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003720:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003724:	694e      	ldr	r6, [r1, #20]
 8003726:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 800372a:	e760      	b.n	80035ee <HAL_TIM_PWM_ConfigChannel+0x1b6>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800372c:	f426 6c40 	bic.w	ip, r6, #3072	; 0xc00
    tmpccer &= ~TIM_CCER_CC2NP;
 8003730:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003734:	698e      	ldr	r6, [r1, #24]
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003736:	68cf      	ldr	r7, [r1, #12]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003738:	694d      	ldr	r5, [r1, #20]
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800373a:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800373e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8003740:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003744:	ea4c 0685 	orr.w	r6, ip, r5, lsl #2
 8003748:	e71c      	b.n	8003584 <HAL_TIM_PWM_ConfigChannel+0x14c>
 800374a:	bf00      	nop
 800374c:	fffeff8c 	.word	0xfffeff8c
 8003750:	40010000 	.word	0x40010000
 8003754:	feff8fff 	.word	0xfeff8fff
 8003758:	feff8cff 	.word	0xfeff8cff
 800375c:	fffeff8f 	.word	0xfffeff8f
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003760:	f426 5c40 	bic.w	ip, r6, #12288	; 0x3000
    tmpccer &= ~TIM_CCER_CC3NP;
 8003764:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003768:	698e      	ldr	r6, [r1, #24]
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800376a:	68cf      	ldr	r7, [r1, #12]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800376c:	694d      	ldr	r5, [r1, #20]
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800376e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003772:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8003774:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003778:	ea4c 1605 	orr.w	r6, ip, r5, lsl #4
 800377c:	e76b      	b.n	8003656 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800377e:	bf00      	nop

08003780 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003780:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003784:	2b01      	cmp	r3, #1
 8003786:	d05b      	beq.n	8003840 <HAL_TIM_ConfigClockSource+0xc0>
 8003788:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800378a:	2002      	movs	r0, #2
  tmpsmcr = htim->Instance->SMCR;
 800378c:	6813      	ldr	r3, [r2, #0]
{
 800378e:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 8003790:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 8003794:	2501      	movs	r5, #1
  tmpsmcr = htim->Instance->SMCR;
 8003796:	6898      	ldr	r0, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003798:	4c4c      	ldr	r4, [pc, #304]	; (80038cc <HAL_TIM_ConfigClockSource+0x14c>)
  __HAL_LOCK(htim);
 800379a:	f882 503c 	strb.w	r5, [r2, #60]	; 0x3c
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800379e:	4004      	ands	r4, r0
  switch (sClockSourceConfig->ClockSource)
 80037a0:	6808      	ldr	r0, [r1, #0]
 80037a2:	2840      	cmp	r0, #64	; 0x40
  htim->Instance->SMCR = tmpsmcr;
 80037a4:	609c      	str	r4, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80037a6:	d076      	beq.n	8003896 <HAL_TIM_ConfigClockSource+0x116>
 80037a8:	d94c      	bls.n	8003844 <HAL_TIM_ConfigClockSource+0xc4>
 80037aa:	2860      	cmp	r0, #96	; 0x60
 80037ac:	d02f      	beq.n	800380e <HAL_TIM_ConfigClockSource+0x8e>
 80037ae:	d958      	bls.n	8003862 <HAL_TIM_ConfigClockSource+0xe2>
 80037b0:	2870      	cmp	r0, #112	; 0x70
 80037b2:	d01b      	beq.n	80037ec <HAL_TIM_ConfigClockSource+0x6c>
 80037b4:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80037b8:	d10f      	bne.n	80037da <HAL_TIM_ConfigClockSource+0x5a>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037ba:	68cc      	ldr	r4, [r1, #12]
 80037bc:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
 80037c0:	ea40 0105 	orr.w	r1, r0, r5
  tmpsmcr = TIMx->SMCR;
 80037c4:	6898      	ldr	r0, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037c6:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037ca:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037ce:	4301      	orrs	r1, r0

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037d0:	6099      	str	r1, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037d2:	6899      	ldr	r1, [r3, #8]
 80037d4:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80037d8:	6099      	str	r1, [r3, #8]
  __HAL_UNLOCK(htim);
 80037da:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80037dc:	2101      	movs	r1, #1
  return HAL_OK;
 80037de:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 80037e0:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80037e4:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 80037e8:	bc70      	pop	{r4, r5, r6}
 80037ea:	4770      	bx	lr
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037ec:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
 80037f0:	68cc      	ldr	r4, [r1, #12]
 80037f2:	ea40 0105 	orr.w	r1, r0, r5
  tmpsmcr = TIMx->SMCR;
 80037f6:	6898      	ldr	r0, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037f8:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037fc:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003800:	4301      	orrs	r1, r0
  TIMx->SMCR = tmpsmcr;
 8003802:	6099      	str	r1, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8003804:	6899      	ldr	r1, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003806:	f041 0177 	orr.w	r1, r1, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800380a:	6099      	str	r1, [r3, #8]
      break;
 800380c:	e7e5      	b.n	80037da <HAL_TIM_ConfigClockSource+0x5a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800380e:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003810:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003812:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003816:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003818:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800381a:	6998      	ldr	r0, [r3, #24]
  tmpccer = TIMx->CCER;
 800381c:	6a19      	ldr	r1, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800381e:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003822:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003826:	ea40 3006 	orr.w	r0, r0, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800382a:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800382e:	6198      	str	r0, [r3, #24]
  TIMx->CCER = tmpccer;
 8003830:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8003832:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003834:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003838:	f041 0167 	orr.w	r1, r1, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800383c:	6099      	str	r1, [r3, #8]
 800383e:	e7cc      	b.n	80037da <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8003840:	2002      	movs	r0, #2
}
 8003842:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8003844:	2810      	cmp	r0, #16
 8003846:	d004      	beq.n	8003852 <HAL_TIM_ConfigClockSource+0xd2>
 8003848:	d93d      	bls.n	80038c6 <HAL_TIM_ConfigClockSource+0x146>
 800384a:	2820      	cmp	r0, #32
 800384c:	d001      	beq.n	8003852 <HAL_TIM_ConfigClockSource+0xd2>
 800384e:	2830      	cmp	r0, #48	; 0x30
 8003850:	d1c3      	bne.n	80037da <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr = TIMx->SMCR;
 8003852:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003854:	f040 0007 	orr.w	r0, r0, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8003858:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800385c:	4308      	orrs	r0, r1
  TIMx->SMCR = tmpsmcr;
 800385e:	6098      	str	r0, [r3, #8]
 8003860:	e7bb      	b.n	80037da <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8003862:	2850      	cmp	r0, #80	; 0x50
 8003864:	d1b9      	bne.n	80037da <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 8003866:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003868:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800386a:	6848      	ldr	r0, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800386c:	f025 050a 	bic.w	r5, r5, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003870:	f024 0401 	bic.w	r4, r4, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003874:	68ce      	ldr	r6, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 8003876:	4328      	orrs	r0, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003878:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800387a:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800387c:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003880:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003884:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8003886:	6218      	str	r0, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8003888:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800388a:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800388e:	f041 0157 	orr.w	r1, r1, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8003892:	6099      	str	r1, [r3, #8]
 8003894:	e7a1      	b.n	80037da <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 8003896:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003898:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800389a:	6848      	ldr	r0, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800389c:	f025 050a 	bic.w	r5, r5, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038a0:	f024 0401 	bic.w	r4, r4, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038a4:	68ce      	ldr	r6, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 80038a6:	4328      	orrs	r0, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038a8:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038aa:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038ac:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038b0:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80038b4:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80038b6:	6218      	str	r0, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 80038b8:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80038ba:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038be:	f041 0147 	orr.w	r1, r1, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80038c2:	6099      	str	r1, [r3, #8]
 80038c4:	e789      	b.n	80037da <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80038c6:	2800      	cmp	r0, #0
 80038c8:	d0c3      	beq.n	8003852 <HAL_TIM_ConfigClockSource+0xd2>
 80038ca:	e786      	b.n	80037da <HAL_TIM_ConfigClockSource+0x5a>
 80038cc:	fffe0088 	.word	0xfffe0088

080038d0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038d0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d04b      	beq.n	8003970 <HAL_TIMEx_MasterConfigSynchronization+0xa0>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038d8:	6803      	ldr	r3, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80038da:	4a27      	ldr	r2, [pc, #156]	; (8003978 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
{
 80038dc:	b4f0      	push	{r4, r5, r6, r7}
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80038de:	4e27      	ldr	r6, [pc, #156]	; (800397c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->State = HAL_TIM_STATE_BUSY;
 80038e0:	2502      	movs	r5, #2
  __HAL_LOCK(htim);
 80038e2:	2401      	movs	r4, #1
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80038e4:	4293      	cmp	r3, r2
 80038e6:	bf18      	it	ne
 80038e8:	42b3      	cmpne	r3, r6
  htim->State = HAL_TIM_STATE_BUSY;
 80038ea:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 80038ee:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80038f2:	bf08      	it	eq
 80038f4:	2601      	moveq	r6, #1
  tmpcr2 = htim->Instance->CR2;
 80038f6:	685c      	ldr	r4, [r3, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80038f8:	bf18      	it	ne
 80038fa:	2600      	movne	r6, #0
  tmpsmcr = htim->Instance->SMCR;
 80038fc:	689d      	ldr	r5, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80038fe:	d103      	bne.n	8003908 <HAL_TIMEx_MasterConfigSynchronization+0x38>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003900:	f424 0470 	bic.w	r4, r4, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003904:	684a      	ldr	r2, [r1, #4]
 8003906:	4314      	orrs	r4, r2
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003908:	4a1d      	ldr	r2, [pc, #116]	; (8003980 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
  tmpcr2 &= ~TIM_CR2_MMS;
 800390a:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800390e:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003910:	4293      	cmp	r3, r2
 8003912:	bf18      	it	ne
 8003914:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8003918:	f8df c070 	ldr.w	ip, [pc, #112]	; 800398c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800391c:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003920:	4f18      	ldr	r7, [pc, #96]	; (8003984 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003922:	bf0c      	ite	eq
 8003924:	2201      	moveq	r2, #1
 8003926:	2200      	movne	r2, #0
  htim->Instance->CR2 = tmpcr2;
 8003928:	605c      	str	r4, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800392a:	4563      	cmp	r3, ip
 800392c:	bf08      	it	eq
 800392e:	f042 0201 	orreq.w	r2, r2, #1
 8003932:	4c15      	ldr	r4, [pc, #84]	; (8003988 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003934:	42bb      	cmp	r3, r7
 8003936:	bf08      	it	eq
 8003938:	f042 0201 	orreq.w	r2, r2, #1
 800393c:	f507 379a 	add.w	r7, r7, #78848	; 0x13400
 8003940:	42bb      	cmp	r3, r7
 8003942:	bf08      	it	eq
 8003944:	f042 0201 	orreq.w	r2, r2, #1
 8003948:	42a3      	cmp	r3, r4
 800394a:	bf08      	it	eq
 800394c:	f042 0201 	orreq.w	r2, r2, #1
 8003950:	b902      	cbnz	r2, 8003954 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8003952:	b126      	cbz	r6, 800395e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003954:	688a      	ldr	r2, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003956:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800395a:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800395c:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800395e:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8003960:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8003962:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8003966:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  return HAL_OK;
}
 800396a:	4618      	mov	r0, r3
 800396c:	bcf0      	pop	{r4, r5, r6, r7}
 800396e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003970:	2202      	movs	r2, #2
}
 8003972:	4610      	mov	r0, r2
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	40010400 	.word	0x40010400
 800397c:	40010000 	.word	0x40010000
 8003980:	40000400 	.word	0x40000400
 8003984:	40000c00 	.word	0x40000c00
 8003988:	40001800 	.word	0x40001800
 800398c:	40000800 	.word	0x40000800

08003990 <HAL_UART_TxCpltCallback>:
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop

08003994 <HAL_UART_ErrorCallback>:
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop

08003998 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003998:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
  huart->RxXferCount = 0U;
 800399a:	2200      	movs	r2, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800399c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800399e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039a2:	4618      	mov	r0, r3
  huart->TxXferCount = 0U;
 80039a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 80039a8:	f7ff fff4 	bl	8003994 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039ac:	bd08      	pop	{r3, pc}
 80039ae:	bf00      	nop

080039b0 <HAL_UARTEx_RxEventCallback>:
}
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop

080039b4 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80039b4:	6803      	ldr	r3, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80039b6:	f640 010f 	movw	r1, #2063	; 0x80f
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80039ba:	69da      	ldr	r2, [r3, #28]
  if (errorflags == 0U)
 80039bc:	420a      	tst	r2, r1
{
 80039be:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039c0:	681e      	ldr	r6, [r3, #0]
{
 80039c2:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039c4:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 80039c6:	d068      	beq.n	8003a9a <HAL_UART_IRQHandler+0xe6>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80039c8:	f015 0501 	ands.w	r5, r5, #1
 80039cc:	d06c      	beq.n	8003aa8 <HAL_UART_IRQHandler+0xf4>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80039ce:	07d1      	lsls	r1, r2, #31
 80039d0:	d509      	bpl.n	80039e6 <HAL_UART_IRQHandler+0x32>
 80039d2:	05f0      	lsls	r0, r6, #23
 80039d4:	d507      	bpl.n	80039e6 <HAL_UART_IRQHandler+0x32>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80039d6:	2101      	movs	r1, #1
 80039d8:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039da:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80039de:	f041 0101 	orr.w	r1, r1, #1
 80039e2:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80039e6:	0791      	lsls	r1, r2, #30
 80039e8:	f100 80b9 	bmi.w	8003b5e <HAL_UART_IRQHandler+0x1aa>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80039ec:	0751      	lsls	r1, r2, #29
 80039ee:	d502      	bpl.n	80039f6 <HAL_UART_IRQHandler+0x42>
 80039f0:	2d00      	cmp	r5, #0
 80039f2:	f040 80c2 	bne.w	8003b7a <HAL_UART_IRQHandler+0x1c6>
    if (((isrflags & USART_ISR_ORE) != 0U)
 80039f6:	0710      	lsls	r0, r2, #28
 80039f8:	d505      	bpl.n	8003a06 <HAL_UART_IRQHandler+0x52>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80039fa:	06b1      	lsls	r1, r6, #26
 80039fc:	f100 80c6 	bmi.w	8003b8c <HAL_UART_IRQHandler+0x1d8>
 8003a00:	2d00      	cmp	r5, #0
 8003a02:	f040 80c3 	bne.w	8003b8c <HAL_UART_IRQHandler+0x1d8>
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003a06:	0515      	lsls	r5, r2, #20
 8003a08:	d50a      	bpl.n	8003a20 <HAL_UART_IRQHandler+0x6c>
 8003a0a:	0170      	lsls	r0, r6, #5
 8003a0c:	d508      	bpl.n	8003a20 <HAL_UART_IRQHandler+0x6c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a0e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003a12:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003a14:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8003a18:	f041 0120 	orr.w	r1, r1, #32
 8003a1c:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a20:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8003a24:	2900      	cmp	r1, #0
 8003a26:	d03e      	beq.n	8003aa6 <HAL_UART_IRQHandler+0xf2>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a28:	0691      	lsls	r1, r2, #26
 8003a2a:	d502      	bpl.n	8003a32 <HAL_UART_IRQHandler+0x7e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a2c:	06b2      	lsls	r2, r6, #26
 8003a2e:	f100 80ba 	bmi.w	8003ba6 <HAL_UART_IRQHandler+0x1f2>
      errorcode = huart->ErrorCode;
 8003a32:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a36:	6899      	ldr	r1, [r3, #8]
 8003a38:	064e      	lsls	r6, r1, #25
 8003a3a:	d403      	bmi.n	8003a44 <HAL_UART_IRQHandler+0x90>
 8003a3c:	f015 0528 	ands.w	r5, r5, #40	; 0x28
 8003a40:	f000 80b9 	beq.w	8003bb6 <HAL_UART_IRQHandler+0x202>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003a4a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a4c:	689a      	ldr	r2, [r3, #8]
 8003a4e:	f022 0201 	bic.w	r2, r2, #1
 8003a52:	609a      	str	r2, [r3, #8]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a54:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003a56:	2a01      	cmp	r2, #1
 8003a58:	d103      	bne.n	8003a62 <HAL_UART_IRQHandler+0xae>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	f022 0210 	bic.w	r2, r2, #16
 8003a60:	601a      	str	r2, [r3, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8003a62:	2120      	movs	r1, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a64:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8003a66:	67e1      	str	r1, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a68:	6622      	str	r2, [r4, #96]	; 0x60
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a6a:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 8003a6c:	6662      	str	r2, [r4, #100]	; 0x64
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a6e:	064d      	lsls	r5, r1, #25
 8003a70:	f140 8095 	bpl.w	8003b9e <HAL_UART_IRQHandler+0x1ea>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a74:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8003a76:	6f21      	ldr	r1, [r4, #112]	; 0x70
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a7c:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8003a7e:	2900      	cmp	r1, #0
 8003a80:	f000 808d 	beq.w	8003b9e <HAL_UART_IRQHandler+0x1ea>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a84:	4b60      	ldr	r3, [pc, #384]	; (8003c08 <HAL_UART_IRQHandler+0x254>)
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a86:	4608      	mov	r0, r1
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a88:	650b      	str	r3, [r1, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a8a:	f7fd fecd 	bl	8001828 <HAL_DMA_Abort_IT>
 8003a8e:	b150      	cbz	r0, 8003aa6 <HAL_UART_IRQHandler+0xf2>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a90:	6f20      	ldr	r0, [r4, #112]	; 0x70
}
 8003a92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a96:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003a98:	4718      	bx	r3
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a9a:	0691      	lsls	r1, r2, #26
 8003a9c:	d507      	bpl.n	8003aae <HAL_UART_IRQHandler+0xfa>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a9e:	06b5      	lsls	r5, r6, #26
 8003aa0:	d505      	bpl.n	8003aae <HAL_UART_IRQHandler+0xfa>
      if (huart->RxISR != NULL)
 8003aa2:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8003aa4:	b9f3      	cbnz	r3, 8003ae4 <HAL_UART_IRQHandler+0x130>
}
 8003aa6:	bd70      	pop	{r4, r5, r6, pc}
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003aa8:	4958      	ldr	r1, [pc, #352]	; (8003c0c <HAL_UART_IRQHandler+0x258>)
 8003aaa:	420e      	tst	r6, r1
 8003aac:	d18f      	bne.n	80039ce <HAL_UART_IRQHandler+0x1a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aae:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8003ab0:	2901      	cmp	r1, #1
 8003ab2:	d01a      	beq.n	8003aea <HAL_UART_IRQHandler+0x136>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003ab4:	0615      	lsls	r5, r2, #24
 8003ab6:	d40f      	bmi.n	8003ad8 <HAL_UART_IRQHandler+0x124>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003ab8:	0651      	lsls	r1, r2, #25
 8003aba:	d5f4      	bpl.n	8003aa6 <HAL_UART_IRQHandler+0xf2>
 8003abc:	0672      	lsls	r2, r6, #25
 8003abe:	d5f2      	bpl.n	8003aa6 <HAL_UART_IRQHandler+0xf2>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ac0:	681a      	ldr	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ac2:	2520      	movs	r5, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003ac4:	2100      	movs	r1, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ac6:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ac8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003acc:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003ace:	67a5      	str	r5, [r4, #120]	; 0x78
  huart->TxISR = NULL;
 8003ad0:	66a1      	str	r1, [r4, #104]	; 0x68
  HAL_UART_TxCpltCallback(huart);
 8003ad2:	f7ff ff5d 	bl	8003990 <HAL_UART_TxCpltCallback>
}
 8003ad6:	bd70      	pop	{r4, r5, r6, pc}
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003ad8:	0630      	lsls	r0, r6, #24
 8003ada:	d5ed      	bpl.n	8003ab8 <HAL_UART_IRQHandler+0x104>
    if (huart->TxISR != NULL)
 8003adc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0e1      	beq.n	8003aa6 <HAL_UART_IRQHandler+0xf2>
      huart->TxISR(huart);
 8003ae2:	4620      	mov	r0, r4
}
 8003ae4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8003ae8:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003aea:	06d0      	lsls	r0, r2, #27
 8003aec:	d5e2      	bpl.n	8003ab4 <HAL_UART_IRQHandler+0x100>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003aee:	06f1      	lsls	r1, r6, #27
 8003af0:	d5e0      	bpl.n	8003ab4 <HAL_UART_IRQHandler+0x100>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003af2:	2210      	movs	r2, #16
 8003af4:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8003afc:	d061      	beq.n	8003bc2 <HAL_UART_IRQHandler+0x20e>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003afe:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8003b00:	6802      	ldr	r2, [r0, #0]
 8003b02:	6852      	ldr	r2, [r2, #4]
 8003b04:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8003b06:	2a00      	cmp	r2, #0
 8003b08:	d0cd      	beq.n	8003aa6 <HAL_UART_IRQHandler+0xf2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b0a:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8003b0e:	4291      	cmp	r1, r2
 8003b10:	d9c9      	bls.n	8003aa6 <HAL_UART_IRQHandler+0xf2>
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b12:	69c5      	ldr	r5, [r0, #28]
        huart->RxXferCount = nb_remaining_rx_data;
 8003b14:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b18:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8003b1c:	d017      	beq.n	8003b4e <HAL_UART_IRQHandler+0x19a>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b1e:	681a      	ldr	r2, [r3, #0]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b20:	2100      	movs	r1, #0
          huart->RxState = HAL_UART_STATE_READY;
 8003b22:	2520      	movs	r5, #32
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b28:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	f022 0201 	bic.w	r2, r2, #1
 8003b30:	609a      	str	r2, [r3, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b38:	609a      	str	r2, [r3, #8]
          huart->RxState = HAL_UART_STATE_READY;
 8003b3a:	67e5      	str	r5, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b3c:	6621      	str	r1, [r4, #96]	; 0x60
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	f022 0210 	bic.w	r2, r2, #16
 8003b44:	601a      	str	r2, [r3, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b46:	f7fd fe27 	bl	8001798 <HAL_DMA_Abort>
 8003b4a:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b4e:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8003b52:	4620      	mov	r0, r4
 8003b54:	1ac9      	subs	r1, r1, r3
 8003b56:	b289      	uxth	r1, r1
 8003b58:	f7ff ff2a 	bl	80039b0 <HAL_UARTEx_RxEventCallback>
}
 8003b5c:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b5e:	2d00      	cmp	r5, #0
 8003b60:	f43f af49 	beq.w	80039f6 <HAL_UART_IRQHandler+0x42>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003b64:	2102      	movs	r1, #2
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b66:	0750      	lsls	r0, r2, #29
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003b68:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b6a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8003b6e:	f041 0104 	orr.w	r1, r1, #4
 8003b72:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b76:	f57f af3e 	bpl.w	80039f6 <HAL_UART_IRQHandler+0x42>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003b7a:	2104      	movs	r1, #4
 8003b7c:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b7e:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8003b82:	f041 0102 	orr.w	r1, r1, #2
 8003b86:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
 8003b8a:	e734      	b.n	80039f6 <HAL_UART_IRQHandler+0x42>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b8c:	2108      	movs	r1, #8
 8003b8e:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b90:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8003b94:	f041 0108 	orr.w	r1, r1, #8
 8003b98:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
 8003b9c:	e733      	b.n	8003a06 <HAL_UART_IRQHandler+0x52>
            HAL_UART_ErrorCallback(huart);
 8003b9e:	4620      	mov	r0, r4
 8003ba0:	f7ff fef8 	bl	8003994 <HAL_UART_ErrorCallback>
}
 8003ba4:	bd70      	pop	{r4, r5, r6, pc}
        if (huart->RxISR != NULL)
 8003ba6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003ba8:	2a00      	cmp	r2, #0
 8003baa:	f43f af42 	beq.w	8003a32 <HAL_UART_IRQHandler+0x7e>
          huart->RxISR(huart);
 8003bae:	4620      	mov	r0, r4
 8003bb0:	4790      	blx	r2
 8003bb2:	6823      	ldr	r3, [r4, #0]
 8003bb4:	e73d      	b.n	8003a32 <HAL_UART_IRQHandler+0x7e>
        HAL_UART_ErrorCallback(huart);
 8003bb6:	4620      	mov	r0, r4
 8003bb8:	f7ff feec 	bl	8003994 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bbc:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 8003bc0:	bd70      	pop	{r4, r5, r6, pc}
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003bc2:	f8b4 505a 	ldrh.w	r5, [r4, #90]	; 0x5a
 8003bc6:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
      if ((huart->RxXferCount > 0U)
 8003bca:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003bce:	1b49      	subs	r1, r1, r5
      if ((huart->RxXferCount > 0U)
 8003bd0:	b280      	uxth	r0, r0
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003bd2:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8003bd4:	2800      	cmp	r0, #0
 8003bd6:	f43f af66 	beq.w	8003aa6 <HAL_UART_IRQHandler+0xf2>
 8003bda:	2900      	cmp	r1, #0
 8003bdc:	f43f af63 	beq.w	8003aa6 <HAL_UART_IRQHandler+0xf2>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003be0:	681d      	ldr	r5, [r3, #0]
        huart->RxState = HAL_UART_STATE_READY;
 8003be2:	2620      	movs	r6, #32
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003be4:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003be6:	f425 7590 	bic.w	r5, r5, #288	; 0x120
 8003bea:	601d      	str	r5, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bec:	689d      	ldr	r5, [r3, #8]
 8003bee:	f025 0501 	bic.w	r5, r5, #1
 8003bf2:	609d      	str	r5, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8003bf4:	67e6      	str	r6, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bf6:	6622      	str	r2, [r4, #96]	; 0x60
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bf8:	681d      	ldr	r5, [r3, #0]
        huart->RxISR = NULL;
 8003bfa:	6662      	str	r2, [r4, #100]	; 0x64
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bfc:	f025 0510 	bic.w	r5, r5, #16
 8003c00:	601d      	str	r5, [r3, #0]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c02:	f7ff fed5 	bl	80039b0 <HAL_UARTEx_RxEventCallback>
}
 8003c06:	bd70      	pop	{r4, r5, r6, pc}
 8003c08:	08003999 	.word	0x08003999
 8003c0c:	04000120 	.word	0x04000120

08003c10 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c10:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003c12:	07da      	lsls	r2, r3, #31
{
 8003c14:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c16:	d506      	bpl.n	8003c26 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c18:	6801      	ldr	r1, [r0, #0]
 8003c1a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8003c1c:	684a      	ldr	r2, [r1, #4]
 8003c1e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003c22:	4322      	orrs	r2, r4
 8003c24:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c26:	079c      	lsls	r4, r3, #30
 8003c28:	d506      	bpl.n	8003c38 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c2a:	6801      	ldr	r1, [r0, #0]
 8003c2c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003c2e:	684a      	ldr	r2, [r1, #4]
 8003c30:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003c34:	4322      	orrs	r2, r4
 8003c36:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c38:	0759      	lsls	r1, r3, #29
 8003c3a:	d506      	bpl.n	8003c4a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c3c:	6801      	ldr	r1, [r0, #0]
 8003c3e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003c40:	684a      	ldr	r2, [r1, #4]
 8003c42:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c46:	4322      	orrs	r2, r4
 8003c48:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c4a:	071a      	lsls	r2, r3, #28
 8003c4c:	d506      	bpl.n	8003c5c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c4e:	6801      	ldr	r1, [r0, #0]
 8003c50:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003c52:	684a      	ldr	r2, [r1, #4]
 8003c54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c58:	4322      	orrs	r2, r4
 8003c5a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c5c:	06dc      	lsls	r4, r3, #27
 8003c5e:	d506      	bpl.n	8003c6e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c60:	6801      	ldr	r1, [r0, #0]
 8003c62:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003c64:	688a      	ldr	r2, [r1, #8]
 8003c66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c6a:	4322      	orrs	r2, r4
 8003c6c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c6e:	0699      	lsls	r1, r3, #26
 8003c70:	d506      	bpl.n	8003c80 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c72:	6801      	ldr	r1, [r0, #0]
 8003c74:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003c76:	688a      	ldr	r2, [r1, #8]
 8003c78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c7c:	4322      	orrs	r2, r4
 8003c7e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c80:	065a      	lsls	r2, r3, #25
 8003c82:	d50a      	bpl.n	8003c9a <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c84:	6801      	ldr	r1, [r0, #0]
 8003c86:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003c88:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c8a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c8e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003c92:	ea42 0204 	orr.w	r2, r2, r4
 8003c96:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c98:	d00b      	beq.n	8003cb2 <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c9a:	061b      	lsls	r3, r3, #24
 8003c9c:	d506      	bpl.n	8003cac <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c9e:	6802      	ldr	r2, [r0, #0]
 8003ca0:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003ca2:	6853      	ldr	r3, [r2, #4]
 8003ca4:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003ca8:	430b      	orrs	r3, r1
 8003caa:	6053      	str	r3, [r2, #4]
}
 8003cac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003cb0:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003cb2:	684a      	ldr	r2, [r1, #4]
 8003cb4:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003cb6:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8003cba:	4322      	orrs	r2, r4
 8003cbc:	604a      	str	r2, [r1, #4]
 8003cbe:	e7ec      	b.n	8003c9a <UART_AdvFeatureConfig+0x8a>

08003cc0 <HAL_UART_Init>:
  if (huart == NULL)
 8003cc0:	2800      	cmp	r0, #0
 8003cc2:	d04f      	beq.n	8003d64 <HAL_UART_Init+0xa4>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003cc4:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 8003cc6:	b570      	push	{r4, r5, r6, lr}
 8003cc8:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d045      	beq.n	8003d5a <HAL_UART_Init+0x9a>
  __HAL_UART_DISABLE(huart);
 8003cce:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003cd0:	2124      	movs	r1, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cd2:	6920      	ldr	r0, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 8003cd4:	67a1      	str	r1, [r4, #120]	; 0x78
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cd6:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8003cd8:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cda:	4302      	orrs	r2, r0
 8003cdc:	6960      	ldr	r0, [r4, #20]
  __HAL_UART_DISABLE(huart);
 8003cde:	f021 0101 	bic.w	r1, r1, #1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ce2:	4dba      	ldr	r5, [pc, #744]	; (8003fcc <HAL_UART_Init+0x30c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ce4:	4302      	orrs	r2, r0
 8003ce6:	69e0      	ldr	r0, [r4, #28]
  __HAL_UART_DISABLE(huart);
 8003ce8:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cea:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cec:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cee:	68e6      	ldr	r6, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cf0:	400d      	ands	r5, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cf2:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cf4:	432a      	orrs	r2, r5
  tmpreg |= huart->Init.OneBitSampling;
 8003cf6:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cf8:	601a      	str	r2, [r3, #0]
  tmpreg |= huart->Init.OneBitSampling;
 8003cfa:	ea41 0205 	orr.w	r2, r1, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cfe:	6859      	ldr	r1, [r3, #4]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d00:	4db3      	ldr	r5, [pc, #716]	; (8003fd0 <HAL_UART_Init+0x310>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d02:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d06:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d08:	ea41 0106 	orr.w	r1, r1, r6
 8003d0c:	6059      	str	r1, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d0e:	6899      	ldr	r1, [r3, #8]
 8003d10:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8003d14:	ea42 0201 	orr.w	r2, r2, r1
 8003d18:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d1a:	d025      	beq.n	8003d68 <HAL_UART_Init+0xa8>
 8003d1c:	4aad      	ldr	r2, [pc, #692]	; (8003fd4 <HAL_UART_Init+0x314>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d044      	beq.n	8003dac <HAL_UART_Init+0xec>
 8003d22:	4aad      	ldr	r2, [pc, #692]	; (8003fd8 <HAL_UART_Init+0x318>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	f000 80e9 	beq.w	8003efc <HAL_UART_Init+0x23c>
 8003d2a:	4aac      	ldr	r2, [pc, #688]	; (8003fdc <HAL_UART_Init+0x31c>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d045      	beq.n	8003dbc <HAL_UART_Init+0xfc>
 8003d30:	4aab      	ldr	r2, [pc, #684]	; (8003fe0 <HAL_UART_Init+0x320>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	f000 80f1 	beq.w	8003f1a <HAL_UART_Init+0x25a>
 8003d38:	4aaa      	ldr	r2, [pc, #680]	; (8003fe4 <HAL_UART_Init+0x324>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	f000 8171 	beq.w	8004022 <HAL_UART_Init+0x362>
 8003d40:	4aa9      	ldr	r2, [pc, #676]	; (8003fe8 <HAL_UART_Init+0x328>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	f000 8180 	beq.w	8004048 <HAL_UART_Init+0x388>
 8003d48:	4aa8      	ldr	r2, [pc, #672]	; (8003fec <HAL_UART_Init+0x32c>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	f000 812d 	beq.w	8003faa <HAL_UART_Init+0x2ea>
  huart->RxISR = NULL;
 8003d50:	2300      	movs	r3, #0
    return HAL_ERROR;
 8003d52:	2001      	movs	r0, #1
  huart->TxISR = NULL;
 8003d54:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 8003d58:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 8003d5a:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8003d5e:	f001 fda7 	bl	80058b0 <HAL_UART_MspInit>
 8003d62:	e7b4      	b.n	8003cce <HAL_UART_Init+0xe>
    return HAL_ERROR;
 8003d64:	2001      	movs	r0, #1
}
 8003d66:	4770      	bx	lr
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d68:	4ba1      	ldr	r3, [pc, #644]	; (8003ff0 <HAL_UART_Init+0x330>)
 8003d6a:	4aa2      	ldr	r2, [pc, #648]	; (8003ff4 <HAL_UART_Init+0x334>)
 8003d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d70:	f003 0303 	and.w	r3, r3, #3
 8003d74:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d76:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003d7a:	d030      	beq.n	8003dde <HAL_UART_Init+0x11e>
    switch (clocksource)
 8003d7c:	2b08      	cmp	r3, #8
 8003d7e:	d8e7      	bhi.n	8003d50 <HAL_UART_Init+0x90>
 8003d80:	a201      	add	r2, pc, #4	; (adr r2, 8003d88 <HAL_UART_Init+0xc8>)
 8003d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d86:	bf00      	nop
 8003d88:	08003ee1 	.word	0x08003ee1
 8003d8c:	08003e19 	.word	0x08003e19
 8003d90:	08003f17 	.word	0x08003f17
 8003d94:	08003d51 	.word	0x08003d51
 8003d98:	08003f31 	.word	0x08003f31
 8003d9c:	08003d51 	.word	0x08003d51
 8003da0:	08003d51 	.word	0x08003d51
 8003da4:	08003d51 	.word	0x08003d51
 8003da8:	08003f37 	.word	0x08003f37
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003dac:	4b90      	ldr	r3, [pc, #576]	; (8003ff0 <HAL_UART_Init+0x330>)
 8003dae:	4a92      	ldr	r2, [pc, #584]	; (8003ff8 <HAL_UART_Init+0x338>)
 8003db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db4:	f003 030c 	and.w	r3, r3, #12
 8003db8:	5cd3      	ldrb	r3, [r2, r3]
 8003dba:	e7dc      	b.n	8003d76 <HAL_UART_Init+0xb6>
 8003dbc:	4b8c      	ldr	r3, [pc, #560]	; (8003ff0 <HAL_UART_Init+0x330>)
 8003dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003dc6:	2b40      	cmp	r3, #64	; 0x40
 8003dc8:	f000 80af 	beq.w	8003f2a <HAL_UART_Init+0x26a>
 8003dcc:	f240 8082 	bls.w	8003ed4 <HAL_UART_Init+0x214>
 8003dd0:	2b80      	cmp	r3, #128	; 0x80
 8003dd2:	f000 809d 	beq.w	8003f10 <HAL_UART_Init+0x250>
 8003dd6:	2bc0      	cmp	r3, #192	; 0xc0
 8003dd8:	f000 80b8 	beq.w	8003f4c <HAL_UART_Init+0x28c>
 8003ddc:	e7b8      	b.n	8003d50 <HAL_UART_Init+0x90>
    switch (clocksource)
 8003dde:	2b08      	cmp	r3, #8
 8003de0:	d8b6      	bhi.n	8003d50 <HAL_UART_Init+0x90>
 8003de2:	a201      	add	r2, pc, #4	; (adr r2, 8003de8 <HAL_UART_Init+0x128>)
 8003de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de8:	08003fa5 	.word	0x08003fa5
 8003dec:	08003f8f 	.word	0x08003f8f
 8003df0:	08003fa1 	.word	0x08003fa1
 8003df4:	08003d51 	.word	0x08003d51
 8003df8:	08003f9b 	.word	0x08003f9b
 8003dfc:	08003d51 	.word	0x08003d51
 8003e00:	08003d51 	.word	0x08003d51
 8003e04:	08003d51 	.word	0x08003d51
 8003e08:	08003f53 	.word	0x08003f53
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d19f      	bne.n	8003d50 <HAL_UART_Init+0x90>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e10:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003e14:	f000 80bb 	beq.w	8003f8e <HAL_UART_Init+0x2ce>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e18:	f7fe fc72 	bl	8002700 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8003e1c:	2800      	cmp	r0, #0
 8003e1e:	d063      	beq.n	8003ee8 <HAL_UART_Init+0x228>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e20:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e22:	f64f 72ef 	movw	r2, #65519	; 0xffef
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e26:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003e2a:	fbb0 f0f3 	udiv	r0, r0, r3
 8003e2e:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e30:	f1a0 0310 	sub.w	r3, r0, #16
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d88b      	bhi.n	8003d50 <HAL_UART_Init+0x90>
        huart->Instance->BRR = usartdiv;
 8003e38:	6822      	ldr	r2, [r4, #0]
  huart->RxISR = NULL;
 8003e3a:	2300      	movs	r3, #0
        huart->Instance->BRR = usartdiv;
 8003e3c:	60d0      	str	r0, [r2, #12]
  huart->TxISR = NULL;
 8003e3e:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d155      	bne.n	8003ef4 <HAL_UART_Init+0x234>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e48:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e4a:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e4c:	685a      	ldr	r2, [r3, #4]
 8003e4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e54:	689a      	ldr	r2, [r3, #8]
 8003e56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e5a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	f042 0201 	orr.w	r2, r2, #1
 8003e62:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e64:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
  tickstart = HAL_GetTick();
 8003e68:	f7fd f8b4 	bl	8000fd4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e6c:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003e6e:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	0710      	lsls	r0, r2, #28
 8003e74:	d408      	bmi.n	8003e88 <HAL_UART_Init+0x1c8>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e76:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8003e78:	2220      	movs	r2, #32
  return HAL_OK;
 8003e7a:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8003e7c:	67a2      	str	r2, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8003e7e:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003e82:	67e2      	str	r2, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e84:	6623      	str	r3, [r4, #96]	; 0x60
}
 8003e86:	bd70      	pop	{r4, r5, r6, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e88:	69dd      	ldr	r5, [r3, #28]
 8003e8a:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 8003e8e:	d1f2      	bne.n	8003e76 <HAL_UART_Init+0x1b6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e90:	f7fd f8a0 	bl	8000fd4 <HAL_GetTick>
 8003e94:	1b80      	subs	r0, r0, r6
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e96:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e98:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8003e9c:	f080 80b2 	bcs.w	8004004 <HAL_UART_Init+0x344>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	0751      	lsls	r1, r2, #29
 8003ea4:	d5f0      	bpl.n	8003e88 <HAL_UART_Init+0x1c8>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ea6:	69da      	ldr	r2, [r3, #28]
 8003ea8:	0512      	lsls	r2, r2, #20
 8003eaa:	d5ed      	bpl.n	8003e88 <HAL_UART_Init+0x1c8>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003eac:	f44f 6100 	mov.w	r1, #2048	; 0x800
          huart->gState = HAL_UART_STATE_READY;
 8003eb0:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8003eb2:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003eb4:	6219      	str	r1, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003eb6:	6819      	ldr	r1, [r3, #0]
 8003eb8:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 8003ebc:	6019      	str	r1, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ebe:	6899      	ldr	r1, [r3, #8]
 8003ec0:	f021 0101 	bic.w	r1, r1, #1
 8003ec4:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8003ec6:	67a2      	str	r2, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8003ec8:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003ecc:	67e2      	str	r2, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ece:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
}
 8003ed2:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f47f af3b 	bne.w	8003d50 <HAL_UART_Init+0x90>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003eda:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003ede:	d061      	beq.n	8003fa4 <HAL_UART_Init+0x2e4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ee0:	f7fe fbfe 	bl	80026e0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003ee4:	2800      	cmp	r0, #0
 8003ee6:	d19b      	bne.n	8003e20 <HAL_UART_Init+0x160>
  huart->RxISR = NULL;
 8003ee8:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8003eea:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003eee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d0a9      	beq.n	8003e48 <HAL_UART_Init+0x188>
    UART_AdvFeatureConfig(huart);
 8003ef4:	4620      	mov	r0, r4
 8003ef6:	f7ff fe8b 	bl	8003c10 <UART_AdvFeatureConfig>
 8003efa:	e7a5      	b.n	8003e48 <HAL_UART_Init+0x188>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003efc:	4b3c      	ldr	r3, [pc, #240]	; (8003ff0 <HAL_UART_Init+0x330>)
 8003efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f02:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f06:	2b10      	cmp	r3, #16
 8003f08:	d00f      	beq.n	8003f2a <HAL_UART_Init+0x26a>
 8003f0a:	d9e3      	bls.n	8003ed4 <HAL_UART_Init+0x214>
 8003f0c:	2b20      	cmp	r3, #32
 8003f0e:	d13b      	bne.n	8003f88 <HAL_UART_Init+0x2c8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f10:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003f14:	d044      	beq.n	8003fa0 <HAL_UART_Init+0x2e0>
        pclk = (uint32_t) HSI_VALUE;
 8003f16:	4839      	ldr	r0, [pc, #228]	; (8003ffc <HAL_UART_Init+0x33c>)
 8003f18:	e782      	b.n	8003e20 <HAL_UART_Init+0x160>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f1a:	4b35      	ldr	r3, [pc, #212]	; (8003ff0 <HAL_UART_Init+0x330>)
 8003f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f28:	d108      	bne.n	8003f3c <HAL_UART_Init+0x27c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f2a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003f2e:	d034      	beq.n	8003f9a <HAL_UART_Init+0x2da>
        pclk = HAL_RCC_GetSysClockFreq();
 8003f30:	f7fe fba2 	bl	8002678 <HAL_RCC_GetSysClockFreq>
 8003f34:	e772      	b.n	8003e1c <HAL_UART_Init+0x15c>
        pclk = (uint32_t) LSE_VALUE;
 8003f36:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003f3a:	e771      	b.n	8003e20 <HAL_UART_Init+0x160>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f3c:	d9ca      	bls.n	8003ed4 <HAL_UART_Init+0x214>
 8003f3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f42:	d0e5      	beq.n	8003f10 <HAL_UART_Init+0x250>
 8003f44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f48:	f47f af02 	bne.w	8003d50 <HAL_UART_Init+0x90>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f4c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003f50:	d1f1      	bne.n	8003f36 <HAL_UART_Init+0x276>
 8003f52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f56:	6862      	ldr	r2, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f58:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f5c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8003f60:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f64:	b29a      	uxth	r2, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f66:	f1a2 0010 	sub.w	r0, r2, #16
 8003f6a:	4288      	cmp	r0, r1
 8003f6c:	f63f aef0 	bhi.w	8003d50 <HAL_UART_Init+0x90>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f70:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f74:	f3c2 0242 	ubfx	r2, r2, #1, #3
        huart->Instance->BRR = brrtemp;
 8003f78:	6820      	ldr	r0, [r4, #0]
  huart->RxISR = NULL;
 8003f7a:	2100      	movs	r1, #0
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f7c:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	60c3      	str	r3, [r0, #12]
  huart->TxISR = NULL;
 8003f82:	e9c4 1119 	strd	r1, r1, [r4, #100]	; 0x64
 8003f86:	e75c      	b.n	8003e42 <HAL_UART_Init+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f88:	2b30      	cmp	r3, #48	; 0x30
 8003f8a:	d0df      	beq.n	8003f4c <HAL_UART_Init+0x28c>
 8003f8c:	e6e0      	b.n	8003d50 <HAL_UART_Init+0x90>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f8e:	f7fe fbb7 	bl	8002700 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8003f92:	2800      	cmp	r0, #0
 8003f94:	d0a8      	beq.n	8003ee8 <HAL_UART_Init+0x228>
 8003f96:	0043      	lsls	r3, r0, #1
 8003f98:	e7dd      	b.n	8003f56 <HAL_UART_Init+0x296>
        pclk = HAL_RCC_GetSysClockFreq();
 8003f9a:	f7fe fb6d 	bl	8002678 <HAL_RCC_GetSysClockFreq>
 8003f9e:	e7f8      	b.n	8003f92 <HAL_UART_Init+0x2d2>
    switch (clocksource)
 8003fa0:	4b17      	ldr	r3, [pc, #92]	; (8004000 <HAL_UART_Init+0x340>)
 8003fa2:	e7d8      	b.n	8003f56 <HAL_UART_Init+0x296>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fa4:	f7fe fb9c 	bl	80026e0 <HAL_RCC_GetPCLK1Freq>
 8003fa8:	e7f3      	b.n	8003f92 <HAL_UART_Init+0x2d2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003faa:	4b11      	ldr	r3, [pc, #68]	; (8003ff0 <HAL_UART_Init+0x330>)
 8003fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003fb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fb8:	d0b7      	beq.n	8003f2a <HAL_UART_Init+0x26a>
 8003fba:	d98b      	bls.n	8003ed4 <HAL_UART_Init+0x214>
 8003fbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fc0:	d0a6      	beq.n	8003f10 <HAL_UART_Init+0x250>
 8003fc2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003fc6:	d0c1      	beq.n	8003f4c <HAL_UART_Init+0x28c>
 8003fc8:	e6c2      	b.n	8003d50 <HAL_UART_Init+0x90>
 8003fca:	bf00      	nop
 8003fcc:	efff69f3 	.word	0xefff69f3
 8003fd0:	40011000 	.word	0x40011000
 8003fd4:	40004400 	.word	0x40004400
 8003fd8:	40004800 	.word	0x40004800
 8003fdc:	40004c00 	.word	0x40004c00
 8003fe0:	40005000 	.word	0x40005000
 8003fe4:	40011400 	.word	0x40011400
 8003fe8:	40007800 	.word	0x40007800
 8003fec:	40007c00 	.word	0x40007c00
 8003ff0:	40023800 	.word	0x40023800
 8003ff4:	0800e2d0 	.word	0x0800e2d0
 8003ff8:	0800e2d4 	.word	0x0800e2d4
 8003ffc:	00f42400 	.word	0x00f42400
 8004000:	01e84800 	.word	0x01e84800
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004004:	681a      	ldr	r2, [r3, #0]
        huart->gState = HAL_UART_STATE_READY;
 8004006:	2120      	movs	r1, #32
      return HAL_TIMEOUT;
 8004008:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800400a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800400e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004010:	689a      	ldr	r2, [r3, #8]
 8004012:	f022 0201 	bic.w	r2, r2, #1
 8004016:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8004018:	67a1      	str	r1, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 800401a:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800401e:	67e1      	str	r1, [r4, #124]	; 0x7c
}
 8004020:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004022:	4b13      	ldr	r3, [pc, #76]	; (8004070 <HAL_UART_Init+0x3b0>)
 8004024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004028:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800402c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004030:	f43f af7b 	beq.w	8003f2a <HAL_UART_Init+0x26a>
 8004034:	f67f aeea 	bls.w	8003e0c <HAL_UART_Init+0x14c>
 8004038:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800403c:	f43f af68 	beq.w	8003f10 <HAL_UART_Init+0x250>
 8004040:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004044:	d082      	beq.n	8003f4c <HAL_UART_Init+0x28c>
 8004046:	e683      	b.n	8003d50 <HAL_UART_Init+0x90>
 8004048:	4b09      	ldr	r3, [pc, #36]	; (8004070 <HAL_UART_Init+0x3b0>)
 800404a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004056:	f43f af68 	beq.w	8003f2a <HAL_UART_Init+0x26a>
 800405a:	f67f af3b 	bls.w	8003ed4 <HAL_UART_Init+0x214>
 800405e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004062:	f43f af55 	beq.w	8003f10 <HAL_UART_Init+0x250>
 8004066:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800406a:	f43f af6f 	beq.w	8003f4c <HAL_UART_Init+0x28c>
 800406e:	e66f      	b.n	8003d50 <HAL_UART_Init+0x90>
 8004070:	40023800 	.word	0x40023800

08004074 <Init_LCD_GPIO>:
//=============================================================================
void Init_LCD_GPIO(void)
{
	  GPIO_InitTypeDef GPIO_InitStruct;

	  __HAL_RCC_CRC_CLK_ENABLE();
 8004074:	4b37      	ldr	r3, [pc, #220]	; (8004154 <Init_LCD_GPIO+0xe0>)
	  __HAL_RCC_GPIOE_CLK_ENABLE();
	  __HAL_RCC_GPIOF_CLK_ENABLE();
	  __HAL_RCC_GPIOG_CLK_ENABLE();


	  HAL_GPIO_WritePin(GDISP_CMD_PORT, GCMD, GPIO_PIN_RESET);
 8004076:	2200      	movs	r2, #0
 8004078:	f44f 4178 	mov.w	r1, #63488	; 0xf800
{
 800407c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	  __HAL_RCC_CRC_CLK_ENABLE();
 8004080:	6b1d      	ldr	r5, [r3, #48]	; 0x30
{
 8004082:	b08b      	sub	sp, #44	; 0x2c
	  HAL_GPIO_WritePin(GDISP_CMD_PORT, GCMD, GPIO_PIN_RESET);
 8004084:	4c34      	ldr	r4, [pc, #208]	; (8004158 <Init_LCD_GPIO+0xe4>)
	  HAL_GPIO_WritePin(GDISP_DATA_LO_PORT, GDATA_LO, GPIO_PIN_RESET);
	  HAL_GPIO_WritePin(GDISP_DATA_HI_PORT, GDATA_HI, GPIO_PIN_RESET);

	  GPIO_InitStruct.Pin = GCMD;
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004086:	4616      	mov	r6, r2
	  __HAL_RCC_CRC_CLK_ENABLE();
 8004088:	f445 5580 	orr.w	r5, r5, #4096	; 0x1000
	  HAL_GPIO_WritePin(GDISP_DATA_LO_PORT, GDATA_LO, GPIO_PIN_RESET);
 800408c:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 800415c <Init_LCD_GPIO+0xe8>
	  HAL_GPIO_WritePin(GDISP_CMD_PORT, GCMD, GPIO_PIN_RESET);
 8004090:	4620      	mov	r0, r4
	  HAL_GPIO_WritePin(GDISP_DATA_HI_PORT, GDATA_HI, GPIO_PIN_RESET);
 8004092:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8004160 <Init_LCD_GPIO+0xec>
	  __HAL_RCC_CRC_CLK_ENABLE();
 8004096:	631d      	str	r5, [r3, #48]	; 0x30
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004098:	2701      	movs	r7, #1
	  __HAL_RCC_CRC_CLK_ENABLE();
 800409a:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 800409c:	f405 5580 	and.w	r5, r5, #4096	; 0x1000
 80040a0:	9501      	str	r5, [sp, #4]
 80040a2:	9d01      	ldr	r5, [sp, #4]
	  __HAL_RCC_GPIOE_CLK_ENABLE();
 80040a4:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 80040a6:	f045 0510 	orr.w	r5, r5, #16
 80040aa:	631d      	str	r5, [r3, #48]	; 0x30
 80040ac:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 80040ae:	f005 0510 	and.w	r5, r5, #16
 80040b2:	9502      	str	r5, [sp, #8]
 80040b4:	9d02      	ldr	r5, [sp, #8]
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 80040b6:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 80040b8:	f045 0520 	orr.w	r5, r5, #32
 80040bc:	631d      	str	r5, [r3, #48]	; 0x30
 80040be:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 80040c0:	f005 0520 	and.w	r5, r5, #32
 80040c4:	9503      	str	r5, [sp, #12]
 80040c6:	9d03      	ldr	r5, [sp, #12]
	  __HAL_RCC_GPIOG_CLK_ENABLE();
 80040c8:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 80040ca:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 80040ce:	631d      	str	r5, [r3, #48]	; 0x30
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040d0:	2503      	movs	r5, #3
	  __HAL_RCC_GPIOG_CLK_ENABLE();
 80040d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d8:	9304      	str	r3, [sp, #16]
 80040da:	9b04      	ldr	r3, [sp, #16]
	  HAL_GPIO_WritePin(GDISP_CMD_PORT, GCMD, GPIO_PIN_RESET);
 80040dc:	f7fd fd94 	bl	8001c08 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GDISP_DATA_LO_PORT, GDATA_LO, GPIO_PIN_RESET);
 80040e0:	4648      	mov	r0, r9
 80040e2:	4632      	mov	r2, r6
 80040e4:	21ff      	movs	r1, #255	; 0xff
 80040e6:	f7fd fd8f 	bl	8001c08 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GDISP_DATA_HI_PORT, GDATA_HI, GPIO_PIN_RESET);
 80040ea:	4632      	mov	r2, r6
 80040ec:	4640      	mov	r0, r8
 80040ee:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80040f2:	f7fd fd89 	bl	8001c08 <HAL_GPIO_WritePin>
	  GPIO_InitStruct.Pin = GCMD;
 80040f6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
	  HAL_GPIO_Init(GDISP_CMD_PORT, &GPIO_InitStruct);
 80040fa:	4620      	mov	r0, r4
 80040fc:	a905      	add	r1, sp, #20
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040fe:	e9cd 3705 	strd	r3, r7, [sp, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004102:	e9cd 6507 	strd	r6, r5, [sp, #28]
	  HAL_GPIO_Init(GDISP_CMD_PORT, &GPIO_InitStruct);
 8004106:	f7fd fc79 	bl	80019fc <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GDATA_LO;
 800410a:	23ff      	movs	r3, #255	; 0xff
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	  HAL_GPIO_Init(GDISP_DATA_LO_PORT, &GPIO_InitStruct);
 800410c:	4648      	mov	r0, r9
 800410e:	a905      	add	r1, sp, #20
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004110:	9508      	str	r5, [sp, #32]
	  GPIO_InitStruct.Pin = GDATA_LO;
 8004112:	9305      	str	r3, [sp, #20]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004114:	e9cd 7606 	strd	r7, r6, [sp, #24]
	  HAL_GPIO_Init(GDISP_DATA_LO_PORT, &GPIO_InitStruct);
 8004118:	f7fd fc70 	bl	80019fc <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GDATA_HI;
 800411c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	  HAL_GPIO_Init(GDISP_DATA_HI_PORT, &GPIO_InitStruct);
 8004120:	a905      	add	r1, sp, #20
 8004122:	4640      	mov	r0, r8
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004124:	9508      	str	r5, [sp, #32]

	  SET_CS; SET_WR; SET_RD; SET_DC; SET_RST;
 8004126:	f44f 5500 	mov.w	r5, #8192	; 0x2000
	  GPIO_InitStruct.Pin = GDATA_HI;
 800412a:	9305      	str	r3, [sp, #20]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800412c:	e9cd 7606 	strd	r7, r6, [sp, #24]
	  HAL_GPIO_Init(GDISP_DATA_HI_PORT, &GPIO_InitStruct);
 8004130:	f7fd fc64 	bl	80019fc <HAL_GPIO_Init>
	  SET_CS; SET_WR; SET_RD; SET_DC; SET_RST;
 8004134:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004138:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800413c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004140:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004144:	61a5      	str	r5, [r4, #24]
 8004146:	61a0      	str	r0, [r4, #24]
 8004148:	61a1      	str	r1, [r4, #24]
 800414a:	61a2      	str	r2, [r4, #24]
 800414c:	61a3      	str	r3, [r4, #24]
}
 800414e:	b00b      	add	sp, #44	; 0x2c
 8004150:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004154:	40023800 	.word	0x40023800
 8004158:	40021400 	.word	0x40021400
 800415c:	40021800 	.word	0x40021800
 8004160:	40021000 	.word	0x40021000

08004164 <SSD1963_WriteCommand>:
//=============================================================================
// Write command to display
//=============================================================================
void SSD1963_WriteCommand(uint16_t Data)
{
	uint16_t _Data=~Data;
 8004164:	43c3      	mvns	r3, r0

	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8004166:	4911      	ldr	r1, [pc, #68]	; (80041ac <SSD1963_WriteCommand+0x48>)

	CLR_CS;
 8004168:	4a11      	ldr	r2, [pc, #68]	; (80041b0 <SSD1963_WriteCommand+0x4c>)
	CLR_DC;
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800416a:	041b      	lsls	r3, r3, #16
{
 800416c:	b470      	push	{r4, r5, r6}
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 800416e:	f04f 457f 	mov.w	r5, #4278190080	; 0xff000000
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004172:	b2c4      	uxtb	r4, r0
 8004174:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004178:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 800417c:	618d      	str	r5, [r1, #24]
	CLR_CS;
 800417e:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004182:	4323      	orrs	r3, r4
 8004184:	4c0b      	ldr	r4, [pc, #44]	; (80041b4 <SSD1963_WriteCommand+0x50>)
	CLR_CS;
 8004186:	6195      	str	r5, [r2, #24]
	CLR_DC;
 8004188:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800418c:	6195      	str	r5, [r2, #24]
	writeStrobe;
 800418e:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004192:	61a3      	str	r3, [r4, #24]
	writeStrobe;
 8004194:	f44f 6400 	mov.w	r4, #2048	; 0x800
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004198:	694e      	ldr	r6, [r1, #20]
	SET_CS;
 800419a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 800419e:	4330      	orrs	r0, r6
 80041a0:	6148      	str	r0, [r1, #20]
	writeStrobe;
 80041a2:	6195      	str	r5, [r2, #24]
 80041a4:	6194      	str	r4, [r2, #24]
	SET_CS;
 80041a6:	6193      	str	r3, [r2, #24]
}
 80041a8:	bc70      	pop	{r4, r5, r6}
 80041aa:	4770      	bx	lr
 80041ac:	40021000 	.word	0x40021000
 80041b0:	40021400 	.word	0x40021400
 80041b4:	40021800 	.word	0x40021800

080041b8 <SSD1963_WriteData>:
// Write data to display
//=============================================================================

void SSD1963_WriteData(uint16_t Data)
{
	uint16_t _Data=~Data;
 80041b8:	43c3      	mvns	r3, r0

	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80041ba:	4911      	ldr	r1, [pc, #68]	; (8004200 <SSD1963_WriteData+0x48>)

	CLR_CS;
 80041bc:	4a11      	ldr	r2, [pc, #68]	; (8004204 <SSD1963_WriteData+0x4c>)
	SET_DC;
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80041be:	041b      	lsls	r3, r3, #16
{
 80041c0:	b470      	push	{r4, r5, r6}
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80041c2:	f04f 457f 	mov.w	r5, #4278190080	; 0xff000000
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80041c6:	b2c4      	uxtb	r4, r0
 80041c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80041cc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80041d0:	618d      	str	r5, [r1, #24]
	CLR_CS;
 80041d2:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80041d6:	4323      	orrs	r3, r4
 80041d8:	4c0b      	ldr	r4, [pc, #44]	; (8004208 <SSD1963_WriteData+0x50>)
	CLR_CS;
 80041da:	6195      	str	r5, [r2, #24]
	SET_DC;
 80041dc:	f44f 4500 	mov.w	r5, #32768	; 0x8000
 80041e0:	6195      	str	r5, [r2, #24]
	writeStrobe;
 80041e2:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80041e6:	61a3      	str	r3, [r4, #24]
	writeStrobe;
 80041e8:	f44f 6400 	mov.w	r4, #2048	; 0x800
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80041ec:	694e      	ldr	r6, [r1, #20]
	SET_CS;
 80041ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80041f2:	4330      	orrs	r0, r6
 80041f4:	6148      	str	r0, [r1, #20]
	writeStrobe;
 80041f6:	6195      	str	r5, [r2, #24]
 80041f8:	6194      	str	r4, [r2, #24]
	SET_CS;
 80041fa:	6193      	str	r3, [r2, #24]

}
 80041fc:	bc70      	pop	{r4, r5, r6}
 80041fe:	4770      	bx	lr
 8004200:	40021000 	.word	0x40021000
 8004204:	40021400 	.word	0x40021400
 8004208:	40021800 	.word	0x40021800

0800420c <SSD1963_WriteDataMultiple>:
//=============================================================================
// Write multiple data to display
//=============================================================================
void SSD1963_WriteDataMultiple(uint16_t * Data, int NumItems)
{
  while (NumItems)
 800420c:	b399      	cbz	r1, 8004276 <SSD1963_WriteDataMultiple+0x6a>
 800420e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
	writeStrobe;
 8004212:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
{
 8004216:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 800421a:	4d17      	ldr	r5, [pc, #92]	; (8004278 <SSD1963_WriteDataMultiple+0x6c>)
 800421c:	f04f 4a7f 	mov.w	sl, #4278190080	; 0xff000000
	CLR_CS;
 8004220:	4c16      	ldr	r4, [pc, #88]	; (800427c <SSD1963_WriteDataMultiple+0x70>)
 8004222:	f04f 5900 	mov.w	r9, #536870912	; 0x20000000
	SET_DC;
 8004226:	f44f 4800 	mov.w	r8, #32768	; 0x8000
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800422a:	f8df e054 	ldr.w	lr, [pc, #84]	; 8004280 <SSD1963_WriteDataMultiple+0x74>
	writeStrobe;
 800422e:	f44f 6700 	mov.w	r7, #2048	; 0x800
	SET_CS;
 8004232:	f44f 5600 	mov.w	r6, #8192	; 0x2000
  {
	  SSD1963_WriteData(*Data);
 8004236:	f830 3b02 	ldrh.w	r3, [r0], #2
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 800423a:	f8c5 a018 	str.w	sl, [r5, #24]
	uint16_t _Data=~Data;
 800423e:	43da      	mvns	r2, r3
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004240:	fa5f fb83 	uxtb.w	fp, r3
	CLR_CS;
 8004244:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004248:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800424c:	0412      	lsls	r2, r2, #16
	SET_DC;
 800424e:	f8c4 8018 	str.w	r8, [r4, #24]
  while (NumItems)
 8004252:	4288      	cmp	r0, r1
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004254:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8004258:	ea42 020b 	orr.w	r2, r2, fp
 800425c:	f8ce 2018 	str.w	r2, [lr, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004260:	696a      	ldr	r2, [r5, #20]
 8004262:	ea43 0302 	orr.w	r3, r3, r2
 8004266:	616b      	str	r3, [r5, #20]
	writeStrobe;
 8004268:	f8c4 c018 	str.w	ip, [r4, #24]
 800426c:	61a7      	str	r7, [r4, #24]
	SET_CS;
 800426e:	61a6      	str	r6, [r4, #24]
  while (NumItems)
 8004270:	d1e1      	bne.n	8004236 <SSD1963_WriteDataMultiple+0x2a>
	  Data++;
	  NumItems--;
  }
}
 8004272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004276:	4770      	bx	lr
 8004278:	40021000 	.word	0x40021000
 800427c:	40021400 	.word	0x40021400
 8004280:	40021800 	.word	0x40021800

08004284 <SSD1963_Init>:
//=============================================================================
// Display initialization
//=============================================================================

void SSD1963_Init (void)
{
 8004284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	CLR_RST;  // reset
 8004288:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800428c:	4cbd      	ldr	r4, [pc, #756]	; (8004584 <SSD1963_Init+0x300>)
{
 800428e:	b083      	sub	sp, #12
	HAL_Delay(500);
 8004290:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
	CLR_RST;  // reset
 8004294:	61a3      	str	r3, [r4, #24]
	SET_RST;
 8004296:	f44f 4680 	mov.w	r6, #16384	; 0x4000
	HAL_Delay(500);
 800429a:	f7fc fea1 	bl	8000fe0 <HAL_Delay>
	CLR_CS;
 800429e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
	writeStrobe;
 80042a2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
	HAL_Delay(100);
 80042a6:	2064      	movs	r0, #100	; 0x64
	CLR_CS;
 80042a8:	9201      	str	r2, [sp, #4]
	CLR_DC;
 80042aa:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
	writeStrobe;
 80042ae:	9300      	str	r3, [sp, #0]
 80042b0:	f44f 6700 	mov.w	r7, #2048	; 0x800
	SET_RST;
 80042b4:	61a6      	str	r6, [r4, #24]
	SET_CS;
 80042b6:	f44f 5600 	mov.w	r6, #8192	; 0x2000
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80042ba:	4db3      	ldr	r5, [pc, #716]	; (8004588 <SSD1963_Init+0x304>)
	HAL_Delay(100);
 80042bc:	f7fc fe90 	bl	8000fe0 <HAL_Delay>
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80042c0:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80042c4:	f8df 82d4 	ldr.w	r8, [pc, #724]	; 800459c <SSD1963_Init+0x318>
	CLR_CS;
 80042c8:	9a01      	ldr	r2, [sp, #4]

	SSD1963_WriteCommand(SSD1963_SOFT_RESET);
	HAL_Delay(10);
 80042ca:	200a      	movs	r0, #10
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80042cc:	61ab      	str	r3, [r5, #24]
	SET_DC;
 80042ce:	f44f 4900 	mov.w	r9, #32768	; 0x8000
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80042d2:	4bae      	ldr	r3, [pc, #696]	; (800458c <SSD1963_Init+0x308>)
	CLR_CS;
 80042d4:	61a2      	str	r2, [r4, #24]
 80042d6:	9201      	str	r2, [sp, #4]
	CLR_DC;
 80042d8:	f8c4 a018 	str.w	sl, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80042dc:	f8c8 3018 	str.w	r3, [r8, #24]
	writeStrobe;
 80042e0:	9b00      	ldr	r3, [sp, #0]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80042e2:	f8d5 c014 	ldr.w	ip, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80042e6:	f8df b2b8 	ldr.w	fp, [pc, #696]	; 80045a0 <SSD1963_Init+0x31c>
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80042ea:	f8c5 c014 	str.w	ip, [r5, #20]
	writeStrobe;
 80042ee:	61a3      	str	r3, [r4, #24]
 80042f0:	9300      	str	r3, [sp, #0]
 80042f2:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80042f4:	61a6      	str	r6, [r4, #24]
	HAL_Delay(10);
 80042f6:	f7fc fe73 	bl	8000fe0 <HAL_Delay>
	CLR_CS;
 80042fa:	9a01      	ldr	r2, [sp, #4]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80042fc:	f8df e2a4 	ldr.w	lr, [pc, #676]	; 80045a4 <SSD1963_Init+0x320>
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8004300:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8004304:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004308:	f8df c29c 	ldr.w	ip, [pc, #668]	; 80045a8 <SSD1963_Init+0x324>
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 800430c:	61ab      	str	r3, [r5, #24]
	SSD1963_WriteData(4);  	// dummy

	SSD1963_WriteCommand(SSD1963_SET_PLL);
	SSD1963_WriteData(0x0001);

	HAL_Delay(100);
 800430e:	2064      	movs	r0, #100	; 0x64
	CLR_CS;
 8004310:	61a2      	str	r2, [r4, #24]
	writeStrobe;
 8004312:	9b00      	ldr	r3, [sp, #0]
	CLR_DC;
 8004314:	f8c4 a018 	str.w	sl, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004318:	f8c8 e018 	str.w	lr, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 800431c:	f8d5 e014 	ldr.w	lr, [r5, #20]
 8004320:	f8c5 e014 	str.w	lr, [r5, #20]
	writeStrobe;
 8004324:	61a3      	str	r3, [r4, #24]
 8004326:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8004328:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 800432a:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 800432c:	61a2      	str	r2, [r4, #24]
	SET_DC;
 800432e:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004332:	f8c8 c018 	str.w	ip, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004336:	f8d5 c014 	ldr.w	ip, [r5, #20]
 800433a:	f8c5 c014 	str.w	ip, [r5, #20]
	writeStrobe;
 800433e:	61a3      	str	r3, [r4, #24]
 8004340:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8004342:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8004344:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 8004346:	61a2      	str	r2, [r4, #24]
	SET_DC;
 8004348:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800434c:	f8c8 b018 	str.w	fp, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004350:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8004354:	f8c5 c014 	str.w	ip, [r5, #20]
	writeStrobe;
 8004358:	61a3      	str	r3, [r4, #24]
 800435a:	61a7      	str	r7, [r4, #24]
	SET_CS;
 800435c:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 800435e:	61a9      	str	r1, [r5, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004360:	498b      	ldr	r1, [pc, #556]	; (8004590 <SSD1963_Init+0x30c>)
	CLR_CS;
 8004362:	61a2      	str	r2, [r4, #24]
	SET_DC;
 8004364:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004368:	f8c8 1018 	str.w	r1, [r8, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 800436c:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004370:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8004374:	f8c5 c014 	str.w	ip, [r5, #20]
	writeStrobe;
 8004378:	61a3      	str	r3, [r4, #24]
 800437a:	61a7      	str	r7, [r4, #24]
	SET_CS;
 800437c:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 800437e:	61a9      	str	r1, [r5, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004380:	4984      	ldr	r1, [pc, #528]	; (8004594 <SSD1963_Init+0x310>)
	CLR_CS;
 8004382:	61a2      	str	r2, [r4, #24]
	CLR_DC;
 8004384:	f8c4 a018 	str.w	sl, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004388:	f8c8 1018 	str.w	r1, [r8, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 800438c:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004390:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8004394:	f8c5 c014 	str.w	ip, [r5, #20]
	writeStrobe;
 8004398:	61a3      	str	r3, [r4, #24]
 800439a:	61a7      	str	r7, [r4, #24]
	SET_CS;
 800439c:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 800439e:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 80043a0:	61a2      	str	r2, [r4, #24]
 80043a2:	9201      	str	r2, [sp, #4]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80043a4:	4a79      	ldr	r2, [pc, #484]	; (800458c <SSD1963_Init+0x308>)
	SET_DC;
 80043a6:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80043aa:	f8c8 2018 	str.w	r2, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80043ae:	f8d5 c014 	ldr.w	ip, [r5, #20]
 80043b2:	f8c5 c014 	str.w	ip, [r5, #20]
	writeStrobe;
 80043b6:	61a3      	str	r3, [r4, #24]
 80043b8:	9300      	str	r3, [sp, #0]
 80043ba:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80043bc:	61a6      	str	r6, [r4, #24]
	HAL_Delay(100);
 80043be:	f7fc fe0f 	bl	8000fe0 <HAL_Delay>
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80043c2:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
	CLR_CS;
 80043c6:	9a01      	ldr	r2, [sp, #4]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80043c8:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80043cc:	61ab      	str	r3, [r5, #24]
	SSD1963_WriteData(0x0000);
	SSD1963_WriteData(0x0000);

	SSD1963_WriteCommand(SSD1963_SET_DISPLAY_ON);//SET display on

	HAL_Delay(10);
 80043ce:	200a      	movs	r0, #10
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80043d0:	4b70      	ldr	r3, [pc, #448]	; (8004594 <SSD1963_Init+0x310>)
	CLR_CS;
 80043d2:	61a2      	str	r2, [r4, #24]
	CLR_DC;
 80043d4:	f8c4 a018 	str.w	sl, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80043d8:	f8c8 3018 	str.w	r3, [r8, #24]
	writeStrobe;
 80043dc:	9b00      	ldr	r3, [sp, #0]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80043de:	f8d5 c014 	ldr.w	ip, [r5, #20]
 80043e2:	f8c5 c014 	str.w	ip, [r5, #20]
	writeStrobe;
 80043e6:	61a3      	str	r3, [r4, #24]
 80043e8:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80043ea:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80043ec:	61a9      	str	r1, [r5, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80043ee:	496a      	ldr	r1, [pc, #424]	; (8004598 <SSD1963_Init+0x314>)
	CLR_CS;
 80043f0:	61a2      	str	r2, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80043f2:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 80045ac <SSD1963_Init+0x328>
	SET_DC;
 80043f6:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80043fa:	f8c8 1018 	str.w	r1, [r8, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80043fe:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004402:	f8d5 e014 	ldr.w	lr, [r5, #20]
 8004406:	f8c5 e014 	str.w	lr, [r5, #20]
	writeStrobe;
 800440a:	61a3      	str	r3, [r4, #24]
 800440c:	61a7      	str	r7, [r4, #24]
	SET_CS;
 800440e:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8004410:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 8004412:	61a2      	str	r2, [r4, #24]
	CLR_DC;
 8004414:	f8c4 a018 	str.w	sl, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004418:	f8c8 c018 	str.w	ip, [r8, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800441c:	f8df c190 	ldr.w	ip, [pc, #400]	; 80045b0 <SSD1963_Init+0x32c>
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004420:	f8d5 e014 	ldr.w	lr, [r5, #20]
 8004424:	f8c5 e014 	str.w	lr, [r5, #20]
	writeStrobe;
 8004428:	61a3      	str	r3, [r4, #24]
 800442a:	61a7      	str	r7, [r4, #24]
	SET_CS;
 800442c:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 800442e:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 8004430:	61a2      	str	r2, [r4, #24]
	SET_DC;
 8004432:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004436:	f8c8 c018 	str.w	ip, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 800443a:	f8d5 c014 	ldr.w	ip, [r5, #20]
 800443e:	f8c5 c014 	str.w	ip, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004442:	f44f 0c7f 	mov.w	ip, #16711680	; 0xff0000
	writeStrobe;
 8004446:	61a3      	str	r3, [r4, #24]
 8004448:	61a7      	str	r7, [r4, #24]
	SET_CS;
 800444a:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 800444c:	61a9      	str	r1, [r5, #24]
 800444e:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	CLR_CS;
 8004452:	61a2      	str	r2, [r4, #24]
	SET_DC;
 8004454:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004458:	f8c8 c018 	str.w	ip, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 800445c:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8004460:	f8c5 c014 	str.w	ip, [r5, #20]
	writeStrobe;
 8004464:	61a3      	str	r3, [r4, #24]
 8004466:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8004468:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 800446a:	61a9      	str	r1, [r5, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800446c:	4947      	ldr	r1, [pc, #284]	; (800458c <SSD1963_Init+0x308>)
	CLR_CS;
 800446e:	61a2      	str	r2, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004470:	f8df c140 	ldr.w	ip, [pc, #320]	; 80045b4 <SSD1963_Init+0x330>
	SET_DC;
 8004474:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004478:	f8c8 1018 	str.w	r1, [r8, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 800447c:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004480:	f8d5 e014 	ldr.w	lr, [r5, #20]
 8004484:	f8c5 e014 	str.w	lr, [r5, #20]
	writeStrobe;
 8004488:	61a3      	str	r3, [r4, #24]
 800448a:	61a7      	str	r7, [r4, #24]
	SET_CS;
 800448c:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 800448e:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 8004490:	61a2      	str	r2, [r4, #24]
	SET_DC;
 8004492:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004496:	f8c8 c018 	str.w	ip, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 800449a:	f8d5 c014 	ldr.w	ip, [r5, #20]
 800449e:	f8c5 c014 	str.w	ip, [r5, #20]
	writeStrobe;
 80044a2:	61a3      	str	r3, [r4, #24]
 80044a4:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80044a6:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80044a8:	61a9      	str	r1, [r5, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80044aa:	4938      	ldr	r1, [pc, #224]	; (800458c <SSD1963_Init+0x308>)
	CLR_CS;
 80044ac:	61a2      	str	r2, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80044ae:	f8df c108 	ldr.w	ip, [pc, #264]	; 80045b8 <SSD1963_Init+0x334>
	SET_DC;
 80044b2:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80044b6:	f8c8 1018 	str.w	r1, [r8, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80044ba:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80044be:	f8d5 e014 	ldr.w	lr, [r5, #20]
 80044c2:	f8c5 e014 	str.w	lr, [r5, #20]
	writeStrobe;
 80044c6:	61a3      	str	r3, [r4, #24]
 80044c8:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80044ca:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80044cc:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 80044ce:	61a2      	str	r2, [r4, #24]
	SET_DC;
 80044d0:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80044d4:	f8c8 c018 	str.w	ip, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80044d8:	f8d5 c014 	ldr.w	ip, [r5, #20]
 80044dc:	f8c5 c014 	str.w	ip, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80044e0:	f44f 0c7f 	mov.w	ip, #16711680	; 0xff0000
	writeStrobe;
 80044e4:	61a3      	str	r3, [r4, #24]
 80044e6:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80044e8:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80044ea:	61a9      	str	r1, [r5, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80044ec:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	CLR_CS;
 80044f0:	61a2      	str	r2, [r4, #24]
	SET_DC;
 80044f2:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80044f6:	f8c8 c018 	str.w	ip, [r8, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80044fa:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 80045bc <SSD1963_Init+0x338>
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80044fe:	f8d5 e014 	ldr.w	lr, [r5, #20]
 8004502:	f8c5 e014 	str.w	lr, [r5, #20]
	writeStrobe;
 8004506:	61a3      	str	r3, [r4, #24]
 8004508:	61a7      	str	r7, [r4, #24]
	SET_CS;
 800450a:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 800450c:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 800450e:	61a2      	str	r2, [r4, #24]
	CLR_DC;
 8004510:	f8c4 a018 	str.w	sl, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004514:	f8c8 c018 	str.w	ip, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004518:	f8d5 c014 	ldr.w	ip, [r5, #20]
 800451c:	f8c5 c014 	str.w	ip, [r5, #20]
	writeStrobe;
 8004520:	61a3      	str	r3, [r4, #24]
 8004522:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8004524:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8004526:	61a9      	str	r1, [r5, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004528:	491b      	ldr	r1, [pc, #108]	; (8004598 <SSD1963_Init+0x314>)
	CLR_CS;
 800452a:	61a2      	str	r2, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800452c:	f8df c090 	ldr.w	ip, [pc, #144]	; 80045c0 <SSD1963_Init+0x33c>
	SET_DC;
 8004530:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004534:	f8c8 1018 	str.w	r1, [r8, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8004538:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 800453c:	f8d5 e014 	ldr.w	lr, [r5, #20]
 8004540:	f8c5 e014 	str.w	lr, [r5, #20]
	writeStrobe;
 8004544:	61a3      	str	r3, [r4, #24]
 8004546:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8004548:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 800454a:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 800454c:	61a2      	str	r2, [r4, #24]
	CLR_DC;
 800454e:	f8c4 a018 	str.w	sl, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004552:	f8c8 c018 	str.w	ip, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004556:	f8d5 e014 	ldr.w	lr, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800455a:	f8df c068 	ldr.w	ip, [pc, #104]	; 80045c4 <SSD1963_Init+0x340>
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 800455e:	f8c5 e014 	str.w	lr, [r5, #20]
	writeStrobe;
 8004562:	61a3      	str	r3, [r4, #24]
 8004564:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8004566:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8004568:	61a9      	str	r1, [r5, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800456a:	4908      	ldr	r1, [pc, #32]	; (800458c <SSD1963_Init+0x308>)
	CLR_CS;
 800456c:	61a2      	str	r2, [r4, #24]
	SET_DC;
 800456e:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004572:	f8c8 1018 	str.w	r1, [r8, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8004576:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 800457a:	f8d5 e014 	ldr.w	lr, [r5, #20]
 800457e:	f8c5 e014 	str.w	lr, [r5, #20]
 8004582:	e021      	b.n	80045c8 <SSD1963_Init+0x344>
 8004584:	40021400 	.word	0x40021400
 8004588:	40021000 	.word	0x40021000
 800458c:	00fe0001 	.word	0x00fe0001
 8004590:	00fb0004 	.word	0x00fb0004
 8004594:	001f00e0 	.word	0x001f00e0
 8004598:	00fc0003 	.word	0x00fc0003
 800459c:	40021800 	.word	0x40021800
 80045a0:	00fd0002 	.word	0x00fd0002
 80045a4:	001d00e2 	.word	0x001d00e2
 80045a8:	00e2001d 	.word	0x00e2001d
 80045ac:	004f00b0 	.word	0x004f00b0
 80045b0:	00df0020 	.word	0x00df0020
 80045b4:	002000df 	.word	0x002000df
 80045b8:	00f0000f 	.word	0x00f0000f
 80045bc:	000f00f0 	.word	0x000f00f0
 80045c0:	001900e6 	.word	0x001900e6
 80045c4:	008a0075 	.word	0x008a0075
	writeStrobe;
 80045c8:	61a3      	str	r3, [r4, #24]
 80045ca:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80045cc:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80045ce:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 80045d0:	61a2      	str	r2, [r4, #24]
	SET_DC;
 80045d2:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80045d6:	f8c8 c018 	str.w	ip, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80045da:	f8d5 e014 	ldr.w	lr, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80045de:	f8df c344 	ldr.w	ip, [pc, #836]	; 8004924 <SSD1963_Init+0x6a0>
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80045e2:	f8c5 e014 	str.w	lr, [r5, #20]
	writeStrobe;
 80045e6:	61a3      	str	r3, [r4, #24]
 80045e8:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80045ea:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80045ec:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 80045ee:	61a2      	str	r2, [r4, #24]
	SET_DC;
 80045f0:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80045f4:	f8c8 c018 	str.w	ip, [r8, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80045f8:	f8df c32c 	ldr.w	ip, [pc, #812]	; 8004928 <SSD1963_Init+0x6a4>
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80045fc:	f8d5 e014 	ldr.w	lr, [r5, #20]
 8004600:	f8c5 e014 	str.w	lr, [r5, #20]
	writeStrobe;
 8004604:	61a3      	str	r3, [r4, #24]
 8004606:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8004608:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 800460a:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 800460c:	61a2      	str	r2, [r4, #24]
	CLR_DC;
 800460e:	f8c4 a018 	str.w	sl, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004612:	f8c8 c018 	str.w	ip, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004616:	f8d5 e014 	ldr.w	lr, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800461a:	f8df c310 	ldr.w	ip, [pc, #784]	; 800492c <SSD1963_Init+0x6a8>
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 800461e:	f8c5 e014 	str.w	lr, [r5, #20]
	writeStrobe;
 8004622:	61a3      	str	r3, [r4, #24]
 8004624:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8004626:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8004628:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 800462a:	61a2      	str	r2, [r4, #24]
	SET_DC;
 800462c:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004630:	f8c8 b018 	str.w	fp, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004634:	f8d5 e014 	ldr.w	lr, [r5, #20]
 8004638:	f8c5 e014 	str.w	lr, [r5, #20]
	writeStrobe;
 800463c:	61a3      	str	r3, [r4, #24]
 800463e:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8004640:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8004642:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 8004644:	61a2      	str	r2, [r4, #24]
	SET_DC;
 8004646:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800464a:	f8c8 c018 	str.w	ip, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 800464e:	f8d5 e014 	ldr.w	lr, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004652:	f8df c2dc 	ldr.w	ip, [pc, #732]	; 8004930 <SSD1963_Init+0x6ac>
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004656:	f8c5 e014 	str.w	lr, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800465a:	f44f 0e7f 	mov.w	lr, #16711680	; 0xff0000
	writeStrobe;
 800465e:	61a3      	str	r3, [r4, #24]
 8004660:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8004662:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8004664:	61a9      	str	r1, [r5, #24]
 8004666:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	CLR_CS;
 800466a:	61a2      	str	r2, [r4, #24]
	SET_DC;
 800466c:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004670:	f8c8 e018 	str.w	lr, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004674:	f8d5 e014 	ldr.w	lr, [r5, #20]
 8004678:	f8c5 e014 	str.w	lr, [r5, #20]
	writeStrobe;
 800467c:	61a3      	str	r3, [r4, #24]
 800467e:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8004680:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8004682:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 8004684:	61a2      	str	r2, [r4, #24]
	SET_DC;
 8004686:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800468a:	f8c8 c018 	str.w	ip, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 800468e:	f8d5 e014 	ldr.w	lr, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004692:	f8df c2a0 	ldr.w	ip, [pc, #672]	; 8004934 <SSD1963_Init+0x6b0>
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004696:	f8c5 e014 	str.w	lr, [r5, #20]
	writeStrobe;
 800469a:	61a3      	str	r3, [r4, #24]
 800469c:	61a7      	str	r7, [r4, #24]
	SET_CS;
 800469e:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80046a0:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 80046a2:	61a2      	str	r2, [r4, #24]
	SET_DC;
 80046a4:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80046a8:	f8c8 b018 	str.w	fp, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80046ac:	f8d5 b014 	ldr.w	fp, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80046b0:	f8df e284 	ldr.w	lr, [pc, #644]	; 8004938 <SSD1963_Init+0x6b4>
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80046b4:	f8c5 b014 	str.w	fp, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80046b8:	f44f 0b7f 	mov.w	fp, #16711680	; 0xff0000
	writeStrobe;
 80046bc:	61a3      	str	r3, [r4, #24]
 80046be:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80046c0:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80046c2:	61a9      	str	r1, [r5, #24]
 80046c4:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	CLR_CS;
 80046c8:	61a2      	str	r2, [r4, #24]
	SET_DC;
 80046ca:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80046ce:	f8c8 b018 	str.w	fp, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80046d2:	f8d5 b014 	ldr.w	fp, [r5, #20]
 80046d6:	f8c5 b014 	str.w	fp, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80046da:	f44f 0b7f 	mov.w	fp, #16711680	; 0xff0000
	writeStrobe;
 80046de:	61a3      	str	r3, [r4, #24]
 80046e0:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80046e2:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80046e4:	61a9      	str	r1, [r5, #24]
 80046e6:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	CLR_CS;
 80046ea:	61a2      	str	r2, [r4, #24]
	SET_DC;
 80046ec:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80046f0:	f8c8 b018 	str.w	fp, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80046f4:	f8d5 b014 	ldr.w	fp, [r5, #20]
 80046f8:	f8c5 b014 	str.w	fp, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80046fc:	f44f 0b7f 	mov.w	fp, #16711680	; 0xff0000
	writeStrobe;
 8004700:	61a3      	str	r3, [r4, #24]
 8004702:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8004704:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8004706:	61a9      	str	r1, [r5, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8004708:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	CLR_CS;
 800470c:	61a2      	str	r2, [r4, #24]
	SET_DC;
 800470e:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004712:	f8c8 b018 	str.w	fp, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004716:	f8d5 b014 	ldr.w	fp, [r5, #20]
 800471a:	f8c5 b014 	str.w	fp, [r5, #20]
	writeStrobe;
 800471e:	61a3      	str	r3, [r4, #24]
 8004720:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8004722:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8004724:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 8004726:	61a2      	str	r2, [r4, #24]
	CLR_DC;
 8004728:	f8c4 a018 	str.w	sl, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800472c:	f8c8 c018 	str.w	ip, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004730:	f8d5 b014 	ldr.w	fp, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004734:	f8df c204 	ldr.w	ip, [pc, #516]	; 800493c <SSD1963_Init+0x6b8>
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004738:	f8c5 b014 	str.w	fp, [r5, #20]
	writeStrobe;
 800473c:	61a3      	str	r3, [r4, #24]
 800473e:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8004740:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8004742:	61a9      	str	r1, [r5, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004744:	4973      	ldr	r1, [pc, #460]	; (8004914 <SSD1963_Init+0x690>)
	CLR_CS;
 8004746:	61a2      	str	r2, [r4, #24]
	SET_DC;
 8004748:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800474c:	f8c8 1018 	str.w	r1, [r8, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8004750:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004754:	f8d5 b014 	ldr.w	fp, [r5, #20]
 8004758:	f8c5 b014 	str.w	fp, [r5, #20]
	writeStrobe;
 800475c:	61a3      	str	r3, [r4, #24]
 800475e:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8004760:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8004762:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 8004764:	61a2      	str	r2, [r4, #24]
	SET_DC;
 8004766:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800476a:	f8c8 e018 	str.w	lr, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 800476e:	f8d5 b014 	ldr.w	fp, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004772:	f8df e1cc 	ldr.w	lr, [pc, #460]	; 8004940 <SSD1963_Init+0x6bc>
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004776:	f8c5 b014 	str.w	fp, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800477a:	f44f 0b7f 	mov.w	fp, #16711680	; 0xff0000
	writeStrobe;
 800477e:	61a3      	str	r3, [r4, #24]
 8004780:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8004782:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8004784:	61a9      	str	r1, [r5, #24]
 8004786:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	CLR_CS;
 800478a:	61a2      	str	r2, [r4, #24]
	SET_DC;
 800478c:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004790:	f8c8 b018 	str.w	fp, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004794:	f8d5 b014 	ldr.w	fp, [r5, #20]
 8004798:	f8c5 b014 	str.w	fp, [r5, #20]
	writeStrobe;
 800479c:	61a3      	str	r3, [r4, #24]
 800479e:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80047a0:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80047a2:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 80047a4:	61a2      	str	r2, [r4, #24]
	SET_DC;
 80047a6:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80047aa:	f8c8 c018 	str.w	ip, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80047ae:	f8d5 b014 	ldr.w	fp, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80047b2:	f8df c190 	ldr.w	ip, [pc, #400]	; 8004944 <SSD1963_Init+0x6c0>
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80047b6:	f8c5 b014 	str.w	fp, [r5, #20]
	writeStrobe;
 80047ba:	61a3      	str	r3, [r4, #24]
 80047bc:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80047be:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80047c0:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 80047c2:	61a2      	str	r2, [r4, #24]
	SET_DC;
 80047c4:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80047c8:	f8c8 e018 	str.w	lr, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80047cc:	f8d5 e014 	ldr.w	lr, [r5, #20]
 80047d0:	f8c5 e014 	str.w	lr, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80047d4:	f44f 0e7f 	mov.w	lr, #16711680	; 0xff0000
	writeStrobe;
 80047d8:	61a3      	str	r3, [r4, #24]
 80047da:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80047dc:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80047de:	61a9      	str	r1, [r5, #24]
 80047e0:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	CLR_CS;
 80047e4:	61a2      	str	r2, [r4, #24]
	SET_DC;
 80047e6:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80047ea:	f8c8 e018 	str.w	lr, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80047ee:	f8d5 e014 	ldr.w	lr, [r5, #20]
 80047f2:	f8c5 e014 	str.w	lr, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80047f6:	f44f 0e7f 	mov.w	lr, #16711680	; 0xff0000
	writeStrobe;
 80047fa:	61a3      	str	r3, [r4, #24]
 80047fc:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80047fe:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8004800:	61a9      	str	r1, [r5, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8004802:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	CLR_CS;
 8004806:	61a2      	str	r2, [r4, #24]
	SET_DC;
 8004808:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800480c:	f8c8 e018 	str.w	lr, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004810:	f8d5 e014 	ldr.w	lr, [r5, #20]
 8004814:	f8c5 e014 	str.w	lr, [r5, #20]
	writeStrobe;
 8004818:	61a3      	str	r3, [r4, #24]
 800481a:	61a7      	str	r7, [r4, #24]
	SET_CS;
 800481c:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 800481e:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 8004820:	61a2      	str	r2, [r4, #24]
 8004822:	9201      	str	r2, [sp, #4]
	CLR_DC;
 8004824:	f8c4 a018 	str.w	sl, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004828:	f8c8 c018 	str.w	ip, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 800482c:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8004830:	f8c5 c014 	str.w	ip, [r5, #20]
	writeStrobe;
 8004834:	61a3      	str	r3, [r4, #24]
 8004836:	9300      	str	r3, [sp, #0]
 8004838:	61a7      	str	r7, [r4, #24]
	SET_CS;
 800483a:	61a6      	str	r6, [r4, #24]
	HAL_Delay(10);
 800483c:	f7fc fbd0 	bl	8000fe0 <HAL_Delay>
	CLR_CS;
 8004840:	9a01      	ldr	r2, [sp, #4]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004842:	4835      	ldr	r0, [pc, #212]	; (8004918 <SSD1963_Init+0x694>)
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8004844:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8004848:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800484c:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8004948 <SSD1963_Init+0x6c4>
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8004850:	61ab      	str	r3, [r5, #24]
	CLR_CS;
 8004852:	61a2      	str	r2, [r4, #24]
	CLR_DC;
 8004854:	f8c4 a018 	str.w	sl, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004858:	f8c8 0018 	str.w	r0, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 800485c:	6968      	ldr	r0, [r5, #20]
	writeStrobe;
 800485e:	9b00      	ldr	r3, [sp, #0]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004860:	6168      	str	r0, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004862:	482e      	ldr	r0, [pc, #184]	; (800491c <SSD1963_Init+0x698>)
	writeStrobe;
 8004864:	61a3      	str	r3, [r4, #24]
 8004866:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8004868:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 800486a:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 800486c:	61a2      	str	r2, [r4, #24]
	SET_DC;
 800486e:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004872:	f8c8 0018 	str.w	r0, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004876:	f8d5 e014 	ldr.w	lr, [r5, #20]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800487a:	4829      	ldr	r0, [pc, #164]	; (8004920 <SSD1963_Init+0x69c>)
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 800487c:	f8c5 e014 	str.w	lr, [r5, #20]
	writeStrobe;
 8004880:	61a3      	str	r3, [r4, #24]
 8004882:	61a7      	str	r7, [r4, #24]
	SET_CS;
 8004884:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8004886:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 8004888:	61a2      	str	r2, [r4, #24]
	SET_DC;
 800488a:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 800488e:	f8c8 c018 	str.w	ip, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004892:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8004896:	f8c5 c014 	str.w	ip, [r5, #20]
	writeStrobe;
 800489a:	61a3      	str	r3, [r4, #24]
 800489c:	61a7      	str	r7, [r4, #24]
	SET_CS;
 800489e:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80048a0:	61a9      	str	r1, [r5, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80048a2:	491c      	ldr	r1, [pc, #112]	; (8004914 <SSD1963_Init+0x690>)
	CLR_CS;
 80048a4:	61a2      	str	r2, [r4, #24]
	SET_DC;
 80048a6:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80048aa:	f8c8 1018 	str.w	r1, [r8, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80048ae:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80048b2:	f8d5 c014 	ldr.w	ip, [r5, #20]
 80048b6:	f8c5 c014 	str.w	ip, [r5, #20]
	writeStrobe;
 80048ba:	61a3      	str	r3, [r4, #24]
 80048bc:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80048be:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80048c0:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 80048c2:	61a2      	str	r2, [r4, #24]
	SET_DC;
 80048c4:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80048c8:	f8c8 0018 	str.w	r0, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80048cc:	6968      	ldr	r0, [r5, #20]
 80048ce:	6168      	str	r0, [r5, #20]
	writeStrobe;
 80048d0:	61a3      	str	r3, [r4, #24]
 80048d2:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80048d4:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80048d6:	61a9      	str	r1, [r5, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80048d8:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
	CLR_CS;
 80048dc:	61a2      	str	r2, [r4, #24]
	SET_DC;
 80048de:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80048e2:	f8c8 1018 	str.w	r1, [r8, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80048e6:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 80048ea:	6968      	ldr	r0, [r5, #20]
 80048ec:	6168      	str	r0, [r5, #20]
	writeStrobe;
 80048ee:	61a3      	str	r3, [r4, #24]
 80048f0:	61a7      	str	r7, [r4, #24]
	SET_CS;
 80048f2:	61a6      	str	r6, [r4, #24]
	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 80048f4:	61a9      	str	r1, [r5, #24]
	CLR_CS;
 80048f6:	61a2      	str	r2, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 80048f8:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
	SET_DC;
 80048fc:	f8c4 9018 	str.w	r9, [r4, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8004900:	f8c8 2018 	str.w	r2, [r8, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8004904:	696a      	ldr	r2, [r5, #20]
 8004906:	616a      	str	r2, [r5, #20]
	writeStrobe;
 8004908:	61a3      	str	r3, [r4, #24]
 800490a:	61a7      	str	r7, [r4, #24]
	SET_CS;
 800490c:	61a6      	str	r6, [r4, #24]
	SSD1963_WriteData(0x0040); 					// brightness level 0x00 - 0xFF
	SSD1963_WriteData(0x0000); 					// minimum brightness level =  0x00 - 0xFF
	SSD1963_WriteData(0x0000);					// brightness prescalar 0x0 - 0xF


}
 800490e:	b003      	add	sp, #12
 8004910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004914:	00fe0001 	.word	0x00fe0001
 8004918:	004100be 	.word	0x004100be
 800491c:	00fb0004 	.word	0x00fb0004
 8004920:	00bf0040 	.word	0x00bf0040
 8004924:	001200ed 	.word	0x001200ed
 8004928:	004b00b4 	.word	0x004b00b4
 800492c:	00eb0014 	.word	0x00eb0014
 8004930:	00d3002c 	.word	0x00d3002c
 8004934:	004900b6 	.word	0x004900b6
 8004938:	00e1001e 	.word	0x00e1001e
 800493c:	00f3000c 	.word	0x00f3000c
 8004940:	00f90006 	.word	0x00f90006
 8004944:	00d60029 	.word	0x00d60029
 8004948:	003f00c0 	.word	0x003f00c0

0800494c <Init_TOUCH_GPIO>:

I2C_HandleTypeDef hi2c;


void Init_TOUCH_GPIO(I2C_HandleTypeDef i2c_handle)
{
 800494c:	b084      	sub	sp, #16
 800494e:	b508      	push	{r3, lr}
 8004950:	f10d 0c08 	add.w	ip, sp, #8
 8004954:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	hi2c=i2c_handle;
 8004958:	224c      	movs	r2, #76	; 0x4c
 800495a:	4661      	mov	r1, ip
 800495c:	4803      	ldr	r0, [pc, #12]	; (800496c <Init_TOUCH_GPIO+0x20>)
 800495e:	f007 ff9d 	bl	800c89c <memcpy>
}
 8004962:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004966:	b004      	add	sp, #16
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	20019238 	.word	0x20019238

08004970 <STMPE610_Init>:

	return (((uint16_t)rxbuf[0]) << 8) | rxbuf[1];
}

void STMPE610_Init(void)
{
 8004970:	b570      	push	{r4, r5, r6, lr}
 8004972:	b084      	sub	sp, #16
	txbuf[0]=reg;
 8004974:	f240 2303 	movw	r3, #515	; 0x203
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004978:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 800497c:	4d81      	ldr	r5, [pc, #516]	; (8004b84 <STMPE610_Init+0x214>)
	txbuf[0]=reg;
 800497e:	ac04      	add	r4, sp, #16
 8004980:	f824 3d04 	strh.w	r3, [r4, #-4]!
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004984:	9600      	str	r6, [sp, #0]
 8004986:	2302      	movs	r3, #2
 8004988:	4622      	mov	r2, r4
 800498a:	2188      	movs	r1, #136	; 0x88
 800498c:	4628      	mov	r0, r5
 800498e:	f7fd fa45 	bl	8001e1c <HAL_I2C_Master_Transmit>
 8004992:	2800      	cmp	r0, #0
 8004994:	d1f6      	bne.n	8004984 <STMPE610_Init+0x14>
	STMPE610_Write(STMPE610_REG_SYS_CTRL1, 0x02);		// Software chip reset
	HAL_Delay(10);
 8004996:	200a      	movs	r0, #10
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004998:	f44f 5640 	mov.w	r6, #12288	; 0x3000
	HAL_Delay(10);
 800499c:	f7fc fb20 	bl	8000fe0 <HAL_Delay>
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 80049a0:	4d78      	ldr	r5, [pc, #480]	; (8004b84 <STMPE610_Init+0x214>)
	txbuf[0]=reg;
 80049a2:	f240 4304 	movw	r3, #1028	; 0x404
 80049a6:	f8ad 300c 	strh.w	r3, [sp, #12]
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 80049aa:	9600      	str	r6, [sp, #0]
 80049ac:	2302      	movs	r3, #2
 80049ae:	4622      	mov	r2, r4
 80049b0:	2188      	movs	r1, #136	; 0x88
 80049b2:	4628      	mov	r0, r5
 80049b4:	f7fd fa32 	bl	8001e1c <HAL_I2C_Master_Transmit>
 80049b8:	2800      	cmp	r0, #0
 80049ba:	d1f6      	bne.n	80049aa <STMPE610_Init+0x3a>
	txbuf[0]=reg;
 80049bc:	f240 330a 	movw	r3, #778	; 0x30a
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 80049c0:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 80049c4:	4d6f      	ldr	r5, [pc, #444]	; (8004b84 <STMPE610_Init+0x214>)
	txbuf[0]=reg;
 80049c6:	f8ad 300c 	strh.w	r3, [sp, #12]
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 80049ca:	9600      	str	r6, [sp, #0]
 80049cc:	2302      	movs	r3, #2
 80049ce:	4622      	mov	r2, r4
 80049d0:	2188      	movs	r1, #136	; 0x88
 80049d2:	4628      	mov	r0, r5
 80049d4:	f7fd fa22 	bl	8001e1c <HAL_I2C_Master_Transmit>
 80049d8:	2800      	cmp	r0, #0
 80049da:	d1f6      	bne.n	80049ca <STMPE610_Init+0x5a>
	txbuf[0]=reg;
 80049dc:	f644 0320 	movw	r3, #18464	; 0x4820
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 80049e0:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 80049e4:	4d67      	ldr	r5, [pc, #412]	; (8004b84 <STMPE610_Init+0x214>)
	txbuf[0]=reg;
 80049e6:	f8ad 300c 	strh.w	r3, [sp, #12]
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 80049ea:	9600      	str	r6, [sp, #0]
 80049ec:	2302      	movs	r3, #2
 80049ee:	4622      	mov	r2, r4
 80049f0:	2188      	movs	r1, #136	; 0x88
 80049f2:	4628      	mov	r0, r5
 80049f4:	f7fd fa12 	bl	8001e1c <HAL_I2C_Master_Transmit>
 80049f8:	2800      	cmp	r0, #0
 80049fa:	d1f6      	bne.n	80049ea <STMPE610_Init+0x7a>
	
	STMPE610_Write(STMPE610_REG_SYS_CTRL2, 0x04);		// Temperature sensor clock off, GPIO clock off, touch clock on, ADC clock on
	STMPE610_Write(STMPE610_REG_INT_EN, 0x03);			// Interrupt on INT pin when there is a sample or a touch transition.
	//STMPE610_write_reg(STMPE610_REG_INT_EN, 0x00);						// Don't Interrupt on INT pin
	STMPE610_Write(STMPE610_REG_ADC_CTRL1, 0x48);		// ADC conversion time = 80 clock ticks, 12-bit ADC, internal voltage refernce
	HAL_Delay(2);
 80049fc:	2002      	movs	r0, #2
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 80049fe:	f44f 5640 	mov.w	r6, #12288	; 0x3000
	HAL_Delay(2);
 8004a02:	f7fc faed 	bl	8000fe0 <HAL_Delay>
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004a06:	4d5f      	ldr	r5, [pc, #380]	; (8004b84 <STMPE610_Init+0x214>)
	txbuf[0]=reg;
 8004a08:	f240 1321 	movw	r3, #289	; 0x121
 8004a0c:	f8ad 300c 	strh.w	r3, [sp, #12]
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004a10:	9600      	str	r6, [sp, #0]
 8004a12:	2302      	movs	r3, #2
 8004a14:	4622      	mov	r2, r4
 8004a16:	2188      	movs	r1, #136	; 0x88
 8004a18:	4628      	mov	r0, r5
 8004a1a:	f7fd f9ff 	bl	8001e1c <HAL_I2C_Master_Transmit>
 8004a1e:	2800      	cmp	r0, #0
 8004a20:	d1f6      	bne.n	8004a10 <STMPE610_Init+0xa0>
	txbuf[0]=reg;
 8004a22:	2317      	movs	r3, #23
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004a24:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 8004a28:	4d56      	ldr	r5, [pc, #344]	; (8004b84 <STMPE610_Init+0x214>)
	txbuf[0]=reg;
 8004a2a:	f8ad 300c 	strh.w	r3, [sp, #12]
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004a2e:	9600      	str	r6, [sp, #0]
 8004a30:	2302      	movs	r3, #2
 8004a32:	4622      	mov	r2, r4
 8004a34:	2188      	movs	r1, #136	; 0x88
 8004a36:	4628      	mov	r0, r5
 8004a38:	f7fd f9f0 	bl	8001e1c <HAL_I2C_Master_Transmit>
 8004a3c:	2800      	cmp	r0, #0
 8004a3e:	d1f6      	bne.n	8004a2e <STMPE610_Init+0xbe>
	txbuf[0]=reg;
 8004a40:	f24a 3341 	movw	r3, #41793	; 0xa341
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004a44:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 8004a48:	4d4e      	ldr	r5, [pc, #312]	; (8004b84 <STMPE610_Init+0x214>)
	txbuf[0]=reg;
 8004a4a:	f8ad 300c 	strh.w	r3, [sp, #12]
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004a4e:	9600      	str	r6, [sp, #0]
 8004a50:	2302      	movs	r3, #2
 8004a52:	4622      	mov	r2, r4
 8004a54:	2188      	movs	r1, #136	; 0x88
 8004a56:	4628      	mov	r0, r5
 8004a58:	f7fd f9e0 	bl	8001e1c <HAL_I2C_Master_Transmit>
 8004a5c:	2800      	cmp	r0, #0
 8004a5e:	d1f6      	bne.n	8004a4e <STMPE610_Init+0xde>
	txbuf[0]=reg;
 8004a60:	f44f 73a5 	mov.w	r3, #330	; 0x14a
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004a64:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 8004a68:	4d46      	ldr	r5, [pc, #280]	; (8004b84 <STMPE610_Init+0x214>)
	txbuf[0]=reg;
 8004a6a:	f8ad 300c 	strh.w	r3, [sp, #12]
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004a6e:	9600      	str	r6, [sp, #0]
 8004a70:	2302      	movs	r3, #2
 8004a72:	4622      	mov	r2, r4
 8004a74:	2188      	movs	r1, #136	; 0x88
 8004a76:	4628      	mov	r0, r5
 8004a78:	f7fd f9d0 	bl	8001e1c <HAL_I2C_Master_Transmit>
 8004a7c:	2800      	cmp	r0, #0
 8004a7e:	d1f6      	bne.n	8004a6e <STMPE610_Init+0xfe>
	txbuf[0]=reg;
 8004a80:	f240 134b 	movw	r3, #331	; 0x14b
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004a84:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 8004a88:	4d3e      	ldr	r5, [pc, #248]	; (8004b84 <STMPE610_Init+0x214>)
	txbuf[0]=reg;
 8004a8a:	f8ad 300c 	strh.w	r3, [sp, #12]
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004a8e:	9600      	str	r6, [sp, #0]
 8004a90:	2302      	movs	r3, #2
 8004a92:	4622      	mov	r2, r4
 8004a94:	2188      	movs	r1, #136	; 0x88
 8004a96:	4628      	mov	r0, r5
 8004a98:	f7fd f9c0 	bl	8001e1c <HAL_I2C_Master_Transmit>
 8004a9c:	2800      	cmp	r0, #0
 8004a9e:	d1f6      	bne.n	8004a8e <STMPE610_Init+0x11e>
	txbuf[0]=reg;
 8004aa0:	234b      	movs	r3, #75	; 0x4b
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004aa2:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 8004aa6:	4d37      	ldr	r5, [pc, #220]	; (8004b84 <STMPE610_Init+0x214>)
	txbuf[0]=reg;
 8004aa8:	f8ad 300c 	strh.w	r3, [sp, #12]
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004aac:	9600      	str	r6, [sp, #0]
 8004aae:	2302      	movs	r3, #2
 8004ab0:	4622      	mov	r2, r4
 8004ab2:	2188      	movs	r1, #136	; 0x88
 8004ab4:	4628      	mov	r0, r5
 8004ab6:	f7fd f9b1 	bl	8001e1c <HAL_I2C_Master_Transmit>
 8004aba:	2800      	cmp	r0, #0
 8004abc:	d1f6      	bne.n	8004aac <STMPE610_Init+0x13c>
	txbuf[0]=reg;
 8004abe:	f240 7356 	movw	r3, #1878	; 0x756
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004ac2:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 8004ac6:	4d2f      	ldr	r5, [pc, #188]	; (8004b84 <STMPE610_Init+0x214>)
	txbuf[0]=reg;
 8004ac8:	f8ad 300c 	strh.w	r3, [sp, #12]
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004acc:	9600      	str	r6, [sp, #0]
 8004ace:	2302      	movs	r3, #2
 8004ad0:	4622      	mov	r2, r4
 8004ad2:	2188      	movs	r1, #136	; 0x88
 8004ad4:	4628      	mov	r0, r5
 8004ad6:	f7fd f9a1 	bl	8001e1c <HAL_I2C_Master_Transmit>
 8004ada:	2800      	cmp	r0, #0
 8004adc:	d1f6      	bne.n	8004acc <STMPE610_Init+0x15c>
	txbuf[0]=reg;
 8004ade:	f44f 73ac 	mov.w	r3, #344	; 0x158
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004ae2:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 8004ae6:	4d27      	ldr	r5, [pc, #156]	; (8004b84 <STMPE610_Init+0x214>)
	txbuf[0]=reg;
 8004ae8:	f8ad 300c 	strh.w	r3, [sp, #12]
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004aec:	9600      	str	r6, [sp, #0]
 8004aee:	2302      	movs	r3, #2
 8004af0:	4622      	mov	r2, r4
 8004af2:	2188      	movs	r1, #136	; 0x88
 8004af4:	4628      	mov	r0, r5
 8004af6:	f7fd f991 	bl	8001e1c <HAL_I2C_Master_Transmit>
 8004afa:	2800      	cmp	r0, #0
 8004afc:	d1f6      	bne.n	8004aec <STMPE610_Init+0x17c>
	txbuf[0]=reg;
 8004afe:	f44f 5341 	mov.w	r3, #12352	; 0x3040
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004b02:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 8004b06:	4d1f      	ldr	r5, [pc, #124]	; (8004b84 <STMPE610_Init+0x214>)
	txbuf[0]=reg;
 8004b08:	f8ad 300c 	strh.w	r3, [sp, #12]
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004b0c:	9600      	str	r6, [sp, #0]
 8004b0e:	2302      	movs	r3, #2
 8004b10:	4622      	mov	r2, r4
 8004b12:	2188      	movs	r1, #136	; 0x88
 8004b14:	4628      	mov	r0, r5
 8004b16:	f7fd f981 	bl	8001e1c <HAL_I2C_Master_Transmit>
 8004b1a:	2800      	cmp	r0, #0
 8004b1c:	d1f6      	bne.n	8004b0c <STMPE610_Init+0x19c>
	txbuf[0]=reg;
 8004b1e:	f44f 5345 	mov.w	r3, #12608	; 0x3140
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004b22:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 8004b26:	4d17      	ldr	r5, [pc, #92]	; (8004b84 <STMPE610_Init+0x214>)
	txbuf[0]=reg;
 8004b28:	f8ad 300c 	strh.w	r3, [sp, #12]
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004b2c:	9600      	str	r6, [sp, #0]
 8004b2e:	2302      	movs	r3, #2
 8004b30:	4622      	mov	r2, r4
 8004b32:	2188      	movs	r1, #136	; 0x88
 8004b34:	4628      	mov	r0, r5
 8004b36:	f7fd f971 	bl	8001e1c <HAL_I2C_Master_Transmit>
 8004b3a:	2800      	cmp	r0, #0
 8004b3c:	d1f6      	bne.n	8004b2c <STMPE610_Init+0x1bc>
	txbuf[0]=reg;
 8004b3e:	f64f 730b 	movw	r3, #65291	; 0xff0b
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004b42:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 8004b46:	4d0f      	ldr	r5, [pc, #60]	; (8004b84 <STMPE610_Init+0x214>)
	txbuf[0]=reg;
 8004b48:	f8ad 300c 	strh.w	r3, [sp, #12]
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004b4c:	9600      	str	r6, [sp, #0]
 8004b4e:	2302      	movs	r3, #2
 8004b50:	4622      	mov	r2, r4
 8004b52:	2188      	movs	r1, #136	; 0x88
 8004b54:	4628      	mov	r0, r5
 8004b56:	f7fd f961 	bl	8001e1c <HAL_I2C_Master_Transmit>
 8004b5a:	2800      	cmp	r0, #0
 8004b5c:	d1f6      	bne.n	8004b4c <STMPE610_Init+0x1dc>
	txbuf[0]=reg;
 8004b5e:	f240 1309 	movw	r3, #265	; 0x109
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004b62:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 8004b66:	4d07      	ldr	r5, [pc, #28]	; (8004b84 <STMPE610_Init+0x214>)
	txbuf[0]=reg;
 8004b68:	f8ad 300c 	strh.w	r3, [sp, #12]
	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 8004b6c:	9600      	str	r6, [sp, #0]
 8004b6e:	2302      	movs	r3, #2
 8004b70:	4622      	mov	r2, r4
 8004b72:	2188      	movs	r1, #136	; 0x88
 8004b74:	4628      	mov	r0, r5
 8004b76:	f7fd f951 	bl	8001e1c <HAL_I2C_Master_Transmit>
 8004b7a:	2800      	cmp	r0, #0
 8004b7c:	d1f6      	bne.n	8004b6c <STMPE610_Init+0x1fc>
	//STMPE610_write_reg(STMPE610_REG_TSC_CTRL, 0x32);						// X&Y, 16 reading window
	//STMPE610_write_reg(TMPE610_REG_TSC_CTRL, 0x33);						// X&Y, 16 reading window, TSC enable

	STMPE610_Write(STMPE610_REG_INT_STA, 0xFF);		// Clear all interrupts
	STMPE610_Write(STMPE610_REG_INT_CTRL, 0x01);		// Level interrupt, enable interrupts
}
 8004b7e:	b004      	add	sp, #16
 8004b80:	bd70      	pop	{r4, r5, r6, pc}
 8004b82:	bf00      	nop
 8004b84:	20019238 	.word	0x20019238

08004b88 <GUI_X_Config>:
 8004b88:	b508      	push	{r3, lr}
 8004b8a:	4805      	ldr	r0, [pc, #20]	; (8004ba0 <GUI_X_Config+0x18>)
 8004b8c:	f44f 31c8 	mov.w	r1, #102400	; 0x19000
 8004b90:	f005 fda2 	bl	800a6d8 <GUI_ALLOC_AssignMemory>
 8004b94:	4803      	ldr	r0, [pc, #12]	; (8004ba4 <GUI_X_Config+0x1c>)
 8004b96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004b9a:	f004 be9d 	b.w	80098d8 <GUI_SetDefaultFont>
 8004b9e:	bf00      	nop
 8004ba0:	200000a8 	.word	0x200000a8
 8004ba4:	0800e328 	.word	0x0800e328

08004ba8 <GUI_X_Init>:
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop

08004bac <LCD_X_Config>:
* Function description:
*   Called during the initialization process in order to set up the
*   display driver configuration.
*
*/
void LCD_X_Config(void) {
 8004bac:	b5f0      	push	{r4, r5, r6, r7, lr}
  GUI_DEVICE * pDevice;
  CONFIG_FLEXCOLOR Config = {0};
 8004bae:	2400      	movs	r4, #0
void LCD_X_Config(void) {
 8004bb0:	b0a3      	sub	sp, #140	; 0x8c
  GUI_PORT_API PortAPI = {0};
 8004bb2:	2268      	movs	r2, #104	; 0x68
  GUIDRV_FlexColor_Config(pDevice, &Config);
  //
  // Set controller and operation mode
  //
  PortAPI.pfWrite16_A0  = SSD1963_WriteCommand;
  PortAPI.pfWrite16_A1  = SSD1963_WriteData;
 8004bb4:	4f23      	ldr	r7, [pc, #140]	; (8004c44 <LCD_X_Config+0x98>)
  GUI_PORT_API PortAPI = {0};
 8004bb6:	4621      	mov	r1, r4
 8004bb8:	a808      	add	r0, sp, #32
  CONFIG_FLEXCOLOR Config = {0};
 8004bba:	9407      	str	r4, [sp, #28]
  PortAPI.pfWriteM16_A1 = SSD1963_WriteDataMultiple;
 8004bbc:	4e22      	ldr	r6, [pc, #136]	; (8004c48 <LCD_X_Config+0x9c>)
  CONFIG_FLEXCOLOR Config = {0};
 8004bbe:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8004bc2:	e9cd 4405 	strd	r4, r4, [sp, #20]
  GUI_PORT_API PortAPI = {0};
 8004bc6:	f007 fe8d 	bl	800c8e4 <memset>
  pDevice = GUI_DEVICE_CreateAndLink(GUIDRV_FLEXCOLOR, GUICC_M565, 0, 0);
 8004bca:	4623      	mov	r3, r4
 8004bcc:	4622      	mov	r2, r4
 8004bce:	491f      	ldr	r1, [pc, #124]	; (8004c4c <LCD_X_Config+0xa0>)
 8004bd0:	481f      	ldr	r0, [pc, #124]	; (8004c50 <LCD_X_Config+0xa4>)
 8004bd2:	f004 fe17 	bl	8009804 <GUI_DEVICE_CreateAndLink>
  LCD_SetSizeEx (0, XSIZE_PHYS , YSIZE_PHYS);
 8004bd6:	f44f 7288 	mov.w	r2, #272	; 0x110
  pDevice = GUI_DEVICE_CreateAndLink(GUIDRV_FLEXCOLOR, GUICC_M565, 0, 0);
 8004bda:	4605      	mov	r5, r0
  LCD_SetSizeEx (0, XSIZE_PHYS , YSIZE_PHYS);
 8004bdc:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8004be0:	4620      	mov	r0, r4
 8004be2:	f003 f911 	bl	8007e08 <LCD_SetSizeEx>
  LCD_SetVSizeEx(0, XSIZE_PHYS, YSIZE_PHYS);
 8004be6:	f44f 7288 	mov.w	r2, #272	; 0x110
 8004bea:	4620      	mov	r0, r4
 8004bec:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8004bf0:	f003 f8f2 	bl	8007dd8 <LCD_SetVSizeEx>
  GUIDRV_FlexColor_Config(pDevice, &Config);
 8004bf4:	a903      	add	r1, sp, #12
 8004bf6:	4628      	mov	r0, r5
  Config.Orientation = 0;
 8004bf8:	9405      	str	r4, [sp, #20]
  GUIDRV_FlexColor_Config(pDevice, &Config);
 8004bfa:	f003 f88c 	bl	8007d16 <GUIDRV_FlexColor_Config>
  PortAPI.pfWrite16_A0  = SSD1963_WriteCommand;
 8004bfe:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8004c5c <LCD_X_Config+0xb0>
 // PortAPI.pfReadM16_A1  = SSD1963_ReadData;
  GUIDRV_FlexColor_SetFunc(pDevice, &PortAPI, GUIDRV_FLEXCOLOR_F66720, GUIDRV_FLEXCOLOR_M16C0B16);
 8004c02:	a908      	add	r1, sp, #32
 8004c04:	4628      	mov	r0, r5
 8004c06:	4b13      	ldr	r3, [pc, #76]	; (8004c54 <LCD_X_Config+0xa8>)
 8004c08:	4a13      	ldr	r2, [pc, #76]	; (8004c58 <LCD_X_Config+0xac>)
  PortAPI.pfWriteM16_A1 = SSD1963_WriteDataMultiple;
 8004c0a:	9613      	str	r6, [sp, #76]	; 0x4c
  PortAPI.pfWrite16_A1  = SSD1963_WriteData;
 8004c0c:	e9cd c710 	strd	ip, r7, [sp, #64]	; 0x40
  GUIDRV_FlexColor_SetFunc(pDevice, &PortAPI, GUIDRV_FLEXCOLOR_F66720, GUIDRV_FLEXCOLOR_M16C0B16);
 8004c10:	f003 f89f 	bl	8007d52 <GUIDRV_FlexColor_SetFunc>

  GUI_TOUCH_Calibrate(GUI_COORD_X, 0, 480, GUI_TOUCH_AD_LEFT , GUI_TOUCH_AD_RIGHT);
 8004c14:	f640 7274 	movw	r2, #3956	; 0xf74
 8004c18:	4621      	mov	r1, r4
 8004c1a:	4620      	mov	r0, r4
 8004c1c:	9200      	str	r2, [sp, #0]
 8004c1e:	2392      	movs	r3, #146	; 0x92
 8004c20:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004c24:	f003 fec0 	bl	80089a8 <GUI_TOUCH_Calibrate>
  GUI_TOUCH_Calibrate(GUI_COORD_Y, 0, 272, GUI_TOUCH_AD_TOP, GUI_TOUCH_AD_BOTTOM);
 8004c28:	f640 7203 	movw	r2, #3843	; 0xf03
 8004c2c:	4621      	mov	r1, r4
 8004c2e:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8004c32:	9200      	str	r2, [sp, #0]
 8004c34:	f44f 7288 	mov.w	r2, #272	; 0x110
 8004c38:	2001      	movs	r0, #1
 8004c3a:	f003 feb5 	bl	80089a8 <GUI_TOUCH_Calibrate>

}
 8004c3e:	b023      	add	sp, #140	; 0x8c
 8004c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c42:	bf00      	nop
 8004c44:	080041b9 	.word	0x080041b9
 8004c48:	0800420d 	.word	0x0800420d
 8004c4c:	0800feb8 	.word	0x0800feb8
 8004c50:	0800fd2c 	.word	0x0800fd2c
 8004c54:	0800771d 	.word	0x0800771d
 8004c58:	08007081 	.word	0x08007081
 8004c5c:	08004165 	.word	0x08004165

08004c60 <LCD_X_DisplayDriver>:
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData) {
  int r;
  (void) LayerIndex;
  (void) pData;
  
  switch (Cmd) {
 8004c60:	2901      	cmp	r1, #1
 8004c62:	d106      	bne.n	8004c72 <LCD_X_DisplayDriver+0x12>
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData) {
 8004c64:	b508      	push	{r3, lr}
    // display controller and put it into operation. If the display
    // controller is not initialized by any external routine this needs
    // to be adapted by the customer...
    //
    // ...
	  SSD1963_Init();
 8004c66:	f7ff fb0d 	bl	8004284 <SSD1963_Init>
	  STMPE610_Init();
 8004c6a:	f7ff fe81 	bl	8004970 <STMPE610_Init>
    return 0;
 8004c6e:	2000      	movs	r0, #0
  }
  default:
    r = -1;
  }
  return r;
}
 8004c70:	bd08      	pop	{r3, pc}
  return r;
 8004c72:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004c76:	4770      	bx	lr

08004c78 <HAL_SYSTICK_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_SYSTICK_Callback(void)
{
	OS_TimeMS++;
 8004c78:	4a02      	ldr	r2, [pc, #8]	; (8004c84 <HAL_SYSTICK_Callback+0xc>)
 8004c7a:	6813      	ldr	r3, [r2, #0]
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	6013      	str	r3, [r2, #0]
}
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	20019284 	.word	0x20019284

08004c88 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)  //ova fja se pozove kad se izvrsi jedna konverzija
{
	if(hadc->Instance == ADC3)
 8004c88:	6802      	ldr	r2, [r0, #0]
 8004c8a:	4b05      	ldr	r3, [pc, #20]	; (8004ca0 <HAL_ADC_ConvCpltCallback+0x18>)
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d106      	bne.n	8004c9e <HAL_ADC_ConvCpltCallback+0x16>
	{
		//CDC_Transmit_FS((uint8_t *)probni,strlen((const char *)probni));
		pin_dioda_sirovo = ADC_BUF[1];
 8004c90:	4b04      	ldr	r3, [pc, #16]	; (8004ca4 <HAL_ADC_ConvCpltCallback+0x1c>)
 8004c92:	4905      	ldr	r1, [pc, #20]	; (8004ca8 <HAL_ADC_ConvCpltCallback+0x20>)
		temperatura_ADC_sirovo = ADC_BUF[0];
 8004c94:	e9d3 2000 	ldrd	r2, r0, [r3]
 8004c98:	4b04      	ldr	r3, [pc, #16]	; (8004cac <HAL_ADC_ConvCpltCallback+0x24>)
		pin_dioda_sirovo = ADC_BUF[1];
 8004c9a:	6008      	str	r0, [r1, #0]
		temperatura_ADC_sirovo = ADC_BUF[0];
 8004c9c:	601a      	str	r2, [r3, #0]
	}
}
 8004c9e:	4770      	bx	lr
 8004ca0:	40012200 	.word	0x40012200
 8004ca4:	20019578 	.word	0x20019578
 8004ca8:	20019404 	.word	0x20019404
 8004cac:	20019570 	.word	0x20019570

08004cb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004cb0:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004cb2:	2400      	movs	r4, #0
{
 8004cb4:	b0b4      	sub	sp, #208	; 0xd0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004cb6:	2230      	movs	r2, #48	; 0x30
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8004cb8:	2609      	movs	r6, #9
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004cba:	4621      	mov	r1, r4
 8004cbc:	a807      	add	r0, sp, #28
 8004cbe:	f007 fe11 	bl	800c8e4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004cc2:	4621      	mov	r1, r4
 8004cc4:	2284      	movs	r2, #132	; 0x84
 8004cc6:	a813      	add	r0, sp, #76	; 0x4c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004cc8:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004cca:	2502      	movs	r5, #2
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004ccc:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8004cd0:	e9cd 4404 	strd	r4, r4, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004cd4:	f007 fe06 	bl	800c8e4 <memset>
  HAL_PWR_EnableBkUpAccess();
 8004cd8:	f7fd f9c4 	bl	8002064 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 8004cdc:	4a22      	ldr	r2, [pc, #136]	; (8004d68 <SystemClock_Config+0xb8>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004cde:	4b23      	ldr	r3, [pc, #140]	; (8004d6c <SystemClock_Config+0xbc>)
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 384;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 8;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004ce0:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ce2:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8004ce4:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8004ce8:	6411      	str	r1, [r2, #64]	; 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004cea:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  __HAL_RCC_PWR_CLK_ENABLE();
 8004cee:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004cf0:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8004cf4:	9200      	str	r2, [sp, #0]
 8004cf6:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004cfe:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004d00:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d02:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8004d04:	9607      	str	r6, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004d06:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d0a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004d0e:	9108      	str	r1, [sp, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004d10:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 25;
 8004d12:	2119      	movs	r1, #25
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d14:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLN = 384;
 8004d16:	f44f 72c0 	mov.w	r2, #384	; 0x180
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d1a:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8004d1c:	2308      	movs	r3, #8
  RCC_OscInitStruct.PLL.PLLN = 384;
 8004d1e:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8004d20:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004d22:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004d24:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 25;
 8004d26:	e9cd 610e 	strd	r6, r1, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004d2a:	f7fd f9df 	bl	80020ec <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004d2e:	260f      	movs	r6, #15
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004d30:	f7fd f9a0 	bl	8002074 <HAL_PWREx_EnableOverDrive>
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004d34:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8004d3c:	2106      	movs	r1, #6
 8004d3e:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004d40:	9602      	str	r6, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004d42:	e9cd 2305 	strd	r2, r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004d46:	e9cd 5403 	strd	r5, r4, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8004d4a:	f7fd fbc9 	bl	80024e0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_UART8
 8004d4e:	f246 0220 	movw	r2, #24608	; 0x6020
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004d52:	f44f 7300 	mov.w	r3, #512	; 0x200
  PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004d56:	a813      	add	r0, sp, #76	; 0x4c
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_UART8
 8004d58:	9213      	str	r2, [sp, #76]	; 0x4c
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004d5a:	931f      	str	r3, [sp, #124]	; 0x7c
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004d5c:	e9cd 442b 	strd	r4, r4, [sp, #172]	; 0xac
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004d60:	f7fd fcde 	bl	8002720 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8004d64:	b034      	add	sp, #208	; 0xd0
 8004d66:	bd70      	pop	{r4, r5, r6, pc}
 8004d68:	40023800 	.word	0x40023800
 8004d6c:	40007000 	.word	0x40007000

08004d70 <draw_display>:
}

void draw_display(void)
{

	  hMem = GUI_MEMDEV_Create(0,0,480,272);
 8004d70:	2100      	movs	r1, #0
 8004d72:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004d76:	f44f 7388 	mov.w	r3, #272	; 0x110
 8004d7a:	4608      	mov	r0, r1
{
 8004d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d80:	b083      	sub	sp, #12

	  GUI_SetPenSize( 8 );
	  angle = 90;
	  angle=(angle/57.29577951) ; //Convert degrees to radians
	  x_coordinate=(136+(sin(angle)*120));
	  y_coordinate=(136-(cos(angle)*120));
 8004d82:	f04f 0988 	mov.w	r9, #136	; 0x88
	  hMem = GUI_MEMDEV_Create(0,0,480,272);
 8004d86:	f001 fee5 	bl	8006b54 <GUI_MEMDEV_Create>
 8004d8a:	4b58      	ldr	r3, [pc, #352]	; (8004eec <draw_display+0x17c>)
	  x_coordinate=(136+(sin(angle)*120));
 8004d8c:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8004d90:	4e57      	ldr	r6, [pc, #348]	; (8004ef0 <draw_display+0x180>)
	  hMem = GUI_MEMDEV_Create(0,0,480,272);
 8004d92:	6018      	str	r0, [r3, #0]
	  GUI_MEMDEV_Select(hMem);
 8004d94:	f001 fee6 	bl	8006b64 <GUI_MEMDEV_Select>
	  GUI_SetBkColor(GUI_WHITE);
 8004d98:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
	  y_coordinate=(136-(cos(angle)*120));
 8004d9c:	4d55      	ldr	r5, [pc, #340]	; (8004ef4 <draw_display+0x184>)
	  GUI_SetBkColor(GUI_WHITE);
 8004d9e:	f004 f8c3 	bl	8008f28 <GUI_SetBkColor>
	  angle=(angle/57.29577951) ; //Convert degrees to radians
 8004da2:	4c55      	ldr	r4, [pc, #340]	; (8004ef8 <draw_display+0x188>)
	  GUI_Clear();
 8004da4:	f004 fdd0 	bl	8009948 <GUI_Clear>
	  GUI_SetColor(GUI_BLACK);
 8004da8:	2000      	movs	r0, #0
 8004daa:	f004 f8bf 	bl	8008f2c <GUI_SetColor>
	  GUI_SetDrawMode(GUI_DRAWMODE_NORMAL);
 8004dae:	2000      	movs	r0, #0
 8004db0:	f004 f8b8 	bl	8008f24 <GUI_SetDrawMode>
	  GUI_SetPenSize( 5 );
 8004db4:	2005      	movs	r0, #5
 8004db6:	f004 f923 	bl	8009000 <GUI_SetPenSize>
	  GUI_DrawArc(136, 136, 130, 130, -90, 280);
 8004dba:	2382      	movs	r3, #130	; 0x82
 8004dbc:	f44f 708c 	mov.w	r0, #280	; 0x118
 8004dc0:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8004dc4:	4649      	mov	r1, r9
	  GUI_DrawPoint(x_coordinate, y_coordinate); //3

	  angle = 270;
	  angle=(angle/57.29577951) ; //Convert degrees to radians
	  x_coordinate=(136+(sin(angle)*120));
 8004dc6:	f04f 0b10 	mov.w	fp, #16
	  y_coordinate=(136-(cos(angle)*120));
 8004dca:	f04f 0a87 	mov.w	sl, #135	; 0x87
	  GUI_DrawPoint(x_coordinate, y_coordinate); //6

	  GUI_SetPenSize( 6 );
	  angle = 60;
	  angle=(angle/57.29577951) ; //Convert degrees to radians
	  x_coordinate=(136+(sin(angle)*120));
 8004dce:	27ef      	movs	r7, #239	; 0xef
	  GUI_DrawArc(136, 136, 130, 130, -90, 280);
 8004dd0:	e9cd 2000 	strd	r2, r0, [sp]
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	4648      	mov	r0, r9
 8004dd8:	f005 fb36 	bl	800a448 <GUI_DrawArc>
	  GUI_SetPenSize( 8 );
 8004ddc:	2008      	movs	r0, #8
 8004dde:	f004 f90f 	bl	8009000 <GUI_SetPenSize>
	  angle=(angle/57.29577951) ; //Convert degrees to radians
 8004de2:	4a46      	ldr	r2, [pc, #280]	; (8004efc <draw_display+0x18c>)
	  GUI_DrawPoint(x_coordinate, y_coordinate); //3
 8004de4:	4640      	mov	r0, r8
 8004de6:	4649      	mov	r1, r9
	  x_coordinate=(136+(sin(angle)*120));
 8004de8:	f8c6 8000 	str.w	r8, [r6]
	  y_coordinate=(136-(cos(angle)*120));
 8004dec:	f8c5 9000 	str.w	r9, [r5]
	  angle=(angle/57.29577951) ; //Convert degrees to radians
 8004df0:	6022      	str	r2, [r4, #0]
	  GUI_DrawPoint(x_coordinate, y_coordinate); //3
 8004df2:	f004 f96d 	bl	80090d0 <GUI_DrawPoint>
	  angle=(angle/57.29577951) ; //Convert degrees to radians
 8004df6:	4a42      	ldr	r2, [pc, #264]	; (8004f00 <draw_display+0x190>)
	  GUI_DrawPoint(x_coordinate, y_coordinate); //9
 8004df8:	4658      	mov	r0, fp
 8004dfa:	4651      	mov	r1, sl
	  y_coordinate=(136-(cos(angle)*120));
 8004dfc:	f8c5 a000 	str.w	sl, [r5]
	  angle=(angle/57.29577951) ; //Convert degrees to radians
 8004e00:	6022      	str	r2, [r4, #0]
	  x_coordinate=(136+(sin(angle)*120));
 8004e02:	f8c6 b000 	str.w	fp, [r6]
	  GUI_DrawPoint(x_coordinate, y_coordinate); //9
 8004e06:	f004 f963 	bl	80090d0 <GUI_DrawPoint>
	  angle = 0;
 8004e0a:	2200      	movs	r2, #0
	  GUI_DrawPoint(x_coordinate, y_coordinate); //12
 8004e0c:	4648      	mov	r0, r9
 8004e0e:	4659      	mov	r1, fp
	  x_coordinate=(136+(sin(angle)*120));
 8004e10:	f8c6 9000 	str.w	r9, [r6]
	  angle = 0;
 8004e14:	6022      	str	r2, [r4, #0]
	  y_coordinate=(136-(cos(angle)*120));
 8004e16:	f04f 094c 	mov.w	r9, #76	; 0x4c
	  y_coordinate=(136-(cos(angle)*120));
 8004e1a:	f8c5 b000 	str.w	fp, [r5]
	  GUI_DrawPoint(x_coordinate, y_coordinate); //12
 8004e1e:	f004 f957 	bl	80090d0 <GUI_DrawPoint>
	  angle=(angle/57.29577951) ; //Convert degrees to radians
 8004e22:	4b38      	ldr	r3, [pc, #224]	; (8004f04 <draw_display+0x194>)
	  GUI_DrawPoint(x_coordinate, y_coordinate); //6
 8004e24:	4641      	mov	r1, r8
 8004e26:	4650      	mov	r0, sl
	  x_coordinate=(136+(sin(angle)*120));
 8004e28:	f8c6 a000 	str.w	sl, [r6]
	  angle=(angle/57.29577951) ; //Convert degrees to radians
 8004e2c:	6023      	str	r3, [r4, #0]
	  GUI_DrawPoint(x_coordinate, y_coordinate); //10

	  angle = 120;
	  angle=(angle/57.29577951) ; //Convert degrees to radians
	  x_coordinate=(136+(sin(angle)*120));
	  y_coordinate=(136-(cos(angle)*120));
 8004e2e:	f04f 0ac4 	mov.w	sl, #196	; 0xc4
	  y_coordinate=(136-(cos(angle)*120));
 8004e32:	f8c5 8000 	str.w	r8, [r5]
	  GUI_DrawPoint(x_coordinate, y_coordinate); //6
 8004e36:	f004 f94b 	bl	80090d0 <GUI_DrawPoint>
	  GUI_SetPenSize( 6 );
 8004e3a:	2006      	movs	r0, #6
	  x_coordinate=(136+(sin(angle)*120));
 8004e3c:	f04f 0820 	mov.w	r8, #32
	  GUI_SetPenSize( 6 );
 8004e40:	f004 f8de 	bl	8009000 <GUI_SetPenSize>
	  angle=(angle/57.29577951) ; //Convert degrees to radians
 8004e44:	4b30      	ldr	r3, [pc, #192]	; (8004f08 <draw_display+0x198>)
	  GUI_DrawPoint(x_coordinate, y_coordinate); //2
 8004e46:	4638      	mov	r0, r7
 8004e48:	4649      	mov	r1, r9
	  angle=(angle/57.29577951) ; //Convert degrees to radians
 8004e4a:	6023      	str	r3, [r4, #0]
	  x_coordinate=(136+(sin(angle)*120));
 8004e4c:	6037      	str	r7, [r6, #0]
	  y_coordinate=(136-(cos(angle)*120));
 8004e4e:	f8c5 9000 	str.w	r9, [r5]
	  GUI_DrawPoint(x_coordinate, y_coordinate); //2
 8004e52:	f004 f93d 	bl	80090d0 <GUI_DrawPoint>
	  angle=(angle/57.29577951) ; //Convert degrees to radians
 8004e56:	4b2d      	ldr	r3, [pc, #180]	; (8004f0c <draw_display+0x19c>)
	  GUI_DrawPoint(x_coordinate, y_coordinate); //10
 8004e58:	4649      	mov	r1, r9
 8004e5a:	4640      	mov	r0, r8
	  y_coordinate=(136-(cos(angle)*120));
 8004e5c:	f8c5 9000 	str.w	r9, [r5]
	  angle=(angle/57.29577951) ; //Convert degrees to radians
 8004e60:	6023      	str	r3, [r4, #0]
	  x_coordinate=(136+(sin(angle)*120));
 8004e62:	f8c6 8000 	str.w	r8, [r6]
	  GUI_DrawPoint(x_coordinate, y_coordinate); //10
 8004e66:	f004 f933 	bl	80090d0 <GUI_DrawPoint>
	  angle=(angle/57.29577951) ; //Convert degrees to radians
 8004e6a:	4b29      	ldr	r3, [pc, #164]	; (8004f10 <draw_display+0x1a0>)
	  GUI_DrawPoint(x_coordinate, y_coordinate); //4
 8004e6c:	4638      	mov	r0, r7
 8004e6e:	4651      	mov	r1, sl
	  x_coordinate=(136+(sin(angle)*120));
 8004e70:	6037      	str	r7, [r6, #0]
	  angle=(angle/57.29577951) ; //Convert degrees to radians
 8004e72:	6023      	str	r3, [r4, #0]
	  y_coordinate=(136-(cos(angle)*120));
 8004e74:	f8c5 a000 	str.w	sl, [r5]
	  GUI_DrawPoint(x_coordinate, y_coordinate); //4
 8004e78:	f004 f92a 	bl	80090d0 <GUI_DrawPoint>

	  angle = 240;
	  angle=(angle/57.29577951) ; //Convert degrees to radians
	  x_coordinate=(136+(sin(angle)*120));
	  y_coordinate=(136-(cos(angle)*120));
 8004e7c:	23c3      	movs	r3, #195	; 0xc3
	  angle=(angle/57.29577951) ; //Convert degrees to radians
 8004e7e:	4a25      	ldr	r2, [pc, #148]	; (8004f14 <draw_display+0x1a4>)
	  GUI_DrawPoint(x_coordinate, y_coordinate); //8
 8004e80:	4640      	mov	r0, r8
	  x_coordinate=(136+(sin(angle)*120));
 8004e82:	f8c6 8000 	str.w	r8, [r6]
	  GUI_DrawPoint(x_coordinate, y_coordinate); //8
 8004e86:	4619      	mov	r1, r3
	  angle=(angle/57.29577951) ; //Convert degrees to radians
 8004e88:	6022      	str	r2, [r4, #0]
	  y_coordinate=(136-(cos(angle)*120));
 8004e8a:	602b      	str	r3, [r5, #0]
	  GUI_DrawPoint(x_coordinate, y_coordinate); //8
 8004e8c:	f004 f920 	bl	80090d0 <GUI_DrawPoint>

	  angle = 30;
	  angle=(angle/57.29577951) ; //Convert degrees to radians
 8004e90:	4b21      	ldr	r3, [pc, #132]	; (8004f18 <draw_display+0x1a8>)
	  x_coordinate=(136+(sin(angle)*120));
	  y_coordinate=(136-(cos(angle)*120));
	  GUI_DrawPoint(x_coordinate, y_coordinate); //1
 8004e92:	4641      	mov	r1, r8
 8004e94:	4650      	mov	r0, sl
	  x_coordinate=(136+(sin(angle)*120));
 8004e96:	f8c6 a000 	str.w	sl, [r6]
	  angle=(angle/57.29577951) ; //Convert degrees to radians
 8004e9a:	6023      	str	r3, [r4, #0]
	  y_coordinate=(136-(cos(angle)*120));
 8004e9c:	f8c5 8000 	str.w	r8, [r5]
	  GUI_DrawPoint(x_coordinate, y_coordinate); //1
 8004ea0:	f004 f916 	bl	80090d0 <GUI_DrawPoint>

	  angle = 150;
	  angle=(angle/57.29577951) ; //Convert degrees to radians
 8004ea4:	4b1d      	ldr	r3, [pc, #116]	; (8004f1c <draw_display+0x1ac>)
	  x_coordinate=(136+(sin(angle)*120));
	  y_coordinate=(136-(cos(angle)*120));
	  GUI_DrawPoint(x_coordinate, y_coordinate); //5
 8004ea6:	4650      	mov	r0, sl
 8004ea8:	4639      	mov	r1, r7
	  x_coordinate=(136+(sin(angle)*120));
 8004eaa:	f8c6 a000 	str.w	sl, [r6]
	  angle=(angle/57.29577951) ; //Convert degrees to radians
 8004eae:	6023      	str	r3, [r4, #0]
	  y_coordinate=(136-(cos(angle)*120));
 8004eb0:	602f      	str	r7, [r5, #0]
	  GUI_DrawPoint(x_coordinate, y_coordinate); //5
 8004eb2:	f004 f90d 	bl	80090d0 <GUI_DrawPoint>

	  angle = 330;
	  angle=(angle/57.29577951) ; //Convert degrees to radians
	  x_coordinate=(136+(sin(angle)*120));
 8004eb6:	234b      	movs	r3, #75	; 0x4b
	  angle=(angle/57.29577951) ; //Convert degrees to radians
 8004eb8:	4a19      	ldr	r2, [pc, #100]	; (8004f20 <draw_display+0x1b0>)
	  y_coordinate=(136-(cos(angle)*120));
	  GUI_DrawPoint(x_coordinate, y_coordinate); //11
 8004eba:	4641      	mov	r1, r8
	  y_coordinate=(136-(cos(angle)*120));
 8004ebc:	f8c5 8000 	str.w	r8, [r5]
	  GUI_DrawPoint(x_coordinate, y_coordinate); //11
 8004ec0:	4618      	mov	r0, r3
	  angle=(angle/57.29577951) ; //Convert degrees to radians
 8004ec2:	6022      	str	r2, [r4, #0]
	  x_coordinate=(136+(sin(angle)*120));
 8004ec4:	6033      	str	r3, [r6, #0]
	  GUI_DrawPoint(x_coordinate, y_coordinate); //11
 8004ec6:	f004 f903 	bl	80090d0 <GUI_DrawPoint>

	  angle = 210;
	  angle=(angle/57.29577951) ; //Convert degrees to radians
 8004eca:	4b16      	ldr	r3, [pc, #88]	; (8004f24 <draw_display+0x1b4>)
	  x_coordinate=(136+(sin(angle)*120));
	  y_coordinate=(136-(cos(angle)*120));
	  GUI_DrawPoint(x_coordinate, y_coordinate); //7
 8004ecc:	4648      	mov	r0, r9
 8004ece:	4639      	mov	r1, r7
	  x_coordinate=(136+(sin(angle)*120));
 8004ed0:	f8c6 9000 	str.w	r9, [r6]
	  angle=(angle/57.29577951) ; //Convert degrees to radians
 8004ed4:	6023      	str	r3, [r4, #0]
	  y_coordinate=(136-(cos(angle)*120));
 8004ed6:	602f      	str	r7, [r5, #0]
	  GUI_DrawPoint(x_coordinate, y_coordinate); //7
 8004ed8:	f004 f8fa 	bl	80090d0 <GUI_DrawPoint>


	  GUI_MEMDEV_CopyToLCD(hMem);
 8004edc:	4b03      	ldr	r3, [pc, #12]	; (8004eec <draw_display+0x17c>)
 8004ede:	6818      	ldr	r0, [r3, #0]
	  //GUI_MEMDEV_Delete(hMem);

}
 8004ee0:	b003      	add	sp, #12
 8004ee2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	  GUI_MEMDEV_CopyToLCD(hMem);
 8004ee6:	f001 beb5 	b.w	8006c54 <GUI_MEMDEV_CopyToLCD>
 8004eea:	bf00      	nop
 8004eec:	200192dc 	.word	0x200192dc
 8004ef0:	200190ac 	.word	0x200190ac
 8004ef4:	200190b0 	.word	0x200190b0
 8004ef8:	200190a8 	.word	0x200190a8
 8004efc:	3fc90fdb 	.word	0x3fc90fdb
 8004f00:	4096cbe4 	.word	0x4096cbe4
 8004f04:	40490fdb 	.word	0x40490fdb
 8004f08:	3f860a92 	.word	0x3f860a92
 8004f0c:	40a78d36 	.word	0x40a78d36
 8004f10:	40060a92 	.word	0x40060a92
 8004f14:	40860a92 	.word	0x40860a92
 8004f18:	3f060a92 	.word	0x3f060a92
 8004f1c:	40278d36 	.word	0x40278d36
 8004f20:	40b84e88 	.word	0x40b84e88
 8004f24:	406a927f 	.word	0x406a927f

08004f28 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f28:	2500      	movs	r5, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f2a:	f8df 83ac 	ldr.w	r8, [pc, #940]	; 80052d8 <main+0x3b0>
  hi2c1.Instance = I2C1;
 8004f2e:	4cde      	ldr	r4, [pc, #888]	; (80052a8 <main+0x380>)
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8004f30:	f04f 0a07 	mov.w	sl, #7
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004f34:	f04f 0900 	mov.w	r9, #0
{
 8004f38:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8004f3c:	b0ab      	sub	sp, #172	; 0xac
  hadc3.Instance = ADC3;
 8004f3e:	4fdb      	ldr	r7, [pc, #876]	; (80052ac <main+0x384>)
  HAL_Init();
 8004f40:	f7fc f830 	bl	8000fa4 <HAL_Init>
  htim3.Instance = TIM3;
 8004f44:	f8df b394 	ldr.w	fp, [pc, #916]	; 80052dc <main+0x3b4>
  SystemClock_Config();
 8004f48:	f7ff feb2 	bl	8004cb0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f4c:	9524      	str	r5, [sp, #144]	; 0x90
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_15, GPIO_PIN_RESET);
 8004f4e:	462a      	mov	r2, r5
 8004f50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f54:	48d6      	ldr	r0, [pc, #856]	; (80052b0 <main+0x388>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f56:	e9cd 5522 	strd	r5, r5, [sp, #136]	; 0x88
 8004f5a:	e9cd 5525 	strd	r5, r5, [sp, #148]	; 0x94
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f5e:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 8004f62:	f043 0304 	orr.w	r3, r3, #4
 8004f66:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
 8004f6a:	f8d8 6030 	ldr.w	r6, [r8, #48]	; 0x30
  hrtc.Instance = RTC;
 8004f6e:	4bd1      	ldr	r3, [pc, #836]	; (80052b4 <main+0x38c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f70:	f006 0604 	and.w	r6, r6, #4
 8004f74:	9615      	str	r6, [sp, #84]	; 0x54
 8004f76:	9e15      	ldr	r6, [sp, #84]	; 0x54
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8004f78:	461e      	mov	r6, r3
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004f7a:	f8d8 c030 	ldr.w	ip, [r8, #48]	; 0x30
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8004f7e:	9311      	str	r3, [sp, #68]	; 0x44
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004f80:	f04c 0c20 	orr.w	ip, ip, #32
 8004f84:	f8c8 c030 	str.w	ip, [r8, #48]	; 0x30
 8004f88:	f8d8 c030 	ldr.w	ip, [r8, #48]	; 0x30
 8004f8c:	f00c 0c20 	and.w	ip, ip, #32
 8004f90:	f8cd c058 	str.w	ip, [sp, #88]	; 0x58
 8004f94:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004f98:	f8d8 c030 	ldr.w	ip, [r8, #48]	; 0x30
 8004f9c:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 8004fa0:	f8c8 c030 	str.w	ip, [r8, #48]	; 0x30
 8004fa4:	f8d8 c030 	ldr.w	ip, [r8, #48]	; 0x30
 8004fa8:	f00c 0c80 	and.w	ip, ip, #128	; 0x80
 8004fac:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 8004fb0:	f8dd c05c 	ldr.w	ip, [sp, #92]	; 0x5c
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004fb4:	f8d8 c030 	ldr.w	ip, [r8, #48]	; 0x30
 8004fb8:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
 8004fbc:	f8c8 c030 	str.w	ip, [r8, #48]	; 0x30
 8004fc0:	f8d8 c030 	ldr.w	ip, [r8, #48]	; 0x30
 8004fc4:	f00c 0c40 	and.w	ip, ip, #64	; 0x40
 8004fc8:	f8cd c060 	str.w	ip, [sp, #96]	; 0x60
 8004fcc:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fd0:	f8d8 c030 	ldr.w	ip, [r8, #48]	; 0x30
 8004fd4:	f04c 0c02 	orr.w	ip, ip, #2
 8004fd8:	f8c8 c030 	str.w	ip, [r8, #48]	; 0x30
 8004fdc:	f8d8 c030 	ldr.w	ip, [r8, #48]	; 0x30
 8004fe0:	f00c 0c02 	and.w	ip, ip, #2
 8004fe4:	f8cd c064 	str.w	ip, [sp, #100]	; 0x64
 8004fe8:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004fec:	f8d8 c030 	ldr.w	ip, [r8, #48]	; 0x30
 8004ff0:	f04c 0c10 	orr.w	ip, ip, #16
 8004ff4:	f8c8 c030 	str.w	ip, [r8, #48]	; 0x30
 8004ff8:	f8d8 c030 	ldr.w	ip, [r8, #48]	; 0x30
 8004ffc:	f00c 0c10 	and.w	ip, ip, #16
 8005000:	f8cd c068 	str.w	ip, [sp, #104]	; 0x68
 8005004:	f8dd c068 	ldr.w	ip, [sp, #104]	; 0x68
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_15, GPIO_PIN_RESET);
 8005008:	f7fc fdfe 	bl	8001c08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800500c:	462a      	mov	r2, r5
 800500e:	2108      	movs	r1, #8
 8005010:	48a9      	ldr	r0, [pc, #676]	; (80052b8 <main+0x390>)
 8005012:	f7fc fdf9 	bl	8001c08 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005016:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800501a:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800501c:	a922      	add	r1, sp, #136	; 0x88
 800501e:	48a4      	ldr	r0, [pc, #656]	; (80052b0 <main+0x388>)
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005020:	9222      	str	r2, [sp, #136]	; 0x88
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005022:	9323      	str	r3, [sp, #140]	; 0x8c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005024:	e9cd 5524 	strd	r5, r5, [sp, #144]	; 0x90
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005028:	f7fc fce8 	bl	80019fc <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800502c:	2301      	movs	r3, #1
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800502e:	2208      	movs	r2, #8
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005030:	a922      	add	r1, sp, #136	; 0x88
 8005032:	48a1      	ldr	r0, [pc, #644]	; (80052b8 <main+0x390>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005034:	9525      	str	r5, [sp, #148]	; 0x94
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005036:	9222      	str	r2, [sp, #136]	; 0x88
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005038:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800503c:	f7fc fcde 	bl	80019fc <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005040:	f8d8 0030 	ldr.w	r0, [r8, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8005044:	462a      	mov	r2, r5
 8005046:	4629      	mov	r1, r5
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005048:	f440 0c80 	orr.w	ip, r0, #4194304	; 0x400000
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800504c:	200b      	movs	r0, #11
  __HAL_RCC_DMA2_CLK_ENABLE();
 800504e:	f8c8 c030 	str.w	ip, [r8, #48]	; 0x30
 8005052:	f8d8 c030 	ldr.w	ip, [r8, #48]	; 0x30
 8005056:	f40c 0c80 	and.w	ip, ip, #4194304	; 0x400000
 800505a:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
 800505e:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005062:	f8d8 c030 	ldr.w	ip, [r8, #48]	; 0x30
 8005066:	f44c 1c00 	orr.w	ip, ip, #2097152	; 0x200000
 800506a:	f8c8 c030 	str.w	ip, [r8, #48]	; 0x30
 800506e:	f8d8 c030 	ldr.w	ip, [r8, #48]	; 0x30
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8005072:	f04f 0800 	mov.w	r8, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005076:	f40c 1c00 	and.w	ip, ip, #2097152	; 0x200000
 800507a:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 800507e:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8005082:	f7fc fa47 	bl	8001514 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8005086:	200b      	movs	r0, #11
 8005088:	f7fc fa7a 	bl	8001580 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800508c:	462a      	mov	r2, r5
 800508e:	4629      	mov	r1, r5
 8005090:	2011      	movs	r0, #17
 8005092:	f7fc fa3f 	bl	8001514 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8005096:	2011      	movs	r0, #17
 8005098:	f7fc fa72 	bl	8001580 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800509c:	462a      	mov	r2, r5
 800509e:	4629      	mov	r1, r5
 80050a0:	2038      	movs	r0, #56	; 0x38
 80050a2:	f7fc fa37 	bl	8001514 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80050a6:	2038      	movs	r0, #56	; 0x38
 80050a8:	f7fc fa6a 	bl	8001580 <HAL_NVIC_EnableIRQ>
  hi2c1.Init.Timing = 0x20303E5D;
 80050ac:	4a83      	ldr	r2, [pc, #524]	; (80052bc <main+0x394>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80050ae:	2301      	movs	r3, #1
  hi2c1.Instance = I2C1;
 80050b0:	4983      	ldr	r1, [pc, #524]	; (80052c0 <main+0x398>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80050b2:	4620      	mov	r0, r4
  hi2c1.Init.OwnAddress1 = 0;
 80050b4:	60a5      	str	r5, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80050b6:	e9c4 3503 	strd	r3, r5, [r4, #12]
  hi2c1.Init.Timing = 0x20303E5D;
 80050ba:	e9c4 1200 	strd	r1, r2, [r4]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80050be:	e9c4 5505 	strd	r5, r5, [r4, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80050c2:	e9c4 5507 	strd	r5, r5, [r4, #28]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80050c6:	f7fc fe55 	bl	8001d74 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80050ca:	4629      	mov	r1, r5
 80050cc:	4620      	mov	r0, r4
 80050ce:	f7fc ff75 	bl	8001fbc <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80050d2:	4629      	mov	r1, r5
 80050d4:	4620      	mov	r0, r4
 80050d6:	f7fc ff9b 	bl	8002010 <HAL_I2CEx_ConfigDigitalFilter>
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80050da:	2301      	movs	r3, #1
  hadc3.Instance = ADC3;
 80050dc:	f8df c200 	ldr.w	ip, [pc, #512]	; 80052e0 <main+0x3b8>
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80050e0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80050e4:	4a77      	ldr	r2, [pc, #476]	; (80052c4 <main+0x39c>)
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80050e6:	4638      	mov	r0, r7
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80050e8:	613b      	str	r3, [r7, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80050ea:	61bb      	str	r3, [r7, #24]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80050ec:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  hadc3.Init.NbrOfConversion = 2;
 80050f0:	2302      	movs	r3, #2
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80050f2:	60bd      	str	r5, [r7, #8]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80050f4:	f887 5020 	strb.w	r5, [r7, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80050f8:	62fd      	str	r5, [r7, #44]	; 0x2c
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80050fa:	60fd      	str	r5, [r7, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80050fc:	617d      	str	r5, [r7, #20]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80050fe:	62ba      	str	r2, [r7, #40]	; 0x28
  hadc3.Init.NbrOfConversion = 2;
 8005100:	61fb      	str	r3, [r7, #28]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005102:	e9c7 c100 	strd	ip, r1, [r7]
  ADC_ChannelConfTypeDef sConfig = {0};
 8005106:	e9cd 5522 	strd	r5, r5, [sp, #136]	; 0x88
 800510a:	e9cd 5524 	strd	r5, r5, [sp, #144]	; 0x90
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800510e:	f7fb ff79 	bl	8001004 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_6;
 8005112:	2206      	movs	r2, #6
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005114:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8005116:	a922      	add	r1, sp, #136	; 0x88
 8005118:	4638      	mov	r0, r7
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800511a:	f8cd a090 	str.w	sl, [sp, #144]	; 0x90
  sConfig.Channel = ADC_CHANNEL_6;
 800511e:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8005122:	f7fc f923 	bl	800136c <HAL_ADC_ConfigChannel>
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8005126:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8005128:	a922      	add	r1, sp, #136	; 0x88
 800512a:	4638      	mov	r0, r7
  sConfig.Channel = ADC_CHANNEL_7;
 800512c:	e9cd a322 	strd	sl, r3, [sp, #136]	; 0x88
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8005130:	f7fc f91c 	bl	800136c <HAL_ADC_ConfigChannel>
  htim3.Instance = TIM3;
 8005134:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 80052e4 <main+0x3bc>
  htim3.Init.Prescaler = 25;
 8005138:	2119      	movs	r1, #25
  htim3.Init.Period = 1920;
 800513a:	f44f 62f0 	mov.w	r2, #1920	; 0x780
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800513e:	4658      	mov	r0, fp
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005140:	f8cb 5008 	str.w	r5, [fp, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005144:	f8cb 5010 	str.w	r5, [fp, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005148:	f8cb 5018 	str.w	r5, [fp, #24]
  htim3.Init.Period = 1920;
 800514c:	f8cb 200c 	str.w	r2, [fp, #12]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005150:	951e      	str	r5, [sp, #120]	; 0x78
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005152:	951b      	str	r5, [sp, #108]	; 0x6c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005154:	9528      	str	r5, [sp, #160]	; 0xa0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005156:	9521      	str	r5, [sp, #132]	; 0x84
 8005158:	f8df a18c 	ldr.w	sl, [pc, #396]	; 80052e8 <main+0x3c0>
  htim3.Init.Prescaler = 25;
 800515c:	e9cb c100 	strd	ip, r1, [fp]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005160:	e9cd 5522 	strd	r5, r5, [sp, #136]	; 0x88
 8005164:	e9cd 5524 	strd	r5, r5, [sp, #144]	; 0x90
 8005168:	e9cd 5526 	strd	r5, r5, [sp, #152]	; 0x98
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800516c:	e9cd 551f 	strd	r5, r5, [sp, #124]	; 0x7c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005170:	e9cd 551c 	strd	r5, r5, [sp, #112]	; 0x70
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005174:	f7fd ff8a 	bl	800308c <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005178:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800517c:	a91e      	add	r1, sp, #120	; 0x78
 800517e:	4658      	mov	r0, fp
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005180:	921e      	str	r2, [sp, #120]	; 0x78
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005182:	f7fe fafd 	bl	8003780 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005186:	4658      	mov	r0, fp
 8005188:	f7fe f81c 	bl	80031c4 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800518c:	a91b      	add	r1, sp, #108	; 0x6c
 800518e:	4658      	mov	r0, fp
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005190:	951b      	str	r5, [sp, #108]	; 0x6c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005192:	951d      	str	r5, [sp, #116]	; 0x74
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005194:	f7fe fb9c 	bl	80038d0 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005198:	f04f 0c60 	mov.w	ip, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800519c:	462a      	mov	r2, r5
 800519e:	a922      	add	r1, sp, #136	; 0x88
 80051a0:	4658      	mov	r0, fp
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80051a2:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80051a6:	9526      	str	r5, [sp, #152]	; 0x98
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80051a8:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80051ac:	f7fe f944 	bl	8003438 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 80051b0:	4658      	mov	r0, fp
 80051b2:	f000 fb55 	bl	8005860 <HAL_TIM_MspPostInit>
  huart8.Instance = UART8;
 80051b6:	4a44      	ldr	r2, [pc, #272]	; (80052c8 <main+0x3a0>)
 80051b8:	f8df e130 	ldr.w	lr, [pc, #304]	; 80052ec <main+0x3c4>
  huart8.Init.BaudRate = 115200;
 80051bc:	f44f 3ce1 	mov.w	ip, #115200	; 0x1c200
  huart8.Init.Mode = UART_MODE_TX_RX;
 80051c0:	210c      	movs	r1, #12
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80051c2:	4610      	mov	r0, r2
  huart8.Init.Parity = UART_PARITY_NONE;
 80051c4:	6115      	str	r5, [r2, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80051c6:	6151      	str	r1, [r2, #20]
  huart8.Init.BaudRate = 115200;
 80051c8:	e9c2 ec00 	strd	lr, ip, [r2]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80051cc:	e9c2 5502 	strd	r5, r5, [r2, #8]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80051d0:	e9c2 5506 	strd	r5, r5, [r2, #24]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80051d4:	e9c2 5508 	strd	r5, r5, [r2, #32]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80051d8:	f7fe fd72 	bl	8003cc0 <HAL_UART_Init>
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80051dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  hrtc.Instance = RTC;
 80051de:	f8df c110 	ldr.w	ip, [pc, #272]	; 80052f0 <main+0x3c8>
  hrtc.Init.AsynchPrediv = 127;
 80051e2:	217f      	movs	r1, #127	; 0x7f
  hrtc.Init.SynchPrediv = 255;
 80051e4:	22ff      	movs	r2, #255	; 0xff
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80051e6:	4618      	mov	r0, r3
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80051e8:	605d      	str	r5, [r3, #4]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80051ea:	619d      	str	r5, [r3, #24]
  hrtc.Instance = RTC;
 80051ec:	f8c3 c000 	str.w	ip, [r3]
  RTC_DateTypeDef sDate = {0};
 80051f0:	951e      	str	r5, [sp, #120]	; 0x78
  hrtc.Init.SynchPrediv = 255;
 80051f2:	e9c3 1202 	strd	r1, r2, [r3, #8]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80051f6:	e9c3 5504 	strd	r5, r5, [r3, #16]
  RTC_TimeTypeDef sTime = {0};
 80051fa:	e9cd 5522 	strd	r5, r5, [sp, #136]	; 0x88
 80051fe:	e9cd 5524 	strd	r5, r5, [sp, #144]	; 0x90
 8005202:	e9cd 5526 	strd	r5, r5, [sp, #152]	; 0x98
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8005206:	f7fd fd1f 	bl	8002c48 <HAL_RTC_Init>
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800520a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  sTime.Hours = 0x18;
 800520c:	f241 0c18 	movw	ip, #4120	; 0x1018
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8005210:	2201      	movs	r2, #1
 8005212:	a922      	add	r1, sp, #136	; 0x88
 8005214:	4618      	mov	r0, r3
  sTime.Minutes = 0x10;
 8005216:	f88d 508a 	strb.w	r5, [sp, #138]	; 0x8a
  sTime.Hours = 0x18;
 800521a:	f8ad c088 	strh.w	ip, [sp, #136]	; 0x88
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800521e:	e9cd 8926 	strd	r8, r9, [sp, #152]	; 0x98
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8005222:	f7fd fd7f 	bl	8002d24 <HAL_RTC_SetTime>
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8005226:	9b11      	ldr	r3, [sp, #68]	; 0x44
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8005228:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 80052f4 <main+0x3cc>
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800522c:	2201      	movs	r2, #1
 800522e:	4618      	mov	r0, r3
 8005230:	a91e      	add	r1, sp, #120	; 0x78
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8005232:	f8cd c078 	str.w	ip, [sp, #120]	; 0x78
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8005236:	f7fd fe5f 	bl	8002ef8 <HAL_RTC_SetDate>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);   //mora da se ukljuci da bi se pokreuo PWM
 800523a:	4629      	mov	r1, r5
 800523c:	4658      	mov	r0, fp
 800523e:	f7fe f85b 	bl	80032f8 <HAL_TIM_PWM_Start>
  HAL_ADC_Start_DMA(&hadc3,ADC_BUF,1);
 8005242:	2201      	movs	r2, #1
 8005244:	4921      	ldr	r1, [pc, #132]	; (80052cc <main+0x3a4>)
 8005246:	4638      	mov	r0, r7
 8005248:	f7fb ff92 	bl	8001170 <HAL_ADC_Start_DMA>
  Init_TOUCH_GPIO(hi2c1);
 800524c:	466d      	mov	r5, sp
  Init_LCD_GPIO();
 800524e:	f7fe ff11 	bl	8004074 <Init_LCD_GPIO>
  Init_TOUCH_GPIO(hi2c1);
 8005252:	f104 0c10 	add.w	ip, r4, #16
 8005256:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 80052f8 <main+0x3d0>
 800525a:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 80052fc <main+0x3d4>
 800525e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8005300 <main+0x3d8>
	sprintf((char*)time, "%02d:%02d:%02d\r",gTime.Hours, gTime.Minutes, gTime.Seconds);
 8005262:	4f1b      	ldr	r7, [pc, #108]	; (80052d0 <main+0x3a8>)
  Init_TOUCH_GPIO(hi2c1);
 8005264:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8005268:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800526a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800526e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005270:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8005274:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005276:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800527a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800527e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005282:	f7ff fb63 	bl	800494c <Init_TOUCH_GPIO>
  STMPE610_Init();
 8005286:	f7ff fb73 	bl	8004970 <STMPE610_Init>
  GUI_Init();
 800528a:	f004 fb97 	bl	80099bc <GUI_Init>
  draw_display();
 800528e:	f7ff fd6f 	bl	8004d70 <draw_display>
	  hMem2 = GUI_MEMDEV_Create(46,46,180,180);
 8005292:	212e      	movs	r1, #46	; 0x2e
 8005294:	23b4      	movs	r3, #180	; 0xb4
	  angle = 30 * (get_time(HOURS_TYPE)) + (get_time(MINUTES_TYPE)/2) + (get_time(SECONDS_TYPE)/30);
 8005296:	241e      	movs	r4, #30
	  hMem2 = GUI_MEMDEV_Create(46,46,180,180);
 8005298:	461a      	mov	r2, r3
 800529a:	4608      	mov	r0, r1
 800529c:	f001 fc5a 	bl	8006b54 <GUI_MEMDEV_Create>
 80052a0:	4b0c      	ldr	r3, [pc, #48]	; (80052d4 <main+0x3ac>)
 80052a2:	6018      	str	r0, [r3, #0]
 80052a4:	e02e      	b.n	8005304 <main+0x3dc>
 80052a6:	bf00      	nop
 80052a8:	2001928c 	.word	0x2001928c
 80052ac:	200193bc 	.word	0x200193bc
 80052b0:	40021800 	.word	0x40021800
 80052b4:	200194c8 	.word	0x200194c8
 80052b8:	40020400 	.word	0x40020400
 80052bc:	20303e5d 	.word	0x20303e5d
 80052c0:	40005400 	.word	0x40005400
 80052c4:	0f000001 	.word	0x0f000001
 80052c8:	200194ec 	.word	0x200194ec
 80052cc:	20019578 	.word	0x20019578
 80052d0:	0800e2e4 	.word	0x0800e2e4
 80052d4:	200192d8 	.word	0x200192d8
 80052d8:	40023800 	.word	0x40023800
 80052dc:	2001935c 	.word	0x2001935c
 80052e0:	40012200 	.word	0x40012200
 80052e4:	40000400 	.word	0x40000400
 80052e8:	20019288 	.word	0x20019288
 80052ec:	40007c00 	.word	0x40007c00
 80052f0:	40002800 	.word	0x40002800
 80052f4:	00010101 	.word	0x00010101
 80052f8:	200190a8 	.word	0x200190a8
 80052fc:	200190ac 	.word	0x200190ac
 8005300:	200190b0 	.word	0x200190b0
	  GUI_MEMDEV_Select(hMem2);
 8005304:	f001 fc2e 	bl	8006b64 <GUI_MEMDEV_Select>
	  GUI_Clear();
 8005308:	f004 fb1e 	bl	8009948 <GUI_Clear>
	  GUI_SetFont(&GUI_Font24B_ASCII);
 800530c:	48e2      	ldr	r0, [pc, #904]	; (8005698 <main+0x770>)
 800530e:	f003 fdff 	bl	8008f10 <GUI_SetFont>
	  GUI_SetTextMode(GUI_TM_TRANS);
 8005312:	2002      	movs	r0, #2
 8005314:	f003 fdf2 	bl	8008efc <GUI_SetTextMode>
	  GUI_DispStringHCenterAt("SEIKO", 136, 80);
 8005318:	2250      	movs	r2, #80	; 0x50
 800531a:	2188      	movs	r1, #136	; 0x88
 800531c:	48df      	ldr	r0, [pc, #892]	; (800569c <main+0x774>)
 800531e:	f004 f943 	bl	80095a8 <GUI_DispStringHCenterAt>
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8005322:	a922      	add	r1, sp, #136	; 0x88
 8005324:	2200      	movs	r2, #0
 8005326:	4630      	mov	r0, r6
 8005328:	f7fd fdb0 	bl	8002e8c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800532c:	a91b      	add	r1, sp, #108	; 0x6c
 800532e:	2200      	movs	r2, #0
 8005330:	4630      	mov	r0, r6
 8005332:	f7fd fe7b 	bl	800302c <HAL_RTC_GetDate>
	sprintf((char*)time, "%02d:%02d:%02d\r",gTime.Hours, gTime.Minutes, gTime.Seconds);
 8005336:	f89d 508a 	ldrb.w	r5, [sp, #138]	; 0x8a
 800533a:	f89d 3089 	ldrb.w	r3, [sp, #137]	; 0x89
 800533e:	4639      	mov	r1, r7
 8005340:	f89d 2088 	ldrb.w	r2, [sp, #136]	; 0x88
 8005344:	a81e      	add	r0, sp, #120	; 0x78
 8005346:	9500      	str	r5, [sp, #0]
 8005348:	f007 fad4 	bl	800c8f4 <siprintf>
	EDIT_SetText(WM_GetDialogItem(hWin,ID_EDIT_0), time);
 800534c:	f640 0102 	movw	r1, #2050	; 0x802
 8005350:	f8da 0000 	ldr.w	r0, [sl]
 8005354:	f000 fcab 	bl	8005cae <WM_GetDialogItem>
 8005358:	a91e      	add	r1, sp, #120	; 0x78
 800535a:	f000 fbfe 	bl	8005b5a <EDIT_SetText>
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800535e:	a922      	add	r1, sp, #136	; 0x88
 8005360:	2200      	movs	r2, #0
 8005362:	4630      	mov	r0, r6
		return gTime.Hours;
 8005364:	f89d 5088 	ldrb.w	r5, [sp, #136]	; 0x88
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8005368:	f7fd fd90 	bl	8002e8c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800536c:	a91b      	add	r1, sp, #108	; 0x6c
 800536e:	2200      	movs	r2, #0
 8005370:	4630      	mov	r0, r6
 8005372:	f7fd fe5b 	bl	800302c <HAL_RTC_GetDate>
	sprintf((char*)time, "%02d:%02d:%02d\r",gTime.Hours, gTime.Minutes, gTime.Seconds);
 8005376:	f89d 008a 	ldrb.w	r0, [sp, #138]	; 0x8a
 800537a:	f89d 3089 	ldrb.w	r3, [sp, #137]	; 0x89
 800537e:	4639      	mov	r1, r7
 8005380:	f89d 2088 	ldrb.w	r2, [sp, #136]	; 0x88
 8005384:	9000      	str	r0, [sp, #0]
 8005386:	a81e      	add	r0, sp, #120	; 0x78
 8005388:	f007 fab4 	bl	800c8f4 <siprintf>
	EDIT_SetText(WM_GetDialogItem(hWin,ID_EDIT_0), time);
 800538c:	f640 0102 	movw	r1, #2050	; 0x802
 8005390:	f8da 0000 	ldr.w	r0, [sl]
 8005394:	f000 fc8b 	bl	8005cae <WM_GetDialogItem>
 8005398:	a91e      	add	r1, sp, #120	; 0x78
 800539a:	f000 fbde 	bl	8005b5a <EDIT_SetText>
		return gTime.Minutes;
 800539e:	f89d 3089 	ldrb.w	r3, [sp, #137]	; 0x89
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80053a2:	a922      	add	r1, sp, #136	; 0x88
 80053a4:	2200      	movs	r2, #0
	  angle = 30 * (get_time(HOURS_TYPE)) + (get_time(MINUTES_TYPE)/2) + (get_time(SECONDS_TYPE)/30);
 80053a6:	105b      	asrs	r3, r3, #1
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80053a8:	4630      	mov	r0, r6
	  angle = 30 * (get_time(HOURS_TYPE)) + (get_time(MINUTES_TYPE)/2) + (get_time(SECONDS_TYPE)/30);
 80053aa:	fb14 3405 	smlabb	r4, r4, r5, r3
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80053ae:	f7fd fd6d 	bl	8002e8c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 80053b2:	a91b      	add	r1, sp, #108	; 0x6c
 80053b4:	2200      	movs	r2, #0
 80053b6:	4630      	mov	r0, r6
 80053b8:	f7fd fe38 	bl	800302c <HAL_RTC_GetDate>
	sprintf((char*)time, "%02d:%02d:%02d\r",gTime.Hours, gTime.Minutes, gTime.Seconds);
 80053bc:	f89d 508a 	ldrb.w	r5, [sp, #138]	; 0x8a
 80053c0:	f89d 2088 	ldrb.w	r2, [sp, #136]	; 0x88
 80053c4:	4639      	mov	r1, r7
 80053c6:	f89d 3089 	ldrb.w	r3, [sp, #137]	; 0x89
 80053ca:	a81e      	add	r0, sp, #120	; 0x78
 80053cc:	9500      	str	r5, [sp, #0]
	  angle = 6 * (get_time(MINUTES_TYPE)) + (get_time(SECONDS_TYPE)/10);
 80053ce:	2506      	movs	r5, #6
	sprintf((char*)time, "%02d:%02d:%02d\r",gTime.Hours, gTime.Minutes, gTime.Seconds);
 80053d0:	f007 fa90 	bl	800c8f4 <siprintf>
	EDIT_SetText(WM_GetDialogItem(hWin,ID_EDIT_0), time);
 80053d4:	f640 0102 	movw	r1, #2050	; 0x802
 80053d8:	f8da 0000 	ldr.w	r0, [sl]
 80053dc:	f000 fc67 	bl	8005cae <WM_GetDialogItem>
 80053e0:	a91e      	add	r1, sp, #120	; 0x78
 80053e2:	f000 fbba 	bl	8005b5a <EDIT_SetText>
	return gTime.Seconds;
 80053e6:	f89d 008a 	ldrb.w	r0, [sp, #138]	; 0x8a
	  angle = 30 * (get_time(HOURS_TYPE)) + (get_time(MINUTES_TYPE)/2) + (get_time(SECONDS_TYPE)/30);
 80053ea:	4bad      	ldr	r3, [pc, #692]	; (80056a0 <main+0x778>)
 80053ec:	fba3 2000 	umull	r2, r0, r3, r0
 80053f0:	eb04 1010 	add.w	r0, r4, r0, lsr #4
	  angle=(angle/57.29577951) ; //Convert degrees to radians
 80053f4:	ee07 0a90 	vmov	s15, r0
 80053f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053fc:	ee17 0a90 	vmov	r0, s15
 8005400:	f7fb f8c2 	bl	8000588 <__aeabi_f2d>
 8005404:	a3a2      	add	r3, pc, #648	; (adr r3, 8005690 <main+0x768>)
 8005406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540a:	f7fb fa3f 	bl	800088c <__aeabi_ddiv>
 800540e:	f7fb fbd5 	bl	8000bbc <__aeabi_d2f>
 8005412:	f8cb 0000 	str.w	r0, [fp]
	  x_coordinate=(136+(sin(angle)*50));
 8005416:	f7fb f8b7 	bl	8000588 <__aeabi_f2d>
 800541a:	ec41 0b10 	vmov	d0, r0, r1
 800541e:	ec41 0b18 	vmov	d8, r0, r1
 8005422:	f007 ff91 	bl	800d348 <sin>
 8005426:	2200      	movs	r2, #0
 8005428:	4b9e      	ldr	r3, [pc, #632]	; (80056a4 <main+0x77c>)
 800542a:	ec51 0b10 	vmov	r0, r1, d0
 800542e:	f7fb f903 	bl	8000638 <__aeabi_dmul>
 8005432:	2200      	movs	r2, #0
 8005434:	4b9c      	ldr	r3, [pc, #624]	; (80056a8 <main+0x780>)
 8005436:	f7fa ff49 	bl	80002cc <__adddf3>
 800543a:	f7fb fb97 	bl	8000b6c <__aeabi_d2iz>
	  y_coordinate=(136-(cos(angle)*50));
 800543e:	eeb0 0a48 	vmov.f32	s0, s16
 8005442:	eef0 0a68 	vmov.f32	s1, s17
	  x_coordinate=(136+(sin(angle)*50));
 8005446:	f8c9 0000 	str.w	r0, [r9]
	  y_coordinate=(136-(cos(angle)*50));
 800544a:	f007 feb5 	bl	800d1b8 <cos>
 800544e:	2200      	movs	r2, #0
 8005450:	4b94      	ldr	r3, [pc, #592]	; (80056a4 <main+0x77c>)
 8005452:	ec51 0b10 	vmov	r0, r1, d0
 8005456:	f7fb f8ef 	bl	8000638 <__aeabi_dmul>
 800545a:	4602      	mov	r2, r0
 800545c:	460b      	mov	r3, r1
 800545e:	2000      	movs	r0, #0
 8005460:	4991      	ldr	r1, [pc, #580]	; (80056a8 <main+0x780>)
 8005462:	f7fa ff31 	bl	80002c8 <__aeabi_dsub>
 8005466:	f7fb fb81 	bl	8000b6c <__aeabi_d2iz>
 800546a:	f8c8 0000 	str.w	r0, [r8]
	  GUI_SetColor(GUI_BLACK);
 800546e:	2000      	movs	r0, #0
 8005470:	f003 fd5c 	bl	8008f2c <GUI_SetColor>
	  GUI_SetPenSize( 10 );
 8005474:	200a      	movs	r0, #10
 8005476:	f003 fdc3 	bl	8009000 <GUI_SetPenSize>
	  GUI_DrawLine(136, 136, x_coordinate, y_coordinate);//sat
 800547a:	2188      	movs	r1, #136	; 0x88
 800547c:	f8d8 3000 	ldr.w	r3, [r8]
 8005480:	4608      	mov	r0, r1
 8005482:	f8d9 2000 	ldr.w	r2, [r9]
 8005486:	f004 f871 	bl	800956c <GUI_DrawLine>
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800548a:	a922      	add	r1, sp, #136	; 0x88
 800548c:	2200      	movs	r2, #0
 800548e:	4630      	mov	r0, r6
 8005490:	f7fd fcfc 	bl	8002e8c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8005494:	a91b      	add	r1, sp, #108	; 0x6c
 8005496:	2200      	movs	r2, #0
 8005498:	4630      	mov	r0, r6
 800549a:	f7fd fdc7 	bl	800302c <HAL_RTC_GetDate>
	sprintf((char*)time, "%02d:%02d:%02d\r",gTime.Hours, gTime.Minutes, gTime.Seconds);
 800549e:	f89d 408a 	ldrb.w	r4, [sp, #138]	; 0x8a
 80054a2:	f89d 3089 	ldrb.w	r3, [sp, #137]	; 0x89
 80054a6:	4639      	mov	r1, r7
 80054a8:	f89d 2088 	ldrb.w	r2, [sp, #136]	; 0x88
 80054ac:	a81e      	add	r0, sp, #120	; 0x78
 80054ae:	9400      	str	r4, [sp, #0]
 80054b0:	f007 fa20 	bl	800c8f4 <siprintf>
	EDIT_SetText(WM_GetDialogItem(hWin,ID_EDIT_0), time);
 80054b4:	f640 0102 	movw	r1, #2050	; 0x802
 80054b8:	f8da 0000 	ldr.w	r0, [sl]
 80054bc:	f000 fbf7 	bl	8005cae <WM_GetDialogItem>
 80054c0:	a91e      	add	r1, sp, #120	; 0x78
 80054c2:	f000 fb4a 	bl	8005b5a <EDIT_SetText>
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80054c6:	a922      	add	r1, sp, #136	; 0x88
 80054c8:	2200      	movs	r2, #0
 80054ca:	4630      	mov	r0, r6
		return gTime.Minutes;
 80054cc:	f89d 4089 	ldrb.w	r4, [sp, #137]	; 0x89
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80054d0:	f7fd fcdc 	bl	8002e8c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 80054d4:	a91b      	add	r1, sp, #108	; 0x6c
 80054d6:	2200      	movs	r2, #0
 80054d8:	4630      	mov	r0, r6
 80054da:	f7fd fda7 	bl	800302c <HAL_RTC_GetDate>
	sprintf((char*)time, "%02d:%02d:%02d\r",gTime.Hours, gTime.Minutes, gTime.Seconds);
 80054de:	f89d 008a 	ldrb.w	r0, [sp, #138]	; 0x8a
 80054e2:	f89d 2088 	ldrb.w	r2, [sp, #136]	; 0x88
 80054e6:	4639      	mov	r1, r7
 80054e8:	f89d 3089 	ldrb.w	r3, [sp, #137]	; 0x89
 80054ec:	9000      	str	r0, [sp, #0]
 80054ee:	a81e      	add	r0, sp, #120	; 0x78
 80054f0:	f007 fa00 	bl	800c8f4 <siprintf>
	EDIT_SetText(WM_GetDialogItem(hWin,ID_EDIT_0), time);
 80054f4:	f640 0102 	movw	r1, #2050	; 0x802
 80054f8:	f8da 0000 	ldr.w	r0, [sl]
 80054fc:	f000 fbd7 	bl	8005cae <WM_GetDialogItem>
 8005500:	a91e      	add	r1, sp, #120	; 0x78
 8005502:	f000 fb2a 	bl	8005b5a <EDIT_SetText>
	return gTime.Seconds;
 8005506:	f89d 008a 	ldrb.w	r0, [sp, #138]	; 0x8a
	  angle = 6 * (get_time(MINUTES_TYPE)) + (get_time(SECONDS_TYPE)/10);
 800550a:	4b68      	ldr	r3, [pc, #416]	; (80056ac <main+0x784>)
 800550c:	fba3 2000 	umull	r2, r0, r3, r0
 8005510:	08c0      	lsrs	r0, r0, #3
 8005512:	fb15 0004 	smlabb	r0, r5, r4, r0
	  angle=(angle/57.29577951) ; //Convert degrees to radians
 8005516:	ee07 0a90 	vmov	s15, r0
 800551a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800551e:	ee17 0a90 	vmov	r0, s15
 8005522:	f7fb f831 	bl	8000588 <__aeabi_f2d>
 8005526:	a35a      	add	r3, pc, #360	; (adr r3, 8005690 <main+0x768>)
 8005528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552c:	f7fb f9ae 	bl	800088c <__aeabi_ddiv>
 8005530:	f7fb fb44 	bl	8000bbc <__aeabi_d2f>
 8005534:	f8cb 0000 	str.w	r0, [fp]
	  x_coordinate=(136+(sin(angle)*80));
 8005538:	f7fb f826 	bl	8000588 <__aeabi_f2d>
 800553c:	ec41 0b10 	vmov	d0, r0, r1
 8005540:	ec41 0b18 	vmov	d8, r0, r1
 8005544:	f007 ff00 	bl	800d348 <sin>
 8005548:	2200      	movs	r2, #0
 800554a:	4b59      	ldr	r3, [pc, #356]	; (80056b0 <main+0x788>)
 800554c:	ec51 0b10 	vmov	r0, r1, d0
 8005550:	f7fb f872 	bl	8000638 <__aeabi_dmul>
 8005554:	2200      	movs	r2, #0
 8005556:	4b54      	ldr	r3, [pc, #336]	; (80056a8 <main+0x780>)
 8005558:	f7fa feb8 	bl	80002cc <__adddf3>
 800555c:	f7fb fb06 	bl	8000b6c <__aeabi_d2iz>
	  y_coordinate=(136-(cos(angle)*80));
 8005560:	eeb0 0a48 	vmov.f32	s0, s16
 8005564:	eef0 0a68 	vmov.f32	s1, s17
	  x_coordinate=(136+(sin(angle)*80));
 8005568:	f8c9 0000 	str.w	r0, [r9]
	  y_coordinate=(136-(cos(angle)*80));
 800556c:	f007 fe24 	bl	800d1b8 <cos>
 8005570:	2200      	movs	r2, #0
 8005572:	4b4f      	ldr	r3, [pc, #316]	; (80056b0 <main+0x788>)
 8005574:	ec51 0b10 	vmov	r0, r1, d0
 8005578:	f7fb f85e 	bl	8000638 <__aeabi_dmul>
 800557c:	4602      	mov	r2, r0
 800557e:	460b      	mov	r3, r1
 8005580:	2000      	movs	r0, #0
 8005582:	4949      	ldr	r1, [pc, #292]	; (80056a8 <main+0x780>)
 8005584:	f7fa fea0 	bl	80002c8 <__aeabi_dsub>
 8005588:	f7fb faf0 	bl	8000b6c <__aeabi_d2iz>
 800558c:	f8c8 0000 	str.w	r0, [r8]
	  GUI_SetPenSize( 6 );
 8005590:	4628      	mov	r0, r5
 8005592:	f003 fd35 	bl	8009000 <GUI_SetPenSize>
	  GUI_DrawLine(136, 136, x_coordinate, y_coordinate);//minut
 8005596:	2188      	movs	r1, #136	; 0x88
 8005598:	f8d8 3000 	ldr.w	r3, [r8]
 800559c:	4608      	mov	r0, r1
 800559e:	f8d9 2000 	ldr.w	r2, [r9]
 80055a2:	f003 ffe3 	bl	800956c <GUI_DrawLine>
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80055a6:	a922      	add	r1, sp, #136	; 0x88
 80055a8:	2200      	movs	r2, #0
 80055aa:	4630      	mov	r0, r6
 80055ac:	f7fd fc6e 	bl	8002e8c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 80055b0:	a91b      	add	r1, sp, #108	; 0x6c
 80055b2:	2200      	movs	r2, #0
 80055b4:	4630      	mov	r0, r6
 80055b6:	f7fd fd39 	bl	800302c <HAL_RTC_GetDate>
	sprintf((char*)time, "%02d:%02d:%02d\r",gTime.Hours, gTime.Minutes, gTime.Seconds);
 80055ba:	f89d 408a 	ldrb.w	r4, [sp, #138]	; 0x8a
 80055be:	f89d 3089 	ldrb.w	r3, [sp, #137]	; 0x89
 80055c2:	4639      	mov	r1, r7
 80055c4:	f89d 2088 	ldrb.w	r2, [sp, #136]	; 0x88
 80055c8:	a81e      	add	r0, sp, #120	; 0x78
 80055ca:	9400      	str	r4, [sp, #0]
 80055cc:	f007 f992 	bl	800c8f4 <siprintf>
	EDIT_SetText(WM_GetDialogItem(hWin,ID_EDIT_0), time);
 80055d0:	f640 0102 	movw	r1, #2050	; 0x802
 80055d4:	f8da 0000 	ldr.w	r0, [sl]
 80055d8:	f000 fb69 	bl	8005cae <WM_GetDialogItem>
 80055dc:	a91e      	add	r1, sp, #120	; 0x78
 80055de:	f000 fabc 	bl	8005b5a <EDIT_SetText>
	  angle = 6 * (get_time(SECONDS_TYPE));
 80055e2:	f89d 008a 	ldrb.w	r0, [sp, #138]	; 0x8a
 80055e6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80055ea:	0040      	lsls	r0, r0, #1
	  angle=(angle/57.29577951) ; //Convert degrees to radians
 80055ec:	ee07 0a90 	vmov	s15, r0
 80055f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055f4:	ee17 0a90 	vmov	r0, s15
 80055f8:	f7fa ffc6 	bl	8000588 <__aeabi_f2d>
 80055fc:	a324      	add	r3, pc, #144	; (adr r3, 8005690 <main+0x768>)
 80055fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005602:	f7fb f943 	bl	800088c <__aeabi_ddiv>
 8005606:	f7fb fad9 	bl	8000bbc <__aeabi_d2f>
 800560a:	f8cb 0000 	str.w	r0, [fp]
	  x_coordinate=(136+(sin(angle)*90));
 800560e:	f7fa ffbb 	bl	8000588 <__aeabi_f2d>
 8005612:	ec41 0b10 	vmov	d0, r0, r1
 8005616:	ec41 0b18 	vmov	d8, r0, r1
 800561a:	f007 fe95 	bl	800d348 <sin>
 800561e:	2200      	movs	r2, #0
 8005620:	4b24      	ldr	r3, [pc, #144]	; (80056b4 <main+0x78c>)
 8005622:	ec51 0b10 	vmov	r0, r1, d0
 8005626:	f7fb f807 	bl	8000638 <__aeabi_dmul>
 800562a:	2200      	movs	r2, #0
 800562c:	4b1e      	ldr	r3, [pc, #120]	; (80056a8 <main+0x780>)
 800562e:	f7fa fe4d 	bl	80002cc <__adddf3>
 8005632:	f7fb fa9b 	bl	8000b6c <__aeabi_d2iz>
	  y_coordinate=(136-(cos(angle)*90));
 8005636:	eeb0 0a48 	vmov.f32	s0, s16
 800563a:	eef0 0a68 	vmov.f32	s1, s17
	  x_coordinate=(136+(sin(angle)*90));
 800563e:	f8c9 0000 	str.w	r0, [r9]
	  y_coordinate=(136-(cos(angle)*90));
 8005642:	f007 fdb9 	bl	800d1b8 <cos>
 8005646:	2200      	movs	r2, #0
 8005648:	4b1a      	ldr	r3, [pc, #104]	; (80056b4 <main+0x78c>)
 800564a:	ec51 0b10 	vmov	r0, r1, d0
 800564e:	f7fa fff3 	bl	8000638 <__aeabi_dmul>
 8005652:	4602      	mov	r2, r0
 8005654:	460b      	mov	r3, r1
 8005656:	2000      	movs	r0, #0
 8005658:	4913      	ldr	r1, [pc, #76]	; (80056a8 <main+0x780>)
 800565a:	f7fa fe35 	bl	80002c8 <__aeabi_dsub>
 800565e:	f7fb fa85 	bl	8000b6c <__aeabi_d2iz>
 8005662:	f8c8 0000 	str.w	r0, [r8]
	  GUI_SetColor(GUI_RED);
 8005666:	20ff      	movs	r0, #255	; 0xff
 8005668:	f003 fc60 	bl	8008f2c <GUI_SetColor>
	  GUI_SetPenSize( 4 );
 800566c:	2004      	movs	r0, #4
 800566e:	f003 fcc7 	bl	8009000 <GUI_SetPenSize>
	  GUI_DrawLine(136, 136, x_coordinate, y_coordinate);//sekund
 8005672:	2188      	movs	r1, #136	; 0x88
 8005674:	f8d8 3000 	ldr.w	r3, [r8]
 8005678:	4608      	mov	r0, r1
 800567a:	f8d9 2000 	ldr.w	r2, [r9]
 800567e:	f003 ff75 	bl	800956c <GUI_DrawLine>
	  GUI_MEMDEV_CopyToLCD(hMem2);
 8005682:	4b0d      	ldr	r3, [pc, #52]	; (80056b8 <main+0x790>)
 8005684:	461c      	mov	r4, r3
 8005686:	6818      	ldr	r0, [r3, #0]
 8005688:	f001 fae4 	bl	8006c54 <GUI_MEMDEV_CopyToLCD>
	  GUI_MEMDEV_Delete(hMem2);
 800568c:	6820      	ldr	r0, [r4, #0]
 800568e:	e015      	b.n	80056bc <main+0x794>
 8005690:	1a5d2372 	.word	0x1a5d2372
 8005694:	404ca5dc 	.word	0x404ca5dc
 8005698:	0800f194 	.word	0x0800f194
 800569c:	0800e2f4 	.word	0x0800e2f4
 80056a0:	88888889 	.word	0x88888889
 80056a4:	40490000 	.word	0x40490000
 80056a8:	40610000 	.word	0x40610000
 80056ac:	cccccccd 	.word	0xcccccccd
 80056b0:	40540000 	.word	0x40540000
 80056b4:	40568000 	.word	0x40568000
 80056b8:	200192d8 	.word	0x200192d8
 80056bc:	f001 f9ec 	bl	8006a98 <GUI_MEMDEV_Delete>
 80056c0:	e5e7      	b.n	8005292 <main+0x36a>
 80056c2:	bf00      	nop

080056c4 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop

080056c8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80056c8:	4b0a      	ldr	r3, [pc, #40]	; (80056f4 <HAL_MspInit+0x2c>)
{
 80056ca:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 80056cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056ce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80056d2:	641a      	str	r2, [r3, #64]	; 0x40
 80056d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056d6:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80056da:	9200      	str	r2, [sp, #0]
 80056dc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056e4:	645a      	str	r2, [r3, #68]	; 0x44
 80056e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056ec:	9301      	str	r3, [sp, #4]
 80056ee:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80056f0:	b002      	add	sp, #8
 80056f2:	4770      	bx	lr
 80056f4:	40023800 	.word	0x40023800

080056f8 <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC3)
 80056f8:	4b27      	ldr	r3, [pc, #156]	; (8005798 <HAL_ADC_MspInit+0xa0>)
 80056fa:	6802      	ldr	r2, [r0, #0]
{
 80056fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hadc->Instance==ADC3)
 80056fe:	429a      	cmp	r2, r3
{
 8005700:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005702:	f04f 0400 	mov.w	r4, #0
 8005706:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800570a:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800570e:	9407      	str	r4, [sp, #28]
  if(hadc->Instance==ADC3)
 8005710:	d001      	beq.n	8005716 <HAL_ADC_MspInit+0x1e>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8005712:	b009      	add	sp, #36	; 0x24
 8005714:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC3_CLK_ENABLE();
 8005716:	f503 338b 	add.w	r3, r3, #71168	; 0x11600
 800571a:	4606      	mov	r6, r0
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800571c:	f44f 7040 	mov.w	r0, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005720:	2503      	movs	r5, #3
    __HAL_RCC_ADC3_CLK_ENABLE();
 8005722:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005724:	a903      	add	r1, sp, #12
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8005726:	f44f 6780 	mov.w	r7, #1024	; 0x400
    __HAL_RCC_ADC3_CLK_ENABLE();
 800572a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800572e:	645a      	str	r2, [r3, #68]	; 0x44
 8005730:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005732:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8005736:	9201      	str	r2, [sp, #4]
 8005738:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800573a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800573c:	f042 0220 	orr.w	r2, r2, #32
 8005740:	631a      	str	r2, [r3, #48]	; 0x30
 8005742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005744:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005746:	f003 0320 	and.w	r3, r3, #32
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800574a:	4814      	ldr	r0, [pc, #80]	; (800579c <HAL_ADC_MspInit+0xa4>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800574c:	9504      	str	r5, [sp, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800574e:	9302      	str	r3, [sp, #8]
    hdma_adc3.Instance = DMA2_Stream0;
 8005750:	4d13      	ldr	r5, [pc, #76]	; (80057a0 <HAL_ADC_MspInit+0xa8>)
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005752:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005754:	f7fc f952 	bl	80019fc <HAL_GPIO_Init>
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8005758:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    hdma_adc3.Instance = DMA2_Stream0;
 800575c:	f8df c044 	ldr.w	ip, [pc, #68]	; 80057a4 <HAL_ADC_MspInit+0xac>
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005760:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005764:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8005768:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800576c:	60ac      	str	r4, [r5, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800576e:	60ec      	str	r4, [r5, #12]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8005770:	e9c5 c000 	strd	ip, r0, [r5]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8005774:	4628      	mov	r0, r5
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005776:	e9c5 4408 	strd	r4, r4, [r5, #32]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800577a:	e9c5 7104 	strd	r7, r1, [r5, #16]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800577e:	e9c5 2306 	strd	r2, r3, [r5, #24]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8005782:	f7fb ff27 	bl	80015d4 <HAL_DMA_Init>
 8005786:	b918      	cbnz	r0, 8005790 <HAL_ADC_MspInit+0x98>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8005788:	63b5      	str	r5, [r6, #56]	; 0x38
 800578a:	63ae      	str	r6, [r5, #56]	; 0x38
}
 800578c:	b009      	add	sp, #36	; 0x24
 800578e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8005790:	f7ff ff98 	bl	80056c4 <Error_Handler>
 8005794:	e7f8      	b.n	8005788 <HAL_ADC_MspInit+0x90>
 8005796:	bf00      	nop
 8005798:	40012200 	.word	0x40012200
 800579c:	40021400 	.word	0x40021400
 80057a0:	200192f4 	.word	0x200192f4
 80057a4:	40026410 	.word	0x40026410

080057a8 <HAL_I2C_MspInit>:
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C1)
 80057a8:	6801      	ldr	r1, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057aa:	2300      	movs	r3, #0
  if(hi2c->Instance==I2C1)
 80057ac:	4a17      	ldr	r2, [pc, #92]	; (800580c <HAL_I2C_MspInit+0x64>)
{
 80057ae:	b570      	push	{r4, r5, r6, lr}
  if(hi2c->Instance==I2C1)
 80057b0:	4291      	cmp	r1, r2
{
 80057b2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057b4:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80057b8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80057bc:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 80057be:	d001      	beq.n	80057c4 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80057c0:	b008      	add	sp, #32
 80057c2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057c4:	4c12      	ldr	r4, [pc, #72]	; (8005810 <HAL_I2C_MspInit+0x68>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80057c6:	2212      	movs	r2, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80057c8:	2001      	movs	r0, #1
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80057ca:	26c0      	movs	r6, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057ce:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057d0:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057d2:	f043 0302 	orr.w	r3, r3, #2
 80057d6:	6323      	str	r3, [r4, #48]	; 0x30
 80057d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80057da:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80057dc:	2204      	movs	r2, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057de:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80057e2:	9005      	str	r0, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057e4:	480b      	ldr	r0, [pc, #44]	; (8005814 <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057e6:	9301      	str	r3, [sp, #4]
 80057e8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80057ea:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80057ec:	e9cd 5206 	strd	r5, r2, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057f0:	f7fc f904 	bl	80019fc <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80057f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80057fa:	6423      	str	r3, [r4, #64]	; 0x40
 80057fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005802:	9302      	str	r3, [sp, #8]
 8005804:	9b02      	ldr	r3, [sp, #8]
}
 8005806:	b008      	add	sp, #32
 8005808:	bd70      	pop	{r4, r5, r6, pc}
 800580a:	bf00      	nop
 800580c:	40005400 	.word	0x40005400
 8005810:	40023800 	.word	0x40023800
 8005814:	40020400 	.word	0x40020400

08005818 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8005818:	6802      	ldr	r2, [r0, #0]
 800581a:	4b04      	ldr	r3, [pc, #16]	; (800582c <HAL_RTC_MspInit+0x14>)
 800581c:	429a      	cmp	r2, r3
 800581e:	d104      	bne.n	800582a <HAL_RTC_MspInit+0x12>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005820:	4a03      	ldr	r2, [pc, #12]	; (8005830 <HAL_RTC_MspInit+0x18>)
 8005822:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8005824:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005828:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800582a:	4770      	bx	lr
 800582c:	40002800 	.word	0x40002800
 8005830:	40023800 	.word	0x40023800

08005834 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM3)
 8005834:	6802      	ldr	r2, [r0, #0]
 8005836:	4b09      	ldr	r3, [pc, #36]	; (800585c <HAL_TIM_Base_MspInit+0x28>)
 8005838:	429a      	cmp	r2, r3
 800583a:	d000      	beq.n	800583e <HAL_TIM_Base_MspInit+0xa>
 800583c:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800583e:	f503 330d 	add.w	r3, r3, #144384	; 0x23400
{
 8005842:	b082      	sub	sp, #8
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005844:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005846:	f042 0202 	orr.w	r2, r2, #2
 800584a:	641a      	str	r2, [r3, #64]	; 0x40
 800584c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584e:	f003 0302 	and.w	r3, r3, #2
 8005852:	9301      	str	r3, [sp, #4]
 8005854:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005856:	b002      	add	sp, #8
 8005858:	4770      	bx	lr
 800585a:	bf00      	nop
 800585c:	40000400 	.word	0x40000400

08005860 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM3)
 8005860:	6801      	ldr	r1, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005862:	2300      	movs	r3, #0
  if(htim->Instance==TIM3)
 8005864:	4a0f      	ldr	r2, [pc, #60]	; (80058a4 <HAL_TIM_MspPostInit+0x44>)
{
 8005866:	b530      	push	{r4, r5, lr}
  if(htim->Instance==TIM3)
 8005868:	4291      	cmp	r1, r2
{
 800586a:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800586c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8005870:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8005874:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM3)
 8005876:	d001      	beq.n	800587c <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005878:	b007      	add	sp, #28
 800587a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800587c:	4b0a      	ldr	r3, [pc, #40]	; (80058a8 <HAL_TIM_MspPostInit+0x48>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800587e:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005880:	2510      	movs	r5, #16
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005882:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005884:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005886:	4809      	ldr	r0, [pc, #36]	; (80058ac <HAL_TIM_MspPostInit+0x4c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005888:	4322      	orrs	r2, r4
 800588a:	631a      	str	r2, [r3, #48]	; 0x30
 800588c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800588e:	9501      	str	r5, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005890:	4023      	ands	r3, r4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005892:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005894:	9405      	str	r4, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005896:	9300      	str	r3, [sp, #0]
 8005898:	9b00      	ldr	r3, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800589a:	f7fc f8af 	bl	80019fc <HAL_GPIO_Init>
}
 800589e:	b007      	add	sp, #28
 80058a0:	bd30      	pop	{r4, r5, pc}
 80058a2:	bf00      	nop
 80058a4:	40000400 	.word	0x40000400
 80058a8:	40023800 	.word	0x40023800
 80058ac:	40020400 	.word	0x40020400

080058b0 <HAL_UART_MspInit>:
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==UART8)
 80058b0:	4b36      	ldr	r3, [pc, #216]	; (800598c <HAL_UART_MspInit+0xdc>)
 80058b2:	6802      	ldr	r2, [r0, #0]
{
 80058b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(huart->Instance==UART8)
 80058b6:	429a      	cmp	r2, r3
{
 80058b8:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058ba:	f04f 0400 	mov.w	r4, #0
 80058be:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80058c2:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80058c6:	9407      	str	r4, [sp, #28]
  if(huart->Instance==UART8)
 80058c8:	d001      	beq.n	80058ce <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }

}
 80058ca:	b009      	add	sp, #36	; 0x24
 80058cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_UART8_CLK_ENABLE();
 80058ce:	f503 33de 	add.w	r3, r3, #113664	; 0x1bc00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058d2:	2502      	movs	r5, #2
 80058d4:	4606      	mov	r6, r0
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80058d6:	2003      	movs	r0, #3
    __HAL_RCC_UART8_CLK_ENABLE();
 80058d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80058da:	a903      	add	r1, sp, #12
    __HAL_RCC_UART8_CLK_ENABLE();
 80058dc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80058e0:	641a      	str	r2, [r3, #64]	; 0x40
 80058e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058e4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80058e8:	9201      	str	r2, [sp, #4]
 80058ea:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80058ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058ee:	f042 0210 	orr.w	r2, r2, #16
 80058f2:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80058f4:	2208      	movs	r2, #8
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80058f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80058f8:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80058fa:	f003 0310 	and.w	r3, r3, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058fe:	9006      	str	r0, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005900:	9504      	str	r5, [sp, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005902:	9302      	str	r3, [sp, #8]
    hdma_uart8_rx.Instance = DMA1_Stream6;
 8005904:	4d22      	ldr	r5, [pc, #136]	; (8005990 <HAL_UART_MspInit+0xe0>)
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005906:	4823      	ldr	r0, [pc, #140]	; (8005994 <HAL_UART_MspInit+0xe4>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005908:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800590a:	9207      	str	r2, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800590c:	f7fc f876 	bl	80019fc <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream6;
 8005910:	4921      	ldr	r1, [pc, #132]	; (8005998 <HAL_UART_MspInit+0xe8>)
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 8005912:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005916:	f44f 6380 	mov.w	r3, #1024	; 0x400
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 800591a:	4628      	mov	r0, r5
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800591c:	626c      	str	r4, [r5, #36]	; 0x24
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 800591e:	612b      	str	r3, [r5, #16]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005920:	e9c5 4402 	strd	r4, r4, [r5, #8]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005924:	e9c5 4405 	strd	r4, r4, [r5, #20]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005928:	e9c5 4407 	strd	r4, r4, [r5, #28]
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 800592c:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8005930:	f7fb fe50 	bl	80015d4 <HAL_DMA_Init>
 8005934:	bb18      	cbnz	r0, 800597e <HAL_UART_MspInit+0xce>
    hdma_uart8_tx.Instance = DMA1_Stream0;
 8005936:	4c19      	ldr	r4, [pc, #100]	; (800599c <HAL_UART_MspInit+0xec>)
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005938:	2300      	movs	r3, #0
    hdma_uart8_tx.Instance = DMA1_Stream0;
 800593a:	4819      	ldr	r0, [pc, #100]	; (80059a0 <HAL_UART_MspInit+0xf0>)
    hdma_uart8_tx.Init.Channel = DMA_CHANNEL_5;
 800593c:	f04f 6720 	mov.w	r7, #167772160	; 0xa000000
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005940:	2140      	movs	r1, #64	; 0x40
    hdma_uart8_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005942:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart8_tx.Instance = DMA1_Stream0;
 8005946:	6020      	str	r0, [r4, #0]
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 8005948:	4620      	mov	r0, r4
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 800594a:	6735      	str	r5, [r6, #112]	; 0x70
 800594c:	63ae      	str	r6, [r5, #56]	; 0x38
    hdma_uart8_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800594e:	6263      	str	r3, [r4, #36]	; 0x24
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005950:	e9c4 7101 	strd	r7, r1, [r4, #4]
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005954:	e9c4 3203 	strd	r3, r2, [r4, #12]
    hdma_uart8_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005958:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_uart8_tx.Init.Priority = DMA_PRIORITY_LOW;
 800595c:	e9c4 3307 	strd	r3, r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 8005960:	f7fb fe38 	bl	80015d4 <HAL_DMA_Init>
 8005964:	b970      	cbnz	r0, 8005984 <HAL_UART_MspInit+0xd4>
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8005966:	2200      	movs	r2, #0
    __HAL_LINKDMA(huart,hdmatx,hdma_uart8_tx);
 8005968:	66f4      	str	r4, [r6, #108]	; 0x6c
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 800596a:	2053      	movs	r0, #83	; 0x53
    __HAL_LINKDMA(huart,hdmatx,hdma_uart8_tx);
 800596c:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 800596e:	4611      	mov	r1, r2
 8005970:	f7fb fdd0 	bl	8001514 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8005974:	2053      	movs	r0, #83	; 0x53
 8005976:	f7fb fe03 	bl	8001580 <HAL_NVIC_EnableIRQ>
}
 800597a:	b009      	add	sp, #36	; 0x24
 800597c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 800597e:	f7ff fea1 	bl	80056c4 <Error_Handler>
 8005982:	e7d8      	b.n	8005936 <HAL_UART_MspInit+0x86>
      Error_Handler();
 8005984:	f7ff fe9e 	bl	80056c4 <Error_Handler>
 8005988:	e7ed      	b.n	8005966 <HAL_UART_MspInit+0xb6>
 800598a:	bf00      	nop
 800598c:	40007c00 	.word	0x40007c00
 8005990:	20019408 	.word	0x20019408
 8005994:	40021000 	.word	0x40021000
 8005998:	400260a0 	.word	0x400260a0
 800599c:	20019468 	.word	0x20019468
 80059a0:	40026010 	.word	0x40026010

080059a4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop

080059a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80059a8:	e7fe      	b.n	80059a8 <HardFault_Handler>
 80059aa:	bf00      	nop

080059ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80059ac:	e7fe      	b.n	80059ac <MemManage_Handler>
 80059ae:	bf00      	nop

080059b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80059b0:	e7fe      	b.n	80059b0 <BusFault_Handler>
 80059b2:	bf00      	nop

080059b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80059b4:	e7fe      	b.n	80059b4 <UsageFault_Handler>
 80059b6:	bf00      	nop

080059b8 <SVC_Handler>:
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop

080059bc <DebugMon_Handler>:
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop

080059c0 <PendSV_Handler>:
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop

080059c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80059c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80059c6:	f7fb faf9 	bl	8000fbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
HAL_SYSTICK_IRQHandler();
  /* USER CODE END SysTick_IRQn 1 */
}
 80059ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
HAL_SYSTICK_IRQHandler();
 80059ce:	f7fb bdfd 	b.w	80015cc <HAL_SYSTICK_IRQHandler>
 80059d2:	bf00      	nop

080059d4 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_tx);
 80059d4:	4801      	ldr	r0, [pc, #4]	; (80059dc <DMA1_Stream0_IRQHandler+0x8>)
 80059d6:	f7fb bf3b 	b.w	8001850 <HAL_DMA_IRQHandler>
 80059da:	bf00      	nop
 80059dc:	20019468 	.word	0x20019468

080059e0 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 80059e0:	4801      	ldr	r0, [pc, #4]	; (80059e8 <DMA1_Stream6_IRQHandler+0x8>)
 80059e2:	f7fb bf35 	b.w	8001850 <HAL_DMA_IRQHandler>
 80059e6:	bf00      	nop
 80059e8:	20019408 	.word	0x20019408

080059ec <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80059ec:	4801      	ldr	r0, [pc, #4]	; (80059f4 <DMA2_Stream0_IRQHandler+0x8>)
 80059ee:	f7fb bf2f 	b.w	8001850 <HAL_DMA_IRQHandler>
 80059f2:	bf00      	nop
 80059f4:	200192f4 	.word	0x200192f4

080059f8 <UART8_IRQHandler>:
void UART8_IRQHandler(void)
{
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 80059f8:	4801      	ldr	r0, [pc, #4]	; (8005a00 <UART8_IRQHandler+0x8>)
 80059fa:	f7fd bfdb 	b.w	80039b4 <HAL_UART_IRQHandler>
 80059fe:	bf00      	nop
 8005a00:	200194ec 	.word	0x200194ec

08005a04 <_sbrk>:
 8005a04:	4a0c      	ldr	r2, [pc, #48]	; (8005a38 <_sbrk+0x34>)
 8005a06:	b508      	push	{r3, lr}
 8005a08:	6813      	ldr	r3, [r2, #0]
 8005a0a:	b133      	cbz	r3, 8005a1a <_sbrk+0x16>
 8005a0c:	4418      	add	r0, r3
 8005a0e:	4669      	mov	r1, sp
 8005a10:	4288      	cmp	r0, r1
 8005a12:	d809      	bhi.n	8005a28 <_sbrk+0x24>
 8005a14:	6010      	str	r0, [r2, #0]
 8005a16:	4618      	mov	r0, r3
 8005a18:	bd08      	pop	{r3, pc}
 8005a1a:	4908      	ldr	r1, [pc, #32]	; (8005a3c <_sbrk+0x38>)
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	6011      	str	r1, [r2, #0]
 8005a20:	4669      	mov	r1, sp
 8005a22:	4418      	add	r0, r3
 8005a24:	4288      	cmp	r0, r1
 8005a26:	d9f5      	bls.n	8005a14 <_sbrk+0x10>
 8005a28:	f006 ff0e 	bl	800c848 <__errno>
 8005a2c:	220c      	movs	r2, #12
 8005a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a32:	6002      	str	r2, [r0, #0]
 8005a34:	4618      	mov	r0, r3
 8005a36:	bd08      	pop	{r3, pc}
 8005a38:	200190b4 	.word	0x200190b4
 8005a3c:	20019710 	.word	0x20019710

08005a40 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005a40:	4a03      	ldr	r2, [pc, #12]	; (8005a50 <SystemInit+0x10>)
 8005a42:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005a46:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005a4a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005a4e:	4770      	bx	lr
 8005a50:	e000ed00 	.word	0xe000ed00

08005a54 <Reset_Handler>:
 8005a54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005a8c <LoopFillZerobss+0x12>
 8005a58:	480d      	ldr	r0, [pc, #52]	; (8005a90 <LoopFillZerobss+0x16>)
 8005a5a:	490e      	ldr	r1, [pc, #56]	; (8005a94 <LoopFillZerobss+0x1a>)
 8005a5c:	4a0e      	ldr	r2, [pc, #56]	; (8005a98 <LoopFillZerobss+0x1e>)
 8005a5e:	2300      	movs	r3, #0
 8005a60:	e002      	b.n	8005a68 <LoopCopyDataInit>

08005a62 <CopyDataInit>:
 8005a62:	58d4      	ldr	r4, [r2, r3]
 8005a64:	50c4      	str	r4, [r0, r3]
 8005a66:	3304      	adds	r3, #4

08005a68 <LoopCopyDataInit>:
 8005a68:	18c4      	adds	r4, r0, r3
 8005a6a:	428c      	cmp	r4, r1
 8005a6c:	d3f9      	bcc.n	8005a62 <CopyDataInit>
 8005a6e:	4a0b      	ldr	r2, [pc, #44]	; (8005a9c <LoopFillZerobss+0x22>)
 8005a70:	4c0b      	ldr	r4, [pc, #44]	; (8005aa0 <LoopFillZerobss+0x26>)
 8005a72:	2300      	movs	r3, #0
 8005a74:	e001      	b.n	8005a7a <LoopFillZerobss>

08005a76 <FillZerobss>:
 8005a76:	6013      	str	r3, [r2, #0]
 8005a78:	3204      	adds	r2, #4

08005a7a <LoopFillZerobss>:
 8005a7a:	42a2      	cmp	r2, r4
 8005a7c:	d3fb      	bcc.n	8005a76 <FillZerobss>
 8005a7e:	f7ff ffdf 	bl	8005a40 <SystemInit>
 8005a82:	f006 fee7 	bl	800c854 <__libc_init_array>
 8005a86:	f7ff fa4f 	bl	8004f28 <main>
 8005a8a:	4770      	bx	lr
 8005a8c:	20050000 	.word	0x20050000
 8005a90:	20000000 	.word	0x20000000
 8005a94:	2000008c 	.word	0x2000008c
 8005a98:	08010588 	.word	0x08010588
 8005a9c:	2000008c 	.word	0x2000008c
 8005aa0:	2001970c 	.word	0x2001970c

08005aa4 <ADC_IRQHandler>:
 8005aa4:	e7fe      	b.n	8005aa4 <ADC_IRQHandler>

08005aa6 <_IncrementBuffer>:
 8005aa6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005aaa:	460e      	mov	r6, r1
 8005aac:	4680      	mov	r8, r0
 8005aae:	f004 fded 	bl	800a68c <GUI_ALLOC_LockH>
 8005ab2:	ac02      	add	r4, sp, #8
 8005ab4:	8f47      	ldrh	r7, [r0, #58]	; 0x3a
 8005ab6:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8005ab8:	f844 0d08 	str.w	r0, [r4, #-8]!
 8005abc:	4437      	add	r7, r6
 8005abe:	4668      	mov	r0, sp
 8005ac0:	f004 fdf2 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 8005ac4:	4628      	mov	r0, r5
 8005ac6:	4639      	mov	r1, r7
 8005ac8:	f003 fa6e 	bl	8008fa8 <GUI_ALLOC_Realloc>
 8005acc:	4606      	mov	r6, r0
 8005ace:	b1a0      	cbz	r0, 8005afa <_IncrementBuffer+0x54>
 8005ad0:	b945      	cbnz	r5, 8005ae4 <_IncrementBuffer+0x3e>
 8005ad2:	f004 fddb 	bl	800a68c <GUI_ALLOC_LockH>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	a802      	add	r0, sp, #8
 8005ada:	f840 2d04 	str.w	r2, [r0, #-4]!
 8005ade:	7015      	strb	r5, [r2, #0]
 8005ae0:	f004 fde2 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 8005ae4:	4640      	mov	r0, r8
 8005ae6:	f004 fdd1 	bl	800a68c <GUI_ALLOC_LockH>
 8005aea:	9000      	str	r0, [sp, #0]
 8005aec:	8747      	strh	r7, [r0, #58]	; 0x3a
 8005aee:	6346      	str	r6, [r0, #52]	; 0x34
 8005af0:	4668      	mov	r0, sp
 8005af2:	f004 fdd9 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 8005af6:	2001      	movs	r0, #1
 8005af8:	e7ff      	b.n	8005afa <_IncrementBuffer+0x54>
 8005afa:	b002      	add	sp, #8
 8005afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005b00 <_IsSpaceInBuffer>:
 8005b00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b02:	4606      	mov	r6, r0
 8005b04:	460f      	mov	r7, r1
 8005b06:	f004 fdc1 	bl	800a68c <GUI_ALLOC_LockH>
 8005b0a:	9000      	str	r0, [sp, #0]
 8005b0c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8005b0e:	b158      	cbz	r0, 8005b28 <_IsSpaceInBuffer+0x28>
 8005b10:	f004 fdbc 	bl	800a68c <GUI_ALLOC_LockH>
 8005b14:	ac02      	add	r4, sp, #8
 8005b16:	f844 0d04 	str.w	r0, [r4, #-4]!
 8005b1a:	f7fa fb79 	bl	8000210 <strlen>
 8005b1e:	4605      	mov	r5, r0
 8005b20:	4620      	mov	r0, r4
 8005b22:	f004 fdc1 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 8005b26:	e000      	b.n	8005b2a <_IsSpaceInBuffer+0x2a>
 8005b28:	4605      	mov	r5, r0
 8005b2a:	a802      	add	r0, sp, #8
 8005b2c:	197c      	adds	r4, r7, r5
 8005b2e:	f850 2d08 	ldr.w	r2, [r0, #-8]!
 8005b32:	8f52      	ldrh	r2, [r2, #58]	; 0x3a
 8005b34:	3401      	adds	r4, #1
 8005b36:	1aa4      	subs	r4, r4, r2
 8005b38:	4668      	mov	r0, sp
 8005b3a:	f004 fdb5 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 8005b3e:	2c00      	cmp	r4, #0
 8005b40:	dd08      	ble.n	8005b54 <_IsSpaceInBuffer+0x54>
 8005b42:	4630      	mov	r0, r6
 8005b44:	f104 0110 	add.w	r1, r4, #16
 8005b48:	f7ff ffad 	bl	8005aa6 <_IncrementBuffer>
 8005b4c:	3000      	adds	r0, #0
 8005b4e:	bf18      	it	ne
 8005b50:	2001      	movne	r0, #1
 8005b52:	e000      	b.n	8005b56 <_IsSpaceInBuffer+0x56>
 8005b54:	2001      	movs	r0, #1
 8005b56:	b003      	add	sp, #12
 8005b58:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b5a <EDIT_SetText>:
 8005b5a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005b5e:	460c      	mov	r4, r1
 8005b60:	4606      	mov	r6, r0
 8005b62:	2800      	cmp	r0, #0
 8005b64:	d063      	beq.n	8005c2e <EDIT_SetText+0xd4>
 8005b66:	f004 fd91 	bl	800a68c <GUI_ALLOC_LockH>
 8005b6a:	ad02      	add	r5, sp, #8
 8005b6c:	6b47      	ldr	r7, [r0, #52]	; 0x34
 8005b6e:	f845 0d08 	str.w	r0, [r5, #-8]!
 8005b72:	f8b0 8038 	ldrh.w	r8, [r0, #56]	; 0x38
 8005b76:	4668      	mov	r0, sp
 8005b78:	f004 fd96 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 8005b7c:	2c00      	cmp	r4, #0
 8005b7e:	d046      	beq.n	8005c0e <EDIT_SetText+0xb4>
 8005b80:	b16f      	cbz	r7, 8005b9e <EDIT_SetText+0x44>
 8005b82:	4638      	mov	r0, r7
 8005b84:	f004 fd82 	bl	800a68c <GUI_ALLOC_LockH>
 8005b88:	af02      	add	r7, sp, #8
 8005b8a:	f847 0d04 	str.w	r0, [r7, #-4]!
 8005b8e:	f7fa fb3f 	bl	8000210 <strlen>
 8005b92:	f100 0901 	add.w	r9, r0, #1
 8005b96:	4638      	mov	r0, r7
 8005b98:	f004 fd86 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 8005b9c:	e000      	b.n	8005ba0 <EDIT_SetText+0x46>
 8005b9e:	46b9      	mov	r9, r7
 8005ba0:	4620      	mov	r0, r4
 8005ba2:	f002 fec5 	bl	8008930 <GUI__GetNumChars>
 8005ba6:	fa0f f788 	sxth.w	r7, r8
 8005baa:	42b8      	cmp	r0, r7
 8005bac:	bfb8      	it	lt
 8005bae:	4607      	movlt	r7, r0
 8005bb0:	4639      	mov	r1, r7
 8005bb2:	4620      	mov	r0, r4
 8005bb4:	f002 fee6 	bl	8008984 <GUI_UC__NumChars2NumBytes>
 8005bb8:	f100 0801 	add.w	r8, r0, #1
 8005bbc:	ebc9 0108 	rsb	r1, r9, r8
 8005bc0:	4630      	mov	r0, r6
 8005bc2:	f7ff ff9d 	bl	8005b00 <_IsSpaceInBuffer>
 8005bc6:	2800      	cmp	r0, #0
 8005bc8:	d02e      	beq.n	8005c28 <EDIT_SetText+0xce>
 8005bca:	4630      	mov	r0, r6
 8005bcc:	f004 fd5e 	bl	800a68c <GUI_ALLOC_LockH>
 8005bd0:	9000      	str	r0, [sp, #0]
 8005bd2:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8005bd4:	f004 fd5a 	bl	800a68c <GUI_ALLOC_LockH>
 8005bd8:	4642      	mov	r2, r8
 8005bda:	4621      	mov	r1, r4
 8005bdc:	9001      	str	r0, [sp, #4]
 8005bde:	f006 fe5d 	bl	800c89c <memcpy>
 8005be2:	9b01      	ldr	r3, [sp, #4]
 8005be4:	4443      	add	r3, r8
 8005be6:	2200      	movs	r2, #0
 8005be8:	f803 2c01 	strb.w	r2, [r3, #-1]
 8005bec:	9b00      	ldr	r3, [sp, #0]
 8005bee:	f9b3 2038 	ldrsh.w	r2, [r3, #56]	; 0x38
 8005bf2:	64df      	str	r7, [r3, #76]	; 0x4c
 8005bf4:	4297      	cmp	r7, r2
 8005bf6:	d106      	bne.n	8005c06 <EDIT_SetText+0xac>
 8005bf8:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8005bfc:	2a01      	cmp	r2, #1
 8005bfe:	bf04      	itt	eq
 8005c00:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8005c04:	64df      	streq	r7, [r3, #76]	; 0x4c
 8005c06:	a801      	add	r0, sp, #4
 8005c08:	f004 fd4e 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 8005c0c:	e009      	b.n	8005c22 <EDIT_SetText+0xc8>
 8005c0e:	4630      	mov	r0, r6
 8005c10:	f004 fd3c 	bl	800a68c <GUI_ALLOC_LockH>
 8005c14:	9000      	str	r0, [sp, #0]
 8005c16:	3034      	adds	r0, #52	; 0x34
 8005c18:	f004 ff90 	bl	800ab3c <GUI_ALLOC_FreePtr>
 8005c1c:	9b00      	ldr	r3, [sp, #0]
 8005c1e:	875c      	strh	r4, [r3, #58]	; 0x3a
 8005c20:	64dc      	str	r4, [r3, #76]	; 0x4c
 8005c22:	4668      	mov	r0, sp
 8005c24:	f004 fd40 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 8005c28:	4630      	mov	r0, r6
 8005c2a:	f000 fb7e 	bl	800632a <WM_InvalidateWindow>
 8005c2e:	b003      	add	sp, #12
 8005c30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08005c34 <WM_GetParent>:
 8005c34:	b508      	push	{r3, lr}
 8005c36:	4603      	mov	r3, r0
 8005c38:	b110      	cbz	r0, 8005c40 <WM_GetParent+0xc>
 8005c3a:	f004 fd1d 	bl	800a678 <GUI_ALLOC_h2p>
 8005c3e:	6983      	ldr	r3, [r0, #24]
 8005c40:	4618      	mov	r0, r3
 8005c42:	bd08      	pop	{r3, pc}

08005c44 <WM_GetId>:
 8005c44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005c46:	4604      	mov	r4, r0
 8005c48:	2210      	movs	r2, #16
 8005c4a:	4668      	mov	r0, sp
 8005c4c:	2100      	movs	r1, #0
 8005c4e:	f006 fe49 	bl	800c8e4 <memset>
 8005c52:	2315      	movs	r3, #21
 8005c54:	4620      	mov	r0, r4
 8005c56:	4669      	mov	r1, sp
 8005c58:	9300      	str	r3, [sp, #0]
 8005c5a:	f000 fb0f 	bl	800627c <WM_SendMessage>
 8005c5e:	9803      	ldr	r0, [sp, #12]
 8005c60:	b004      	add	sp, #16
 8005c62:	bd10      	pop	{r4, pc}

08005c64 <WM_GetFirstChild>:
 8005c64:	b508      	push	{r3, lr}
 8005c66:	4603      	mov	r3, r0
 8005c68:	b110      	cbz	r0, 8005c70 <WM_GetFirstChild+0xc>
 8005c6a:	f004 fd05 	bl	800a678 <GUI_ALLOC_h2p>
 8005c6e:	69c3      	ldr	r3, [r0, #28]
 8005c70:	4618      	mov	r0, r3
 8005c72:	bd08      	pop	{r3, pc}

08005c74 <_GetDialogItem>:
 8005c74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c76:	460d      	mov	r5, r1
 8005c78:	f004 fd08 	bl	800a68c <GUI_ALLOC_LockH>
 8005c7c:	ab02      	add	r3, sp, #8
 8005c7e:	69c4      	ldr	r4, [r0, #28]
 8005c80:	f843 0d04 	str.w	r0, [r3, #-4]!
 8005c84:	4618      	mov	r0, r3
 8005c86:	f004 fd0f 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 8005c8a:	4620      	mov	r0, r4
 8005c8c:	b16c      	cbz	r4, 8005caa <_GetDialogItem+0x36>
 8005c8e:	f7ff ffd9 	bl	8005c44 <WM_GetId>
 8005c92:	42a8      	cmp	r0, r5
 8005c94:	4620      	mov	r0, r4
 8005c96:	d008      	beq.n	8005caa <_GetDialogItem+0x36>
 8005c98:	4629      	mov	r1, r5
 8005c9a:	f7ff ffeb 	bl	8005c74 <_GetDialogItem>
 8005c9e:	b920      	cbnz	r0, 8005caa <_GetDialogItem+0x36>
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	f004 fce9 	bl	800a678 <GUI_ALLOC_h2p>
 8005ca6:	6a04      	ldr	r4, [r0, #32]
 8005ca8:	e7ef      	b.n	8005c8a <_GetDialogItem+0x16>
 8005caa:	b003      	add	sp, #12
 8005cac:	bd30      	pop	{r4, r5, pc}

08005cae <WM_GetDialogItem>:
 8005cae:	b108      	cbz	r0, 8005cb4 <WM_GetDialogItem+0x6>
 8005cb0:	f7ff bfe0 	b.w	8005c74 <_GetDialogItem>
 8005cb4:	4770      	bx	lr
	...

08005cb8 <WM_GetDesktopWindow>:
 8005cb8:	4b03      	ldr	r3, [pc, #12]	; (8005cc8 <WM_GetDesktopWindow+0x10>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	7c5a      	ldrb	r2, [r3, #17]
 8005cbe:	4b03      	ldr	r3, [pc, #12]	; (8005ccc <WM_GetDesktopWindow+0x14>)
 8005cc0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005cc4:	4770      	bx	lr
 8005cc6:	bf00      	nop
 8005cc8:	20000018 	.word	0x20000018
 8005ccc:	20019588 	.word	0x20019588

08005cd0 <WM__GetClientRectEx>:
 8005cd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005cd2:	460d      	mov	r5, r1
 8005cd4:	b158      	cbz	r0, 8005cee <WM__GetClientRectEx+0x1e>
 8005cd6:	b151      	cbz	r1, 8005cee <WM__GetClientRectEx+0x1e>
 8005cd8:	f004 fcd8 	bl	800a68c <GUI_ALLOC_LockH>
 8005cdc:	ac02      	add	r4, sp, #8
 8005cde:	4629      	mov	r1, r5
 8005ce0:	f844 0d04 	str.w	r0, [r4, #-4]!
 8005ce4:	f000 fad9 	bl	800629a <WM__GetClientRectWin>
 8005ce8:	4620      	mov	r0, r4
 8005cea:	f004 fcdd 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 8005cee:	b003      	add	sp, #12
 8005cf0:	bd30      	pop	{r4, r5, pc}
	...

08005cf4 <_OnExit>:
 8005cf4:	4a0a      	ldr	r2, [pc, #40]	; (8005d20 <_OnExit+0x2c>)
 8005cf6:	490b      	ldr	r1, [pc, #44]	; (8005d24 <_OnExit+0x30>)
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	7013      	strb	r3, [r2, #0]
 8005cfc:	4a0a      	ldr	r2, [pc, #40]	; (8005d28 <_OnExit+0x34>)
 8005cfe:	600b      	str	r3, [r1, #0]
 8005d00:	6013      	str	r3, [r2, #0]
 8005d02:	4a0a      	ldr	r2, [pc, #40]	; (8005d2c <_OnExit+0x38>)
 8005d04:	604b      	str	r3, [r1, #4]
 8005d06:	6013      	str	r3, [r2, #0]
 8005d08:	4a09      	ldr	r2, [pc, #36]	; (8005d30 <_OnExit+0x3c>)
 8005d0a:	6013      	str	r3, [r2, #0]
 8005d0c:	6053      	str	r3, [r2, #4]
 8005d0e:	4a09      	ldr	r2, [pc, #36]	; (8005d34 <_OnExit+0x40>)
 8005d10:	6013      	str	r3, [r2, #0]
 8005d12:	4a09      	ldr	r2, [pc, #36]	; (8005d38 <_OnExit+0x44>)
 8005d14:	6013      	str	r3, [r2, #0]
 8005d16:	4a09      	ldr	r2, [pc, #36]	; (8005d3c <_OnExit+0x48>)
 8005d18:	6013      	str	r3, [r2, #0]
 8005d1a:	4a09      	ldr	r2, [pc, #36]	; (8005d40 <_OnExit+0x4c>)
 8005d1c:	6013      	str	r3, [r2, #0]
 8005d1e:	4770      	bx	lr
 8005d20:	200190e0 	.word	0x200190e0
 8005d24:	20019598 	.word	0x20019598
 8005d28:	200190b8 	.word	0x200190b8
 8005d2c:	200195bc 	.word	0x200195bc
 8005d30:	200195c4 	.word	0x200195c4
 8005d34:	200195d0 	.word	0x200195d0
 8005d38:	20019584 	.word	0x20019584
 8005d3c:	200195b0 	.word	0x200195b0
 8005d40:	200195c0 	.word	0x200195c0

08005d44 <_Findy1>:
 8005d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d46:	4605      	mov	r5, r0
 8005d48:	b085      	sub	sp, #20
 8005d4a:	460c      	mov	r4, r1
 8005d4c:	4616      	mov	r6, r2
 8005d4e:	2d00      	cmp	r5, #0
 8005d50:	d04c      	beq.n	8005dec <_Findy1+0xa8>
 8005d52:	4628      	mov	r0, r5
 8005d54:	f004 fc9a 	bl	800a68c <GUI_ALLOC_LockH>
 8005d58:	6a87      	ldr	r7, [r0, #40]	; 0x28
 8005d5a:	9001      	str	r0, [sp, #4]
 8005d5c:	07bb      	lsls	r3, r7, #30
 8005d5e:	4601      	mov	r1, r0
 8005d60:	d53d      	bpl.n	8005dde <_Findy1+0x9a>
 8005d62:	ad02      	add	r5, sp, #8
 8005d64:	b126      	cbz	r6, 8005d70 <_Findy1+0x2c>
 8005d66:	4628      	mov	r0, r5
 8005d68:	4632      	mov	r2, r6
 8005d6a:	f002 fd91 	bl	8008890 <GUI__IntersectRects>
 8005d6e:	e002      	b.n	8005d76 <_Findy1+0x32>
 8005d70:	c803      	ldmia	r0, {r0, r1}
 8005d72:	e885 0003 	stmia.w	r5, {r0, r1}
 8005d76:	4620      	mov	r0, r4
 8005d78:	4629      	mov	r1, r5
 8005d7a:	f003 f8f8 	bl	8008f6e <GUI_RectsIntersect>
 8005d7e:	b370      	cbz	r0, 8005dde <_Findy1+0x9a>
 8005d80:	f017 0f01 	tst.w	r7, #1
 8005d84:	9b01      	ldr	r3, [sp, #4]
 8005d86:	d11e      	bne.n	8005dc6 <_Findy1+0x82>
 8005d88:	b13e      	cbz	r6, 8005d9a <_Findy1+0x56>
 8005d8a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8005d8e:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	bfa8      	it	ge
 8005d96:	4613      	movge	r3, r2
 8005d98:	e001      	b.n	8005d9e <_Findy1+0x5a>
 8005d9a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005d9e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8005da2:	4293      	cmp	r3, r2
 8005da4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8005da8:	dd06      	ble.n	8005db8 <_Findy1+0x74>
 8005daa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8005dae:	b219      	sxth	r1, r3
 8005db0:	428a      	cmp	r2, r1
 8005db2:	db14      	blt.n	8005dde <_Findy1+0x9a>
 8005db4:	3b01      	subs	r3, #1
 8005db6:	e004      	b.n	8005dc2 <_Findy1+0x7e>
 8005db8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8005dbc:	b219      	sxth	r1, r3
 8005dbe:	428a      	cmp	r2, r1
 8005dc0:	dd0d      	ble.n	8005dde <_Findy1+0x9a>
 8005dc2:	80e3      	strh	r3, [r4, #6]
 8005dc4:	e00b      	b.n	8005dde <_Findy1+0x9a>
 8005dc6:	69df      	ldr	r7, [r3, #28]
 8005dc8:	b14f      	cbz	r7, 8005dde <_Findy1+0x9a>
 8005dca:	4638      	mov	r0, r7
 8005dcc:	4621      	mov	r1, r4
 8005dce:	462a      	mov	r2, r5
 8005dd0:	f7ff ffb8 	bl	8005d44 <_Findy1>
 8005dd4:	4638      	mov	r0, r7
 8005dd6:	f004 fc4f 	bl	800a678 <GUI_ALLOC_h2p>
 8005dda:	6a07      	ldr	r7, [r0, #32]
 8005ddc:	e7f4      	b.n	8005dc8 <_Findy1+0x84>
 8005dde:	a804      	add	r0, sp, #16
 8005de0:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 8005de4:	6a1d      	ldr	r5, [r3, #32]
 8005de6:	f004 fc5f 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 8005dea:	e7b0      	b.n	8005d4e <_Findy1+0xa>
 8005dec:	b005      	add	sp, #20
 8005dee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005df0 <_Findx0>:
 8005df0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005df4:	4604      	mov	r4, r0
 8005df6:	460f      	mov	r7, r1
 8005df8:	4690      	mov	r8, r2
 8005dfa:	2500      	movs	r5, #0
 8005dfc:	2c00      	cmp	r4, #0
 8005dfe:	d037      	beq.n	8005e70 <_Findx0+0x80>
 8005e00:	4620      	mov	r0, r4
 8005e02:	f004 fc43 	bl	800a68c <GUI_ALLOC_LockH>
 8005e06:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8005e08:	9001      	str	r0, [sp, #4]
 8005e0a:	07b2      	lsls	r2, r6, #30
 8005e0c:	4601      	mov	r1, r0
 8005e0e:	d528      	bpl.n	8005e62 <_Findx0+0x72>
 8005e10:	ac02      	add	r4, sp, #8
 8005e12:	f1b8 0f00 	cmp.w	r8, #0
 8005e16:	d004      	beq.n	8005e22 <_Findx0+0x32>
 8005e18:	4620      	mov	r0, r4
 8005e1a:	4642      	mov	r2, r8
 8005e1c:	f002 fd38 	bl	8008890 <GUI__IntersectRects>
 8005e20:	e002      	b.n	8005e28 <_Findx0+0x38>
 8005e22:	c803      	ldmia	r0, {r0, r1}
 8005e24:	e884 0003 	stmia.w	r4, {r0, r1}
 8005e28:	4638      	mov	r0, r7
 8005e2a:	4621      	mov	r1, r4
 8005e2c:	f003 f89f 	bl	8008f6e <GUI_RectsIntersect>
 8005e30:	b1b8      	cbz	r0, 8005e62 <_Findx0+0x72>
 8005e32:	07f3      	lsls	r3, r6, #31
 8005e34:	d405      	bmi.n	8005e42 <_Findx0+0x52>
 8005e36:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	803b      	strh	r3, [r7, #0]
 8005e3e:	2501      	movs	r5, #1
 8005e40:	e00f      	b.n	8005e62 <_Findx0+0x72>
 8005e42:	9b01      	ldr	r3, [sp, #4]
 8005e44:	69de      	ldr	r6, [r3, #28]
 8005e46:	b166      	cbz	r6, 8005e62 <_Findx0+0x72>
 8005e48:	4630      	mov	r0, r6
 8005e4a:	4639      	mov	r1, r7
 8005e4c:	4622      	mov	r2, r4
 8005e4e:	f7ff ffcf 	bl	8005df0 <_Findx0>
 8005e52:	2800      	cmp	r0, #0
 8005e54:	4630      	mov	r0, r6
 8005e56:	bf18      	it	ne
 8005e58:	2501      	movne	r5, #1
 8005e5a:	f004 fc0d 	bl	800a678 <GUI_ALLOC_h2p>
 8005e5e:	6a06      	ldr	r6, [r0, #32]
 8005e60:	e7f1      	b.n	8005e46 <_Findx0+0x56>
 8005e62:	a804      	add	r0, sp, #16
 8005e64:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 8005e68:	6a1c      	ldr	r4, [r3, #32]
 8005e6a:	f004 fc1d 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 8005e6e:	e7c5      	b.n	8005dfc <_Findx0+0xc>
 8005e70:	4628      	mov	r0, r5
 8005e72:	b004      	add	sp, #16
 8005e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005e78 <_Findx1>:
 8005e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e7a:	4604      	mov	r4, r0
 8005e7c:	b085      	sub	sp, #20
 8005e7e:	460e      	mov	r6, r1
 8005e80:	4617      	mov	r7, r2
 8005e82:	2c00      	cmp	r4, #0
 8005e84:	d031      	beq.n	8005eea <_Findx1+0x72>
 8005e86:	4620      	mov	r0, r4
 8005e88:	f004 fc00 	bl	800a68c <GUI_ALLOC_LockH>
 8005e8c:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8005e8e:	9001      	str	r0, [sp, #4]
 8005e90:	07aa      	lsls	r2, r5, #30
 8005e92:	4601      	mov	r1, r0
 8005e94:	d522      	bpl.n	8005edc <_Findx1+0x64>
 8005e96:	ac02      	add	r4, sp, #8
 8005e98:	b127      	cbz	r7, 8005ea4 <_Findx1+0x2c>
 8005e9a:	4620      	mov	r0, r4
 8005e9c:	463a      	mov	r2, r7
 8005e9e:	f002 fcf7 	bl	8008890 <GUI__IntersectRects>
 8005ea2:	e002      	b.n	8005eaa <_Findx1+0x32>
 8005ea4:	c803      	ldmia	r0, {r0, r1}
 8005ea6:	e884 0003 	stmia.w	r4, {r0, r1}
 8005eaa:	4630      	mov	r0, r6
 8005eac:	4621      	mov	r1, r4
 8005eae:	f003 f85e 	bl	8008f6e <GUI_RectsIntersect>
 8005eb2:	b198      	cbz	r0, 8005edc <_Findx1+0x64>
 8005eb4:	07eb      	lsls	r3, r5, #31
 8005eb6:	d404      	bmi.n	8005ec2 <_Findx1+0x4a>
 8005eb8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	80b3      	strh	r3, [r6, #4]
 8005ec0:	e00c      	b.n	8005edc <_Findx1+0x64>
 8005ec2:	9b01      	ldr	r3, [sp, #4]
 8005ec4:	69dd      	ldr	r5, [r3, #28]
 8005ec6:	b14d      	cbz	r5, 8005edc <_Findx1+0x64>
 8005ec8:	4628      	mov	r0, r5
 8005eca:	4631      	mov	r1, r6
 8005ecc:	4622      	mov	r2, r4
 8005ece:	f7ff ffd3 	bl	8005e78 <_Findx1>
 8005ed2:	4628      	mov	r0, r5
 8005ed4:	f004 fbd0 	bl	800a678 <GUI_ALLOC_h2p>
 8005ed8:	6a05      	ldr	r5, [r0, #32]
 8005eda:	e7f4      	b.n	8005ec6 <_Findx1+0x4e>
 8005edc:	a804      	add	r0, sp, #16
 8005ede:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 8005ee2:	6a1c      	ldr	r4, [r3, #32]
 8005ee4:	f004 fbe0 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 8005ee8:	e7cb      	b.n	8005e82 <_Findx1+0xa>
 8005eea:	b005      	add	sp, #20
 8005eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005ef0 <WM__ClipAtParentBorders>:
 8005ef0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ef2:	4607      	mov	r7, r0
 8005ef4:	460d      	mov	r5, r1
 8005ef6:	4628      	mov	r0, r5
 8005ef8:	f004 fbc8 	bl	800a68c <GUI_ALLOC_LockH>
 8005efc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005efe:	ac02      	add	r4, sp, #8
 8005f00:	f013 0602 	ands.w	r6, r3, #2
 8005f04:	4601      	mov	r1, r0
 8005f06:	f844 0d04 	str.w	r0, [r4, #-4]!
 8005f0a:	d104      	bne.n	8005f16 <WM__ClipAtParentBorders+0x26>
 8005f0c:	4620      	mov	r0, r4
 8005f0e:	f004 fbcb 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 8005f12:	4630      	mov	r0, r6
 8005f14:	e016      	b.n	8005f44 <WM__ClipAtParentBorders+0x54>
 8005f16:	4638      	mov	r0, r7
 8005f18:	f002 fcec 	bl	80088f4 <GUI__IntersectRect>
 8005f1c:	9b01      	ldr	r3, [sp, #4]
 8005f1e:	699e      	ldr	r6, [r3, #24]
 8005f20:	4620      	mov	r0, r4
 8005f22:	b956      	cbnz	r6, 8005f3a <WM__ClipAtParentBorders+0x4a>
 8005f24:	f004 fbc0 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 8005f28:	4b07      	ldr	r3, [pc, #28]	; (8005f48 <WM__ClipAtParentBorders+0x58>)
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	4295      	cmp	r5, r2
 8005f2e:	d008      	beq.n	8005f42 <WM__ClipAtParentBorders+0x52>
 8005f30:	6858      	ldr	r0, [r3, #4]
 8005f32:	1a2b      	subs	r3, r5, r0
 8005f34:	4258      	negs	r0, r3
 8005f36:	4158      	adcs	r0, r3
 8005f38:	e004      	b.n	8005f44 <WM__ClipAtParentBorders+0x54>
 8005f3a:	f004 fbb5 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 8005f3e:	4635      	mov	r5, r6
 8005f40:	e7d9      	b.n	8005ef6 <WM__ClipAtParentBorders+0x6>
 8005f42:	2001      	movs	r0, #1
 8005f44:	b003      	add	sp, #12
 8005f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f48:	20019588 	.word	0x20019588

08005f4c <WM__InsertWindowIntoList>:
 8005f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f4e:	4604      	mov	r4, r0
 8005f50:	b085      	sub	sp, #20
 8005f52:	460d      	mov	r5, r1
 8005f54:	2900      	cmp	r1, #0
 8005f56:	d049      	beq.n	8005fec <WM__InsertWindowIntoList+0xa0>
 8005f58:	f004 fb98 	bl	800a68c <GUI_ALLOC_LockH>
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	6203      	str	r3, [r0, #32]
 8005f60:	6185      	str	r5, [r0, #24]
 8005f62:	9001      	str	r0, [sp, #4]
 8005f64:	4628      	mov	r0, r5
 8005f66:	f004 fb91 	bl	800a68c <GUI_ALLOC_LockH>
 8005f6a:	9b01      	ldr	r3, [sp, #4]
 8005f6c:	69c5      	ldr	r5, [r0, #28]
 8005f6e:	9002      	str	r0, [sp, #8]
 8005f70:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 8005f72:	b92d      	cbnz	r5, 8005f80 <WM__InsertWindowIntoList+0x34>
 8005f74:	61c4      	str	r4, [r0, #28]
 8005f76:	a801      	add	r0, sp, #4
 8005f78:	f004 fb96 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 8005f7c:	a802      	add	r0, sp, #8
 8005f7e:	e033      	b.n	8005fe8 <WM__InsertWindowIntoList+0x9c>
 8005f80:	4628      	mov	r0, r5
 8005f82:	f004 fb83 	bl	800a68c <GUI_ALLOC_LockH>
 8005f86:	ae04      	add	r6, sp, #16
 8005f88:	f007 0708 	and.w	r7, r7, #8
 8005f8c:	f846 0d04 	str.w	r0, [r6, #-4]!
 8005f90:	b977      	cbnz	r7, 8005fb0 <WM__InsertWindowIntoList+0x64>
 8005f92:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005f94:	071a      	lsls	r2, r3, #28
 8005f96:	d50b      	bpl.n	8005fb0 <WM__InsertWindowIntoList+0x64>
 8005f98:	9b01      	ldr	r3, [sp, #4]
 8005f9a:	621d      	str	r5, [r3, #32]
 8005f9c:	9b02      	ldr	r3, [sp, #8]
 8005f9e:	a801      	add	r0, sp, #4
 8005fa0:	61dc      	str	r4, [r3, #28]
 8005fa2:	f004 fb81 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 8005fa6:	a802      	add	r0, sp, #8
 8005fa8:	f004 fb7e 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 8005fac:	4630      	mov	r0, r6
 8005fae:	e01b      	b.n	8005fe8 <WM__InsertWindowIntoList+0x9c>
 8005fb0:	a802      	add	r0, sp, #8
 8005fb2:	f004 fb79 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 8005fb6:	4630      	mov	r0, r6
 8005fb8:	f004 fb76 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 8005fbc:	4628      	mov	r0, r5
 8005fbe:	f004 fb5b 	bl	800a678 <GUI_ALLOC_h2p>
 8005fc2:	9003      	str	r0, [sp, #12]
 8005fc4:	9b03      	ldr	r3, [sp, #12]
 8005fc6:	6a1d      	ldr	r5, [r3, #32]
 8005fc8:	b90d      	cbnz	r5, 8005fce <WM__InsertWindowIntoList+0x82>
 8005fca:	621c      	str	r4, [r3, #32]
 8005fcc:	e00b      	b.n	8005fe6 <WM__InsertWindowIntoList+0x9a>
 8005fce:	4628      	mov	r0, r5
 8005fd0:	f004 fb52 	bl	800a678 <GUI_ALLOC_h2p>
 8005fd4:	2f00      	cmp	r7, #0
 8005fd6:	d1f4      	bne.n	8005fc2 <WM__InsertWindowIntoList+0x76>
 8005fd8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005fda:	071b      	lsls	r3, r3, #28
 8005fdc:	d5f1      	bpl.n	8005fc2 <WM__InsertWindowIntoList+0x76>
 8005fde:	9b03      	ldr	r3, [sp, #12]
 8005fe0:	621c      	str	r4, [r3, #32]
 8005fe2:	9b01      	ldr	r3, [sp, #4]
 8005fe4:	621d      	str	r5, [r3, #32]
 8005fe6:	a801      	add	r0, sp, #4
 8005fe8:	f004 fb5e 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 8005fec:	b005      	add	sp, #20
 8005fee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005ff0 <WM__Client2Screen>:
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	4608      	mov	r0, r1
 8005ff4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8005ff8:	f9b3 1000 	ldrsh.w	r1, [r3]
 8005ffc:	f003 b810 	b.w	8009020 <GUI_MoveRect>

08006000 <_SetClipRectUserIntersect>:
 8006000:	4b11      	ldr	r3, [pc, #68]	; (8006048 <_SetClipRectUserIntersect+0x48>)
 8006002:	b530      	push	{r4, r5, lr}
 8006004:	681c      	ldr	r4, [r3, #0]
 8006006:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006008:	b085      	sub	sp, #20
 800600a:	4605      	mov	r5, r0
 800600c:	b1ba      	cbz	r2, 800603e <_SetClipRectUserIntersect+0x3e>
 800600e:	6810      	ldr	r0, [r2, #0]
 8006010:	6851      	ldr	r1, [r2, #4]
 8006012:	ab02      	add	r3, sp, #8
 8006014:	c303      	stmia	r3!, {r0, r1}
 8006016:	4b0d      	ldr	r3, [pc, #52]	; (800604c <_SetClipRectUserIntersect+0x4c>)
 8006018:	6818      	ldr	r0, [r3, #0]
 800601a:	b900      	cbnz	r0, 800601e <_SetClipRectUserIntersect+0x1e>
 800601c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800601e:	f004 fb35 	bl	800a68c <GUI_ALLOC_LockH>
 8006022:	ac04      	add	r4, sp, #16
 8006024:	a902      	add	r1, sp, #8
 8006026:	f844 0d0c 	str.w	r0, [r4, #-12]!
 800602a:	f7ff ffe1 	bl	8005ff0 <WM__Client2Screen>
 800602e:	4620      	mov	r0, r4
 8006030:	f004 fb3a 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 8006034:	a802      	add	r0, sp, #8
 8006036:	4629      	mov	r1, r5
 8006038:	f002 fc5c 	bl	80088f4 <GUI__IntersectRect>
 800603c:	a802      	add	r0, sp, #8
 800603e:	f001 feb3 	bl	8007da8 <LCD_SetClipRectEx>
 8006042:	b005      	add	sp, #20
 8006044:	bd30      	pop	{r4, r5, pc}
 8006046:	bf00      	nop
 8006048:	20000018 	.word	0x20000018
 800604c:	20019584 	.word	0x20019584

08006050 <WM__ActivateClipRect>:
 8006050:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006052:	4b0e      	ldr	r3, [pc, #56]	; (800608c <WM__ActivateClipRect+0x3c>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800605a:	b10a      	cbz	r2, 8006060 <WM__ActivateClipRect+0x10>
 800605c:	480c      	ldr	r0, [pc, #48]	; (8006090 <WM__ActivateClipRect+0x40>)
 800605e:	e011      	b.n	8006084 <WM__ActivateClipRect+0x34>
 8006060:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006062:	f004 fb13 	bl	800a68c <GUI_ALLOC_LockH>
 8006066:	9001      	str	r0, [sp, #4]
 8006068:	c803      	ldmia	r0, {r0, r1}
 800606a:	ac02      	add	r4, sp, #8
 800606c:	e884 0003 	stmia.w	r4, {r0, r1}
 8006070:	a801      	add	r0, sp, #4
 8006072:	f004 fb19 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 8006076:	4b07      	ldr	r3, [pc, #28]	; (8006094 <WM__ActivateClipRect+0x44>)
 8006078:	6819      	ldr	r1, [r3, #0]
 800607a:	b111      	cbz	r1, 8006082 <WM__ActivateClipRect+0x32>
 800607c:	4620      	mov	r0, r4
 800607e:	f7ff ff37 	bl	8005ef0 <WM__ClipAtParentBorders>
 8006082:	4620      	mov	r0, r4
 8006084:	f7ff ffbc 	bl	8006000 <_SetClipRectUserIntersect>
 8006088:	b004      	add	sp, #16
 800608a:	bd10      	pop	{r4, pc}
 800608c:	20000018 	.word	0x20000018
 8006090:	200190c4 	.word	0x200190c4
 8006094:	20019584 	.word	0x20019584

08006098 <WM__InvalidateDrawAndDescs>:
 8006098:	b513      	push	{r0, r1, r4, lr}
 800609a:	4604      	mov	r4, r0
 800609c:	b300      	cbz	r0, 80060e0 <WM__InvalidateDrawAndDescs+0x48>
 800609e:	f004 faf5 	bl	800a68c <GUI_ALLOC_LockH>
 80060a2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80060a4:	9001      	str	r0, [sp, #4]
 80060a6:	0793      	lsls	r3, r2, #30
 80060a8:	d517      	bpl.n	80060da <WM__InvalidateDrawAndDescs+0x42>
 80060aa:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80060ac:	b140      	cbz	r0, 80060c0 <WM__InvalidateDrawAndDescs+0x28>
 80060ae:	4b0d      	ldr	r3, [pc, #52]	; (80060e4 <WM__InvalidateDrawAndDescs+0x4c>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	42a3      	cmp	r3, r4
 80060b4:	d004      	beq.n	80060c0 <WM__InvalidateDrawAndDescs+0x28>
 80060b6:	f000 fcef 	bl	8006a98 <GUI_MEMDEV_Delete>
 80060ba:	9b01      	ldr	r3, [sp, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	625a      	str	r2, [r3, #36]	; 0x24
 80060c0:	4620      	mov	r0, r4
 80060c2:	f7ff fdcf 	bl	8005c64 <WM_GetFirstChild>
 80060c6:	4604      	mov	r4, r0
 80060c8:	b13c      	cbz	r4, 80060da <WM__InvalidateDrawAndDescs+0x42>
 80060ca:	4620      	mov	r0, r4
 80060cc:	f7ff ffe4 	bl	8006098 <WM__InvalidateDrawAndDescs>
 80060d0:	4620      	mov	r0, r4
 80060d2:	f004 fad1 	bl	800a678 <GUI_ALLOC_h2p>
 80060d6:	6a04      	ldr	r4, [r0, #32]
 80060d8:	e7f6      	b.n	80060c8 <WM__InvalidateDrawAndDescs+0x30>
 80060da:	a801      	add	r0, sp, #4
 80060dc:	f004 fae4 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 80060e0:	b002      	add	sp, #8
 80060e2:	bd10      	pop	{r4, pc}
 80060e4:	200195cc 	.word	0x200195cc

080060e8 <WM__RectIsNZ>:
 80060e8:	f9b0 2000 	ldrsh.w	r2, [r0]
 80060ec:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	dc08      	bgt.n	8006106 <WM__RectIsNZ+0x1e>
 80060f4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80060f8:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	bfcc      	ite	gt
 8006100:	2000      	movgt	r0, #0
 8006102:	2001      	movle	r0, #1
 8006104:	4770      	bx	lr
 8006106:	2000      	movs	r0, #0
 8006108:	4770      	bx	lr
	...

0800610c <_Invalidate1Abs>:
 800610c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800610e:	b085      	sub	sp, #20
 8006110:	4606      	mov	r6, r0
 8006112:	460d      	mov	r5, r1
 8006114:	4617      	mov	r7, r2
 8006116:	f004 faaf 	bl	800a678 <GUI_ALLOC_h2p>
 800611a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800611c:	9001      	str	r0, [sp, #4]
 800611e:	07a3      	lsls	r3, r4, #30
 8006120:	d534      	bpl.n	800618c <_Invalidate1Abs+0x80>
 8006122:	4628      	mov	r0, r5
 8006124:	f7ff ffe0 	bl	80060e8 <WM__RectIsNZ>
 8006128:	2800      	cmp	r0, #0
 800612a:	d02f      	beq.n	800618c <_Invalidate1Abs+0x80>
 800612c:	f640 0301 	movw	r3, #2049	; 0x801
 8006130:	4023      	ands	r3, r4
 8006132:	2b01      	cmp	r3, #1
 8006134:	d02a      	beq.n	800618c <_Invalidate1Abs+0x80>
 8006136:	4630      	mov	r0, r6
 8006138:	f004 faa8 	bl	800a68c <GUI_ALLOC_LockH>
 800613c:	ac02      	add	r4, sp, #8
 800613e:	4602      	mov	r2, r0
 8006140:	9001      	str	r0, [sp, #4]
 8006142:	4629      	mov	r1, r5
 8006144:	4620      	mov	r0, r4
 8006146:	f002 fba3 	bl	8008890 <GUI__IntersectRects>
 800614a:	4620      	mov	r0, r4
 800614c:	f7ff ffcc 	bl	80060e8 <WM__RectIsNZ>
 8006150:	b1c8      	cbz	r0, 8006186 <_Invalidate1Abs+0x7a>
 8006152:	9b01      	ldr	r3, [sp, #4]
 8006154:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 8006156:	f244 0120 	movw	r1, #16416	; 0x4020
 800615a:	4031      	ands	r1, r6
 800615c:	f103 0508 	add.w	r5, r3, #8
 8006160:	b129      	cbz	r1, 800616e <_Invalidate1Abs+0x62>
 8006162:	4628      	mov	r0, r5
 8006164:	4629      	mov	r1, r5
 8006166:	4622      	mov	r2, r4
 8006168:	f002 ff6a 	bl	8009040 <GUI_MergeRect>
 800616c:	e00b      	b.n	8006186 <_Invalidate1Abs+0x7a>
 800616e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006172:	433e      	orrs	r6, r7
 8006174:	e885 0003 	stmia.w	r5, {r0, r1}
 8006178:	629e      	str	r6, [r3, #40]	; 0x28
 800617a:	4b05      	ldr	r3, [pc, #20]	; (8006190 <_Invalidate1Abs+0x84>)
 800617c:	881a      	ldrh	r2, [r3, #0]
 800617e:	3201      	adds	r2, #1
 8006180:	801a      	strh	r2, [r3, #0]
 8006182:	f002 fbe3 	bl	800894c <GUI_SignalEvent>
 8006186:	a801      	add	r0, sp, #4
 8006188:	f004 fa8e 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 800618c:	b005      	add	sp, #20
 800618e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006190:	200195a0 	.word	0x200195a0

08006194 <WM__Invalidate1Abs>:
 8006194:	2220      	movs	r2, #32
 8006196:	f7ff bfb9 	b.w	800610c <_Invalidate1Abs>

0800619a <WM_InvalidateWindowAndDescsEx>:
 800619a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800619c:	460f      	mov	r7, r1
 800619e:	b085      	sub	sp, #20
 80061a0:	4615      	mov	r5, r2
 80061a2:	4606      	mov	r6, r0
 80061a4:	b348      	cbz	r0, 80061fa <WM_InvalidateWindowAndDescsEx+0x60>
 80061a6:	f004 fa71 	bl	800a68c <GUI_ALLOC_LockH>
 80061aa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80061ac:	ac04      	add	r4, sp, #16
 80061ae:	079b      	lsls	r3, r3, #30
 80061b0:	4602      	mov	r2, r0
 80061b2:	f844 0d0c 	str.w	r0, [r4, #-12]!
 80061b6:	d403      	bmi.n	80061c0 <WM_InvalidateWindowAndDescsEx+0x26>
 80061b8:	4620      	mov	r0, r4
 80061ba:	f004 fa75 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 80061be:	e01c      	b.n	80061fa <WM_InvalidateWindowAndDescsEx+0x60>
 80061c0:	a802      	add	r0, sp, #8
 80061c2:	4639      	mov	r1, r7
 80061c4:	f002 fb64 	bl	8008890 <GUI__IntersectRects>
 80061c8:	2800      	cmp	r0, #0
 80061ca:	d0f5      	beq.n	80061b8 <WM_InvalidateWindowAndDescsEx+0x1e>
 80061cc:	4620      	mov	r0, r4
 80061ce:	f004 fa6b 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 80061d2:	4630      	mov	r0, r6
 80061d4:	a902      	add	r1, sp, #8
 80061d6:	462a      	mov	r2, r5
 80061d8:	f7ff ff98 	bl	800610c <_Invalidate1Abs>
 80061dc:	4630      	mov	r0, r6
 80061de:	f7ff fd41 	bl	8005c64 <WM_GetFirstChild>
 80061e2:	4604      	mov	r4, r0
 80061e4:	b14c      	cbz	r4, 80061fa <WM_InvalidateWindowAndDescsEx+0x60>
 80061e6:	4620      	mov	r0, r4
 80061e8:	a902      	add	r1, sp, #8
 80061ea:	462a      	mov	r2, r5
 80061ec:	f7ff ffd5 	bl	800619a <WM_InvalidateWindowAndDescsEx>
 80061f0:	4620      	mov	r0, r4
 80061f2:	f004 fa41 	bl	800a678 <GUI_ALLOC_h2p>
 80061f6:	6a04      	ldr	r4, [r0, #32]
 80061f8:	e7f4      	b.n	80061e4 <WM_InvalidateWindowAndDescsEx+0x4a>
 80061fa:	b005      	add	sp, #20
 80061fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080061fe <WM__InvalidateRect>:
 80061fe:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8006202:	4680      	mov	r8, r0
 8006204:	4617      	mov	r7, r2
 8006206:	461d      	mov	r5, r3
 8006208:	460c      	mov	r4, r1
 800620a:	2900      	cmp	r1, #0
 800620c:	d030      	beq.n	8006270 <WM__InvalidateRect+0x72>
 800620e:	4608      	mov	r0, r1
 8006210:	f004 fa3c 	bl	800a68c <GUI_ALLOC_LockH>
 8006214:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8006216:	9001      	str	r0, [sp, #4]
 8006218:	07b3      	lsls	r3, r6, #30
 800621a:	4602      	mov	r2, r0
 800621c:	d525      	bpl.n	800626a <WM__InvalidateRect+0x6c>
 800621e:	a802      	add	r0, sp, #8
 8006220:	4641      	mov	r1, r8
 8006222:	f002 fb35 	bl	8008890 <GUI__IntersectRects>
 8006226:	b300      	cbz	r0, 800626a <WM__InvalidateRect+0x6c>
 8006228:	f640 0301 	movw	r3, #2049	; 0x801
 800622c:	4033      	ands	r3, r6
 800622e:	2b01      	cmp	r3, #1
 8006230:	d107      	bne.n	8006242 <WM__InvalidateRect+0x44>
 8006232:	9b01      	ldr	r3, [sp, #4]
 8006234:	a802      	add	r0, sp, #8
 8006236:	6999      	ldr	r1, [r3, #24]
 8006238:	6a1a      	ldr	r2, [r3, #32]
 800623a:	462b      	mov	r3, r5
 800623c:	f7ff ffdf 	bl	80061fe <WM__InvalidateRect>
 8006240:	e004      	b.n	800624c <WM__InvalidateRect+0x4e>
 8006242:	4620      	mov	r0, r4
 8006244:	a902      	add	r1, sp, #8
 8006246:	462a      	mov	r2, r5
 8006248:	f7ff ff60 	bl	800610c <_Invalidate1Abs>
 800624c:	9b01      	ldr	r3, [sp, #4]
 800624e:	69dc      	ldr	r4, [r3, #28]
 8006250:	b15c      	cbz	r4, 800626a <WM__InvalidateRect+0x6c>
 8006252:	42bc      	cmp	r4, r7
 8006254:	d009      	beq.n	800626a <WM__InvalidateRect+0x6c>
 8006256:	4620      	mov	r0, r4
 8006258:	a902      	add	r1, sp, #8
 800625a:	462a      	mov	r2, r5
 800625c:	f7ff ff9d 	bl	800619a <WM_InvalidateWindowAndDescsEx>
 8006260:	4620      	mov	r0, r4
 8006262:	f004 fa09 	bl	800a678 <GUI_ALLOC_h2p>
 8006266:	6a04      	ldr	r4, [r0, #32]
 8006268:	e7f2      	b.n	8006250 <WM__InvalidateRect+0x52>
 800626a:	a801      	add	r0, sp, #4
 800626c:	f004 fa1c 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 8006270:	b004      	add	sp, #16
 8006272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006276 <WM__InvalidateRectEx>:
 8006276:	2320      	movs	r3, #32
 8006278:	f7ff bfc1 	b.w	80061fe <WM__InvalidateRect>

0800627c <WM_SendMessage>:
 800627c:	b108      	cbz	r0, 8006282 <WM_SendMessage+0x6>
 800627e:	f004 bd11 	b.w	800aca4 <WM__SendMessage>
 8006282:	4770      	bx	lr

08006284 <WM__SendMsgNoData>:
 8006284:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006286:	ab04      	add	r3, sp, #16
 8006288:	9001      	str	r0, [sp, #4]
 800628a:	f843 1d10 	str.w	r1, [r3, #-16]!
 800628e:	4669      	mov	r1, sp
 8006290:	f004 fd08 	bl	800aca4 <WM__SendMessage>
 8006294:	b005      	add	sp, #20
 8006296:	f85d fb04 	ldr.w	pc, [sp], #4

0800629a <WM__GetClientRectWin>:
 800629a:	2300      	movs	r3, #0
 800629c:	800b      	strh	r3, [r1, #0]
 800629e:	8882      	ldrh	r2, [r0, #4]
 80062a0:	804b      	strh	r3, [r1, #2]
 80062a2:	8803      	ldrh	r3, [r0, #0]
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	808b      	strh	r3, [r1, #4]
 80062a8:	88c2      	ldrh	r2, [r0, #6]
 80062aa:	8843      	ldrh	r3, [r0, #2]
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	80cb      	strh	r3, [r1, #6]
 80062b0:	4770      	bx	lr

080062b2 <WM_InvalidateRect>:
 80062b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062b4:	460f      	mov	r7, r1
 80062b6:	b087      	sub	sp, #28
 80062b8:	4605      	mov	r5, r0
 80062ba:	2800      	cmp	r0, #0
 80062bc:	d033      	beq.n	8006326 <WM_InvalidateRect+0x74>
 80062be:	f004 f9e5 	bl	800a68c <GUI_ALLOC_LockH>
 80062c2:	6a86      	ldr	r6, [r0, #40]	; 0x28
 80062c4:	9001      	str	r0, [sp, #4]
 80062c6:	07b2      	lsls	r2, r6, #30
 80062c8:	d52a      	bpl.n	8006320 <WM_InvalidateRect+0x6e>
 80062ca:	c803      	ldmia	r0, {r0, r1}
 80062cc:	ac04      	add	r4, sp, #16
 80062ce:	03f3      	lsls	r3, r6, #15
 80062d0:	e884 0003 	stmia.w	r4, {r0, r1}
 80062d4:	d502      	bpl.n	80062dc <WM_InvalidateRect+0x2a>
 80062d6:	4628      	mov	r0, r5
 80062d8:	f7ff fede 	bl	8006098 <WM__InvalidateDrawAndDescs>
 80062dc:	b15f      	cbz	r7, 80062f6 <WM_InvalidateRect+0x44>
 80062de:	6838      	ldr	r0, [r7, #0]
 80062e0:	6879      	ldr	r1, [r7, #4]
 80062e2:	ab02      	add	r3, sp, #8
 80062e4:	c303      	stmia	r3!, {r0, r1}
 80062e6:	9801      	ldr	r0, [sp, #4]
 80062e8:	a902      	add	r1, sp, #8
 80062ea:	f7ff fe81 	bl	8005ff0 <WM__Client2Screen>
 80062ee:	4620      	mov	r0, r4
 80062f0:	a902      	add	r1, sp, #8
 80062f2:	f002 faff 	bl	80088f4 <GUI__IntersectRect>
 80062f6:	4620      	mov	r0, r4
 80062f8:	4629      	mov	r1, r5
 80062fa:	f7ff fdf9 	bl	8005ef0 <WM__ClipAtParentBorders>
 80062fe:	b178      	cbz	r0, 8006320 <WM_InvalidateRect+0x6e>
 8006300:	f640 0301 	movw	r3, #2049	; 0x801
 8006304:	4033      	ands	r3, r6
 8006306:	2b01      	cmp	r3, #1
 8006308:	d106      	bne.n	8006318 <WM_InvalidateRect+0x66>
 800630a:	9b01      	ldr	r3, [sp, #4]
 800630c:	4620      	mov	r0, r4
 800630e:	6999      	ldr	r1, [r3, #24]
 8006310:	6a1a      	ldr	r2, [r3, #32]
 8006312:	f7ff ffb0 	bl	8006276 <WM__InvalidateRectEx>
 8006316:	e003      	b.n	8006320 <WM_InvalidateRect+0x6e>
 8006318:	4628      	mov	r0, r5
 800631a:	4621      	mov	r1, r4
 800631c:	f7ff ff3a 	bl	8006194 <WM__Invalidate1Abs>
 8006320:	a801      	add	r0, sp, #4
 8006322:	f004 f9c1 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 8006326:	b007      	add	sp, #28
 8006328:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800632a <WM_InvalidateWindow>:
 800632a:	2100      	movs	r1, #0
 800632c:	f7ff bfc1 	b.w	80062b2 <WM_InvalidateRect>

08006330 <WM__GetTopLevelLayer>:
 8006330:	b510      	push	{r4, lr}
 8006332:	4604      	mov	r4, r0
 8006334:	f004 f9a0 	bl	800a678 <GUI_ALLOC_h2p>
 8006338:	6980      	ldr	r0, [r0, #24]
 800633a:	2800      	cmp	r0, #0
 800633c:	d1f9      	bne.n	8006332 <WM__GetTopLevelLayer+0x2>
 800633e:	4b05      	ldr	r3, [pc, #20]	; (8006354 <WM__GetTopLevelLayer+0x24>)
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	4294      	cmp	r4, r2
 8006344:	d005      	beq.n	8006352 <WM__GetTopLevelLayer+0x22>
 8006346:	6858      	ldr	r0, [r3, #4]
 8006348:	4284      	cmp	r4, r0
 800634a:	bf14      	ite	ne
 800634c:	f04f 30ff 	movne.w	r0, #4294967295
 8006350:	2001      	moveq	r0, #1
 8006352:	bd10      	pop	{r4, pc}
 8006354:	20019588 	.word	0x20019588

08006358 <WM__SelectTopLevelLayer>:
 8006358:	b508      	push	{r3, lr}
 800635a:	f7ff ffe9 	bl	8006330 <WM__GetTopLevelLayer>
 800635e:	2800      	cmp	r0, #0
 8006360:	db03      	blt.n	800636a <WM__SelectTopLevelLayer+0x12>
 8006362:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006366:	f002 bde3 	b.w	8008f30 <GUI_SelectLayer>
 800636a:	bd08      	pop	{r3, pc}

0800636c <WM_SelectWindow>:
 800636c:	4a0d      	ldr	r2, [pc, #52]	; (80063a4 <WM_SelectWindow+0x38>)
 800636e:	6813      	ldr	r3, [r2, #0]
 8006370:	b570      	push	{r4, r5, r6, lr}
 8006372:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 8006374:	4604      	mov	r4, r0
 8006376:	4616      	mov	r6, r2
 8006378:	b908      	cbnz	r0, 800637e <WM_SelectWindow+0x12>
 800637a:	4a0b      	ldr	r2, [pc, #44]	; (80063a8 <WM_SelectWindow+0x3c>)
 800637c:	6814      	ldr	r4, [r2, #0]
 800637e:	649c      	str	r4, [r3, #72]	; 0x48
 8006380:	4620      	mov	r0, r4
 8006382:	f7ff ffe9 	bl	8006358 <WM__SelectTopLevelLayer>
 8006386:	f002 f8ed 	bl	8008564 <LCD_SetClipRectMax>
 800638a:	4620      	mov	r0, r4
 800638c:	f004 f974 	bl	800a678 <GUI_ALLOC_h2p>
 8006390:	6833      	ldr	r3, [r6, #0]
 8006392:	f9b0 1000 	ldrsh.w	r1, [r0]
 8006396:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800639a:	64d9      	str	r1, [r3, #76]	; 0x4c
 800639c:	651a      	str	r2, [r3, #80]	; 0x50
 800639e:	4628      	mov	r0, r5
 80063a0:	bd70      	pop	{r4, r5, r6, pc}
 80063a2:	bf00      	nop
 80063a4:	20000018 	.word	0x20000018
 80063a8:	200195a4 	.word	0x200195a4

080063ac <WM_CreateWindowAsChild>:
 80063ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063b0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80063b2:	469b      	mov	fp, r3
 80063b4:	4b4b      	ldr	r3, [pc, #300]	; (80064e4 <WM_CreateWindowAsChild+0x138>)
 80063b6:	4607      	mov	r7, r0
 80063b8:	4688      	mov	r8, r1
 80063ba:	4692      	mov	sl, r2
 80063bc:	681e      	ldr	r6, [r3, #0]
 80063be:	bb65      	cbnz	r5, 800641a <WM_CreateWindowAsChild+0x6e>
 80063c0:	4b49      	ldr	r3, [pc, #292]	; (80064e8 <WM_CreateWindowAsChild+0x13c>)
 80063c2:	881b      	ldrh	r3, [r3, #0]
 80063c4:	b363      	cbz	r3, 8006420 <WM_CreateWindowAsChild+0x74>
 80063c6:	4b49      	ldr	r3, [pc, #292]	; (80064ec <WM_CreateWindowAsChild+0x140>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	7c5a      	ldrb	r2, [r3, #17]
 80063cc:	4b48      	ldr	r3, [pc, #288]	; (80064f0 <WM_CreateWindowAsChild+0x144>)
 80063ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063d2:	1c5a      	adds	r2, r3, #1
 80063d4:	d024      	beq.n	8006420 <WM_CreateWindowAsChild+0x74>
 80063d6:	b31b      	cbz	r3, 8006420 <WM_CreateWindowAsChild+0x74>
 80063d8:	461d      	mov	r5, r3
 80063da:	4628      	mov	r0, r5
 80063dc:	f004 f956 	bl	800a68c <GUI_ALLOC_LockH>
 80063e0:	f9b0 2000 	ldrsh.w	r2, [r0]
 80063e4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80063e8:	9001      	str	r0, [sp, #4]
 80063ea:	4417      	add	r7, r2
 80063ec:	4498      	add	r8, r3
 80063ee:	f1ba 0f00 	cmp.w	sl, #0
 80063f2:	d105      	bne.n	8006400 <WM_CreateWindowAsChild+0x54>
 80063f4:	f9b0 a004 	ldrsh.w	sl, [r0, #4]
 80063f8:	ebc2 0a0a 	rsb	sl, r2, sl
 80063fc:	f10a 0a01 	add.w	sl, sl, #1
 8006400:	f1bb 0f00 	cmp.w	fp, #0
 8006404:	d105      	bne.n	8006412 <WM_CreateWindowAsChild+0x66>
 8006406:	f9b0 b006 	ldrsh.w	fp, [r0, #6]
 800640a:	ebc3 0b0b 	rsb	fp, r3, fp
 800640e:	f10b 0b01 	add.w	fp, fp, #1
 8006412:	a801      	add	r0, sp, #4
 8006414:	f004 f948 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 8006418:	e002      	b.n	8006420 <WM_CreateWindowAsChild+0x74>
 800641a:	1c6b      	adds	r3, r5, #1
 800641c:	d1dd      	bne.n	80063da <WM_CreateWindowAsChild+0x2e>
 800641e:	2500      	movs	r5, #0
 8006420:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8006422:	302c      	adds	r0, #44	; 0x2c
 8006424:	f004 fb92 	bl	800ab4c <GUI_ALLOC_AllocZero>
 8006428:	4604      	mov	r4, r0
 800642a:	2800      	cmp	r0, #0
 800642c:	d056      	beq.n	80064dc <WM_CreateWindowAsChild+0x130>
 800642e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006430:	431e      	orrs	r6, r3
 8006432:	4b2d      	ldr	r3, [pc, #180]	; (80064e8 <WM_CreateWindowAsChild+0x13c>)
 8006434:	881a      	ldrh	r2, [r3, #0]
 8006436:	3201      	adds	r2, #1
 8006438:	801a      	strh	r2, [r3, #0]
 800643a:	f004 f927 	bl	800a68c <GUI_ALLOC_LockH>
 800643e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006440:	6103      	str	r3, [r0, #16]
 8006442:	f10d 0908 	add.w	r9, sp, #8
 8006446:	4b2b      	ldr	r3, [pc, #172]	; (80064f4 <WM_CreateWindowAsChild+0x148>)
 8006448:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800644a:	f849 0d08 	str.w	r0, [r9, #-8]!
 800644e:	4033      	ands	r3, r6
 8006450:	8007      	strh	r7, [r0, #0]
 8006452:	f8a0 8002 	strh.w	r8, [r0, #2]
 8006456:	4457      	add	r7, sl
 8006458:	44d8      	add	r8, fp
 800645a:	4313      	orrs	r3, r2
 800645c:	3f01      	subs	r7, #1
 800645e:	f108 38ff 	add.w	r8, r8, #4294967295
 8006462:	6283      	str	r3, [r0, #40]	; 0x28
 8006464:	8087      	strh	r7, [r0, #4]
 8006466:	f8a0 8006 	strh.w	r8, [r0, #6]
 800646a:	4668      	mov	r0, sp
 800646c:	f004 f91c 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 8006470:	4b21      	ldr	r3, [pc, #132]	; (80064f8 <WM_CreateWindowAsChild+0x14c>)
 8006472:	6818      	ldr	r0, [r3, #0]
 8006474:	b148      	cbz	r0, 800648a <WM_CreateWindowAsChild+0xde>
 8006476:	f004 f8ff 	bl	800a678 <GUI_ALLOC_h2p>
 800647a:	4607      	mov	r7, r0
 800647c:	4620      	mov	r0, r4
 800647e:	f004 f8fb 	bl	800a678 <GUI_ALLOC_h2p>
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	6143      	str	r3, [r0, #20]
 8006486:	617c      	str	r4, [r7, #20]
 8006488:	e000      	b.n	800648c <WM_CreateWindowAsChild+0xe0>
 800648a:	601c      	str	r4, [r3, #0]
 800648c:	4629      	mov	r1, r5
 800648e:	4620      	mov	r0, r4
 8006490:	f7ff fd5c 	bl	8005f4c <WM__InsertWindowIntoList>
 8006494:	06b5      	lsls	r5, r6, #26
 8006496:	d502      	bpl.n	800649e <WM_CreateWindowAsChild+0xf2>
 8006498:	4620      	mov	r0, r4
 800649a:	f7ff ff67 	bl	800636c <WM_SelectWindow>
 800649e:	07f0      	lsls	r0, r6, #31
 80064a0:	d503      	bpl.n	80064aa <WM_CreateWindowAsChild+0xfe>
 80064a2:	4b16      	ldr	r3, [pc, #88]	; (80064fc <WM_CreateWindowAsChild+0x150>)
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	3201      	adds	r2, #1
 80064a8:	601a      	str	r2, [r3, #0]
 80064aa:	0671      	lsls	r1, r6, #25
 80064ac:	d502      	bpl.n	80064b4 <WM_CreateWindowAsChild+0x108>
 80064ae:	4620      	mov	r0, r4
 80064b0:	f004 fc48 	bl	800ad44 <WM_BringToBottom>
 80064b4:	07b2      	lsls	r2, r6, #30
 80064b6:	d50d      	bpl.n	80064d4 <WM_CreateWindowAsChild+0x128>
 80064b8:	4620      	mov	r0, r4
 80064ba:	f004 f8e7 	bl	800a68c <GUI_ALLOC_LockH>
 80064be:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80064c0:	9000      	str	r0, [sp, #0]
 80064c2:	f043 0302 	orr.w	r3, r3, #2
 80064c6:	6283      	str	r3, [r0, #40]	; 0x28
 80064c8:	4668      	mov	r0, sp
 80064ca:	f004 f8ed 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 80064ce:	4620      	mov	r0, r4
 80064d0:	f7ff ff2b 	bl	800632a <WM_InvalidateWindow>
 80064d4:	4620      	mov	r0, r4
 80064d6:	2101      	movs	r1, #1
 80064d8:	f7ff fed4 	bl	8006284 <WM__SendMsgNoData>
 80064dc:	4620      	mov	r0, r4
 80064de:	b003      	add	sp, #12
 80064e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064e4:	200195b0 	.word	0x200195b0
 80064e8:	20019580 	.word	0x20019580
 80064ec:	20000018 	.word	0x20000018
 80064f0:	20019588 	.word	0x20019588
 80064f4:	003f3f9f 	.word	0x003f3f9f
 80064f8:	200195a4 	.word	0x200195a4
 80064fc:	200195d0 	.word	0x200195d0

08006500 <WM__GetNextIVR>:
 8006500:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8006504:	4f5d      	ldr	r7, [pc, #372]	; (800667c <WM__GetNextIVR+0x17c>)
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 800650c:	2800      	cmp	r0, #0
 800650e:	f000 80b2 	beq.w	8006676 <WM__GetNextIVR+0x176>
 8006512:	4b5b      	ldr	r3, [pc, #364]	; (8006680 <WM__GetNextIVR+0x180>)
 8006514:	695a      	ldr	r2, [r3, #20]
 8006516:	2a01      	cmp	r2, #1
 8006518:	461c      	mov	r4, r3
 800651a:	dd03      	ble.n	8006524 <WM__GetNextIVR+0x24>
 800651c:	3a01      	subs	r2, #1
 800651e:	615a      	str	r2, [r3, #20]
 8006520:	2000      	movs	r0, #0
 8006522:	e0a8      	b.n	8006676 <WM__GetNextIVR+0x176>
 8006524:	f104 0608 	add.w	r6, r4, #8
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800652e:	3301      	adds	r3, #1
 8006530:	ad02      	add	r5, sp, #8
 8006532:	6123      	str	r3, [r4, #16]
 8006534:	e885 0003 	stmia.w	r5, {r0, r1}
 8006538:	b923      	cbnz	r3, 8006544 <WM__GetNextIVR+0x44>
 800653a:	8823      	ldrh	r3, [r4, #0]
 800653c:	f8ad 3008 	strh.w	r3, [sp, #8]
 8006540:	8863      	ldrh	r3, [r4, #2]
 8006542:	e011      	b.n	8006568 <WM__GetNextIVR+0x68>
 8006544:	89a3      	ldrh	r3, [r4, #12]
 8006546:	8962      	ldrh	r2, [r4, #10]
 8006548:	f8ad 200a 	strh.w	r2, [sp, #10]
 800654c:	3301      	adds	r3, #1
 800654e:	b29b      	uxth	r3, r3
 8006550:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8006554:	f8ad 3008 	strh.w	r3, [sp, #8]
 8006558:	b21b      	sxth	r3, r3
 800655a:	429a      	cmp	r2, r3
 800655c:	da06      	bge.n	800656c <WM__GetNextIVR+0x6c>
 800655e:	8823      	ldrh	r3, [r4, #0]
 8006560:	f8ad 3008 	strh.w	r3, [sp, #8]
 8006564:	89e3      	ldrh	r3, [r4, #14]
 8006566:	3301      	adds	r3, #1
 8006568:	f8ad 300a 	strh.w	r3, [sp, #10]
 800656c:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8006570:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8006574:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8006680 <WM__GetNextIVR+0x180>
 8006578:	429a      	cmp	r2, r3
 800657a:	dd04      	ble.n	8006586 <WM__GetNextIVR+0x86>
 800657c:	6963      	ldr	r3, [r4, #20]
 800657e:	3b01      	subs	r3, #1
 8006580:	2000      	movs	r0, #0
 8006582:	6163      	str	r3, [r4, #20]
 8006584:	e077      	b.n	8006676 <WM__GetNextIVR+0x176>
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800658a:	f004 f87f 	bl	800a68c <GUI_ALLOC_LockH>
 800658e:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8006592:	f9b8 3000 	ldrsh.w	r3, [r8]
 8006596:	9001      	str	r0, [sp, #4]
 8006598:	429a      	cmp	r2, r3
 800659a:	d11c      	bne.n	80065d6 <WM__GetNextIVR+0xd6>
 800659c:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80065a0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80065a4:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80065a8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80065ac:	4b33      	ldr	r3, [pc, #204]	; (800667c <WM__GetNextIVR+0x17c>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065b2:	b15a      	cbz	r2, 80065cc <WM__GetNextIVR+0xcc>
 80065b4:	4610      	mov	r0, r2
 80065b6:	f004 f85f 	bl	800a678 <GUI_ALLOC_h2p>
 80065ba:	4680      	mov	r8, r0
 80065bc:	2200      	movs	r2, #0
 80065be:	6a00      	ldr	r0, [r0, #32]
 80065c0:	4629      	mov	r1, r5
 80065c2:	f7ff fbbf 	bl	8005d44 <_Findy1>
 80065c6:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80065ca:	e7f2      	b.n	80065b2 <WM__GetNextIVR+0xb2>
 80065cc:	9b01      	ldr	r3, [sp, #4]
 80065ce:	4629      	mov	r1, r5
 80065d0:	69d8      	ldr	r0, [r3, #28]
 80065d2:	f7ff fbb7 	bl	8005d44 <_Findy1>
 80065d6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80065da:	f8ad 300c 	strh.w	r3, [sp, #12]
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065e2:	b16a      	cbz	r2, 8006600 <WM__GetNextIVR+0x100>
 80065e4:	4610      	mov	r0, r2
 80065e6:	f004 f847 	bl	800a678 <GUI_ALLOC_h2p>
 80065ea:	4629      	mov	r1, r5
 80065ec:	4680      	mov	r8, r0
 80065ee:	2200      	movs	r2, #0
 80065f0:	6a00      	ldr	r0, [r0, #32]
 80065f2:	f7ff fbfd 	bl	8005df0 <_Findx0>
 80065f6:	2800      	cmp	r0, #0
 80065f8:	d1ed      	bne.n	80065d6 <WM__GetNextIVR+0xd6>
 80065fa:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80065fe:	e7f0      	b.n	80065e2 <WM__GetNextIVR+0xe2>
 8006600:	9b01      	ldr	r3, [sp, #4]
 8006602:	4629      	mov	r1, r5
 8006604:	69d8      	ldr	r0, [r3, #28]
 8006606:	f7ff fbf3 	bl	8005df0 <_Findx0>
 800660a:	2800      	cmp	r0, #0
 800660c:	d1e3      	bne.n	80065d6 <WM__GetNextIVR+0xd6>
 800660e:	88a3      	ldrh	r3, [r4, #4]
 8006610:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8006614:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006618:	b21b      	sxth	r3, r3
 800661a:	429a      	cmp	r2, r3
 800661c:	dd07      	ble.n	800662e <WM__GetNextIVR+0x12e>
 800661e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006622:	e886 0003 	stmia.w	r6, {r0, r1}
 8006626:	a801      	add	r0, sp, #4
 8006628:	f004 f83e 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 800662c:	e797      	b.n	800655e <WM__GetNextIVR+0x5e>
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006632:	b152      	cbz	r2, 800664a <WM__GetNextIVR+0x14a>
 8006634:	4610      	mov	r0, r2
 8006636:	f004 f81f 	bl	800a678 <GUI_ALLOC_h2p>
 800663a:	4607      	mov	r7, r0
 800663c:	2200      	movs	r2, #0
 800663e:	6a00      	ldr	r0, [r0, #32]
 8006640:	4629      	mov	r1, r5
 8006642:	f7ff fc19 	bl	8005e78 <_Findx1>
 8006646:	69ba      	ldr	r2, [r7, #24]
 8006648:	e7f3      	b.n	8006632 <WM__GetNextIVR+0x132>
 800664a:	af04      	add	r7, sp, #16
 800664c:	4629      	mov	r1, r5
 800664e:	f857 3d0c 	ldr.w	r3, [r7, #-12]!
 8006652:	69d8      	ldr	r0, [r3, #28]
 8006654:	f7ff fc10 	bl	8005e78 <_Findx1>
 8006658:	4638      	mov	r0, r7
 800665a:	f004 f825 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 800665e:	6923      	ldr	r3, [r4, #16]
 8006660:	f644 6220 	movw	r2, #20000	; 0x4e20
 8006664:	4293      	cmp	r3, r2
 8006666:	dc89      	bgt.n	800657c <WM__GetNextIVR+0x7c>
 8006668:	e895 0003 	ldmia.w	r5, {r0, r1}
 800666c:	e886 0003 	stmia.w	r6, {r0, r1}
 8006670:	f7ff fcee 	bl	8006050 <WM__ActivateClipRect>
 8006674:	2001      	movs	r0, #1
 8006676:	b004      	add	sp, #16
 8006678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800667c:	20000018 	.word	0x20000018
 8006680:	200190bc 	.word	0x200190bc

08006684 <WM__InitIVRSearch>:
 8006684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006688:	4f39      	ldr	r7, [pc, #228]	; (8006770 <WM__InitIVRSearch+0xec>)
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8006690:	b086      	sub	sp, #24
 8006692:	4606      	mov	r6, r0
 8006694:	b912      	cbnz	r2, 800669c <WM__InitIVRSearch+0x18>
 8006696:	f7ff fcdb 	bl	8006050 <WM__ActivateClipRect>
 800669a:	e064      	b.n	8006766 <WM__InitIVRSearch+0xe2>
 800669c:	4d35      	ldr	r5, [pc, #212]	; (8006774 <WM__InitIVRSearch+0xf0>)
 800669e:	696a      	ldr	r2, [r5, #20]
 80066a0:	3201      	adds	r2, #1
 80066a2:	2a01      	cmp	r2, #1
 80066a4:	616a      	str	r2, [r5, #20]
 80066a6:	462c      	mov	r4, r5
 80066a8:	dc5d      	bgt.n	8006766 <WM__InitIVRSearch+0xe2>
 80066aa:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80066ac:	f003 ffee 	bl	800a68c <GUI_ALLOC_LockH>
 80066b0:	f04f 32ff 	mov.w	r2, #4294967295
 80066b4:	612a      	str	r2, [r5, #16]
 80066b6:	4a30      	ldr	r2, [pc, #192]	; (8006778 <WM__InitIVRSearch+0xf4>)
 80066b8:	9000      	str	r0, [sp, #0]
 80066ba:	7812      	ldrb	r2, [r2, #0]
 80066bc:	b12a      	cbz	r2, 80066ca <WM__InitIVRSearch+0x46>
 80066be:	f100 0308 	add.w	r3, r0, #8
 80066c2:	aa02      	add	r2, sp, #8
 80066c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80066c8:	e005      	b.n	80066d6 <WM__InitIVRSearch+0x52>
 80066ca:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80066cc:	f012 0802 	ands.w	r8, r2, #2
 80066d0:	d00a      	beq.n	80066e8 <WM__InitIVRSearch+0x64>
 80066d2:	c803      	ldmia	r0, {r0, r1}
 80066d4:	aa02      	add	r2, sp, #8
 80066d6:	e882 0003 	stmia.w	r2, {r0, r1}
 80066da:	ad02      	add	r5, sp, #8
 80066dc:	b166      	cbz	r6, 80066f8 <WM__InitIVRSearch+0x74>
 80066de:	4628      	mov	r0, r5
 80066e0:	4631      	mov	r1, r6
 80066e2:	f002 f907 	bl	80088f4 <GUI__IntersectRect>
 80066e6:	e007      	b.n	80066f8 <WM__InitIVRSearch+0x74>
 80066e8:	696b      	ldr	r3, [r5, #20]
 80066ea:	4668      	mov	r0, sp
 80066ec:	3b01      	subs	r3, #1
 80066ee:	616b      	str	r3, [r5, #20]
 80066f0:	f003 ffda 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 80066f4:	4640      	mov	r0, r8
 80066f6:	e037      	b.n	8006768 <WM__InitIVRSearch+0xe4>
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	4e20      	ldr	r6, [pc, #128]	; (800677c <WM__InitIVRSearch+0xf8>)
 80066fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066fe:	b1c2      	cbz	r2, 8006732 <WM__InitIVRSearch+0xae>
 8006700:	9b00      	ldr	r3, [sp, #0]
 8006702:	6810      	ldr	r0, [r2, #0]
 8006704:	6851      	ldr	r1, [r2, #4]
 8006706:	9301      	str	r3, [sp, #4]
 8006708:	ab04      	add	r3, sp, #16
 800670a:	c303      	stmia	r3!, {r0, r1}
 800670c:	6833      	ldr	r3, [r6, #0]
 800670e:	b133      	cbz	r3, 800671e <WM__InitIVRSearch+0x9a>
 8006710:	a801      	add	r0, sp, #4
 8006712:	f003 ffc9 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 8006716:	6830      	ldr	r0, [r6, #0]
 8006718:	f003 ffb8 	bl	800a68c <GUI_ALLOC_LockH>
 800671c:	9001      	str	r0, [sp, #4]
 800671e:	9801      	ldr	r0, [sp, #4]
 8006720:	a904      	add	r1, sp, #16
 8006722:	f7ff fc65 	bl	8005ff0 <WM__Client2Screen>
 8006726:	4628      	mov	r0, r5
 8006728:	a904      	add	r1, sp, #16
 800672a:	f002 f8e3 	bl	80088f4 <GUI__IntersectRect>
 800672e:	a801      	add	r0, sp, #4
 8006730:	e000      	b.n	8006734 <WM__InitIVRSearch+0xb0>
 8006732:	4668      	mov	r0, sp
 8006734:	f003 ffb8 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 8006738:	6831      	ldr	r1, [r6, #0]
 800673a:	b119      	cbz	r1, 8006744 <WM__InitIVRSearch+0xc0>
 800673c:	4628      	mov	r0, r5
 800673e:	f7ff fbd7 	bl	8005ef0 <WM__ClipAtParentBorders>
 8006742:	b128      	cbz	r0, 8006750 <WM__InitIVRSearch+0xcc>
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	4628      	mov	r0, r5
 8006748:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800674a:	f7ff fbd1 	bl	8005ef0 <WM__ClipAtParentBorders>
 800674e:	b918      	cbnz	r0, 8006758 <WM__InitIVRSearch+0xd4>
 8006750:	6963      	ldr	r3, [r4, #20]
 8006752:	3b01      	subs	r3, #1
 8006754:	6163      	str	r3, [r4, #20]
 8006756:	e007      	b.n	8006768 <WM__InitIVRSearch+0xe4>
 8006758:	e895 0003 	ldmia.w	r5, {r0, r1}
 800675c:	e884 0003 	stmia.w	r4, {r0, r1}
 8006760:	f7ff fece 	bl	8006500 <WM__GetNextIVR>
 8006764:	e000      	b.n	8006768 <WM__InitIVRSearch+0xe4>
 8006766:	2001      	movs	r0, #1
 8006768:	b006      	add	sp, #24
 800676a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800676e:	bf00      	nop
 8006770:	20000018 	.word	0x20000018
 8006774:	200190bc 	.word	0x200190bc
 8006778:	200195ad 	.word	0x200195ad
 800677c:	20019584 	.word	0x20019584

08006780 <WM_Activate>:
 8006780:	4b02      	ldr	r3, [pc, #8]	; (800678c <WM_Activate+0xc>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2201      	movs	r2, #1
 8006786:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800678a:	4770      	bx	lr
 800678c:	20000018 	.word	0x20000018

08006790 <WM_Deactivate>:
 8006790:	4b03      	ldr	r3, [pc, #12]	; (80067a0 <WM_Deactivate+0x10>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2200      	movs	r2, #0
 8006796:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800679a:	f001 bee3 	b.w	8008564 <LCD_SetClipRectMax>
 800679e:	bf00      	nop
 80067a0:	20000018 	.word	0x20000018

080067a4 <WM_DefaultProc>:
 80067a4:	b510      	push	{r4, lr}
 80067a6:	4604      	mov	r4, r0
 80067a8:	6840      	ldr	r0, [r0, #4]
 80067aa:	6823      	ldr	r3, [r4, #0]
 80067ac:	68e1      	ldr	r1, [r4, #12]
 80067ae:	2b17      	cmp	r3, #23
 80067b0:	d00f      	beq.n	80067d2 <WM_DefaultProc+0x2e>
 80067b2:	dc06      	bgt.n	80067c2 <WM_DefaultProc+0x1e>
 80067b4:	2b0e      	cmp	r3, #14
 80067b6:	d00e      	beq.n	80067d6 <WM_DefaultProc+0x32>
 80067b8:	2b14      	cmp	r3, #20
 80067ba:	d114      	bne.n	80067e6 <WM_DefaultProc+0x42>
 80067bc:	f7ff fa88 	bl	8005cd0 <WM__GetClientRectEx>
 80067c0:	e011      	b.n	80067e6 <WM_DefaultProc+0x42>
 80067c2:	2b22      	cmp	r3, #34	; 0x22
 80067c4:	d00c      	beq.n	80067e0 <WM_DefaultProc+0x3c>
 80067c6:	2b28      	cmp	r3, #40	; 0x28
 80067c8:	d10d      	bne.n	80067e6 <WM_DefaultProc+0x42>
 80067ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067ce:	f7ff bdac 	b.w	800632a <WM_InvalidateWindow>
 80067d2:	60e0      	str	r0, [r4, #12]
 80067d4:	bd10      	pop	{r4, pc}
 80067d6:	4621      	mov	r1, r4
 80067d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067dc:	f004 ba9c 	b.w	800ad18 <WM_SendToParent>
 80067e0:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80067e4:	e000      	b.n	80067e8 <WM_DefaultProc+0x44>
 80067e6:	2300      	movs	r3, #0
 80067e8:	60e3      	str	r3, [r4, #12]
 80067ea:	bd10      	pop	{r4, pc}

080067ec <_cbBackWin>:
 80067ec:	6803      	ldr	r3, [r0, #0]
 80067ee:	2b0e      	cmp	r3, #14
 80067f0:	b510      	push	{r4, lr}
 80067f2:	4604      	mov	r4, r0
 80067f4:	d002      	beq.n	80067fc <_cbBackWin+0x10>
 80067f6:	2b0f      	cmp	r3, #15
 80067f8:	d009      	beq.n	800680e <_cbBackWin+0x22>
 80067fa:	e020      	b.n	800683e <_cbBackWin+0x52>
 80067fc:	68c3      	ldr	r3, [r0, #12]
 80067fe:	685a      	ldr	r2, [r3, #4]
 8006800:	2a01      	cmp	r2, #1
 8006802:	d121      	bne.n	8006848 <_cbBackWin+0x5c>
 8006804:	6818      	ldr	r0, [r3, #0]
 8006806:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800680a:	f002 bc01 	b.w	8009010 <GUI_StoreKey>
 800680e:	4a0f      	ldr	r2, [pc, #60]	; (800684c <_cbBackWin+0x60>)
 8006810:	6843      	ldr	r3, [r0, #4]
 8006812:	6811      	ldr	r1, [r2, #0]
 8006814:	428b      	cmp	r3, r1
 8006816:	d006      	beq.n	8006826 <_cbBackWin+0x3a>
 8006818:	6852      	ldr	r2, [r2, #4]
 800681a:	4293      	cmp	r3, r2
 800681c:	bf14      	ite	ne
 800681e:	f04f 33ff 	movne.w	r3, #4294967295
 8006822:	2301      	moveq	r3, #1
 8006824:	e000      	b.n	8006828 <_cbBackWin+0x3c>
 8006826:	2300      	movs	r3, #0
 8006828:	4a09      	ldr	r2, [pc, #36]	; (8006850 <_cbBackWin+0x64>)
 800682a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800682e:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8006832:	4298      	cmp	r0, r3
 8006834:	d003      	beq.n	800683e <_cbBackWin+0x52>
 8006836:	f002 fb77 	bl	8008f28 <GUI_SetBkColor>
 800683a:	f003 f885 	bl	8009948 <GUI_Clear>
 800683e:	4620      	mov	r0, r4
 8006840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006844:	f7ff bfae 	b.w	80067a4 <WM_DefaultProc>
 8006848:	bd10      	pop	{r4, pc}
 800684a:	bf00      	nop
 800684c:	20019588 	.word	0x20019588
 8006850:	200195b4 	.word	0x200195b4

08006854 <WM_Init>:
 8006854:	b530      	push	{r4, r5, lr}
 8006856:	4b2b      	ldr	r3, [pc, #172]	; (8006904 <WM_Init+0xb0>)
 8006858:	7818      	ldrb	r0, [r3, #0]
 800685a:	b085      	sub	sp, #20
 800685c:	461d      	mov	r5, r3
 800685e:	2800      	cmp	r0, #0
 8006860:	d14d      	bne.n	80068fe <WM_Init+0xaa>
 8006862:	4b29      	ldr	r3, [pc, #164]	; (8006908 <WM_Init+0xb4>)
 8006864:	6018      	str	r0, [r3, #0]
 8006866:	4b29      	ldr	r3, [pc, #164]	; (800690c <WM_Init+0xb8>)
 8006868:	6018      	str	r0, [r3, #0]
 800686a:	4b29      	ldr	r3, [pc, #164]	; (8006910 <WM_Init+0xbc>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	6458      	str	r0, [r3, #68]	; 0x44
 8006870:	4b28      	ldr	r3, [pc, #160]	; (8006914 <WM_Init+0xc0>)
 8006872:	8018      	strh	r0, [r3, #0]
 8006874:	4b28      	ldr	r3, [pc, #160]	; (8006918 <WM_Init+0xc4>)
 8006876:	4604      	mov	r4, r0
 8006878:	8018      	strh	r0, [r3, #0]
 800687a:	4620      	mov	r0, r4
 800687c:	f002 ff3a 	bl	80096f4 <GUI_DEVICE__GetpDriver>
 8006880:	b1c0      	cbz	r0, 80068b4 <WM_Init+0x60>
 8006882:	f04f 32ff 	mov.w	r2, #4294967295
 8006886:	2302      	movs	r3, #2
 8006888:	e88d 000c 	stmia.w	sp, {r2, r3}
 800688c:	2000      	movs	r0, #0
 800688e:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8006892:	4b22      	ldr	r3, [pc, #136]	; (800691c <WM_Init+0xc8>)
 8006894:	9302      	str	r3, [sp, #8]
 8006896:	9003      	str	r0, [sp, #12]
 8006898:	4613      	mov	r3, r2
 800689a:	4601      	mov	r1, r0
 800689c:	f7ff fd86 	bl	80063ac <WM_CreateWindowAsChild>
 80068a0:	4b1f      	ldr	r3, [pc, #124]	; (8006920 <WM_Init+0xcc>)
 80068a2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80068a6:	4b1f      	ldr	r3, [pc, #124]	; (8006924 <WM_Init+0xd0>)
 80068a8:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80068ac:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80068b0:	f7ff fd3b 	bl	800632a <WM_InvalidateWindow>
 80068b4:	3401      	adds	r4, #1
 80068b6:	2c02      	cmp	r4, #2
 80068b8:	d1df      	bne.n	800687a <WM_Init+0x26>
 80068ba:	481b      	ldr	r0, [pc, #108]	; (8006928 <WM_Init+0xd4>)
 80068bc:	f004 fa3a 	bl	800ad34 <WM__AddCriticalHandle>
 80068c0:	481a      	ldr	r0, [pc, #104]	; (800692c <WM_Init+0xd8>)
 80068c2:	f004 fa37 	bl	800ad34 <WM__AddCriticalHandle>
 80068c6:	481a      	ldr	r0, [pc, #104]	; (8006930 <WM_Init+0xdc>)
 80068c8:	f004 fa34 	bl	800ad34 <WM__AddCriticalHandle>
 80068cc:	4819      	ldr	r0, [pc, #100]	; (8006934 <WM_Init+0xe0>)
 80068ce:	f004 fa31 	bl	800ad34 <WM__AddCriticalHandle>
 80068d2:	4819      	ldr	r0, [pc, #100]	; (8006938 <WM_Init+0xe4>)
 80068d4:	f004 fa2e 	bl	800ad34 <WM__AddCriticalHandle>
 80068d8:	4818      	ldr	r0, [pc, #96]	; (800693c <WM_Init+0xe8>)
 80068da:	f004 fa2b 	bl	800ad34 <WM__AddCriticalHandle>
 80068de:	4b10      	ldr	r3, [pc, #64]	; (8006920 <WM_Init+0xcc>)
 80068e0:	6818      	ldr	r0, [r3, #0]
 80068e2:	f7ff fd43 	bl	800636c <WM_SelectWindow>
 80068e6:	f7ff ff4b 	bl	8006780 <WM_Activate>
 80068ea:	2301      	movs	r3, #1
 80068ec:	702b      	strb	r3, [r5, #0]
 80068ee:	4814      	ldr	r0, [pc, #80]	; (8006940 <WM_Init+0xec>)
 80068f0:	4b14      	ldr	r3, [pc, #80]	; (8006944 <WM_Init+0xf0>)
 80068f2:	6003      	str	r3, [r0, #0]
 80068f4:	b005      	add	sp, #20
 80068f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068fa:	f003 b835 	b.w	8009968 <GUI__RegisterExit>
 80068fe:	b005      	add	sp, #20
 8006900:	bd30      	pop	{r4, r5, pc}
 8006902:	bf00      	nop
 8006904:	200190e0 	.word	0x200190e0
 8006908:	200195a4 	.word	0x200195a4
 800690c:	200190d4 	.word	0x200190d4
 8006910:	20000018 	.word	0x20000018
 8006914:	200195a0 	.word	0x200195a0
 8006918:	20019580 	.word	0x20019580
 800691c:	080067ed 	.word	0x080067ed
 8006920:	20019588 	.word	0x20019588
 8006924:	200195b4 	.word	0x200195b4
 8006928:	200196f4 	.word	0x200196f4
 800692c:	200196e4 	.word	0x200196e4
 8006930:	200196d4 	.word	0x200196d4
 8006934:	200196fc 	.word	0x200196fc
 8006938:	200196ec 	.word	0x200196ec
 800693c:	200196dc 	.word	0x200196dc
 8006940:	200190d8 	.word	0x200190d8
 8006944:	08005cf5 	.word	0x08005cf5

08006948 <GUI_MEMDEV_GetDataPtr>:
 8006948:	b513      	push	{r0, r1, r4, lr}
 800694a:	b150      	cbz	r0, 8006962 <GUI_MEMDEV_GetDataPtr+0x1a>
 800694c:	f003 fe9e 	bl	800a68c <GUI_ALLOC_LockH>
 8006950:	4604      	mov	r4, r0
 8006952:	a802      	add	r0, sp, #8
 8006954:	f840 4d04 	str.w	r4, [r0, #-4]!
 8006958:	f003 fea6 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 800695c:	f104 0018 	add.w	r0, r4, #24
 8006960:	e7ff      	b.n	8006962 <GUI_MEMDEV_GetDataPtr+0x1a>
 8006962:	b002      	add	sp, #8
 8006964:	bd10      	pop	{r4, pc}
	...

08006968 <GUI_MEMDEV__CreateFixed>:
 8006968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800696c:	4e3e      	ldr	r6, [pc, #248]	; (8006a68 <GUI_MEMDEV__CreateFixed+0x100>)
 800696e:	b087      	sub	sp, #28
 8006970:	461d      	mov	r5, r3
 8006972:	6833      	ldr	r3, [r6, #0]
 8006974:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8006976:	7c5b      	ldrb	r3, [r3, #17]
 8006978:	4683      	mov	fp, r0
 800697a:	468a      	mov	sl, r1
 800697c:	4690      	mov	r8, r2
 800697e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8006980:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006982:	2200      	movs	r2, #0
 8006984:	f002 fec8 	bl	8009718 <GUI_DEVICE_Create>
 8006988:	4604      	mov	r4, r0
 800698a:	2800      	cmp	r0, #0
 800698c:	d033      	beq.n	80069f6 <GUI_MEMDEV__CreateFixed+0x8e>
 800698e:	6903      	ldr	r3, [r0, #16]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	4798      	blx	r3
 8006994:	f001 fb25 	bl	8007fe2 <LCD__GetBPPDevice>
 8006998:	fb08 f600 	mul.w	r6, r8, r0
 800699c:	9003      	str	r0, [sp, #12]
 800699e:	3607      	adds	r6, #7
 80069a0:	f004 f83c 	bl	800aa1c <GUI_ALLOC_RequestSize>
 80069a4:	f017 0901 	ands.w	r9, r7, #1
 80069a8:	ea4f 06d6 	mov.w	r6, r6, lsr #3
 80069ac:	d104      	bne.n	80069b8 <GUI_MEMDEV__CreateFixed+0x50>
 80069ae:	2304      	movs	r3, #4
 80069b0:	fb90 f0f3 	sdiv	r0, r0, r3
 80069b4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80069b8:	2d00      	cmp	r5, #0
 80069ba:	dc09      	bgt.n	80069d0 <GUI_MEMDEV__CreateFixed+0x68>
 80069bc:	b11e      	cbz	r6, 80069c6 <GUI_MEMDEV__CreateFixed+0x5e>
 80069be:	3818      	subs	r0, #24
 80069c0:	fbb0 f0f6 	udiv	r0, r0, r6
 80069c4:	e000      	b.n	80069c8 <GUI_MEMDEV__CreateFixed+0x60>
 80069c6:	4630      	mov	r0, r6
 80069c8:	426d      	negs	r5, r5
 80069ca:	42a8      	cmp	r0, r5
 80069cc:	bfb8      	it	lt
 80069ce:	4605      	movlt	r5, r0
 80069d0:	f1b9 0f00 	cmp.w	r9, #0
 80069d4:	d109      	bne.n	80069ea <GUI_MEMDEV__CreateFixed+0x82>
 80069d6:	f8cd 9000 	str.w	r9, [sp]
 80069da:	4658      	mov	r0, fp
 80069dc:	4651      	mov	r1, sl
 80069de:	4642      	mov	r2, r8
 80069e0:	462b      	mov	r3, r5
 80069e2:	f004 fe69 	bl	800b6b8 <GUI_USAGE_BM_Create>
 80069e6:	4607      	mov	r7, r0
 80069e8:	e000      	b.n	80069ec <GUI_MEMDEV__CreateFixed+0x84>
 80069ea:	2700      	movs	r7, #0
 80069ec:	2d00      	cmp	r5, #0
 80069ee:	dc04      	bgt.n	80069fa <GUI_MEMDEV__CreateFixed+0x92>
 80069f0:	4620      	mov	r0, r4
 80069f2:	f002 fe8f 	bl	8009714 <GUI_DEVICE_Delete>
 80069f6:	2000      	movs	r0, #0
 80069f8:	e032      	b.n	8006a60 <GUI_MEMDEV__CreateFixed+0xf8>
 80069fa:	fb06 f005 	mul.w	r0, r6, r5
 80069fe:	3018      	adds	r0, #24
 8006a00:	f1b9 0f00 	cmp.w	r9, #0
 8006a04:	d002      	beq.n	8006a0c <GUI_MEMDEV__CreateFixed+0xa4>
 8006a06:	f004 f895 	bl	800ab34 <GUI_ALLOC_AllocNoInit>
 8006a0a:	e001      	b.n	8006a10 <GUI_MEMDEV__CreateFixed+0xa8>
 8006a0c:	f004 f89e 	bl	800ab4c <GUI_ALLOC_AllocZero>
 8006a10:	4681      	mov	r9, r0
 8006a12:	b940      	cbnz	r0, 8006a26 <GUI_MEMDEV__CreateFixed+0xbe>
 8006a14:	4620      	mov	r0, r4
 8006a16:	f002 fe7d 	bl	8009714 <GUI_DEVICE_Delete>
 8006a1a:	2f00      	cmp	r7, #0
 8006a1c:	d0eb      	beq.n	80069f6 <GUI_MEMDEV__CreateFixed+0x8e>
 8006a1e:	4638      	mov	r0, r7
 8006a20:	f003 fe6e 	bl	800a700 <GUI_ALLOC_Free>
 8006a24:	e01b      	b.n	8006a5e <GUI_MEMDEV__CreateFixed+0xf6>
 8006a26:	f003 fe31 	bl	800a68c <GUI_ALLOC_LockH>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	a806      	add	r0, sp, #24
 8006a2e:	9a03      	ldr	r2, [sp, #12]
 8006a30:	f840 3d04 	str.w	r3, [r0, #-4]!
 8006a34:	611a      	str	r2, [r3, #16]
 8006a36:	601c      	str	r4, [r3, #0]
 8006a38:	f8a3 b004 	strh.w	fp, [r3, #4]
 8006a3c:	f8a3 a006 	strh.w	sl, [r3, #6]
 8006a40:	f8a3 8008 	strh.w	r8, [r3, #8]
 8006a44:	815d      	strh	r5, [r3, #10]
 8006a46:	60de      	str	r6, [r3, #12]
 8006a48:	615f      	str	r7, [r3, #20]
 8006a4a:	f003 fe2d 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 8006a4e:	4a06      	ldr	r2, [pc, #24]	; (8006a68 <GUI_MEMDEV__CreateFixed+0x100>)
 8006a50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a52:	6123      	str	r3, [r4, #16]
 8006a54:	6813      	ldr	r3, [r2, #0]
 8006a56:	f8c4 9008 	str.w	r9, [r4, #8]
 8006a5a:	7c5b      	ldrb	r3, [r3, #17]
 8006a5c:	61a3      	str	r3, [r4, #24]
 8006a5e:	4648      	mov	r0, r9
 8006a60:	b007      	add	sp, #28
 8006a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a66:	bf00      	nop
 8006a68:	20000018 	.word	0x20000018

08006a6c <GUI_MEMDEV_GetBitsPerPixel>:
 8006a6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a6e:	4605      	mov	r5, r0
 8006a70:	b170      	cbz	r0, 8006a90 <GUI_MEMDEV_GetBitsPerPixel+0x24>
 8006a72:	f003 fe0b 	bl	800a68c <GUI_ALLOC_LockH>
 8006a76:	6803      	ldr	r3, [r0, #0]
 8006a78:	ac02      	add	r4, sp, #8
 8006a7a:	691b      	ldr	r3, [r3, #16]
 8006a7c:	f844 0d04 	str.w	r0, [r4, #-4]!
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	4798      	blx	r3
 8006a84:	f001 faad 	bl	8007fe2 <LCD__GetBPPDevice>
 8006a88:	4605      	mov	r5, r0
 8006a8a:	4620      	mov	r0, r4
 8006a8c:	f003 fe0c 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 8006a90:	4628      	mov	r0, r5
 8006a92:	b003      	add	sp, #12
 8006a94:	bd30      	pop	{r4, r5, pc}
	...

08006a98 <GUI_MEMDEV_Delete>:
 8006a98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a9a:	4604      	mov	r4, r0
 8006a9c:	b1d0      	cbz	r0, 8006ad4 <GUI_MEMDEV_Delete+0x3c>
 8006a9e:	4b0e      	ldr	r3, [pc, #56]	; (8006ad8 <GUI_MEMDEV_Delete+0x40>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006aa4:	4283      	cmp	r3, r0
 8006aa6:	d101      	bne.n	8006aac <GUI_MEMDEV_Delete+0x14>
 8006aa8:	f002 fa58 	bl	8008f5c <GUI_SelectLCD>
 8006aac:	4620      	mov	r0, r4
 8006aae:	f003 fded 	bl	800a68c <GUI_ALLOC_LockH>
 8006ab2:	9001      	str	r0, [sp, #4]
 8006ab4:	6940      	ldr	r0, [r0, #20]
 8006ab6:	b108      	cbz	r0, 8006abc <GUI_MEMDEV_Delete+0x24>
 8006ab8:	f004 fe2a 	bl	800b710 <GUI_USAGE_DecUseCnt>
 8006abc:	ad02      	add	r5, sp, #8
 8006abe:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006ac2:	6818      	ldr	r0, [r3, #0]
 8006ac4:	f002 fe26 	bl	8009714 <GUI_DEVICE_Delete>
 8006ac8:	4628      	mov	r0, r5
 8006aca:	f003 fded 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 8006ace:	4620      	mov	r0, r4
 8006ad0:	f003 fe16 	bl	800a700 <GUI_ALLOC_Free>
 8006ad4:	b003      	add	sp, #12
 8006ad6:	bd30      	pop	{r4, r5, pc}
 8006ad8:	20000018 	.word	0x20000018

08006adc <GUI_MEMDEV_CreateEx>:
 8006adc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ae0:	469a      	mov	sl, r3
 8006ae2:	4b19      	ldr	r3, [pc, #100]	; (8006b48 <GUI_MEMDEV_CreateEx+0x6c>)
 8006ae4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4607      	mov	r7, r0
 8006aea:	7c58      	ldrb	r0, [r3, #17]
 8006aec:	4b17      	ldr	r3, [pc, #92]	; (8006b4c <GUI_MEMDEV_CreateEx+0x70>)
 8006aee:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8006af2:	4688      	mov	r8, r1
 8006af4:	4691      	mov	r9, r2
 8006af6:	68e3      	ldr	r3, [r4, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2b04      	cmp	r3, #4
 8006afc:	d006      	beq.n	8006b0c <GUI_MEMDEV_CreateEx+0x30>
 8006afe:	6824      	ldr	r4, [r4, #0]
 8006b00:	2c00      	cmp	r4, #0
 8006b02:	d1f8      	bne.n	8006af6 <GUI_MEMDEV_CreateEx+0x1a>
 8006b04:	f002 fdf6 	bl	80096f4 <GUI_DEVICE__GetpDriver>
 8006b08:	4604      	mov	r4, r0
 8006b0a:	b130      	cbz	r0, 8006b1a <GUI_MEMDEV_CreateEx+0x3e>
 8006b0c:	68e3      	ldr	r3, [r4, #12]
 8006b0e:	4620      	mov	r0, r4
 8006b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b12:	2101      	movs	r1, #1
 8006b14:	4798      	blx	r3
 8006b16:	4606      	mov	r6, r0
 8006b18:	b908      	cbnz	r0, 8006b1e <GUI_MEMDEV_CreateEx+0x42>
 8006b1a:	2000      	movs	r0, #0
 8006b1c:	e010      	b.n	8006b40 <GUI_MEMDEV_CreateEx+0x64>
 8006b1e:	6924      	ldr	r4, [r4, #16]
 8006b20:	68a3      	ldr	r3, [r4, #8]
 8006b22:	4798      	blx	r3
 8006b24:	3001      	adds	r0, #1
 8006b26:	bf04      	itt	eq
 8006b28:	f045 0501 	orreq.w	r5, r5, #1
 8006b2c:	4c08      	ldreq	r4, [pc, #32]	; (8006b50 <GUI_MEMDEV_CreateEx+0x74>)
 8006b2e:	9402      	str	r4, [sp, #8]
 8006b30:	e88d 0060 	stmia.w	sp, {r5, r6}
 8006b34:	4638      	mov	r0, r7
 8006b36:	4641      	mov	r1, r8
 8006b38:	464a      	mov	r2, r9
 8006b3a:	4653      	mov	r3, sl
 8006b3c:	f7ff ff14 	bl	8006968 <GUI_MEMDEV__CreateFixed>
 8006b40:	b004      	add	sp, #16
 8006b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b46:	bf00      	nop
 8006b48:	20000018 	.word	0x20000018
 8006b4c:	20019604 	.word	0x20019604
 8006b50:	0800fed0 	.word	0x0800fed0

08006b54 <GUI_MEMDEV_Create>:
 8006b54:	b513      	push	{r0, r1, r4, lr}
 8006b56:	2400      	movs	r4, #0
 8006b58:	9400      	str	r4, [sp, #0]
 8006b5a:	f7ff ffbf 	bl	8006adc <GUI_MEMDEV_CreateEx>
 8006b5e:	b002      	add	sp, #8
 8006b60:	bd10      	pop	{r4, pc}
	...

08006b64 <GUI_MEMDEV_Select>:
 8006b64:	4b11      	ldr	r3, [pc, #68]	; (8006bac <GUI_MEMDEV_Select+0x48>)
 8006b66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	4604      	mov	r4, r0
 8006b6c:	6e16      	ldr	r6, [r2, #96]	; 0x60
 8006b6e:	461f      	mov	r7, r3
 8006b70:	b910      	cbnz	r0, 8006b78 <GUI_MEMDEV_Select+0x14>
 8006b72:	f002 f9f3 	bl	8008f5c <GUI_SelectLCD>
 8006b76:	e016      	b.n	8006ba6 <GUI_MEMDEV_Select+0x42>
 8006b78:	b10e      	cbz	r6, 8006b7e <GUI_MEMDEV_Select+0x1a>
 8006b7a:	f002 f9ef 	bl	8008f5c <GUI_SelectLCD>
 8006b7e:	f7ff fe07 	bl	8006790 <WM_Deactivate>
 8006b82:	4620      	mov	r0, r4
 8006b84:	f003 fd82 	bl	800a68c <GUI_ALLOC_LockH>
 8006b88:	ad02      	add	r5, sp, #8
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	f845 0d04 	str.w	r0, [r5, #-4]!
 8006b90:	661c      	str	r4, [r3, #96]	; 0x60
 8006b92:	6800      	ldr	r0, [r0, #0]
 8006b94:	f002 fdfc 	bl	8009790 <GUI_DEVICE_Link>
 8006b98:	4628      	mov	r0, r5
 8006b9a:	f003 fd85 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 8006b9e:	f001 f8f1 	bl	8007d84 <LCD_UpdateColorIndices>
 8006ba2:	f001 fcdf 	bl	8008564 <LCD_SetClipRectMax>
 8006ba6:	4630      	mov	r0, r6
 8006ba8:	b003      	add	sp, #12
 8006baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bac:	20000018 	.word	0x20000018

08006bb0 <GUI_MEMDEV_CopyToLCDAt>:
 8006bb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006bb4:	460c      	mov	r4, r1
 8006bb6:	b085      	sub	sp, #20
 8006bb8:	4615      	mov	r5, r2
 8006bba:	4606      	mov	r6, r0
 8006bbc:	2800      	cmp	r0, #0
 8006bbe:	d041      	beq.n	8006c44 <GUI_MEMDEV_CopyToLCDAt+0x94>
 8006bc0:	2000      	movs	r0, #0
 8006bc2:	f002 f9af 	bl	8008f24 <GUI_SetDrawMode>
 8006bc6:	4b21      	ldr	r3, [pc, #132]	; (8006c4c <GUI_MEMDEV_CopyToLCDAt+0x9c>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4607      	mov	r7, r0
 8006bcc:	4630      	mov	r0, r6
 8006bce:	f8d3 8060 	ldr.w	r8, [r3, #96]	; 0x60
 8006bd2:	f003 fd5b 	bl	800a68c <GUI_ALLOC_LockH>
 8006bd6:	6803      	ldr	r3, [r0, #0]
 8006bd8:	9001      	str	r0, [sp, #4]
 8006bda:	6998      	ldr	r0, [r3, #24]
 8006bdc:	f002 f9a8 	bl	8008f30 <GUI_SelectLayer>
 8006be0:	4b1b      	ldr	r3, [pc, #108]	; (8006c50 <GUI_MEMDEV_CopyToLCDAt+0xa0>)
 8006be2:	429c      	cmp	r4, r3
 8006be4:	9b01      	ldr	r3, [sp, #4]
 8006be6:	bf04      	itt	eq
 8006be8:	f9b3 4004 	ldrsheq.w	r4, [r3, #4]
 8006bec:	f9b3 5006 	ldrsheq.w	r5, [r3, #6]
 8006bf0:	891a      	ldrh	r2, [r3, #8]
 8006bf2:	895b      	ldrh	r3, [r3, #10]
 8006bf4:	f8ad 4008 	strh.w	r4, [sp, #8]
 8006bf8:	3a01      	subs	r2, #1
 8006bfa:	3b01      	subs	r3, #1
 8006bfc:	4422      	add	r2, r4
 8006bfe:	442b      	add	r3, r5
 8006c00:	4681      	mov	r9, r0
 8006c02:	f8ad 200c 	strh.w	r2, [sp, #12]
 8006c06:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006c0a:	f8ad 500a 	strh.w	r5, [sp, #10]
 8006c0e:	f7ff fdb7 	bl	8006780 <WM_Activate>
 8006c12:	a801      	add	r0, sp, #4
 8006c14:	f003 fd48 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 8006c18:	a802      	add	r0, sp, #8
 8006c1a:	f7ff fd33 	bl	8006684 <WM__InitIVRSearch>
 8006c1e:	b948      	cbnz	r0, 8006c34 <GUI_MEMDEV_CopyToLCDAt+0x84>
 8006c20:	4648      	mov	r0, r9
 8006c22:	f002 f985 	bl	8008f30 <GUI_SelectLayer>
 8006c26:	4640      	mov	r0, r8
 8006c28:	f7ff ff9c 	bl	8006b64 <GUI_MEMDEV_Select>
 8006c2c:	4638      	mov	r0, r7
 8006c2e:	f002 f979 	bl	8008f24 <GUI_SetDrawMode>
 8006c32:	e007      	b.n	8006c44 <GUI_MEMDEV_CopyToLCDAt+0x94>
 8006c34:	4630      	mov	r0, r6
 8006c36:	4621      	mov	r1, r4
 8006c38:	462a      	mov	r2, r5
 8006c3a:	f004 f907 	bl	800ae4c <GUI_MEMDEV__WriteToActiveOpaque>
 8006c3e:	f7ff fc5f 	bl	8006500 <WM__GetNextIVR>
 8006c42:	e7ec      	b.n	8006c1e <GUI_MEMDEV_CopyToLCDAt+0x6e>
 8006c44:	b005      	add	sp, #20
 8006c46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c4a:	bf00      	nop
 8006c4c:	20000018 	.word	0x20000018
 8006c50:	fffff001 	.word	0xfffff001

08006c54 <GUI_MEMDEV_CopyToLCD>:
 8006c54:	4901      	ldr	r1, [pc, #4]	; (8006c5c <GUI_MEMDEV_CopyToLCD+0x8>)
 8006c56:	460a      	mov	r2, r1
 8006c58:	f7ff bfaa 	b.w	8006bb0 <GUI_MEMDEV_CopyToLCDAt>
 8006c5c:	fffff001 	.word	0xfffff001

08006c60 <_SetPhysRAMAddr>:
 8006c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c62:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006c64:	4604      	mov	r4, r0
 8006c66:	460e      	mov	r6, r1
 8006c68:	4615      	mov	r5, r2
 8006c6a:	b15b      	cbz	r3, 8006c84 <_SetPhysRAMAddr+0x24>
 8006c6c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8006c70:	4798      	blx	r3
 8006c72:	4631      	mov	r1, r6
 8006c74:	4607      	mov	r7, r0
 8006c76:	462a      	mov	r2, r5
 8006c78:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8006c7c:	4620      	mov	r0, r4
 8006c7e:	4798      	blx	r3
 8006c80:	463e      	mov	r6, r7
 8006c82:	4605      	mov	r5, r0
 8006c84:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006c88:	4620      	mov	r0, r4
 8006c8a:	212a      	movs	r1, #42	; 0x2a
 8006c8c:	4798      	blx	r3
 8006c8e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006c90:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006c94:	4431      	add	r1, r6
 8006c96:	4620      	mov	r0, r4
 8006c98:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8006c9c:	4798      	blx	r3
 8006c9e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006ca0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006ca4:	b2b7      	uxth	r7, r6
 8006ca6:	4439      	add	r1, r7
 8006ca8:	4620      	mov	r0, r4
 8006caa:	b2c9      	uxtb	r1, r1
 8006cac:	4798      	blx	r3
 8006cae:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006cb0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006cb4:	4431      	add	r1, r6
 8006cb6:	4620      	mov	r0, r4
 8006cb8:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8006cbc:	4798      	blx	r3
 8006cbe:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006cc0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006cc4:	4439      	add	r1, r7
 8006cc6:	4620      	mov	r0, r4
 8006cc8:	b2c9      	uxtb	r1, r1
 8006cca:	4798      	blx	r3
 8006ccc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006cd0:	4620      	mov	r0, r4
 8006cd2:	212b      	movs	r1, #43	; 0x2b
 8006cd4:	4798      	blx	r3
 8006cd6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006cd8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006cdc:	4429      	add	r1, r5
 8006cde:	4620      	mov	r0, r4
 8006ce0:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8006ce4:	4798      	blx	r3
 8006ce6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006ce8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006cec:	b2ae      	uxth	r6, r5
 8006cee:	4431      	add	r1, r6
 8006cf0:	4620      	mov	r0, r4
 8006cf2:	b2c9      	uxtb	r1, r1
 8006cf4:	4798      	blx	r3
 8006cf6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006cf8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006cfc:	4429      	add	r1, r5
 8006cfe:	4620      	mov	r0, r4
 8006d00:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8006d04:	4798      	blx	r3
 8006d06:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006d08:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006d0c:	4431      	add	r1, r6
 8006d0e:	4620      	mov	r0, r4
 8006d10:	b2c9      	uxtb	r1, r1
 8006d12:	4798      	blx	r3
 8006d14:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006d18:	4620      	mov	r0, r4
 8006d1a:	212c      	movs	r1, #44	; 0x2c
 8006d1c:	4798      	blx	r3
 8006d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006d20 <_SetRect>:
 8006d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d24:	4698      	mov	r8, r3
 8006d26:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006d28:	9f08      	ldr	r7, [sp, #32]
 8006d2a:	4604      	mov	r4, r0
 8006d2c:	4689      	mov	r9, r1
 8006d2e:	4615      	mov	r5, r2
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d064      	beq.n	8006dfe <_SetRect+0xde>
 8006d34:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8006d38:	4798      	blx	r3
 8006d3a:	463a      	mov	r2, r7
 8006d3c:	4606      	mov	r6, r0
 8006d3e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8006d42:	4641      	mov	r1, r8
 8006d44:	4620      	mov	r0, r4
 8006d46:	4798      	blx	r3
 8006d48:	462a      	mov	r2, r5
 8006d4a:	4682      	mov	sl, r0
 8006d4c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8006d50:	4649      	mov	r1, r9
 8006d52:	4620      	mov	r0, r4
 8006d54:	4798      	blx	r3
 8006d56:	463a      	mov	r2, r7
 8006d58:	4605      	mov	r5, r0
 8006d5a:	4641      	mov	r1, r8
 8006d5c:	4620      	mov	r0, r4
 8006d5e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8006d62:	4798      	blx	r3
 8006d64:	45b2      	cmp	sl, r6
 8006d66:	4607      	mov	r7, r0
 8006d68:	db02      	blt.n	8006d70 <_SetRect+0x50>
 8006d6a:	4653      	mov	r3, sl
 8006d6c:	46b2      	mov	sl, r6
 8006d6e:	461e      	mov	r6, r3
 8006d70:	42af      	cmp	r7, r5
 8006d72:	db02      	blt.n	8006d7a <_SetRect+0x5a>
 8006d74:	463b      	mov	r3, r7
 8006d76:	462f      	mov	r7, r5
 8006d78:	461d      	mov	r5, r3
 8006d7a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006d7e:	4620      	mov	r0, r4
 8006d80:	212a      	movs	r1, #42	; 0x2a
 8006d82:	4798      	blx	r3
 8006d84:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006d86:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006d8a:	4451      	add	r1, sl
 8006d8c:	4620      	mov	r0, r4
 8006d8e:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8006d92:	4798      	blx	r3
 8006d94:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006d96:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006d9a:	4451      	add	r1, sl
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	b2c9      	uxtb	r1, r1
 8006da0:	4798      	blx	r3
 8006da2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006da4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006da8:	4431      	add	r1, r6
 8006daa:	4620      	mov	r0, r4
 8006dac:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8006db0:	4798      	blx	r3
 8006db2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006db4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006db8:	4431      	add	r1, r6
 8006dba:	4620      	mov	r0, r4
 8006dbc:	b2c9      	uxtb	r1, r1
 8006dbe:	4798      	blx	r3
 8006dc0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006dc4:	4620      	mov	r0, r4
 8006dc6:	212b      	movs	r1, #43	; 0x2b
 8006dc8:	4798      	blx	r3
 8006dca:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006dcc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006dd0:	4439      	add	r1, r7
 8006dd2:	4620      	mov	r0, r4
 8006dd4:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8006dd8:	4798      	blx	r3
 8006dda:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006ddc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006de0:	4439      	add	r1, r7
 8006de2:	4620      	mov	r0, r4
 8006de4:	b2c9      	uxtb	r1, r1
 8006de6:	4798      	blx	r3
 8006de8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006dea:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006dee:	4429      	add	r1, r5
 8006df0:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8006df4:	4620      	mov	r0, r4
 8006df6:	4798      	blx	r3
 8006df8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006dfa:	4429      	add	r1, r5
 8006dfc:	e03f      	b.n	8006e7e <_SetRect+0x15e>
 8006dfe:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8006e02:	212a      	movs	r1, #42	; 0x2a
 8006e04:	4798      	blx	r3
 8006e06:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006e08:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006e0c:	4449      	add	r1, r9
 8006e0e:	4620      	mov	r0, r4
 8006e10:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8006e14:	4798      	blx	r3
 8006e16:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006e18:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006e1c:	4449      	add	r1, r9
 8006e1e:	4620      	mov	r0, r4
 8006e20:	b2c9      	uxtb	r1, r1
 8006e22:	4798      	blx	r3
 8006e24:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006e26:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006e2a:	4441      	add	r1, r8
 8006e2c:	4620      	mov	r0, r4
 8006e2e:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8006e32:	4798      	blx	r3
 8006e34:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006e36:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006e3a:	4441      	add	r1, r8
 8006e3c:	4620      	mov	r0, r4
 8006e3e:	b2c9      	uxtb	r1, r1
 8006e40:	4798      	blx	r3
 8006e42:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006e46:	4620      	mov	r0, r4
 8006e48:	212b      	movs	r1, #43	; 0x2b
 8006e4a:	4798      	blx	r3
 8006e4c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006e4e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006e52:	4429      	add	r1, r5
 8006e54:	4620      	mov	r0, r4
 8006e56:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8006e5a:	4798      	blx	r3
 8006e5c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006e5e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006e62:	4429      	add	r1, r5
 8006e64:	4620      	mov	r0, r4
 8006e66:	b2c9      	uxtb	r1, r1
 8006e68:	4798      	blx	r3
 8006e6a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006e6c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006e70:	4439      	add	r1, r7
 8006e72:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8006e76:	4620      	mov	r0, r4
 8006e78:	4798      	blx	r3
 8006e7a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006e7c:	4439      	add	r1, r7
 8006e7e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006e82:	4620      	mov	r0, r4
 8006e84:	b2c9      	uxtb	r1, r1
 8006e86:	4798      	blx	r3
 8006e88:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006e8c:	4620      	mov	r0, r4
 8006e8e:	212c      	movs	r1, #44	; 0x2c
 8006e90:	4798      	blx	r3
 8006e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08006e98 <_SetOrientation>:
 8006e98:	b513      	push	{r0, r1, r4, lr}
 8006e9a:	4a0d      	ldr	r2, [pc, #52]	; (8006ed0 <_SetOrientation+0x38>)
 8006e9c:	4604      	mov	r4, r0
 8006e9e:	6851      	ldr	r1, [r2, #4]
 8006ea0:	6810      	ldr	r0, [r2, #0]
 8006ea2:	466b      	mov	r3, sp
 8006ea4:	c303      	stmia	r3!, {r0, r1}
 8006ea6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006eaa:	4620      	mov	r0, r4
 8006eac:	2136      	movs	r1, #54	; 0x36
 8006eae:	4798      	blx	r3
 8006eb0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006eb2:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 8006eb4:	aa02      	add	r2, sp, #8
 8006eb6:	4413      	add	r3, r2
 8006eb8:	f021 01e0 	bic.w	r1, r1, #224	; 0xe0
 8006ebc:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8006ec0:	4319      	orrs	r1, r3
 8006ec2:	4620      	mov	r0, r4
 8006ec4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006ec8:	b289      	uxth	r1, r1
 8006eca:	4798      	blx	r3
 8006ecc:	b002      	add	sp, #8
 8006ece:	bd10      	pop	{r4, pc}
 8006ed0:	0800e280 	.word	0x0800e280

08006ed4 <_ReadPixel_16bpp_B8>:
 8006ed4:	b513      	push	{r0, r1, r4, lr}
 8006ed6:	4604      	mov	r4, r0
 8006ed8:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8006edc:	202e      	movs	r0, #46	; 0x2e
 8006ede:	4798      	blx	r3
 8006ee0:	6a21      	ldr	r1, [r4, #32]
 8006ee2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8006ee6:	4668      	mov	r0, sp
 8006ee8:	3103      	adds	r1, #3
 8006eea:	4798      	blx	r3
 8006eec:	6a22      	ldr	r2, [r4, #32]
 8006eee:	ab00      	add	r3, sp, #0
 8006ef0:	4413      	add	r3, r2
 8006ef2:	f81d 2002 	ldrb.w	r2, [sp, r2]
 8006ef6:	7859      	ldrb	r1, [r3, #1]
 8006ef8:	7898      	ldrb	r0, [r3, #2]
 8006efa:	08d2      	lsrs	r2, r2, #3
 8006efc:	0889      	lsrs	r1, r1, #2
 8006efe:	02d2      	lsls	r2, r2, #11
 8006f00:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
 8006f04:	ea42 00d0 	orr.w	r0, r2, r0, lsr #3
 8006f08:	b002      	add	sp, #8
 8006f0a:	bd10      	pop	{r4, pc}

08006f0c <_ReadPixel_16bpp_B16_I>:
 8006f0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006f0e:	4604      	mov	r4, r0
 8006f10:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
 8006f14:	202e      	movs	r0, #46	; 0x2e
 8006f16:	4798      	blx	r3
 8006f18:	6a21      	ldr	r1, [r4, #32]
 8006f1a:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8006f1e:	4668      	mov	r0, sp
 8006f20:	3102      	adds	r1, #2
 8006f22:	4798      	blx	r3
 8006f24:	6a23      	ldr	r3, [r4, #32]
 8006f26:	a900      	add	r1, sp, #0
 8006f28:	eb01 0243 	add.w	r2, r1, r3, lsl #1
 8006f2c:	f83d 0013 	ldrh.w	r0, [sp, r3, lsl #1]
 8006f30:	8852      	ldrh	r2, [r2, #2]
 8006f32:	f402 417c 	and.w	r1, r2, #64512	; 0xfc00
 8006f36:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8006f3a:	ea42 1251 	orr.w	r2, r2, r1, lsr #5
 8006f3e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8006f42:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8006f46:	b004      	add	sp, #16
 8006f48:	bd10      	pop	{r4, pc}

08006f4a <_SetReg_B8>:
 8006f4a:	b538      	push	{r3, r4, r5, lr}
 8006f4c:	4604      	mov	r4, r0
 8006f4e:	460d      	mov	r5, r1
 8006f50:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8006f54:	0a08      	lsrs	r0, r1, #8
 8006f56:	4798      	blx	r3
 8006f58:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8006f5c:	b2e8      	uxtb	r0, r5
 8006f5e:	4798      	blx	r3
 8006f60:	bd38      	pop	{r3, r4, r5, pc}

08006f62 <_SetReg_B16>:
 8006f62:	b508      	push	{r3, lr}
 8006f64:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
 8006f68:	4608      	mov	r0, r1
 8006f6a:	4798      	blx	r3
 8006f6c:	bd08      	pop	{r3, pc}

08006f6e <_WritePara_B8>:
 8006f6e:	b508      	push	{r3, lr}
 8006f70:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 8006f74:	b2c8      	uxtb	r0, r1
 8006f76:	4798      	blx	r3
 8006f78:	bd08      	pop	{r3, pc}

08006f7a <_WritePara_B16>:
 8006f7a:	b508      	push	{r3, lr}
 8006f7c:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
 8006f80:	4608      	mov	r0, r1
 8006f82:	4798      	blx	r3
 8006f84:	bd08      	pop	{r3, pc}
	...

08006f88 <_SetInterface>:
 8006f88:	2908      	cmp	r1, #8
 8006f8a:	d002      	beq.n	8006f92 <_SetInterface+0xa>
 8006f8c:	2910      	cmp	r1, #16
 8006f8e:	d005      	beq.n	8006f9c <_SetInterface+0x14>
 8006f90:	4770      	bx	lr
 8006f92:	4b06      	ldr	r3, [pc, #24]	; (8006fac <_SetInterface+0x24>)
 8006f94:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
 8006f98:	4b05      	ldr	r3, [pc, #20]	; (8006fb0 <_SetInterface+0x28>)
 8006f9a:	e003      	b.n	8006fa4 <_SetInterface+0x1c>
 8006f9c:	4b05      	ldr	r3, [pc, #20]	; (8006fb4 <_SetInterface+0x2c>)
 8006f9e:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
 8006fa2:	4b05      	ldr	r3, [pc, #20]	; (8006fb8 <_SetInterface+0x30>)
 8006fa4:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	08006f4b 	.word	0x08006f4b
 8006fb0:	08006f6f 	.word	0x08006f6f
 8006fb4:	08006f63 	.word	0x08006f63
 8006fb8:	08006f7b 	.word	0x08006f7b

08006fbc <_ReadRect_16bpp_B8>:
 8006fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fbe:	b085      	sub	sp, #20
 8006fc0:	6884      	ldr	r4, [r0, #8]
 8006fc2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006fc4:	9700      	str	r7, [sp, #0]
 8006fc6:	1abd      	subs	r5, r7, r2
 8006fc8:	1a58      	subs	r0, r3, r1
 8006fca:	3501      	adds	r5, #1
 8006fcc:	fb00 5505 	mla	r5, r0, r5, r5
 8006fd0:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 8006fd4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006fd6:	4620      	mov	r0, r4
 8006fd8:	47b8      	blx	r7
 8006fda:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8006fde:	202e      	movs	r0, #46	; 0x2e
 8006fe0:	4798      	blx	r3
 8006fe2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8006fe6:	6a21      	ldr	r1, [r4, #32]
 8006fe8:	a802      	add	r0, sp, #8
 8006fea:	4798      	blx	r3
 8006fec:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8006ff0:	a802      	add	r0, sp, #8
 8006ff2:	2103      	movs	r1, #3
 8006ff4:	4798      	blx	r3
 8006ff6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8006ffa:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8006ffe:	08db      	lsrs	r3, r3, #3
 8007000:	0892      	lsrs	r2, r2, #2
 8007002:	02db      	lsls	r3, r3, #11
 8007004:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8007008:	f89d 200a 	ldrb.w	r2, [sp, #10]
 800700c:	3d01      	subs	r5, #1
 800700e:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 8007012:	f826 3b02 	strh.w	r3, [r6], #2
 8007016:	d1e9      	bne.n	8006fec <_ReadRect_16bpp_B8+0x30>
 8007018:	b005      	add	sp, #20
 800701a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800701c <_ReadRect_16bpp_B16_I>:
 800701c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800701e:	b087      	sub	sp, #28
 8007020:	6884      	ldr	r4, [r0, #8]
 8007022:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8007024:	9700      	str	r7, [sp, #0]
 8007026:	1abd      	subs	r5, r7, r2
 8007028:	1a58      	subs	r0, r3, r1
 800702a:	3501      	adds	r5, #1
 800702c:	fb00 5505 	mla	r5, r0, r5, r5
 8007030:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 8007034:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8007036:	4620      	mov	r0, r4
 8007038:	47b8      	blx	r7
 800703a:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 800703e:	202e      	movs	r0, #46	; 0x2e
 8007040:	4798      	blx	r3
 8007042:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8007046:	6a21      	ldr	r1, [r4, #32]
 8007048:	a802      	add	r0, sp, #8
 800704a:	4798      	blx	r3
 800704c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8007050:	a802      	add	r0, sp, #8
 8007052:	2102      	movs	r1, #2
 8007054:	4798      	blx	r3
 8007056:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800705a:	f403 427c 	and.w	r2, r3, #64512	; 0xfc00
 800705e:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8007062:	ea43 1352 	orr.w	r3, r3, r2, lsr #5
 8007066:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800706a:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 800706e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007072:	3d01      	subs	r5, #1
 8007074:	f826 3b02 	strh.w	r3, [r6], #2
 8007078:	d1e8      	bne.n	800704c <_ReadRect_16bpp_B16_I+0x30>
 800707a:	b007      	add	sp, #28
 800707c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08007080 <GUIDRV_FlexColor_SetFunc66720>:
 8007080:	b510      	push	{r4, lr}
 8007082:	4604      	mov	r4, r0
 8007084:	f000 fda6 	bl	8007bd4 <GUIDRV_FlexColor__InitOnce>
 8007088:	68a3      	ldr	r3, [r4, #8]
 800708a:	4a12      	ldr	r2, [pc, #72]	; (80070d4 <GUIDRV_FlexColor_SetFunc66720+0x54>)
 800708c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8007090:	4a11      	ldr	r2, [pc, #68]	; (80070d8 <GUIDRV_FlexColor_SetFunc66720+0x58>)
 8007092:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8007096:	4a11      	ldr	r2, [pc, #68]	; (80070dc <GUIDRV_FlexColor_SetFunc66720+0x5c>)
 8007098:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800709c:	4a10      	ldr	r2, [pc, #64]	; (80070e0 <GUIDRV_FlexColor_SetFunc66720+0x60>)
 800709e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80070a2:	2200      	movs	r2, #0
 80070a4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 80070a8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 80070ac:	4a0d      	ldr	r2, [pc, #52]	; (80070e4 <GUIDRV_FlexColor_SetFunc66720+0x64>)
 80070ae:	490e      	ldr	r1, [pc, #56]	; (80070e8 <GUIDRV_FlexColor_SetFunc66720+0x68>)
 80070b0:	6812      	ldr	r2, [r2, #0]
 80070b2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 80070b6:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 80070b8:	6809      	ldr	r1, [r1, #0]
 80070ba:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4
 80070be:	f022 0203 	bic.w	r2, r2, #3
 80070c2:	490a      	ldr	r1, [pc, #40]	; (80070ec <GUIDRV_FlexColor_SetFunc66720+0x6c>)
 80070c4:	84da      	strh	r2, [r3, #38]	; 0x26
 80070c6:	4a0a      	ldr	r2, [pc, #40]	; (80070f0 <GUIDRV_FlexColor_SetFunc66720+0x70>)
 80070c8:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
 80070cc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80070d0:	bd10      	pop	{r4, pc}
 80070d2:	bf00      	nop
 80070d4:	08006c61 	.word	0x08006c61
 80070d8:	08006d21 	.word	0x08006d21
 80070dc:	08006e99 	.word	0x08006e99
 80070e0:	08006ed5 	.word	0x08006ed5
 80070e4:	20000010 	.word	0x20000010
 80070e8:	2000000c 	.word	0x2000000c
 80070ec:	08006fbd 	.word	0x08006fbd
 80070f0:	08006f89 	.word	0x08006f89

080070f4 <_ReadData>:
 80070f4:	b508      	push	{r3, lr}
 80070f6:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
 80070fa:	4798      	blx	r3
 80070fc:	bd08      	pop	{r3, pc}

080070fe <_WriteData>:
 80070fe:	b508      	push	{r3, lr}
 8007100:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
 8007104:	b288      	uxth	r0, r1
 8007106:	4798      	blx	r3
 8007108:	bd08      	pop	{r3, pc}
	...

0800710c <_FillRect>:
 800710c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007110:	4f3d      	ldr	r7, [pc, #244]	; (8007208 <_FillRect+0xfc>)
 8007112:	6884      	ldr	r4, [r0, #8]
 8007114:	4682      	mov	sl, r0
 8007116:	6838      	ldr	r0, [r7, #0]
 8007118:	7c00      	ldrb	r0, [r0, #16]
 800711a:	f010 0f01 	tst.w	r0, #1
 800711e:	b085      	sub	sp, #20
 8007120:	460e      	mov	r6, r1
 8007122:	4615      	mov	r5, r2
 8007124:	4698      	mov	r8, r3
 8007126:	ebc1 0903 	rsb	r9, r1, r3
 800712a:	d045      	beq.n	80071b8 <_FillRect+0xac>
 800712c:	ea4f 0b49 	mov.w	fp, r9, lsl #1
 8007130:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007132:	4285      	cmp	r5, r0
 8007134:	dc65      	bgt.n	8007202 <_FillRect+0xf6>
 8007136:	f8d4 c0c4 	ldr.w	ip, [r4, #196]	; 0xc4
 800713a:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800713c:	f1bc 0f00 	cmp.w	ip, #0
 8007140:	d101      	bne.n	8007146 <_FillRect+0x3a>
 8007142:	46b4      	mov	ip, r6
 8007144:	e007      	b.n	8007156 <_FillRect+0x4a>
 8007146:	e88d 00a0 	stmia.w	sp, {r5, r7}
 800714a:	4650      	mov	r0, sl
 800714c:	4631      	mov	r1, r6
 800714e:	462a      	mov	r2, r5
 8007150:	4643      	mov	r3, r8
 8007152:	47e0      	blx	ip
 8007154:	e011      	b.n	800717a <_FillRect+0x6e>
 8007156:	45c4      	cmp	ip, r8
 8007158:	dc0e      	bgt.n	8007178 <_FillRect+0x6c>
 800715a:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 800715e:	f8cd c00c 	str.w	ip, [sp, #12]
 8007162:	4661      	mov	r1, ip
 8007164:	4650      	mov	r0, sl
 8007166:	462a      	mov	r2, r5
 8007168:	4798      	blx	r3
 800716a:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800716e:	f827 0b02 	strh.w	r0, [r7], #2
 8007172:	f10c 0c01 	add.w	ip, ip, #1
 8007176:	e7ee      	b.n	8007156 <_FillRect+0x4a>
 8007178:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800717a:	1ebb      	subs	r3, r7, #2
 800717c:	f109 0c01 	add.w	ip, r9, #1
 8007180:	445f      	add	r7, fp
 8007182:	42bb      	cmp	r3, r7
 8007184:	d005      	beq.n	8007192 <_FillRect+0x86>
 8007186:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007188:	8859      	ldrh	r1, [r3, #2]
 800718a:	404a      	eors	r2, r1
 800718c:	f823 2f02 	strh.w	r2, [r3, #2]!
 8007190:	e7f7      	b.n	8007182 <_FillRect+0x76>
 8007192:	9500      	str	r5, [sp, #0]
 8007194:	462a      	mov	r2, r5
 8007196:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800719a:	f8cd c00c 	str.w	ip, [sp, #12]
 800719e:	4620      	mov	r0, r4
 80071a0:	4631      	mov	r1, r6
 80071a2:	4643      	mov	r3, r8
 80071a4:	47b8      	blx	r7
 80071a6:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80071aa:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 80071ae:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80071b0:	4661      	mov	r1, ip
 80071b2:	4798      	blx	r3
 80071b4:	3501      	adds	r5, #1
 80071b6:	e7bb      	b.n	8007130 <_FillRect+0x24>
 80071b8:	980e      	ldr	r0, [sp, #56]	; 0x38
 80071ba:	9000      	str	r0, [sp, #0]
 80071bc:	1a85      	subs	r5, r0, r2
 80071be:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 80071c2:	4620      	mov	r0, r4
 80071c4:	47b0      	blx	r6
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	6ea7      	ldr	r7, [r4, #104]	; 0x68
 80071ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071cc:	f109 0901 	add.w	r9, r9, #1
 80071d0:	f8d3 8000 	ldr.w	r8, [r3]
 80071d4:	fb05 9509 	mla	r5, r5, r9, r9
 80071d8:	2301      	movs	r3, #1
 80071da:	b195      	cbz	r5, 8007202 <_FillRect+0xf6>
 80071dc:	2dfa      	cmp	r5, #250	; 0xfa
 80071de:	bf34      	ite	cc
 80071e0:	462e      	movcc	r6, r5
 80071e2:	26fa      	movcs	r6, #250	; 0xfa
 80071e4:	b12b      	cbz	r3, 80071f2 <_FillRect+0xe6>
 80071e6:	4638      	mov	r0, r7
 80071e8:	fa1f f188 	uxth.w	r1, r8
 80071ec:	4632      	mov	r2, r6
 80071ee:	f001 fa7b 	bl	80086e8 <GUI__memset16>
 80071f2:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 80071f6:	4638      	mov	r0, r7
 80071f8:	4631      	mov	r1, r6
 80071fa:	4798      	blx	r3
 80071fc:	1bad      	subs	r5, r5, r6
 80071fe:	2300      	movs	r3, #0
 8007200:	e7eb      	b.n	80071da <_FillRect+0xce>
 8007202:	b005      	add	sp, #20
 8007204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007208:	20000018 	.word	0x20000018

0800720c <_DrawBitmap>:
 800720c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007210:	b08d      	sub	sp, #52	; 0x34
 8007212:	6885      	ldr	r5, [r0, #8]
 8007214:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8007216:	9305      	str	r3, [sp, #20]
 8007218:	1e7b      	subs	r3, r7, #1
 800721a:	2b01      	cmp	r3, #1
 800721c:	9009      	str	r0, [sp, #36]	; 0x24
 800721e:	9108      	str	r1, [sp, #32]
 8007220:	920a      	str	r2, [sp, #40]	; 0x28
 8007222:	950b      	str	r5, [sp, #44]	; 0x2c
 8007224:	d903      	bls.n	800722e <_DrawBitmap+0x22>
 8007226:	2f04      	cmp	r7, #4
 8007228:	d001      	beq.n	800722e <_DrawBitmap+0x22>
 800722a:	2f08      	cmp	r7, #8
 800722c:	d106      	bne.n	800723c <_DrawBitmap+0x30>
 800722e:	4b8f      	ldr	r3, [pc, #572]	; (800746c <_DrawBitmap+0x260>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	7c1b      	ldrb	r3, [r3, #16]
 8007234:	f003 0303 	and.w	r3, r3, #3
 8007238:	2b02      	cmp	r3, #2
 800723a:	d010      	beq.n	800725e <_DrawBitmap+0x52>
 800723c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800723e:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8007240:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8007242:	9908      	ldr	r1, [sp, #32]
 8007244:	9b05      	ldr	r3, [sp, #20]
 8007246:	443a      	add	r2, r7
 8007248:	4429      	add	r1, r5
 800724a:	3a01      	subs	r2, #1
 800724c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800724e:	9200      	str	r2, [sp, #0]
 8007250:	440b      	add	r3, r1
 8007252:	f8d5 40a8 	ldr.w	r4, [r5, #168]	; 0xa8
 8007256:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007258:	4628      	mov	r0, r5
 800725a:	3b01      	subs	r3, #1
 800725c:	47a0      	blx	r4
 800725e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8007262:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8007264:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8007266:	ebc7 030b 	rsb	r3, r7, fp
 800726a:	42ab      	cmp	r3, r5
 800726c:	f280 8251 	bge.w	8007712 <_DrawBitmap+0x506>
 8007270:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8007272:	1e7b      	subs	r3, r7, #1
 8007274:	2b0f      	cmp	r3, #15
 8007276:	f200 8245 	bhi.w	8007704 <_DrawBitmap+0x4f8>
 800727a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800727e:	0010      	.short	0x0010
 8007280:	024300b7 	.word	0x024300b7
 8007284:	02430140 	.word	0x02430140
 8007288:	02430243 	.word	0x02430243
 800728c:	024301d7 	.word	0x024301d7
 8007290:	02430243 	.word	0x02430243
 8007294:	02430243 	.word	0x02430243
 8007298:	02430243 	.word	0x02430243
 800729c:	023d      	.short	0x023d
 800729e:	4b73      	ldr	r3, [pc, #460]	; (800746c <_DrawBitmap+0x260>)
 80072a0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	68ac      	ldr	r4, [r5, #8]
 80072a6:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80072a8:	7c1b      	ldrb	r3, [r3, #16]
 80072aa:	682f      	ldr	r7, [r5, #0]
 80072ac:	686d      	ldr	r5, [r5, #4]
 80072ae:	9507      	str	r5, [sp, #28]
 80072b0:	f8dd a020 	ldr.w	sl, [sp, #32]
 80072b4:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80072b6:	f003 0303 	and.w	r3, r3, #3
 80072ba:	2b02      	cmp	r3, #2
 80072bc:	44aa      	add	sl, r5
 80072be:	d01b      	beq.n	80072f8 <_DrawBitmap+0xec>
 80072c0:	2b03      	cmp	r3, #3
 80072c2:	d06e      	beq.n	80073a2 <_DrawBitmap+0x196>
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d06c      	beq.n	80073a2 <_DrawBitmap+0x196>
 80072c8:	9e05      	ldr	r6, [sp, #20]
 80072ca:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
 80072ce:	f898 1000 	ldrb.w	r1, [r8]
 80072d2:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 80072d6:	2280      	movs	r2, #128	; 0x80
 80072d8:	412a      	asrs	r2, r5
 80072da:	4211      	tst	r1, r2
 80072dc:	bf16      	itet	ne
 80072de:	9907      	ldrne	r1, [sp, #28]
 80072e0:	b2b8      	uxtheq	r0, r7
 80072e2:	b288      	uxthne	r0, r1
 80072e4:	3501      	adds	r5, #1
 80072e6:	4798      	blx	r3
 80072e8:	2d08      	cmp	r5, #8
 80072ea:	bf04      	itt	eq
 80072ec:	f108 0801 	addeq.w	r8, r8, #1
 80072f0:	2500      	moveq	r5, #0
 80072f2:	3e01      	subs	r6, #1
 80072f4:	d1eb      	bne.n	80072ce <_DrawBitmap+0xc2>
 80072f6:	e205      	b.n	8007704 <_DrawBitmap+0x4f8>
 80072f8:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80072fa:	9506      	str	r5, [sp, #24]
 80072fc:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
 8007300:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007304:	f8cd a00c 	str.w	sl, [sp, #12]
 8007308:	2500      	movs	r5, #0
 800730a:	4656      	mov	r6, sl
 800730c:	462b      	mov	r3, r5
 800730e:	9f06      	ldr	r7, [sp, #24]
 8007310:	f04f 0c80 	mov.w	ip, #128	; 0x80
 8007314:	783a      	ldrb	r2, [r7, #0]
 8007316:	fa4c fc08 	asr.w	ip, ip, r8
 800731a:	ea12 0c0c 	ands.w	ip, r2, ip
 800731e:	d00b      	beq.n	8007338 <_DrawBitmap+0x12c>
 8007320:	b913      	cbnz	r3, 8007328 <_DrawBitmap+0x11c>
 8007322:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
 8007326:	9603      	str	r6, [sp, #12]
 8007328:	9f07      	ldr	r7, [sp, #28]
 800732a:	f8a9 7000 	strh.w	r7, [r9]
 800732e:	3501      	adds	r5, #1
 8007330:	f109 0902 	add.w	r9, r9, #2
 8007334:	2301      	movs	r3, #1
 8007336:	e017      	b.n	8007368 <_DrawBitmap+0x15c>
 8007338:	2b01      	cmp	r3, #1
 800733a:	d114      	bne.n	8007366 <_DrawBitmap+0x15a>
 800733c:	f8cd b000 	str.w	fp, [sp]
 8007340:	f8cd c010 	str.w	ip, [sp, #16]
 8007344:	4620      	mov	r0, r4
 8007346:	9903      	ldr	r1, [sp, #12]
 8007348:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800734c:	465a      	mov	r2, fp
 800734e:	1e73      	subs	r3, r6, #1
 8007350:	47b8      	blx	r7
 8007352:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 8007356:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8007358:	4629      	mov	r1, r5
 800735a:	4798      	blx	r3
 800735c:	f8dd c010 	ldr.w	ip, [sp, #16]
 8007360:	4665      	mov	r5, ip
 8007362:	4663      	mov	r3, ip
 8007364:	e000      	b.n	8007368 <_DrawBitmap+0x15c>
 8007366:	4663      	mov	r3, ip
 8007368:	f108 0801 	add.w	r8, r8, #1
 800736c:	f1b8 0f08 	cmp.w	r8, #8
 8007370:	f106 0601 	add.w	r6, r6, #1
 8007374:	d104      	bne.n	8007380 <_DrawBitmap+0x174>
 8007376:	9f06      	ldr	r7, [sp, #24]
 8007378:	3701      	adds	r7, #1
 800737a:	9706      	str	r7, [sp, #24]
 800737c:	f04f 0800 	mov.w	r8, #0
 8007380:	9a05      	ldr	r2, [sp, #20]
 8007382:	4452      	add	r2, sl
 8007384:	42b2      	cmp	r2, r6
 8007386:	d1c2      	bne.n	800730e <_DrawBitmap+0x102>
 8007388:	9f05      	ldr	r7, [sp, #20]
 800738a:	1e7b      	subs	r3, r7, #1
 800738c:	4453      	add	r3, sl
 800738e:	2d00      	cmp	r5, #0
 8007390:	f000 81b8 	beq.w	8007704 <_DrawBitmap+0x4f8>
 8007394:	f8cd b000 	str.w	fp, [sp]
 8007398:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800739c:	9903      	ldr	r1, [sp, #12]
 800739e:	4620      	mov	r0, r4
 80073a0:	e13d      	b.n	800761e <_DrawBitmap+0x412>
 80073a2:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80073a6:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80073a8:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80073aa:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80073ae:	782a      	ldrb	r2, [r5, #0]
 80073b0:	2380      	movs	r3, #128	; 0x80
 80073b2:	4133      	asrs	r3, r6
 80073b4:	44d1      	add	r9, sl
 80073b6:	421a      	tst	r2, r3
 80073b8:	ebc8 0909 	rsb	r9, r8, r9
 80073bc:	d00d      	beq.n	80073da <_DrawBitmap+0x1ce>
 80073be:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 80073c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073c4:	4649      	mov	r1, r9
 80073c6:	465a      	mov	r2, fp
 80073c8:	4798      	blx	r3
 80073ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80073cc:	f8d4 70f0 	ldr.w	r7, [r4, #240]	; 0xf0
 80073d0:	4043      	eors	r3, r0
 80073d2:	4649      	mov	r1, r9
 80073d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073d6:	465a      	mov	r2, fp
 80073d8:	47b8      	blx	r7
 80073da:	3601      	adds	r6, #1
 80073dc:	2e08      	cmp	r6, #8
 80073de:	bf04      	itt	eq
 80073e0:	3501      	addeq	r5, #1
 80073e2:	2600      	moveq	r6, #0
 80073e4:	f1b8 0801 	subs.w	r8, r8, #1
 80073e8:	d1df      	bne.n	80073aa <_DrawBitmap+0x19e>
 80073ea:	e18b      	b.n	8007704 <_DrawBitmap+0x4f8>
 80073ec:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80073ee:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80073f0:	68ac      	ldr	r4, [r5, #8]
 80073f2:	2f00      	cmp	r7, #0
 80073f4:	f000 8186 	beq.w	8007704 <_DrawBitmap+0x4f8>
 80073f8:	4b1c      	ldr	r3, [pc, #112]	; (800746c <_DrawBitmap+0x260>)
 80073fa:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f895 a000 	ldrb.w	sl, [r5]
 8007402:	7c1b      	ldrb	r3, [r3, #16]
 8007404:	f013 0303 	ands.w	r3, r3, #3
 8007408:	d011      	beq.n	800742e <_DrawBitmap+0x222>
 800740a:	2b02      	cmp	r3, #2
 800740c:	f040 817a 	bne.w	8007704 <_DrawBitmap+0x4f8>
 8007410:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8007412:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007416:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 8007418:	9703      	str	r7, [sp, #12]
 800741a:	44a9      	add	r9, r5
 800741c:	46a8      	mov	r8, r5
 800741e:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007420:	9507      	str	r5, [sp, #28]
 8007422:	2500      	movs	r5, #0
 8007424:	f8cd 9018 	str.w	r9, [sp, #24]
 8007428:	464e      	mov	r6, r9
 800742a:	462b      	mov	r3, r5
 800742c:	e040      	b.n	80074b0 <_DrawBitmap+0x2a4>
 800742e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8007430:	9e05      	ldr	r6, [sp, #20]
 8007432:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8007434:	f1c5 0303 	rsb	r3, r5, #3
 8007438:	005b      	lsls	r3, r3, #1
 800743a:	f1c3 0206 	rsb	r2, r3, #6
 800743e:	21c0      	movs	r1, #192	; 0xc0
 8007440:	fa41 f202 	asr.w	r2, r1, r2
 8007444:	ea02 020a 	and.w	r2, r2, sl
 8007448:	40da      	lsrs	r2, r3
 800744a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800744c:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 8007450:	f831 0022 	ldrh.w	r0, [r1, r2, lsl #2]
 8007454:	3501      	adds	r5, #1
 8007456:	4798      	blx	r3
 8007458:	2d04      	cmp	r5, #4
 800745a:	d103      	bne.n	8007464 <_DrawBitmap+0x258>
 800745c:	f897 a001 	ldrb.w	sl, [r7, #1]
 8007460:	2500      	movs	r5, #0
 8007462:	3701      	adds	r7, #1
 8007464:	3e01      	subs	r6, #1
 8007466:	d1e5      	bne.n	8007434 <_DrawBitmap+0x228>
 8007468:	e14c      	b.n	8007704 <_DrawBitmap+0x4f8>
 800746a:	bf00      	nop
 800746c:	20000018 	.word	0x20000018
 8007470:	b913      	cbnz	r3, 8007478 <_DrawBitmap+0x26c>
 8007472:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 8007474:	9703      	str	r7, [sp, #12]
 8007476:	9606      	str	r6, [sp, #24]
 8007478:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800747a:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
 800747e:	9f03      	ldr	r7, [sp, #12]
 8007480:	803b      	strh	r3, [r7, #0]
 8007482:	3702      	adds	r7, #2
 8007484:	3501      	adds	r5, #1
 8007486:	9703      	str	r7, [sp, #12]
 8007488:	2301      	movs	r3, #1
 800748a:	f108 0801 	add.w	r8, r8, #1
 800748e:	f1b8 0f04 	cmp.w	r8, #4
 8007492:	f106 0601 	add.w	r6, r6, #1
 8007496:	d106      	bne.n	80074a6 <_DrawBitmap+0x29a>
 8007498:	9f07      	ldr	r7, [sp, #28]
 800749a:	f897 a001 	ldrb.w	sl, [r7, #1]
 800749e:	3701      	adds	r7, #1
 80074a0:	9707      	str	r7, [sp, #28]
 80074a2:	f04f 0800 	mov.w	r8, #0
 80074a6:	9a05      	ldr	r2, [sp, #20]
 80074a8:	444a      	add	r2, r9
 80074aa:	42b2      	cmp	r2, r6
 80074ac:	f000 80ac 	beq.w	8007608 <_DrawBitmap+0x3fc>
 80074b0:	f1c8 0203 	rsb	r2, r8, #3
 80074b4:	0052      	lsls	r2, r2, #1
 80074b6:	f1c2 0106 	rsb	r1, r2, #6
 80074ba:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
 80074be:	fa4c fc01 	asr.w	ip, ip, r1
 80074c2:	ea0c 0c0a 	and.w	ip, ip, sl
 80074c6:	fa3c fc02 	lsrs.w	ip, ip, r2
 80074ca:	d1d1      	bne.n	8007470 <_DrawBitmap+0x264>
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d114      	bne.n	80074fa <_DrawBitmap+0x2ee>
 80074d0:	f8cd b000 	str.w	fp, [sp]
 80074d4:	f8cd c010 	str.w	ip, [sp, #16]
 80074d8:	4620      	mov	r0, r4
 80074da:	9906      	ldr	r1, [sp, #24]
 80074dc:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 80074e0:	465a      	mov	r2, fp
 80074e2:	1e73      	subs	r3, r6, #1
 80074e4:	47b8      	blx	r7
 80074e6:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 80074ea:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80074ec:	4629      	mov	r1, r5
 80074ee:	4798      	blx	r3
 80074f0:	f8dd c010 	ldr.w	ip, [sp, #16]
 80074f4:	4665      	mov	r5, ip
 80074f6:	4663      	mov	r3, ip
 80074f8:	e7c7      	b.n	800748a <_DrawBitmap+0x27e>
 80074fa:	4663      	mov	r3, ip
 80074fc:	e7c5      	b.n	800748a <_DrawBitmap+0x27e>
 80074fe:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007500:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8007502:	68ac      	ldr	r4, [r5, #8]
 8007504:	2f00      	cmp	r7, #0
 8007506:	f000 80fd 	beq.w	8007704 <_DrawBitmap+0x4f8>
 800750a:	4b83      	ldr	r3, [pc, #524]	; (8007718 <_DrawBitmap+0x50c>)
 800750c:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f895 a000 	ldrb.w	sl, [r5]
 8007514:	7c1b      	ldrb	r3, [r3, #16]
 8007516:	f013 0303 	ands.w	r3, r3, #3
 800751a:	d011      	beq.n	8007540 <_DrawBitmap+0x334>
 800751c:	2b02      	cmp	r3, #2
 800751e:	f040 80f1 	bne.w	8007704 <_DrawBitmap+0x4f8>
 8007522:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8007524:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007528:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800752a:	9703      	str	r7, [sp, #12]
 800752c:	44a9      	add	r9, r5
 800752e:	46a8      	mov	r8, r5
 8007530:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007532:	9507      	str	r5, [sp, #28]
 8007534:	2500      	movs	r5, #0
 8007536:	f8cd 9018 	str.w	r9, [sp, #24]
 800753a:	464e      	mov	r6, r9
 800753c:	462b      	mov	r3, r5
 800753e:	e03c      	b.n	80075ba <_DrawBitmap+0x3ae>
 8007540:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8007542:	9e05      	ldr	r6, [sp, #20]
 8007544:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8007546:	f1c5 0301 	rsb	r3, r5, #1
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	f1c3 0204 	rsb	r2, r3, #4
 8007550:	21f0      	movs	r1, #240	; 0xf0
 8007552:	fa41 f202 	asr.w	r2, r1, r2
 8007556:	ea02 020a 	and.w	r2, r2, sl
 800755a:	40da      	lsrs	r2, r3
 800755c:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800755e:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 8007562:	f831 0022 	ldrh.w	r0, [r1, r2, lsl #2]
 8007566:	3501      	adds	r5, #1
 8007568:	4798      	blx	r3
 800756a:	2d02      	cmp	r5, #2
 800756c:	d103      	bne.n	8007576 <_DrawBitmap+0x36a>
 800756e:	f897 a001 	ldrb.w	sl, [r7, #1]
 8007572:	2500      	movs	r5, #0
 8007574:	3701      	adds	r7, #1
 8007576:	3e01      	subs	r6, #1
 8007578:	d1e5      	bne.n	8007546 <_DrawBitmap+0x33a>
 800757a:	e0c3      	b.n	8007704 <_DrawBitmap+0x4f8>
 800757c:	b913      	cbnz	r3, 8007584 <_DrawBitmap+0x378>
 800757e:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 8007580:	9703      	str	r7, [sp, #12]
 8007582:	9606      	str	r6, [sp, #24]
 8007584:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8007586:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
 800758a:	9f03      	ldr	r7, [sp, #12]
 800758c:	803b      	strh	r3, [r7, #0]
 800758e:	3702      	adds	r7, #2
 8007590:	3501      	adds	r5, #1
 8007592:	9703      	str	r7, [sp, #12]
 8007594:	2301      	movs	r3, #1
 8007596:	f108 0801 	add.w	r8, r8, #1
 800759a:	f1b8 0f02 	cmp.w	r8, #2
 800759e:	f106 0601 	add.w	r6, r6, #1
 80075a2:	d106      	bne.n	80075b2 <_DrawBitmap+0x3a6>
 80075a4:	9f07      	ldr	r7, [sp, #28]
 80075a6:	f897 a001 	ldrb.w	sl, [r7, #1]
 80075aa:	3701      	adds	r7, #1
 80075ac:	9707      	str	r7, [sp, #28]
 80075ae:	f04f 0800 	mov.w	r8, #0
 80075b2:	9a05      	ldr	r2, [sp, #20]
 80075b4:	444a      	add	r2, r9
 80075b6:	42b2      	cmp	r2, r6
 80075b8:	d026      	beq.n	8007608 <_DrawBitmap+0x3fc>
 80075ba:	f1c8 0201 	rsb	r2, r8, #1
 80075be:	0092      	lsls	r2, r2, #2
 80075c0:	f1c2 0104 	rsb	r1, r2, #4
 80075c4:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 80075c8:	fa4c fc01 	asr.w	ip, ip, r1
 80075cc:	ea0c 0c0a 	and.w	ip, ip, sl
 80075d0:	fa3c fc02 	lsrs.w	ip, ip, r2
 80075d4:	d1d2      	bne.n	800757c <_DrawBitmap+0x370>
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d114      	bne.n	8007604 <_DrawBitmap+0x3f8>
 80075da:	f8cd b000 	str.w	fp, [sp]
 80075de:	f8cd c010 	str.w	ip, [sp, #16]
 80075e2:	4620      	mov	r0, r4
 80075e4:	9906      	ldr	r1, [sp, #24]
 80075e6:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 80075ea:	465a      	mov	r2, fp
 80075ec:	1e73      	subs	r3, r6, #1
 80075ee:	47b8      	blx	r7
 80075f0:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 80075f4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80075f6:	4629      	mov	r1, r5
 80075f8:	4798      	blx	r3
 80075fa:	f8dd c010 	ldr.w	ip, [sp, #16]
 80075fe:	4665      	mov	r5, ip
 8007600:	4663      	mov	r3, ip
 8007602:	e7c8      	b.n	8007596 <_DrawBitmap+0x38a>
 8007604:	4663      	mov	r3, ip
 8007606:	e7c6      	b.n	8007596 <_DrawBitmap+0x38a>
 8007608:	9f05      	ldr	r7, [sp, #20]
 800760a:	1e7b      	subs	r3, r7, #1
 800760c:	444b      	add	r3, r9
 800760e:	2d00      	cmp	r5, #0
 8007610:	d078      	beq.n	8007704 <_DrawBitmap+0x4f8>
 8007612:	f8cd b000 	str.w	fp, [sp]
 8007616:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800761a:	9906      	ldr	r1, [sp, #24]
 800761c:	4620      	mov	r0, r4
 800761e:	465a      	mov	r2, fp
 8007620:	47b0      	blx	r6
 8007622:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 8007626:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8007628:	4629      	mov	r1, r5
 800762a:	e06a      	b.n	8007702 <_DrawBitmap+0x4f6>
 800762c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800762e:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8007630:	68ac      	ldr	r4, [r5, #8]
 8007632:	2f00      	cmp	r7, #0
 8007634:	d066      	beq.n	8007704 <_DrawBitmap+0x4f8>
 8007636:	4b38      	ldr	r3, [pc, #224]	; (8007718 <_DrawBitmap+0x50c>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	7c1b      	ldrb	r3, [r3, #16]
 800763c:	f013 0303 	ands.w	r3, r3, #3
 8007640:	d009      	beq.n	8007656 <_DrawBitmap+0x44a>
 8007642:	2b02      	cmp	r3, #2
 8007644:	d15e      	bne.n	8007704 <_DrawBitmap+0x4f8>
 8007646:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800764a:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
 800764e:	2600      	movs	r6, #0
 8007650:	464f      	mov	r7, r9
 8007652:	4633      	mov	r3, r6
 8007654:	e022      	b.n	800769c <_DrawBitmap+0x490>
 8007656:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007658:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800765a:	9f05      	ldr	r7, [sp, #20]
 800765c:	443b      	add	r3, r7
 800765e:	1b5b      	subs	r3, r3, r5
 8007660:	2b00      	cmp	r3, #0
 8007662:	dd4f      	ble.n	8007704 <_DrawBitmap+0x4f8>
 8007664:	f815 2b01 	ldrb.w	r2, [r5], #1
 8007668:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800766a:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800766e:	f837 0022 	ldrh.w	r0, [r7, r2, lsl #2]
 8007672:	4798      	blx	r3
 8007674:	e7f0      	b.n	8007658 <_DrawBitmap+0x44c>
 8007676:	b913      	cbnz	r3, 800767e <_DrawBitmap+0x472>
 8007678:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
 800767c:	46b9      	mov	r9, r7
 800767e:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007680:	f855 302a 	ldr.w	r3, [r5, sl, lsl #2]
 8007684:	f8a8 3000 	strh.w	r3, [r8]
 8007688:	3601      	adds	r6, #1
 800768a:	f108 0802 	add.w	r8, r8, #2
 800768e:	2301      	movs	r3, #1
 8007690:	9a08      	ldr	r2, [sp, #32]
 8007692:	9d05      	ldr	r5, [sp, #20]
 8007694:	3701      	adds	r7, #1
 8007696:	442a      	add	r2, r5
 8007698:	42ba      	cmp	r2, r7
 800769a:	d01c      	beq.n	80076d6 <_DrawBitmap+0x4ca>
 800769c:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800769e:	9808      	ldr	r0, [sp, #32]
 80076a0:	1a2a      	subs	r2, r5, r0
 80076a2:	f812 a007 	ldrb.w	sl, [r2, r7]
 80076a6:	f1ba 0f00 	cmp.w	sl, #0
 80076aa:	d1e4      	bne.n	8007676 <_DrawBitmap+0x46a>
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d110      	bne.n	80076d2 <_DrawBitmap+0x4c6>
 80076b0:	f8cd b000 	str.w	fp, [sp]
 80076b4:	4620      	mov	r0, r4
 80076b6:	4649      	mov	r1, r9
 80076b8:	465a      	mov	r2, fp
 80076ba:	1e7b      	subs	r3, r7, #1
 80076bc:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
 80076c0:	47a8      	blx	r5
 80076c2:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 80076c6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80076c8:	4631      	mov	r1, r6
 80076ca:	4798      	blx	r3
 80076cc:	4656      	mov	r6, sl
 80076ce:	4653      	mov	r3, sl
 80076d0:	e7de      	b.n	8007690 <_DrawBitmap+0x484>
 80076d2:	4653      	mov	r3, sl
 80076d4:	e7dc      	b.n	8007690 <_DrawBitmap+0x484>
 80076d6:	9f08      	ldr	r7, [sp, #32]
 80076d8:	1e6b      	subs	r3, r5, #1
 80076da:	443b      	add	r3, r7
 80076dc:	b196      	cbz	r6, 8007704 <_DrawBitmap+0x4f8>
 80076de:	f8cd b000 	str.w	fp, [sp]
 80076e2:	4620      	mov	r0, r4
 80076e4:	4649      	mov	r1, r9
 80076e6:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
 80076ea:	465a      	mov	r2, fp
 80076ec:	47a8      	blx	r5
 80076ee:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 80076f2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80076f4:	4631      	mov	r1, r6
 80076f6:	e004      	b.n	8007702 <_DrawBitmap+0x4f6>
 80076f8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80076fa:	9819      	ldr	r0, [sp, #100]	; 0x64
 80076fc:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
 8007700:	9905      	ldr	r1, [sp, #20]
 8007702:	4798      	blx	r3
 8007704:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8007706:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8007708:	442f      	add	r7, r5
 800770a:	9719      	str	r7, [sp, #100]	; 0x64
 800770c:	f10b 0b01 	add.w	fp, fp, #1
 8007710:	e5a7      	b.n	8007262 <_DrawBitmap+0x56>
 8007712:	b00d      	add	sp, #52	; 0x34
 8007714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007718:	20000018 	.word	0x20000018

0800771c <GUIDRV_FlexColor_SetMode16bppC0B16>:
 800771c:	b510      	push	{r4, lr}
 800771e:	4604      	mov	r4, r0
 8007720:	f000 fa58 	bl	8007bd4 <GUIDRV_FlexColor__InitOnce>
 8007724:	68a4      	ldr	r4, [r4, #8]
 8007726:	4b10      	ldr	r3, [pc, #64]	; (8007768 <GUIDRV_FlexColor_SetMode16bppC0B16+0x4c>)
 8007728:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
 800772c:	4b0f      	ldr	r3, [pc, #60]	; (800776c <GUIDRV_FlexColor_SetMode16bppC0B16+0x50>)
 800772e:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 8007732:	4b0f      	ldr	r3, [pc, #60]	; (8007770 <GUIDRV_FlexColor_SetMode16bppC0B16+0x54>)
 8007734:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
 8007738:	4b0e      	ldr	r3, [pc, #56]	; (8007774 <GUIDRV_FlexColor_SetMode16bppC0B16+0x58>)
 800773a:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
 800773e:	4b0e      	ldr	r3, [pc, #56]	; (8007778 <GUIDRV_FlexColor_SetMode16bppC0B16+0x5c>)
 8007740:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 8007744:	4b0d      	ldr	r3, [pc, #52]	; (800777c <GUIDRV_FlexColor_SetMode16bppC0B16+0x60>)
 8007746:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 800774a:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 800774e:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
 8007752:	4620      	mov	r0, r4
 8007754:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8007758:	2110      	movs	r1, #16
 800775a:	4798      	blx	r3
 800775c:	2310      	movs	r3, #16
 800775e:	63a3      	str	r3, [r4, #56]	; 0x38
 8007760:	4b07      	ldr	r3, [pc, #28]	; (8007780 <GUIDRV_FlexColor_SetMode16bppC0B16+0x64>)
 8007762:	6463      	str	r3, [r4, #68]	; 0x44
 8007764:	bd10      	pop	{r4, pc}
 8007766:	bf00      	nop
 8007768:	0800720d 	.word	0x0800720d
 800776c:	0800710d 	.word	0x0800710d
 8007770:	08007b23 	.word	0x08007b23
 8007774:	08007a93 	.word	0x08007a93
 8007778:	080070f5 	.word	0x080070f5
 800777c:	080070ff 	.word	0x080070ff
 8007780:	0800ff40 	.word	0x0800ff40

08007784 <_Log2PhysX_X0Y0S0>:
 8007784:	4608      	mov	r0, r1
 8007786:	4770      	bx	lr

08007788 <_Log2PhysX_X1Y0S0>:
 8007788:	6800      	ldr	r0, [r0, #0]
 800778a:	1a40      	subs	r0, r0, r1
 800778c:	3801      	subs	r0, #1
 800778e:	4770      	bx	lr

08007790 <_Log2PhysX_X0Y1S0>:
 8007790:	4608      	mov	r0, r1
 8007792:	4770      	bx	lr

08007794 <_Log2PhysX_X1Y1S0>:
 8007794:	6800      	ldr	r0, [r0, #0]
 8007796:	1a40      	subs	r0, r0, r1
 8007798:	3801      	subs	r0, #1
 800779a:	4770      	bx	lr

0800779c <_Log2PhysX_X0Y0S1>:
 800779c:	4610      	mov	r0, r2
 800779e:	4770      	bx	lr

080077a0 <_Log2PhysX_X1Y0S1>:
 80077a0:	6840      	ldr	r0, [r0, #4]
 80077a2:	1a80      	subs	r0, r0, r2
 80077a4:	3801      	subs	r0, #1
 80077a6:	4770      	bx	lr

080077a8 <_Log2PhysX_X0Y1S1>:
 80077a8:	4610      	mov	r0, r2
 80077aa:	4770      	bx	lr

080077ac <_Log2PhysX_X1Y1S1>:
 80077ac:	6840      	ldr	r0, [r0, #4]
 80077ae:	1a80      	subs	r0, r0, r2
 80077b0:	3801      	subs	r0, #1
 80077b2:	4770      	bx	lr

080077b4 <_Log2PhysY_X0Y0S0>:
 80077b4:	4610      	mov	r0, r2
 80077b6:	4770      	bx	lr

080077b8 <_Log2PhysY_X1Y0S0>:
 80077b8:	4610      	mov	r0, r2
 80077ba:	4770      	bx	lr

080077bc <_Log2PhysY_X0Y1S0>:
 80077bc:	6840      	ldr	r0, [r0, #4]
 80077be:	1a80      	subs	r0, r0, r2
 80077c0:	3801      	subs	r0, #1
 80077c2:	4770      	bx	lr

080077c4 <_Log2PhysY_X1Y1S0>:
 80077c4:	6840      	ldr	r0, [r0, #4]
 80077c6:	1a80      	subs	r0, r0, r2
 80077c8:	3801      	subs	r0, #1
 80077ca:	4770      	bx	lr

080077cc <_Log2PhysY_X0Y0S1>:
 80077cc:	4608      	mov	r0, r1
 80077ce:	4770      	bx	lr

080077d0 <_Log2PhysY_X1Y0S1>:
 80077d0:	4608      	mov	r0, r1
 80077d2:	4770      	bx	lr

080077d4 <_Log2PhysY_X0Y1S1>:
 80077d4:	6800      	ldr	r0, [r0, #0]
 80077d6:	1a40      	subs	r0, r0, r1
 80077d8:	3801      	subs	r0, #1
 80077da:	4770      	bx	lr

080077dc <_Log2PhysY_X1Y1S1>:
 80077dc:	6800      	ldr	r0, [r0, #0]
 80077de:	1a40      	subs	r0, r0, r1
 80077e0:	3801      	subs	r0, #1
 80077e2:	4770      	bx	lr

080077e4 <_SetPixelIndex>:
 80077e4:	b510      	push	{r4, lr}
 80077e6:	6884      	ldr	r4, [r0, #8]
 80077e8:	f8d4 40f0 	ldr.w	r4, [r4, #240]	; 0xf0
 80077ec:	47a0      	blx	r4
 80077ee:	bd10      	pop	{r4, pc}

080077f0 <_GetPixelIndex>:
 80077f0:	b508      	push	{r3, lr}
 80077f2:	6883      	ldr	r3, [r0, #8]
 80077f4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80077f8:	4798      	blx	r3
 80077fa:	bd08      	pop	{r3, pc}

080077fc <_XorPixel>:
 80077fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077fe:	4604      	mov	r4, r0
 8007800:	460f      	mov	r7, r1
 8007802:	4616      	mov	r6, r2
 8007804:	6885      	ldr	r5, [r0, #8]
 8007806:	f7ff fff3 	bl	80077f0 <_GetPixelIndex>
 800780a:	9001      	str	r0, [sp, #4]
 800780c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007810:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8007812:	4620      	mov	r0, r4
 8007814:	4639      	mov	r1, r7
 8007816:	4632      	mov	r2, r6
 8007818:	ea8e 0303 	eor.w	r3, lr, r3
 800781c:	f7ff ffe2 	bl	80077e4 <_SetPixelIndex>
 8007820:	b003      	add	sp, #12
 8007822:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007824 <_DrawHLine>:
 8007824:	b513      	push	{r0, r1, r4, lr}
 8007826:	6884      	ldr	r4, [r0, #8]
 8007828:	9200      	str	r2, [sp, #0]
 800782a:	f8d4 40e8 	ldr.w	r4, [r4, #232]	; 0xe8
 800782e:	47a0      	blx	r4
 8007830:	b002      	add	sp, #8
 8007832:	bd10      	pop	{r4, pc}

08007834 <_DrawVLine>:
 8007834:	b513      	push	{r0, r1, r4, lr}
 8007836:	6884      	ldr	r4, [r0, #8]
 8007838:	9300      	str	r3, [sp, #0]
 800783a:	f8d4 40e8 	ldr.w	r4, [r4, #232]	; 0xe8
 800783e:	460b      	mov	r3, r1
 8007840:	47a0      	blx	r4
 8007842:	b002      	add	sp, #8
 8007844:	bd10      	pop	{r4, pc}

08007846 <_FillRect>:
 8007846:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007848:	9c06      	ldr	r4, [sp, #24]
 800784a:	6885      	ldr	r5, [r0, #8]
 800784c:	9400      	str	r4, [sp, #0]
 800784e:	f8d5 40e8 	ldr.w	r4, [r5, #232]	; 0xe8
 8007852:	47a0      	blx	r4
 8007854:	b003      	add	sp, #12
 8007856:	bd30      	pop	{r4, r5, pc}

08007858 <_DrawBitmap>:
 8007858:	b530      	push	{r4, r5, lr}
 800785a:	b087      	sub	sp, #28
 800785c:	6885      	ldr	r5, [r0, #8]
 800785e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007860:	9400      	str	r4, [sp, #0]
 8007862:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007864:	9401      	str	r4, [sp, #4]
 8007866:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8007868:	9402      	str	r4, [sp, #8]
 800786a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800786c:	9403      	str	r4, [sp, #12]
 800786e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8007870:	9404      	str	r4, [sp, #16]
 8007872:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8007874:	9405      	str	r4, [sp, #20]
 8007876:	f8d5 40e4 	ldr.w	r4, [r5, #228]	; 0xe4
 800787a:	47a0      	blx	r4
 800787c:	b007      	add	sp, #28
 800787e:	bd30      	pop	{r4, r5, pc}

08007880 <_GetDevFunc_SetRect>:
 8007880:	4770      	bx	lr
	...

08007884 <_GetDevFunc_SetRectOutside>:
 8007884:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007886:	9e07      	ldr	r6, [sp, #28]
 8007888:	6884      	ldr	r4, [r0, #8]
 800788a:	4d0c      	ldr	r5, [pc, #48]	; (80078bc <_GetDevFunc_SetRectOutside+0x38>)
 800788c:	b176      	cbz	r6, 80078ac <_GetDevFunc_SetRectOutside+0x28>
 800788e:	6828      	ldr	r0, [r5, #0]
 8007890:	b988      	cbnz	r0, 80078b6 <_GetDevFunc_SetRectOutside+0x32>
 8007892:	9806      	ldr	r0, [sp, #24]
 8007894:	9000      	str	r0, [sp, #0]
 8007896:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800789a:	4620      	mov	r0, r4
 800789c:	47b0      	blx	r6
 800789e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 80078a2:	602b      	str	r3, [r5, #0]
 80078a4:	4b06      	ldr	r3, [pc, #24]	; (80078c0 <_GetDevFunc_SetRectOutside+0x3c>)
 80078a6:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 80078aa:	e004      	b.n	80078b6 <_GetDevFunc_SetRectOutside+0x32>
 80078ac:	682b      	ldr	r3, [r5, #0]
 80078ae:	b113      	cbz	r3, 80078b6 <_GetDevFunc_SetRectOutside+0x32>
 80078b0:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 80078b4:	602e      	str	r6, [r5, #0]
 80078b6:	b002      	add	sp, #8
 80078b8:	bd70      	pop	{r4, r5, r6, pc}
 80078ba:	bf00      	nop
 80078bc:	200190e4 	.word	0x200190e4
 80078c0:	08007881 	.word	0x08007881

080078c4 <_ReadPixelCust_16bpp>:
 80078c4:	b508      	push	{r3, lr}
 80078c6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80078c8:	f8d0 30d4 	ldr.w	r3, [r0, #212]	; 0xd4
 80078cc:	6990      	ldr	r0, [r2, #24]
 80078ce:	4798      	blx	r3
 80078d0:	bd08      	pop	{r3, pc}

080078d2 <_ReadPixelCust_18bpp>:
 80078d2:	b508      	push	{r3, lr}
 80078d4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80078d6:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 80078da:	6990      	ldr	r0, [r2, #24]
 80078dc:	4798      	blx	r3
 80078de:	bd08      	pop	{r3, pc}

080078e0 <_ReadRectCust_16bpp>:
 80078e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80078e4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80078e6:	6884      	ldr	r4, [r0, #8]
 80078e8:	9500      	str	r5, [sp, #0]
 80078ea:	4617      	mov	r7, r2
 80078ec:	4620      	mov	r0, r4
 80078ee:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 80078f2:	4699      	mov	r9, r3
 80078f4:	4688      	mov	r8, r1
 80078f6:	1bed      	subs	r5, r5, r7
 80078f8:	47b0      	blx	r6
 80078fa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80078fc:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 8007900:	6988      	ldr	r0, [r1, #24]
 8007902:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007904:	ebc8 0809 	rsb	r8, r8, r9
 8007908:	1c6a      	adds	r2, r5, #1
 800790a:	fb08 2202 	mla	r2, r8, r2, r2
 800790e:	4798      	blx	r3
 8007910:	b003      	add	sp, #12
 8007912:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08007916 <_ReadRectCust_18bpp>:
 8007916:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800791a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800791c:	6884      	ldr	r4, [r0, #8]
 800791e:	9500      	str	r5, [sp, #0]
 8007920:	4617      	mov	r7, r2
 8007922:	4620      	mov	r0, r4
 8007924:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 8007928:	4699      	mov	r9, r3
 800792a:	4688      	mov	r8, r1
 800792c:	1bed      	subs	r5, r5, r7
 800792e:	47b0      	blx	r6
 8007930:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007932:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8007936:	6988      	ldr	r0, [r1, #24]
 8007938:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800793a:	ebc8 0809 	rsb	r8, r8, r9
 800793e:	1c6a      	adds	r2, r5, #1
 8007940:	fb08 2202 	mla	r2, r8, r2, r2
 8007944:	4798      	blx	r3
 8007946:	b003      	add	sp, #12
 8007948:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800794c <_GetDevFunc>:
 800794c:	3901      	subs	r1, #1
 800794e:	2917      	cmp	r1, #23
 8007950:	d824      	bhi.n	800799c <_GetDevFunc+0x50>
 8007952:	e8df f001 	tbb	[pc, r1]
 8007956:	2310      	.short	0x2310
 8007958:	23232323 	.word	0x23232323
 800795c:	0c232323 	.word	0x0c232323
 8007960:	23150e25 	.word	0x23150e25
 8007964:	23232323 	.word	0x23232323
 8007968:	1f232323 	.word	0x1f232323
 800796c:	211a      	.short	0x211a
 800796e:	480d      	ldr	r0, [pc, #52]	; (80079a4 <_GetDevFunc+0x58>)
 8007970:	4770      	bx	lr
 8007972:	480d      	ldr	r0, [pc, #52]	; (80079a8 <_GetDevFunc+0x5c>)
 8007974:	4770      	bx	lr
 8007976:	6803      	ldr	r3, [r0, #0]
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	f8d3 00fc 	ldr.w	r0, [r3, #252]	; 0xfc
 800797e:	4770      	bx	lr
 8007980:	6803      	ldr	r3, [r0, #0]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	f8d3 00f4 	ldr.w	r0, [r3, #244]	; 0xf4
 8007988:	4770      	bx	lr
 800798a:	6803      	ldr	r3, [r0, #0]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 8007992:	4770      	bx	lr
 8007994:	4805      	ldr	r0, [pc, #20]	; (80079ac <_GetDevFunc+0x60>)
 8007996:	4770      	bx	lr
 8007998:	4805      	ldr	r0, [pc, #20]	; (80079b0 <_GetDevFunc+0x64>)
 800799a:	4770      	bx	lr
 800799c:	2000      	movs	r0, #0
 800799e:	4770      	bx	lr
 80079a0:	4804      	ldr	r0, [pc, #16]	; (80079b4 <_GetDevFunc+0x68>)
 80079a2:	4770      	bx	lr
 80079a4:	08007d03 	.word	0x08007d03
 80079a8:	08007ca5 	.word	0x08007ca5
 80079ac:	08007c09 	.word	0x08007c09
 80079b0:	08007885 	.word	0x08007885
 80079b4:	08007cef 	.word	0x08007cef

080079b8 <_GetDevProp>:
 80079b8:	3901      	subs	r1, #1
 80079ba:	6880      	ldr	r0, [r0, #8]
 80079bc:	290d      	cmp	r1, #13
 80079be:	d823      	bhi.n	8007a08 <_GetDevProp+0x50>
 80079c0:	e8df f001 	tbb	[pc, r1]
 80079c4:	0f0d0b09 	.word	0x0f0d0b09
 80079c8:	11222222 	.word	0x11222222
 80079cc:	13252507 	.word	0x13252507
 80079d0:	1d18      	.short	0x1d18
 80079d2:	2000      	movs	r0, #0
 80079d4:	4770      	bx	lr
 80079d6:	6800      	ldr	r0, [r0, #0]
 80079d8:	4770      	bx	lr
 80079da:	6840      	ldr	r0, [r0, #4]
 80079dc:	4770      	bx	lr
 80079de:	6880      	ldr	r0, [r0, #8]
 80079e0:	4770      	bx	lr
 80079e2:	68c0      	ldr	r0, [r0, #12]
 80079e4:	4770      	bx	lr
 80079e6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80079e8:	4770      	bx	lr
 80079ea:	b188      	cbz	r0, 8007a10 <_GetDevProp+0x58>
 80079ec:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80079ee:	f000 0001 	and.w	r0, r0, #1
 80079f2:	4770      	bx	lr
 80079f4:	b160      	cbz	r0, 8007a10 <_GetDevProp+0x58>
 80079f6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80079f8:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80079fc:	4770      	bx	lr
 80079fe:	b138      	cbz	r0, 8007a10 <_GetDevProp+0x58>
 8007a00:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8007a02:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8007a06:	4770      	bx	lr
 8007a08:	f04f 30ff 	mov.w	r0, #4294967295
 8007a0c:	4770      	bx	lr
 8007a0e:	2001      	movs	r0, #1
 8007a10:	4770      	bx	lr

08007a12 <_GetDevData>:
 8007a12:	6883      	ldr	r3, [r0, #8]
 8007a14:	2901      	cmp	r1, #1
 8007a16:	bf0c      	ite	eq
 8007a18:	6c58      	ldreq	r0, [r3, #68]	; 0x44
 8007a1a:	2000      	movne	r0, #0
 8007a1c:	4770      	bx	lr

08007a1e <_GetRect>:
 8007a1e:	6883      	ldr	r3, [r0, #8]
 8007a20:	2200      	movs	r2, #0
 8007a22:	800a      	strh	r2, [r1, #0]
 8007a24:	804a      	strh	r2, [r1, #2]
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	3a01      	subs	r2, #1
 8007a2c:	3b01      	subs	r3, #1
 8007a2e:	808a      	strh	r2, [r1, #4]
 8007a30:	80cb      	strh	r3, [r1, #6]
 8007a32:	4770      	bx	lr

08007a34 <GUIDRV_FlexColor__SetLog2Phys>:
 8007a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a36:	4d10      	ldr	r5, [pc, #64]	; (8007a78 <GUIDRV_FlexColor__SetLog2Phys+0x44>)
 8007a38:	462e      	mov	r6, r5
 8007a3a:	4607      	mov	r7, r0
 8007a3c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007a3e:	b091      	sub	sp, #68	; 0x44
 8007a40:	466c      	mov	r4, sp
 8007a42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a44:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8007a48:	3520      	adds	r5, #32
 8007a4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007a4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007a50:	ac08      	add	r4, sp, #32
 8007a52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a54:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007a58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a5e:	aa10      	add	r2, sp, #64	; 0x40
 8007a60:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007a64:	f853 2c40 	ldr.w	r2, [r3, #-64]
 8007a68:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 8007a6c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8007a70:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007a74:	b011      	add	sp, #68	; 0x44
 8007a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a78:	0800e288 	.word	0x0800e288

08007a7c <_SetOrg>:
 8007a7c:	b507      	push	{r0, r1, r2, lr}
 8007a7e:	6980      	ldr	r0, [r0, #24]
 8007a80:	e88d 0006 	stmia.w	sp, {r1, r2}
 8007a84:	2103      	movs	r1, #3
 8007a86:	466a      	mov	r2, sp
 8007a88:	f7fd f8ea 	bl	8004c60 <LCD_X_DisplayDriver>
 8007a8c:	b003      	add	sp, #12
 8007a8e:	f85d fb04 	ldr.w	pc, [sp], #4

08007a92 <GUIDRV_FlexColor__SetPixelIndexNoCache>:
 8007a92:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007a96:	6884      	ldr	r4, [r0, #8]
 8007a98:	4698      	mov	r8, r3
 8007a9a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8007a9c:	079b      	lsls	r3, r3, #30
 8007a9e:	4689      	mov	r9, r1
 8007aa0:	4617      	mov	r7, r2
 8007aa2:	d532      	bpl.n	8007b0a <GUIDRV_FlexColor__SetPixelIndexNoCache+0x78>
 8007aa4:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8007aa8:	4620      	mov	r0, r4
 8007aaa:	4798      	blx	r3
 8007aac:	f8d4 5104 	ldr.w	r5, [r4, #260]	; 0x104
 8007ab0:	4606      	mov	r6, r0
 8007ab2:	463a      	mov	r2, r7
 8007ab4:	4620      	mov	r0, r4
 8007ab6:	4649      	mov	r1, r9
 8007ab8:	47a8      	blx	r5
 8007aba:	6923      	ldr	r3, [r4, #16]
 8007abc:	69a2      	ldr	r2, [r4, #24]
 8007abe:	429e      	cmp	r6, r3
 8007ac0:	bfac      	ite	ge
 8007ac2:	2300      	movge	r3, #0
 8007ac4:	2301      	movlt	r3, #1
 8007ac6:	4296      	cmp	r6, r2
 8007ac8:	bfd4      	ite	le
 8007aca:	461a      	movle	r2, r3
 8007acc:	f043 0201 	orrgt.w	r2, r3, #1
 8007ad0:	6963      	ldr	r3, [r4, #20]
 8007ad2:	4298      	cmp	r0, r3
 8007ad4:	bfac      	ite	ge
 8007ad6:	4613      	movge	r3, r2
 8007ad8:	f042 0301 	orrlt.w	r3, r2, #1
 8007adc:	4605      	mov	r5, r0
 8007ade:	b913      	cbnz	r3, 8007ae6 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x54>
 8007ae0:	69e3      	ldr	r3, [r4, #28]
 8007ae2:	4298      	cmp	r0, r3
 8007ae4:	dd0a      	ble.n	8007afc <GUIDRV_FlexColor__SetPixelIndexNoCache+0x6a>
 8007ae6:	6862      	ldr	r2, [r4, #4]
 8007ae8:	6823      	ldr	r3, [r4, #0]
 8007aea:	3a01      	subs	r2, #1
 8007aec:	9200      	str	r2, [sp, #0]
 8007aee:	2100      	movs	r1, #0
 8007af0:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 8007af4:	4620      	mov	r0, r4
 8007af6:	460a      	mov	r2, r1
 8007af8:	3b01      	subs	r3, #1
 8007afa:	47b8      	blx	r7
 8007afc:	f8d4 70ac 	ldr.w	r7, [r4, #172]	; 0xac
 8007b00:	4620      	mov	r0, r4
 8007b02:	4631      	mov	r1, r6
 8007b04:	462a      	mov	r2, r5
 8007b06:	47b8      	blx	r7
 8007b08:	e003      	b.n	8007b12 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x80>
 8007b0a:	f8d4 50ac 	ldr.w	r5, [r4, #172]	; 0xac
 8007b0e:	4620      	mov	r0, r4
 8007b10:	47a8      	blx	r5
 8007b12:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8007b16:	4620      	mov	r0, r4
 8007b18:	4641      	mov	r1, r8
 8007b1a:	4798      	blx	r3
 8007b1c:	b003      	add	sp, #12
 8007b1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08007b22 <GUIDRV_FlexColor__GetPixelIndexNoCache>:
 8007b22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b24:	6884      	ldr	r4, [r0, #8]
 8007b26:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8007b28:	079b      	lsls	r3, r3, #30
 8007b2a:	460f      	mov	r7, r1
 8007b2c:	4616      	mov	r6, r2
 8007b2e:	d545      	bpl.n	8007bbc <GUIDRV_FlexColor__GetPixelIndexNoCache+0x9a>
 8007b30:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8007b34:	4620      	mov	r0, r4
 8007b36:	4798      	blx	r3
 8007b38:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8007b3c:	4632      	mov	r2, r6
 8007b3e:	4605      	mov	r5, r0
 8007b40:	4639      	mov	r1, r7
 8007b42:	4620      	mov	r0, r4
 8007b44:	4798      	blx	r3
 8007b46:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8007b4a:	4606      	mov	r6, r0
 8007b4c:	b11b      	cbz	r3, 8007b56 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x34>
 8007b4e:	4620      	mov	r0, r4
 8007b50:	2101      	movs	r1, #1
 8007b52:	2200      	movs	r2, #0
 8007b54:	4798      	blx	r3
 8007b56:	6923      	ldr	r3, [r4, #16]
 8007b58:	69a2      	ldr	r2, [r4, #24]
 8007b5a:	429d      	cmp	r5, r3
 8007b5c:	bfac      	ite	ge
 8007b5e:	2300      	movge	r3, #0
 8007b60:	2301      	movlt	r3, #1
 8007b62:	4295      	cmp	r5, r2
 8007b64:	bfd4      	ite	le
 8007b66:	461a      	movle	r2, r3
 8007b68:	f043 0201 	orrgt.w	r2, r3, #1
 8007b6c:	6963      	ldr	r3, [r4, #20]
 8007b6e:	429e      	cmp	r6, r3
 8007b70:	bfac      	ite	ge
 8007b72:	4613      	movge	r3, r2
 8007b74:	f042 0301 	orrlt.w	r3, r2, #1
 8007b78:	b913      	cbnz	r3, 8007b80 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x5e>
 8007b7a:	69e3      	ldr	r3, [r4, #28]
 8007b7c:	429e      	cmp	r6, r3
 8007b7e:	dd0a      	ble.n	8007b96 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x74>
 8007b80:	6862      	ldr	r2, [r4, #4]
 8007b82:	6823      	ldr	r3, [r4, #0]
 8007b84:	3a01      	subs	r2, #1
 8007b86:	9200      	str	r2, [sp, #0]
 8007b88:	2100      	movs	r1, #0
 8007b8a:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 8007b8e:	4620      	mov	r0, r4
 8007b90:	460a      	mov	r2, r1
 8007b92:	3b01      	subs	r3, #1
 8007b94:	47b8      	blx	r7
 8007b96:	4629      	mov	r1, r5
 8007b98:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8007b9c:	4620      	mov	r0, r4
 8007b9e:	4632      	mov	r2, r6
 8007ba0:	4798      	blx	r3
 8007ba2:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8007ba6:	4620      	mov	r0, r4
 8007ba8:	4798      	blx	r3
 8007baa:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8007bae:	4605      	mov	r5, r0
 8007bb0:	b16b      	cbz	r3, 8007bce <GUIDRV_FlexColor__GetPixelIndexNoCache+0xac>
 8007bb2:	4620      	mov	r0, r4
 8007bb4:	2100      	movs	r1, #0
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	4798      	blx	r3
 8007bba:	e008      	b.n	8007bce <GUIDRV_FlexColor__GetPixelIndexNoCache+0xac>
 8007bbc:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8007bc0:	4620      	mov	r0, r4
 8007bc2:	4798      	blx	r3
 8007bc4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8007bc8:	4620      	mov	r0, r4
 8007bca:	4798      	blx	r3
 8007bcc:	4605      	mov	r5, r0
 8007bce:	4628      	mov	r0, r5
 8007bd0:	b003      	add	sp, #12
 8007bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007bd4 <GUIDRV_FlexColor__InitOnce>:
 8007bd4:	b538      	push	{r3, r4, r5, lr}
 8007bd6:	6885      	ldr	r5, [r0, #8]
 8007bd8:	4604      	mov	r4, r0
 8007bda:	b995      	cbnz	r5, 8007c02 <GUIDRV_FlexColor__InitOnce+0x2e>
 8007bdc:	f44f 70ba 	mov.w	r0, #372	; 0x174
 8007be0:	f002 feac 	bl	800a93c <GUI_ALLOC_GetFixedBlock>
 8007be4:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8007be8:	60a0      	str	r0, [r4, #8]
 8007bea:	4629      	mov	r1, r5
 8007bec:	f000 fdaa 	bl	8008744 <GUI__memset>
 8007bf0:	68a3      	ldr	r3, [r4, #8]
 8007bf2:	2202      	movs	r2, #2
 8007bf4:	84da      	strh	r2, [r3, #38]	; 0x26
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	621a      	str	r2, [r3, #32]
 8007bfa:	4a02      	ldr	r2, [pc, #8]	; (8007c04 <GUIDRV_FlexColor__InitOnce+0x30>)
 8007bfc:	641c      	str	r4, [r3, #64]	; 0x40
 8007bfe:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 8007c02:	bd38      	pop	{r3, r4, r5, pc}
 8007c04:	08007a35 	.word	0x08007a35

08007c08 <_SetDevFunc>:
 8007c08:	b570      	push	{r4, r5, r6, lr}
 8007c0a:	4606      	mov	r6, r0
 8007c0c:	460d      	mov	r5, r1
 8007c0e:	4614      	mov	r4, r2
 8007c10:	f7ff ffe0 	bl	8007bd4 <GUIDRV_FlexColor__InitOnce>
 8007c14:	68b3      	ldr	r3, [r6, #8]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d03b      	beq.n	8007c92 <_SetDevFunc+0x8a>
 8007c1a:	2d26      	cmp	r5, #38	; 0x26
 8007c1c:	d002      	beq.n	8007c24 <_SetDevFunc+0x1c>
 8007c1e:	2d27      	cmp	r5, #39	; 0x27
 8007c20:	d016      	beq.n	8007c50 <_SetDevFunc+0x48>
 8007c22:	bd70      	pop	{r4, r5, r6, pc}
 8007c24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c26:	2a10      	cmp	r2, #16
 8007c28:	d002      	beq.n	8007c30 <_SetDevFunc+0x28>
 8007c2a:	2a12      	cmp	r2, #18
 8007c2c:	d008      	beq.n	8007c40 <_SetDevFunc+0x38>
 8007c2e:	bd70      	pop	{r4, r5, r6, pc}
 8007c30:	4a18      	ldr	r2, [pc, #96]	; (8007c94 <_SetDevFunc+0x8c>)
 8007c32:	f8c3 40d4 	str.w	r4, [r3, #212]	; 0xd4
 8007c36:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8007c3a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8007c3e:	bd70      	pop	{r4, r5, r6, pc}
 8007c40:	4a15      	ldr	r2, [pc, #84]	; (8007c98 <_SetDevFunc+0x90>)
 8007c42:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
 8007c46:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8007c4a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8007c4e:	bd70      	pop	{r4, r5, r6, pc}
 8007c50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c52:	2a10      	cmp	r2, #16
 8007c54:	d002      	beq.n	8007c5c <_SetDevFunc+0x54>
 8007c56:	2a12      	cmp	r2, #18
 8007c58:	d00e      	beq.n	8007c78 <_SetDevFunc+0x70>
 8007c5a:	bd70      	pop	{r4, r5, r6, pc}
 8007c5c:	b13c      	cbz	r4, 8007c6e <_SetDevFunc+0x66>
 8007c5e:	4a0f      	ldr	r2, [pc, #60]	; (8007c9c <_SetDevFunc+0x94>)
 8007c60:	f8c3 40dc 	str.w	r4, [r3, #220]	; 0xdc
 8007c64:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 8007c68:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 8007c6c:	bd70      	pop	{r4, r5, r6, pc}
 8007c6e:	f8c3 40c8 	str.w	r4, [r3, #200]	; 0xc8
 8007c72:	f8c3 40c4 	str.w	r4, [r3, #196]	; 0xc4
 8007c76:	bd70      	pop	{r4, r5, r6, pc}
 8007c78:	b13c      	cbz	r4, 8007c8a <_SetDevFunc+0x82>
 8007c7a:	4a09      	ldr	r2, [pc, #36]	; (8007ca0 <_SetDevFunc+0x98>)
 8007c7c:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
 8007c80:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8007c84:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8007c88:	bd70      	pop	{r4, r5, r6, pc}
 8007c8a:	f8c3 40cc 	str.w	r4, [r3, #204]	; 0xcc
 8007c8e:	f8c3 40d0 	str.w	r4, [r3, #208]	; 0xd0
 8007c92:	bd70      	pop	{r4, r5, r6, pc}
 8007c94:	080078c5 	.word	0x080078c5
 8007c98:	080078d3 	.word	0x080078d3
 8007c9c:	080078e1 	.word	0x080078e1
 8007ca0:	08007917 	.word	0x08007917

08007ca4 <_GetDevFunc_Init>:
 8007ca4:	b538      	push	{r3, r4, r5, lr}
 8007ca6:	4605      	mov	r5, r0
 8007ca8:	f7ff ff94 	bl	8007bd4 <GUIDRV_FlexColor__InitOnce>
 8007cac:	68ac      	ldr	r4, [r5, #8]
 8007cae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007cb2:	f002 fe43 	bl	800a93c <GUI_ALLOC_GetFixedBlock>
 8007cb6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007cb8:	66a0      	str	r0, [r4, #104]	; 0x68
 8007cba:	3307      	adds	r3, #7
 8007cbc:	10d8      	asrs	r0, r3, #3
 8007cbe:	6823      	ldr	r3, [r4, #0]
 8007cc0:	4358      	muls	r0, r3
 8007cc2:	f002 fe3b 	bl	800a93c <GUI_ALLOC_GetFixedBlock>
 8007cc6:	2101      	movs	r1, #1
 8007cc8:	2200      	movs	r2, #0
 8007cca:	66e0      	str	r0, [r4, #108]	; 0x6c
 8007ccc:	69a8      	ldr	r0, [r5, #24]
 8007cce:	f7fc ffc7 	bl	8004c60 <LCD_X_DisplayDriver>
 8007cd2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007cd6:	4605      	mov	r5, r0
 8007cd8:	4620      	mov	r0, r4
 8007cda:	4798      	blx	r3
 8007cdc:	4620      	mov	r0, r4
 8007cde:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8007ce2:	4798      	blx	r3
 8007ce4:	2d00      	cmp	r5, #0
 8007ce6:	bfd4      	ite	le
 8007ce8:	2000      	movle	r0, #0
 8007cea:	2001      	movgt	r0, #1
 8007cec:	bd38      	pop	{r3, r4, r5, pc}

08007cee <_GetDevFunc_SetSize>:
 8007cee:	b570      	push	{r4, r5, r6, lr}
 8007cf0:	4604      	mov	r4, r0
 8007cf2:	460d      	mov	r5, r1
 8007cf4:	4616      	mov	r6, r2
 8007cf6:	f7ff ff6d 	bl	8007bd4 <GUIDRV_FlexColor__InitOnce>
 8007cfa:	68a3      	ldr	r3, [r4, #8]
 8007cfc:	e883 0060 	stmia.w	r3, {r5, r6}
 8007d00:	bd70      	pop	{r4, r5, r6, pc}

08007d02 <_GetDevFunc_SetVSize>:
 8007d02:	b570      	push	{r4, r5, r6, lr}
 8007d04:	4604      	mov	r4, r0
 8007d06:	460d      	mov	r5, r1
 8007d08:	4616      	mov	r6, r2
 8007d0a:	f7ff ff63 	bl	8007bd4 <GUIDRV_FlexColor__InitOnce>
 8007d0e:	68a3      	ldr	r3, [r4, #8]
 8007d10:	609d      	str	r5, [r3, #8]
 8007d12:	60de      	str	r6, [r3, #12]
 8007d14:	bd70      	pop	{r4, r5, r6, pc}

08007d16 <GUIDRV_FlexColor_Config>:
 8007d16:	b538      	push	{r3, r4, r5, lr}
 8007d18:	4605      	mov	r5, r0
 8007d1a:	460c      	mov	r4, r1
 8007d1c:	f7ff ff5a 	bl	8007bd4 <GUIDRV_FlexColor__InitOnce>
 8007d20:	68ab      	ldr	r3, [r5, #8]
 8007d22:	6822      	ldr	r2, [r4, #0]
 8007d24:	62da      	str	r2, [r3, #44]	; 0x2c
 8007d26:	6862      	ldr	r2, [r4, #4]
 8007d28:	631a      	str	r2, [r3, #48]	; 0x30
 8007d2a:	68a2      	ldr	r2, [r4, #8]
 8007d2c:	635a      	str	r2, [r3, #52]	; 0x34
 8007d2e:	0752      	lsls	r2, r2, #29
 8007d30:	d507      	bpl.n	8007d42 <GUIDRV_FlexColor_Config+0x2c>
 8007d32:	e893 0006 	ldmia.w	r3, {r1, r2}
 8007d36:	601a      	str	r2, [r3, #0]
 8007d38:	6059      	str	r1, [r3, #4]
 8007d3a:	68da      	ldr	r2, [r3, #12]
 8007d3c:	6899      	ldr	r1, [r3, #8]
 8007d3e:	60d9      	str	r1, [r3, #12]
 8007d40:	609a      	str	r2, [r3, #8]
 8007d42:	89a2      	ldrh	r2, [r4, #12]
 8007d44:	849a      	strh	r2, [r3, #36]	; 0x24
 8007d46:	6922      	ldr	r2, [r4, #16]
 8007d48:	b112      	cbz	r2, 8007d50 <GUIDRV_FlexColor_Config+0x3a>
 8007d4a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8007d4e:	621a      	str	r2, [r3, #32]
 8007d50:	bd38      	pop	{r3, r4, r5, pc}

08007d52 <GUIDRV_FlexColor_SetFunc>:
 8007d52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d56:	4604      	mov	r4, r0
 8007d58:	461f      	mov	r7, r3
 8007d5a:	4616      	mov	r6, r2
 8007d5c:	4688      	mov	r8, r1
 8007d5e:	f7ff ff39 	bl	8007bd4 <GUIDRV_FlexColor__InitOnce>
 8007d62:	68a5      	ldr	r5, [r4, #8]
 8007d64:	4641      	mov	r1, r8
 8007d66:	2268      	movs	r2, #104	; 0x68
 8007d68:	f505 7086 	add.w	r0, r5, #268	; 0x10c
 8007d6c:	f004 fd96 	bl	800c89c <memcpy>
 8007d70:	4620      	mov	r0, r4
 8007d72:	47b0      	blx	r6
 8007d74:	4620      	mov	r0, r4
 8007d76:	47b8      	blx	r7
 8007d78:	6923      	ldr	r3, [r4, #16]
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	4798      	blx	r3
 8007d7e:	62a8      	str	r0, [r5, #40]	; 0x28
 8007d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007d84 <LCD_UpdateColorIndices>:
 8007d84:	b510      	push	{r4, lr}
 8007d86:	4c07      	ldr	r4, [pc, #28]	; (8007da4 <LCD_UpdateColorIndices+0x20>)
 8007d88:	6823      	ldr	r3, [r4, #0]
 8007d8a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007d8c:	f000 fc44 	bl	8008618 <LCD_Color2Index>
 8007d90:	f000 fc62 	bl	8008658 <LCD_SetColorIndex>
 8007d94:	6823      	ldr	r3, [r4, #0]
 8007d96:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007d98:	f000 fc3e 	bl	8008618 <LCD_Color2Index>
 8007d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007da0:	f000 bc76 	b.w	8008690 <LCD_SetBkColorIndex>
 8007da4:	20000018 	.word	0x20000018

08007da8 <LCD_SetClipRectEx>:
 8007da8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007daa:	4c09      	ldr	r4, [pc, #36]	; (8007dd0 <LCD_SetClipRectEx+0x28>)
 8007dac:	6823      	ldr	r3, [r4, #0]
 8007dae:	7c5a      	ldrb	r2, [r3, #17]
 8007db0:	4b08      	ldr	r3, [pc, #32]	; (8007dd4 <LCD_SetClipRectEx+0x2c>)
 8007db2:	4605      	mov	r5, r0
 8007db4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007db8:	68c2      	ldr	r2, [r0, #12]
 8007dba:	4669      	mov	r1, sp
 8007dbc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007dbe:	4790      	blx	r2
 8007dc0:	6820      	ldr	r0, [r4, #0]
 8007dc2:	4629      	mov	r1, r5
 8007dc4:	466a      	mov	r2, sp
 8007dc6:	3008      	adds	r0, #8
 8007dc8:	f000 fd62 	bl	8008890 <GUI__IntersectRects>
 8007dcc:	b003      	add	sp, #12
 8007dce:	bd30      	pop	{r4, r5, pc}
 8007dd0:	20000018 	.word	0x20000018
 8007dd4:	20019604 	.word	0x20019604

08007dd8 <LCD_SetVSizeEx>:
 8007dd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007dda:	460d      	mov	r5, r1
 8007ddc:	4614      	mov	r4, r2
 8007dde:	f001 fc89 	bl	80096f4 <GUI_DEVICE__GetpDriver>
 8007de2:	9001      	str	r0, [sp, #4]
 8007de4:	b908      	cbnz	r0, 8007dea <LCD_SetVSizeEx+0x12>
 8007de6:	2001      	movs	r0, #1
 8007de8:	e00c      	b.n	8007e04 <LCD_SetVSizeEx+0x2c>
 8007dea:	68c3      	ldr	r3, [r0, #12]
 8007dec:	210a      	movs	r1, #10
 8007dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df0:	a801      	add	r0, sp, #4
 8007df2:	4798      	blx	r3
 8007df4:	4603      	mov	r3, r0
 8007df6:	2800      	cmp	r0, #0
 8007df8:	d0f5      	beq.n	8007de6 <LCD_SetVSizeEx+0xe>
 8007dfa:	9801      	ldr	r0, [sp, #4]
 8007dfc:	4629      	mov	r1, r5
 8007dfe:	4622      	mov	r2, r4
 8007e00:	4798      	blx	r3
 8007e02:	2000      	movs	r0, #0
 8007e04:	b003      	add	sp, #12
 8007e06:	bd30      	pop	{r4, r5, pc}

08007e08 <LCD_SetSizeEx>:
 8007e08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e0a:	460d      	mov	r5, r1
 8007e0c:	4614      	mov	r4, r2
 8007e0e:	f001 fc71 	bl	80096f4 <GUI_DEVICE__GetpDriver>
 8007e12:	9001      	str	r0, [sp, #4]
 8007e14:	b908      	cbnz	r0, 8007e1a <LCD_SetSizeEx+0x12>
 8007e16:	2001      	movs	r0, #1
 8007e18:	e00c      	b.n	8007e34 <LCD_SetSizeEx+0x2c>
 8007e1a:	68c3      	ldr	r3, [r0, #12]
 8007e1c:	210b      	movs	r1, #11
 8007e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e20:	a801      	add	r0, sp, #4
 8007e22:	4798      	blx	r3
 8007e24:	4603      	mov	r3, r0
 8007e26:	2800      	cmp	r0, #0
 8007e28:	d0f5      	beq.n	8007e16 <LCD_SetSizeEx+0xe>
 8007e2a:	9801      	ldr	r0, [sp, #4]
 8007e2c:	4629      	mov	r1, r5
 8007e2e:	4622      	mov	r2, r4
 8007e30:	4798      	blx	r3
 8007e32:	2000      	movs	r0, #0
 8007e34:	b003      	add	sp, #12
 8007e36:	bd30      	pop	{r4, r5, pc}

08007e38 <LCD_SetLUTEntryEx>:
 8007e38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e3a:	460d      	mov	r5, r1
 8007e3c:	4614      	mov	r4, r2
 8007e3e:	f001 fc59 	bl	80096f4 <GUI_DEVICE__GetpDriver>
 8007e42:	9001      	str	r0, [sp, #4]
 8007e44:	b908      	cbnz	r0, 8007e4a <LCD_SetLUTEntryEx+0x12>
 8007e46:	2001      	movs	r0, #1
 8007e48:	e00c      	b.n	8007e64 <LCD_SetLUTEntryEx+0x2c>
 8007e4a:	68c3      	ldr	r3, [r0, #12]
 8007e4c:	2110      	movs	r1, #16
 8007e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e50:	a801      	add	r0, sp, #4
 8007e52:	4798      	blx	r3
 8007e54:	4603      	mov	r3, r0
 8007e56:	2800      	cmp	r0, #0
 8007e58:	d0f5      	beq.n	8007e46 <LCD_SetLUTEntryEx+0xe>
 8007e5a:	9801      	ldr	r0, [sp, #4]
 8007e5c:	4629      	mov	r1, r5
 8007e5e:	4622      	mov	r2, r4
 8007e60:	4798      	blx	r3
 8007e62:	2000      	movs	r0, #0
 8007e64:	b003      	add	sp, #12
 8007e66:	bd30      	pop	{r4, r5, pc}

08007e68 <_GetDevProp>:
 8007e68:	2801      	cmp	r0, #1
 8007e6a:	b510      	push	{r4, lr}
 8007e6c:	460c      	mov	r4, r1
 8007e6e:	dc08      	bgt.n	8007e82 <_GetDevProp+0x1a>
 8007e70:	f001 fc40 	bl	80096f4 <GUI_DEVICE__GetpDriver>
 8007e74:	b120      	cbz	r0, 8007e80 <_GetDevProp+0x18>
 8007e76:	68c3      	ldr	r3, [r0, #12]
 8007e78:	4621      	mov	r1, r4
 8007e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e7c:	4798      	blx	r3
 8007e7e:	bd10      	pop	{r4, pc}
 8007e80:	bd10      	pop	{r4, pc}
 8007e82:	2000      	movs	r0, #0
 8007e84:	bd10      	pop	{r4, pc}

08007e86 <_GetMaxValue>:
 8007e86:	b538      	push	{r3, r4, r5, lr}
 8007e88:	4604      	mov	r4, r0
 8007e8a:	4621      	mov	r1, r4
 8007e8c:	2001      	movs	r0, #1
 8007e8e:	f7ff ffeb 	bl	8007e68 <_GetDevProp>
 8007e92:	4621      	mov	r1, r4
 8007e94:	4605      	mov	r5, r0
 8007e96:	2000      	movs	r0, #0
 8007e98:	f7ff ffe6 	bl	8007e68 <_GetDevProp>
 8007e9c:	42a8      	cmp	r0, r5
 8007e9e:	bfb8      	it	lt
 8007ea0:	4628      	movlt	r0, r5
 8007ea2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8007ea6:	bd38      	pop	{r3, r4, r5, pc}

08007ea8 <LCD_GetXSizeEx>:
 8007ea8:	2101      	movs	r1, #1
 8007eaa:	f7ff bfdd 	b.w	8007e68 <_GetDevProp>

08007eae <LCD_GetYSizeEx>:
 8007eae:	2102      	movs	r1, #2
 8007eb0:	f7ff bfda 	b.w	8007e68 <_GetDevProp>

08007eb4 <LCD_GetBitsPerPixelEx>:
 8007eb4:	2108      	movs	r1, #8
 8007eb6:	f7ff bfd7 	b.w	8007e68 <_GetDevProp>

08007eba <LCD_GetNumColorsEx>:
 8007eba:	2109      	movs	r1, #9
 8007ebc:	f7ff bfd4 	b.w	8007e68 <_GetDevProp>

08007ec0 <LCD_GetNumColors>:
 8007ec0:	4b02      	ldr	r3, [pc, #8]	; (8007ecc <LCD_GetNumColors+0xc>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	7c58      	ldrb	r0, [r3, #17]
 8007ec6:	f7ff bff8 	b.w	8007eba <LCD_GetNumColorsEx>
 8007eca:	bf00      	nop
 8007ecc:	20000018 	.word	0x20000018

08007ed0 <GUI_GetBitsPerPixelEx>:
 8007ed0:	b508      	push	{r3, lr}
 8007ed2:	4b04      	ldr	r3, [pc, #16]	; (8007ee4 <GUI_GetBitsPerPixelEx+0x14>)
 8007ed4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8007ed8:	68c3      	ldr	r3, [r0, #12]
 8007eda:	2108      	movs	r1, #8
 8007edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ede:	4798      	blx	r3
 8007ee0:	bd08      	pop	{r3, pc}
 8007ee2:	bf00      	nop
 8007ee4:	20019604 	.word	0x20019604

08007ee8 <LCD_GetPaletteEx>:
 8007ee8:	b508      	push	{r3, lr}
 8007eea:	f001 fc03 	bl	80096f4 <GUI_DEVICE__GetpDriver>
 8007eee:	b120      	cbz	r0, 8007efa <LCD_GetPaletteEx+0x12>
 8007ef0:	68c3      	ldr	r3, [r0, #12]
 8007ef2:	2102      	movs	r1, #2
 8007ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef6:	4798      	blx	r3
 8007ef8:	bd08      	pop	{r3, pc}
 8007efa:	bd08      	pop	{r3, pc}

08007efc <LCD_GetPalette>:
 8007efc:	4b02      	ldr	r3, [pc, #8]	; (8007f08 <LCD_GetPalette+0xc>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	7c58      	ldrb	r0, [r3, #17]
 8007f02:	f7ff bff1 	b.w	8007ee8 <LCD_GetPaletteEx>
 8007f06:	bf00      	nop
 8007f08:	20000018 	.word	0x20000018

08007f0c <GUI_GetpfIndex2ColorEx>:
 8007f0c:	4b02      	ldr	r3, [pc, #8]	; (8007f18 <GUI_GetpfIndex2ColorEx+0xc>)
 8007f0e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007f12:	691b      	ldr	r3, [r3, #16]
 8007f14:	6858      	ldr	r0, [r3, #4]
 8007f16:	4770      	bx	lr
 8007f18:	20019604 	.word	0x20019604

08007f1c <GUI_GetpfColor2IndexEx>:
 8007f1c:	4b02      	ldr	r3, [pc, #8]	; (8007f28 <GUI_GetpfColor2IndexEx+0xc>)
 8007f1e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007f22:	691b      	ldr	r3, [r3, #16]
 8007f24:	6818      	ldr	r0, [r3, #0]
 8007f26:	4770      	bx	lr
 8007f28:	20019604 	.word	0x20019604

08007f2c <LCD_GetXSizeMax>:
 8007f2c:	2001      	movs	r0, #1
 8007f2e:	f7ff bfaa 	b.w	8007e86 <_GetMaxValue>

08007f32 <LCD_GetYSizeMax>:
 8007f32:	2002      	movs	r0, #2
 8007f34:	f7ff bfa7 	b.w	8007e86 <_GetMaxValue>

08007f38 <LCD_SetDisplaySize>:
 8007f38:	4b02      	ldr	r3, [pc, #8]	; (8007f44 <LCD_SetDisplaySize+0xc>)
 8007f3a:	6018      	str	r0, [r3, #0]
 8007f3c:	4b02      	ldr	r3, [pc, #8]	; (8007f48 <LCD_SetDisplaySize+0x10>)
 8007f3e:	6019      	str	r1, [r3, #0]
 8007f40:	4770      	bx	lr
 8007f42:	bf00      	nop
 8007f44:	200190ec 	.word	0x200190ec
 8007f48:	200190e8 	.word	0x200190e8

08007f4c <LCD_GetXSizeDisplay>:
 8007f4c:	4b01      	ldr	r3, [pc, #4]	; (8007f54 <LCD_GetXSizeDisplay+0x8>)
 8007f4e:	6818      	ldr	r0, [r3, #0]
 8007f50:	4770      	bx	lr
 8007f52:	bf00      	nop
 8007f54:	200190ec 	.word	0x200190ec

08007f58 <LCD_GetYSizeDisplay>:
 8007f58:	4b01      	ldr	r3, [pc, #4]	; (8007f60 <LCD_GetYSizeDisplay+0x8>)
 8007f5a:	6818      	ldr	r0, [r3, #0]
 8007f5c:	4770      	bx	lr
 8007f5e:	bf00      	nop
 8007f60:	200190e8 	.word	0x200190e8

08007f64 <LCD__GetBPP>:
 8007f64:	2800      	cmp	r0, #0
 8007f66:	d03b      	beq.n	8007fe0 <LCD__GetBPP+0x7c>
 8007f68:	f030 0301 	bics.w	r3, r0, #1
 8007f6c:	d029      	beq.n	8007fc2 <LCD__GetBPP+0x5e>
 8007f6e:	f030 0303 	bics.w	r3, r0, #3
 8007f72:	d028      	beq.n	8007fc6 <LCD__GetBPP+0x62>
 8007f74:	f030 0307 	bics.w	r3, r0, #7
 8007f78:	d027      	beq.n	8007fca <LCD__GetBPP+0x66>
 8007f7a:	f030 030f 	bics.w	r3, r0, #15
 8007f7e:	d026      	beq.n	8007fce <LCD__GetBPP+0x6a>
 8007f80:	f030 031f 	bics.w	r3, r0, #31
 8007f84:	d025      	beq.n	8007fd2 <LCD__GetBPP+0x6e>
 8007f86:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
 8007f8a:	d024      	beq.n	8007fd6 <LCD__GetBPP+0x72>
 8007f8c:	f420 73ff 	bic.w	r3, r0, #510	; 0x1fe
 8007f90:	f023 0301 	bic.w	r3, r3, #1
 8007f94:	b30b      	cbz	r3, 8007fda <LCD__GetBPP+0x76>
 8007f96:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
 8007f9a:	f023 030f 	bic.w	r3, r3, #15
 8007f9e:	b1e3      	cbz	r3, 8007fda <LCD__GetBPP+0x76>
 8007fa0:	f420 43ff 	bic.w	r3, r0, #32640	; 0x7f80
 8007fa4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007fa8:	b1bb      	cbz	r3, 8007fda <LCD__GetBPP+0x76>
 8007faa:	0c03      	lsrs	r3, r0, #16
 8007fac:	041b      	lsls	r3, r3, #16
 8007fae:	b1a3      	cbz	r3, 8007fda <LCD__GetBPP+0x76>
 8007fb0:	0c83      	lsrs	r3, r0, #18
 8007fb2:	049b      	lsls	r3, r3, #18
 8007fb4:	b19b      	cbz	r3, 8007fde <LCD__GetBPP+0x7a>
 8007fb6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007fba:	bf0c      	ite	eq
 8007fbc:	2018      	moveq	r0, #24
 8007fbe:	2020      	movne	r0, #32
 8007fc0:	4770      	bx	lr
 8007fc2:	2001      	movs	r0, #1
 8007fc4:	4770      	bx	lr
 8007fc6:	2002      	movs	r0, #2
 8007fc8:	4770      	bx	lr
 8007fca:	2003      	movs	r0, #3
 8007fcc:	4770      	bx	lr
 8007fce:	2004      	movs	r0, #4
 8007fd0:	4770      	bx	lr
 8007fd2:	2005      	movs	r0, #5
 8007fd4:	4770      	bx	lr
 8007fd6:	2008      	movs	r0, #8
 8007fd8:	4770      	bx	lr
 8007fda:	2010      	movs	r0, #16
 8007fdc:	4770      	bx	lr
 8007fde:	2012      	movs	r0, #18
 8007fe0:	4770      	bx	lr

08007fe2 <LCD__GetBPPDevice>:
 8007fe2:	b508      	push	{r3, lr}
 8007fe4:	f7ff ffbe 	bl	8007f64 <LCD__GetBPP>
 8007fe8:	2801      	cmp	r0, #1
 8007fea:	d00f      	beq.n	800800c <LCD__GetBPPDevice+0x2a>
 8007fec:	1e83      	subs	r3, r0, #2
 8007fee:	2b06      	cmp	r3, #6
 8007ff0:	d909      	bls.n	8008006 <LCD__GetBPPDevice+0x24>
 8007ff2:	f1a0 0309 	sub.w	r3, r0, #9
 8007ff6:	2b07      	cmp	r3, #7
 8007ff8:	d907      	bls.n	800800a <LCD__GetBPPDevice+0x28>
 8007ffa:	3811      	subs	r0, #17
 8007ffc:	2810      	cmp	r0, #16
 8007ffe:	bf34      	ite	cc
 8008000:	2020      	movcc	r0, #32
 8008002:	2000      	movcs	r0, #0
 8008004:	bd08      	pop	{r3, pc}
 8008006:	2008      	movs	r0, #8
 8008008:	bd08      	pop	{r3, pc}
 800800a:	2010      	movs	r0, #16
 800800c:	bd08      	pop	{r3, pc}
	...

08008010 <_SetDrawMode>:
 8008010:	b570      	push	{r4, r5, r6, lr}
 8008012:	4b08      	ldr	r3, [pc, #32]	; (8008034 <_SetDrawMode+0x24>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	7c1a      	ldrb	r2, [r3, #16]
 8008018:	ea80 0102 	eor.w	r1, r0, r2
 800801c:	0749      	lsls	r1, r1, #29
 800801e:	d505      	bpl.n	800802c <_SetDrawMode+0x1c>
 8008020:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8008022:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8008024:	6826      	ldr	r6, [r4, #0]
 8008026:	680d      	ldr	r5, [r1, #0]
 8008028:	6025      	str	r5, [r4, #0]
 800802a:	600e      	str	r6, [r1, #0]
 800802c:	7418      	strb	r0, [r3, #16]
 800802e:	4610      	mov	r0, r2
 8008030:	bd70      	pop	{r4, r5, r6, pc}
 8008032:	bf00      	nop
 8008034:	20000018 	.word	0x20000018

08008038 <LCD_SetDrawMode>:
 8008038:	b508      	push	{r3, lr}
 800803a:	4b02      	ldr	r3, [pc, #8]	; (8008044 <LCD_SetDrawMode+0xc>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	4798      	blx	r3
 8008042:	bd08      	pop	{r3, pc}
 8008044:	20000014 	.word	0x20000014

08008048 <LCD_DrawPixel>:
 8008048:	b538      	push	{r3, r4, r5, lr}
 800804a:	4b14      	ldr	r3, [pc, #80]	; (800809c <LCD_DrawPixel+0x54>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	460a      	mov	r2, r1
 8008050:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 8008054:	428a      	cmp	r2, r1
 8008056:	4604      	mov	r4, r0
 8008058:	db1e      	blt.n	8008098 <LCD_DrawPixel+0x50>
 800805a:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 800805e:	428a      	cmp	r2, r1
 8008060:	dc1a      	bgt.n	8008098 <LCD_DrawPixel+0x50>
 8008062:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8008066:	4288      	cmp	r0, r1
 8008068:	db16      	blt.n	8008098 <LCD_DrawPixel+0x50>
 800806a:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 800806e:	4288      	cmp	r0, r1
 8008070:	dc12      	bgt.n	8008098 <LCD_DrawPixel+0x50>
 8008072:	7c19      	ldrb	r1, [r3, #16]
 8008074:	7c58      	ldrb	r0, [r3, #17]
 8008076:	f011 0f01 	tst.w	r1, #1
 800807a:	4909      	ldr	r1, [pc, #36]	; (80080a0 <LCD_DrawPixel+0x58>)
 800807c:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8008080:	d004      	beq.n	800808c <LCD_DrawPixel+0x44>
 8008082:	68c3      	ldr	r3, [r0, #12]
 8008084:	4621      	mov	r1, r4
 8008086:	69db      	ldr	r3, [r3, #28]
 8008088:	4798      	blx	r3
 800808a:	bd38      	pop	{r3, r4, r5, pc}
 800808c:	68c1      	ldr	r1, [r0, #12]
 800808e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008090:	698d      	ldr	r5, [r1, #24]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4621      	mov	r1, r4
 8008096:	47a8      	blx	r5
 8008098:	bd38      	pop	{r3, r4, r5, pc}
 800809a:	bf00      	nop
 800809c:	20000018 	.word	0x20000018
 80080a0:	20019604 	.word	0x20019604

080080a4 <LCD_DrawHLine>:
 80080a4:	b538      	push	{r3, r4, r5, lr}
 80080a6:	4b10      	ldr	r3, [pc, #64]	; (80080e8 <LCD_DrawHLine+0x44>)
 80080a8:	681c      	ldr	r4, [r3, #0]
 80080aa:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80080ae:	4299      	cmp	r1, r3
 80080b0:	460d      	mov	r5, r1
 80080b2:	db17      	blt.n	80080e4 <LCD_DrawHLine+0x40>
 80080b4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80080b8:	4299      	cmp	r1, r3
 80080ba:	dc13      	bgt.n	80080e4 <LCD_DrawHLine+0x40>
 80080bc:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80080c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080c4:	4288      	cmp	r0, r1
 80080c6:	bfa8      	it	ge
 80080c8:	4601      	movge	r1, r0
 80080ca:	429a      	cmp	r2, r3
 80080cc:	bfb8      	it	lt
 80080ce:	4613      	movlt	r3, r2
 80080d0:	428b      	cmp	r3, r1
 80080d2:	db07      	blt.n	80080e4 <LCD_DrawHLine+0x40>
 80080d4:	7c60      	ldrb	r0, [r4, #17]
 80080d6:	4a05      	ldr	r2, [pc, #20]	; (80080ec <LCD_DrawHLine+0x48>)
 80080d8:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80080dc:	68c2      	ldr	r2, [r0, #12]
 80080de:	6894      	ldr	r4, [r2, #8]
 80080e0:	462a      	mov	r2, r5
 80080e2:	47a0      	blx	r4
 80080e4:	bd38      	pop	{r3, r4, r5, pc}
 80080e6:	bf00      	nop
 80080e8:	20000018 	.word	0x20000018
 80080ec:	20019604 	.word	0x20019604

080080f0 <LCD_DrawVLine>:
 80080f0:	b538      	push	{r3, r4, r5, lr}
 80080f2:	4b10      	ldr	r3, [pc, #64]	; (8008134 <LCD_DrawVLine+0x44>)
 80080f4:	681c      	ldr	r4, [r3, #0]
 80080f6:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80080fa:	4605      	mov	r5, r0
 80080fc:	429d      	cmp	r5, r3
 80080fe:	4610      	mov	r0, r2
 8008100:	db17      	blt.n	8008132 <LCD_DrawVLine+0x42>
 8008102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008106:	429d      	cmp	r5, r3
 8008108:	dc13      	bgt.n	8008132 <LCD_DrawVLine+0x42>
 800810a:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800810e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8008112:	4291      	cmp	r1, r2
 8008114:	bfa8      	it	ge
 8008116:	460a      	movge	r2, r1
 8008118:	4298      	cmp	r0, r3
 800811a:	bfb8      	it	lt
 800811c:	4603      	movlt	r3, r0
 800811e:	4293      	cmp	r3, r2
 8008120:	db07      	blt.n	8008132 <LCD_DrawVLine+0x42>
 8008122:	7c60      	ldrb	r0, [r4, #17]
 8008124:	4904      	ldr	r1, [pc, #16]	; (8008138 <LCD_DrawVLine+0x48>)
 8008126:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800812a:	68c1      	ldr	r1, [r0, #12]
 800812c:	68cc      	ldr	r4, [r1, #12]
 800812e:	4629      	mov	r1, r5
 8008130:	47a0      	blx	r4
 8008132:	bd38      	pop	{r3, r4, r5, pc}
 8008134:	20000018 	.word	0x20000018
 8008138:	20019604 	.word	0x20019604

0800813c <LCD_FillRect>:
 800813c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800813e:	460e      	mov	r6, r1
 8008140:	4912      	ldr	r1, [pc, #72]	; (800818c <LCD_FillRect+0x50>)
 8008142:	680c      	ldr	r4, [r1, #0]
 8008144:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8008148:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800814c:	4288      	cmp	r0, r1
 800814e:	bfa8      	it	ge
 8008150:	4601      	movge	r1, r0
 8008152:	42aa      	cmp	r2, r5
 8008154:	bfb8      	it	lt
 8008156:	4615      	movlt	r5, r2
 8008158:	428d      	cmp	r5, r1
 800815a:	db14      	blt.n	8008186 <LCD_FillRect+0x4a>
 800815c:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8008160:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 8008164:	4296      	cmp	r6, r2
 8008166:	bfa8      	it	ge
 8008168:	4632      	movge	r2, r6
 800816a:	4283      	cmp	r3, r0
 800816c:	bfa8      	it	ge
 800816e:	4603      	movge	r3, r0
 8008170:	4293      	cmp	r3, r2
 8008172:	db08      	blt.n	8008186 <LCD_FillRect+0x4a>
 8008174:	7c64      	ldrb	r4, [r4, #17]
 8008176:	4806      	ldr	r0, [pc, #24]	; (8008190 <LCD_FillRect+0x54>)
 8008178:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800817c:	68c4      	ldr	r4, [r0, #12]
 800817e:	9300      	str	r3, [sp, #0]
 8008180:	6924      	ldr	r4, [r4, #16]
 8008182:	462b      	mov	r3, r5
 8008184:	47a0      	blx	r4
 8008186:	b002      	add	sp, #8
 8008188:	bd70      	pop	{r4, r5, r6, pc}
 800818a:	bf00      	nop
 800818c:	20000018 	.word	0x20000018
 8008190:	20019604 	.word	0x20019604

08008194 <LCD__DrawBitmap_1bpp>:
 8008194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008198:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 8008348 <LCD__DrawBitmap_1bpp+0x1b4>
 800819c:	b08f      	sub	sp, #60	; 0x3c
 800819e:	f8dc c000 	ldr.w	ip, [ip]
 80081a2:	9009      	str	r0, [sp, #36]	; 0x24
 80081a4:	460e      	mov	r6, r1
 80081a6:	4615      	mov	r5, r2
 80081a8:	469b      	mov	fp, r3
 80081aa:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80081ac:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80081b0:	f1bc 0f00 	cmp.w	ip, #0
 80081b4:	d00d      	beq.n	80081d2 <LCD__DrawBitmap_1bpp+0x3e>
 80081b6:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80081b8:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80081ba:	9500      	str	r5, [sp, #0]
 80081bc:	9601      	str	r6, [sp, #4]
 80081be:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80081c0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80081c2:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80081c4:	9702      	str	r7, [sp, #8]
 80081c6:	9503      	str	r5, [sp, #12]
 80081c8:	9404      	str	r4, [sp, #16]
 80081ca:	9605      	str	r6, [sp, #20]
 80081cc:	f8dc 4000 	ldr.w	r4, [ip]
 80081d0:	e053      	b.n	800827a <LCD__DrawBitmap_1bpp+0xe6>
 80081d2:	9f18      	ldr	r7, [sp, #96]	; 0x60
 80081d4:	9819      	ldr	r0, [sp, #100]	; 0x64
 80081d6:	ea47 0300 	orr.w	r3, r7, r0
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d14f      	bne.n	800827e <LCD__DrawBitmap_1bpp+0xea>
 80081de:	4b58      	ldr	r3, [pc, #352]	; (8008340 <LCD__DrawBitmap_1bpp+0x1ac>)
 80081e0:	6818      	ldr	r0, [r3, #0]
 80081e2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80081e6:	1a51      	subs	r1, r2, r1
 80081e8:	2900      	cmp	r1, #0
 80081ea:	dd08      	ble.n	80081fe <LCD__DrawBitmap_1bpp+0x6a>
 80081ec:	ebc1 030b 	rsb	r3, r1, fp
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	f340 80a2 	ble.w	800833a <LCD__DrawBitmap_1bpp+0x1a6>
 80081f6:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80081f8:	fb07 4401 	mla	r4, r7, r1, r4
 80081fc:	e001      	b.n	8008202 <LCD__DrawBitmap_1bpp+0x6e>
 80081fe:	465b      	mov	r3, fp
 8008200:	4632      	mov	r2, r6
 8008202:	445e      	add	r6, fp
 8008204:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 8008208:	3e01      	subs	r6, #1
 800820a:	1a76      	subs	r6, r6, r1
 800820c:	2e00      	cmp	r6, #0
 800820e:	dd03      	ble.n	8008218 <LCD__DrawBitmap_1bpp+0x84>
 8008210:	1b9b      	subs	r3, r3, r6
 8008212:	2b00      	cmp	r3, #0
 8008214:	f340 8091 	ble.w	800833a <LCD__DrawBitmap_1bpp+0x1a6>
 8008218:	9909      	ldr	r1, [sp, #36]	; 0x24
 800821a:	f9b0 600c 	ldrsh.w	r6, [r0, #12]
 800821e:	4429      	add	r1, r5
 8008220:	3901      	subs	r1, #1
 8008222:	1b89      	subs	r1, r1, r6
 8008224:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008226:	2900      	cmp	r1, #0
 8008228:	bfc8      	it	gt
 800822a:	ebc1 0505 	rsbgt	r5, r1, r5
 800822e:	ebc8 0106 	rsb	r1, r8, r6
 8008232:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 8008236:	42b1      	cmp	r1, r6
 8008238:	da0c      	bge.n	8008254 <LCD__DrawBitmap_1bpp+0xc0>
 800823a:	ebc1 0c06 	rsb	ip, r1, r6
 800823e:	eb08 070c 	add.w	r7, r8, ip
 8008242:	1b8e      	subs	r6, r1, r6
 8008244:	f02c 0c07 	bic.w	ip, ip, #7
 8008248:	4435      	add	r5, r6
 800824a:	eb04 04e7 	add.w	r4, r4, r7, asr #3
 800824e:	4461      	add	r1, ip
 8008250:	f007 0807 	and.w	r8, r7, #7
 8008254:	2d00      	cmp	r5, #0
 8008256:	dd70      	ble.n	800833a <LCD__DrawBitmap_1bpp+0x1a6>
 8008258:	7c46      	ldrb	r6, [r0, #17]
 800825a:	483a      	ldr	r0, [pc, #232]	; (8008344 <LCD__DrawBitmap_1bpp+0x1b0>)
 800825c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800825e:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 8008262:	68c6      	ldr	r6, [r0, #12]
 8008264:	9701      	str	r7, [sp, #4]
 8008266:	9403      	str	r4, [sp, #12]
 8008268:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800826a:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800826c:	9300      	str	r3, [sp, #0]
 800826e:	9702      	str	r7, [sp, #8]
 8008270:	f8cd 8010 	str.w	r8, [sp, #16]
 8008274:	9405      	str	r4, [sp, #20]
 8008276:	6874      	ldr	r4, [r6, #4]
 8008278:	462b      	mov	r3, r5
 800827a:	47a0      	blx	r4
 800827c:	e05d      	b.n	800833a <LCD__DrawBitmap_1bpp+0x1a6>
 800827e:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8008280:	f1c7 0708 	rsb	r7, r7, #8
 8008284:	970c      	str	r7, [sp, #48]	; 0x30
 8008286:	4667      	mov	r7, ip
 8008288:	45dc      	cmp	ip, fp
 800828a:	da56      	bge.n	800833a <LCD__DrawBitmap_1bpp+0x1a6>
 800828c:	4b2c      	ldr	r3, [pc, #176]	; (8008340 <LCD__DrawBitmap_1bpp+0x1ac>)
 800828e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4430      	add	r0, r6
 8008294:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8008298:	900a      	str	r0, [sp, #40]	; 0x28
 800829a:	1e41      	subs	r1, r0, #1
 800829c:	4291      	cmp	r1, r2
 800829e:	910b      	str	r1, [sp, #44]	; 0x2c
 80082a0:	db45      	blt.n	800832e <LCD__DrawBitmap_1bpp+0x19a>
 80082a2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80082a6:	429e      	cmp	r6, r3
 80082a8:	dc41      	bgt.n	800832e <LCD__DrawBitmap_1bpp+0x19a>
 80082aa:	f04f 0800 	mov.w	r8, #0
 80082ae:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80082b2:	9408      	str	r4, [sp, #32]
 80082b4:	46c2      	mov	sl, r8
 80082b6:	45aa      	cmp	sl, r5
 80082b8:	da39      	bge.n	800832e <LCD__DrawBitmap_1bpp+0x19a>
 80082ba:	f1b8 0f00 	cmp.w	r8, #0
 80082be:	d105      	bne.n	80082cc <LCD__DrawBitmap_1bpp+0x138>
 80082c0:	9a08      	ldr	r2, [sp, #32]
 80082c2:	7817      	ldrb	r7, [r2, #0]
 80082c4:	3201      	adds	r2, #1
 80082c6:	9208      	str	r2, [sp, #32]
 80082c8:	f04f 0808 	mov.w	r8, #8
 80082cc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80082ce:	991a      	ldr	r1, [sp, #104]	; 0x68
 80082d0:	4a1b      	ldr	r2, [pc, #108]	; (8008340 <LCD__DrawBitmap_1bpp+0x1ac>)
 80082d2:	fa47 f300 	asr.w	r3, r7, r0
 80082d6:	ebc1 0808 	rsb	r8, r1, r8
 80082da:	408f      	lsls	r7, r1
 80082dc:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 80082e0:	b2ff      	uxtb	r7, r7
 80082e2:	d103      	bne.n	80082ec <LCD__DrawBitmap_1bpp+0x158>
 80082e4:	6810      	ldr	r0, [r2, #0]
 80082e6:	7c00      	ldrb	r0, [r0, #16]
 80082e8:	0780      	lsls	r0, r0, #30
 80082ea:	d41b      	bmi.n	8008324 <LCD__DrawBitmap_1bpp+0x190>
 80082ec:	6812      	ldr	r2, [r2, #0]
 80082ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80082f0:	6810      	ldr	r0, [r2, #0]
 80082f2:	900d      	str	r0, [sp, #52]	; 0x34
 80082f4:	981d      	ldr	r0, [sp, #116]	; 0x74
 80082f6:	b110      	cbz	r0, 80082fe <LCD__DrawBitmap_1bpp+0x16a>
 80082f8:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 80082fc:	e000      	b.n	8008300 <LCD__DrawBitmap_1bpp+0x16c>
 80082fe:	b2db      	uxtb	r3, r3
 8008300:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008302:	6013      	str	r3, [r2, #0]
 8008304:	1e4a      	subs	r2, r1, #1
 8008306:	444a      	add	r2, r9
 8008308:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800830a:	f8cd c01c 	str.w	ip, [sp, #28]
 800830e:	4648      	mov	r0, r9
 8008310:	4631      	mov	r1, r6
 8008312:	f7ff ff13 	bl	800813c <LCD_FillRect>
 8008316:	4b0a      	ldr	r3, [pc, #40]	; (8008340 <LCD__DrawBitmap_1bpp+0x1ac>)
 8008318:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8008320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008322:	601a      	str	r2, [r3, #0]
 8008324:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008326:	f10a 0a01 	add.w	sl, sl, #1
 800832a:	4499      	add	r9, r3
 800832c:	e7c3      	b.n	80082b6 <LCD__DrawBitmap_1bpp+0x122>
 800832e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8008330:	f10c 0c01 	add.w	ip, ip, #1
 8008334:	4434      	add	r4, r6
 8008336:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008338:	e7a6      	b.n	8008288 <LCD__DrawBitmap_1bpp+0xf4>
 800833a:	b00f      	add	sp, #60	; 0x3c
 800833c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008340:	20000018 	.word	0x20000018
 8008344:	20019604 	.word	0x20019604
 8008348:	200195d8 	.word	0x200195d8

0800834c <LCD_DrawBitmap>:
 800834c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008350:	f8df c20c 	ldr.w	ip, [pc, #524]	; 8008560 <LCD_DrawBitmap+0x214>
 8008354:	b091      	sub	sp, #68	; 0x44
 8008356:	f8dc 9000 	ldr.w	r9, [ip]
 800835a:	9207      	str	r2, [sp, #28]
 800835c:	4605      	mov	r5, r0
 800835e:	4688      	mov	r8, r1
 8008360:	469b      	mov	fp, r3
 8008362:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8008364:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8008366:	f1b9 0f00 	cmp.w	r9, #0
 800836a:	d00c      	beq.n	8008386 <LCD_DrawBitmap+0x3a>
 800836c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800836e:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8008370:	9500      	str	r5, [sp, #0]
 8008372:	9701      	str	r7, [sp, #4]
 8008374:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8008376:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8008378:	9602      	str	r6, [sp, #8]
 800837a:	9503      	str	r5, [sp, #12]
 800837c:	9404      	str	r4, [sp, #16]
 800837e:	9705      	str	r7, [sp, #20]
 8008380:	f8d9 4000 	ldr.w	r4, [r9]
 8008384:	e081      	b.n	800848a <LCD_DrawBitmap+0x13e>
 8008386:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8008388:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800838a:	ea47 0300 	orr.w	r3, r7, r0
 800838e:	2b01      	cmp	r3, #1
 8008390:	d17d      	bne.n	800848e <LCD_DrawBitmap+0x142>
 8008392:	4b71      	ldr	r3, [pc, #452]	; (8008558 <LCD_DrawBitmap+0x20c>)
 8008394:	6818      	ldr	r0, [r3, #0]
 8008396:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800839a:	1a53      	subs	r3, r2, r1
 800839c:	2b00      	cmp	r3, #0
 800839e:	dd08      	ble.n	80083b2 <LCD_DrawBitmap+0x66>
 80083a0:	ebc3 010b 	rsb	r1, r3, fp
 80083a4:	2900      	cmp	r1, #0
 80083a6:	f340 80d4 	ble.w	8008552 <LCD_DrawBitmap+0x206>
 80083aa:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 80083ac:	fb07 4403 	mla	r4, r7, r3, r4
 80083b0:	e001      	b.n	80083b6 <LCD_DrawBitmap+0x6a>
 80083b2:	4659      	mov	r1, fp
 80083b4:	4642      	mov	r2, r8
 80083b6:	44d8      	add	r8, fp
 80083b8:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 80083bc:	f108 38ff 	add.w	r8, r8, #4294967295
 80083c0:	ebc3 0808 	rsb	r8, r3, r8
 80083c4:	f1b8 0f00 	cmp.w	r8, #0
 80083c8:	dd04      	ble.n	80083d4 <LCD_DrawBitmap+0x88>
 80083ca:	ebc8 0101 	rsb	r1, r8, r1
 80083ce:	2900      	cmp	r1, #0
 80083d0:	f340 80bf 	ble.w	8008552 <LCD_DrawBitmap+0x206>
 80083d4:	9b07      	ldr	r3, [sp, #28]
 80083d6:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
 80083da:	442b      	add	r3, r5
 80083dc:	3b01      	subs	r3, #1
 80083de:	ebcc 0303 	rsb	r3, ip, r3
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	dd02      	ble.n	80083ec <LCD_DrawBitmap+0xa0>
 80083e6:	9f07      	ldr	r7, [sp, #28]
 80083e8:	1aff      	subs	r7, r7, r3
 80083ea:	9707      	str	r7, [sp, #28]
 80083ec:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 80083f0:	4565      	cmp	r5, ip
 80083f2:	da33      	bge.n	800845c <LCD_DrawBitmap+0x110>
 80083f4:	9f07      	ldr	r7, [sp, #28]
 80083f6:	ebc5 030c 	rsb	r3, r5, ip
 80083fa:	1aff      	subs	r7, r7, r3
 80083fc:	2e08      	cmp	r6, #8
 80083fe:	9707      	str	r7, [sp, #28]
 8008400:	d027      	beq.n	8008452 <LCD_DrawBitmap+0x106>
 8008402:	dc0d      	bgt.n	8008420 <LCD_DrawBitmap+0xd4>
 8008404:	2e02      	cmp	r6, #2
 8008406:	d014      	beq.n	8008432 <LCD_DrawBitmap+0xe6>
 8008408:	2e04      	cmp	r6, #4
 800840a:	d01a      	beq.n	8008442 <LCD_DrawBitmap+0xf6>
 800840c:	2e01      	cmp	r6, #1
 800840e:	d126      	bne.n	800845e <LCD_DrawBitmap+0x112>
 8008410:	f023 0c07 	bic.w	ip, r3, #7
 8008414:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 8008418:	4465      	add	r5, ip
 800841a:	f003 0307 	and.w	r3, r3, #7
 800841e:	e01e      	b.n	800845e <LCD_DrawBitmap+0x112>
 8008420:	2e18      	cmp	r6, #24
 8008422:	d018      	beq.n	8008456 <LCD_DrawBitmap+0x10a>
 8008424:	2e20      	cmp	r6, #32
 8008426:	d016      	beq.n	8008456 <LCD_DrawBitmap+0x10a>
 8008428:	2e10      	cmp	r6, #16
 800842a:	d118      	bne.n	800845e <LCD_DrawBitmap+0x112>
 800842c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8008430:	e013      	b.n	800845a <LCD_DrawBitmap+0x10e>
 8008432:	f023 0c03 	bic.w	ip, r3, #3
 8008436:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 800843a:	4465      	add	r5, ip
 800843c:	f003 0303 	and.w	r3, r3, #3
 8008440:	e00d      	b.n	800845e <LCD_DrawBitmap+0x112>
 8008442:	f023 0c01 	bic.w	ip, r3, #1
 8008446:	eb04 0463 	add.w	r4, r4, r3, asr #1
 800844a:	4465      	add	r5, ip
 800844c:	f003 0301 	and.w	r3, r3, #1
 8008450:	e005      	b.n	800845e <LCD_DrawBitmap+0x112>
 8008452:	441c      	add	r4, r3
 8008454:	e001      	b.n	800845a <LCD_DrawBitmap+0x10e>
 8008456:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800845a:	4665      	mov	r5, ip
 800845c:	2300      	movs	r3, #0
 800845e:	9f07      	ldr	r7, [sp, #28]
 8008460:	2f00      	cmp	r7, #0
 8008462:	dd76      	ble.n	8008552 <LCD_DrawBitmap+0x206>
 8008464:	f890 e011 	ldrb.w	lr, [r0, #17]
 8008468:	483c      	ldr	r0, [pc, #240]	; (800855c <LCD_DrawBitmap+0x210>)
 800846a:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800846c:	f850 002e 	ldr.w	r0, [r0, lr, lsl #2]
 8008470:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8008474:	9403      	str	r4, [sp, #12]
 8008476:	e88d 0042 	stmia.w	sp, {r1, r6}
 800847a:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 800847c:	9304      	str	r3, [sp, #16]
 800847e:	9702      	str	r7, [sp, #8]
 8008480:	9405      	str	r4, [sp, #20]
 8008482:	f8de 4004 	ldr.w	r4, [lr, #4]
 8008486:	9b07      	ldr	r3, [sp, #28]
 8008488:	4629      	mov	r1, r5
 800848a:	47a0      	blx	r4
 800848c:	e061      	b.n	8008552 <LCD_DrawBitmap+0x206>
 800848e:	f1c6 0708 	rsb	r7, r6, #8
 8008492:	970e      	str	r7, [sp, #56]	; 0x38
 8008494:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8008498:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800849a:	455f      	cmp	r7, fp
 800849c:	da59      	bge.n	8008552 <LCD_DrawBitmap+0x206>
 800849e:	4b2e      	ldr	r3, [pc, #184]	; (8008558 <LCD_DrawBitmap+0x20c>)
 80084a0:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4447      	add	r7, r8
 80084a6:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 80084aa:	970c      	str	r7, [sp, #48]	; 0x30
 80084ac:	3f01      	subs	r7, #1
 80084ae:	4297      	cmp	r7, r2
 80084b0:	970d      	str	r7, [sp, #52]	; 0x34
 80084b2:	db46      	blt.n	8008542 <LCD_DrawBitmap+0x1f6>
 80084b4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80084b8:	4598      	cmp	r8, r3
 80084ba:	dc42      	bgt.n	8008542 <LCD_DrawBitmap+0x1f6>
 80084bc:	f04f 0a00 	mov.w	sl, #0
 80084c0:	940b      	str	r4, [sp, #44]	; 0x2c
 80084c2:	46ac      	mov	ip, r5
 80084c4:	4657      	mov	r7, sl
 80084c6:	9807      	ldr	r0, [sp, #28]
 80084c8:	4287      	cmp	r7, r0
 80084ca:	da3a      	bge.n	8008542 <LCD_DrawBitmap+0x1f6>
 80084cc:	f1ba 0f00 	cmp.w	sl, #0
 80084d0:	d106      	bne.n	80084e0 <LCD_DrawBitmap+0x194>
 80084d2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80084d4:	f890 9000 	ldrb.w	r9, [r0]
 80084d8:	3001      	adds	r0, #1
 80084da:	900b      	str	r0, [sp, #44]	; 0x2c
 80084dc:	f04f 0a08 	mov.w	sl, #8
 80084e0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80084e2:	4a1d      	ldr	r2, [pc, #116]	; (8008558 <LCD_DrawBitmap+0x20c>)
 80084e4:	fa49 f301 	asr.w	r3, r9, r1
 80084e8:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 80084ec:	fa09 f906 	lsl.w	r9, r9, r6
 80084f0:	fa5f f989 	uxtb.w	r9, r9
 80084f4:	ebc6 0a0a 	rsb	sl, r6, sl
 80084f8:	d103      	bne.n	8008502 <LCD_DrawBitmap+0x1b6>
 80084fa:	6810      	ldr	r0, [r2, #0]
 80084fc:	7c00      	ldrb	r0, [r0, #16]
 80084fe:	0780      	lsls	r0, r0, #30
 8008500:	d41b      	bmi.n	800853a <LCD_DrawBitmap+0x1ee>
 8008502:	6812      	ldr	r2, [r2, #0]
 8008504:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008506:	6810      	ldr	r0, [r2, #0]
 8008508:	900f      	str	r0, [sp, #60]	; 0x3c
 800850a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800850c:	b110      	cbz	r0, 8008514 <LCD_DrawBitmap+0x1c8>
 800850e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8008512:	e000      	b.n	8008516 <LCD_DrawBitmap+0x1ca>
 8008514:	b2db      	uxtb	r3, r3
 8008516:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008518:	6013      	str	r3, [r2, #0]
 800851a:	1e4a      	subs	r2, r1, #1
 800851c:	4462      	add	r2, ip
 800851e:	4660      	mov	r0, ip
 8008520:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008522:	f8cd c020 	str.w	ip, [sp, #32]
 8008526:	4641      	mov	r1, r8
 8008528:	f7ff fe08 	bl	800813c <LCD_FillRect>
 800852c:	4b0a      	ldr	r3, [pc, #40]	; (8008558 <LCD_DrawBitmap+0x20c>)
 800852e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008538:	601a      	str	r2, [r3, #0]
 800853a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800853c:	3701      	adds	r7, #1
 800853e:	449c      	add	ip, r3
 8008540:	e7c1      	b.n	80084c6 <LCD_DrawBitmap+0x17a>
 8008542:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8008544:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8008548:	3701      	adds	r7, #1
 800854a:	970a      	str	r7, [sp, #40]	; 0x28
 800854c:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800854e:	443c      	add	r4, r7
 8008550:	e7a2      	b.n	8008498 <LCD_DrawBitmap+0x14c>
 8008552:	b011      	add	sp, #68	; 0x44
 8008554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008558:	20000018 	.word	0x20000018
 800855c:	20019604 	.word	0x20019604
 8008560:	200195d8 	.word	0x200195d8

08008564 <LCD_SetClipRectMax>:
 8008564:	b508      	push	{r3, lr}
 8008566:	4b05      	ldr	r3, [pc, #20]	; (800857c <LCD_SetClipRectMax+0x18>)
 8008568:	6819      	ldr	r1, [r3, #0]
 800856a:	4b05      	ldr	r3, [pc, #20]	; (8008580 <LCD_SetClipRectMax+0x1c>)
 800856c:	7c4a      	ldrb	r2, [r1, #17]
 800856e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008572:	68c3      	ldr	r3, [r0, #12]
 8008574:	3108      	adds	r1, #8
 8008576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008578:	4798      	blx	r3
 800857a:	bd08      	pop	{r3, pc}
 800857c:	20000018 	.word	0x20000018
 8008580:	20019604 	.word	0x20019604

08008584 <emWin_LCD_Init>:
 8008584:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008586:	f7ff ffed 	bl	8008564 <LCD_SetClipRectMax>
 800858a:	f003 fe1b 	bl	800c1c4 <LCD_InitColors>
 800858e:	4604      	mov	r4, r0
 8008590:	2800      	cmp	r0, #0
 8008592:	d13d      	bne.n	8008610 <emWin_LCD_Init+0x8c>
 8008594:	4605      	mov	r5, r0
 8008596:	4628      	mov	r0, r5
 8008598:	f001 f8ac 	bl	80096f4 <GUI_DEVICE__GetpDriver>
 800859c:	9001      	str	r0, [sp, #4]
 800859e:	b148      	cbz	r0, 80085b4 <emWin_LCD_Init+0x30>
 80085a0:	68c3      	ldr	r3, [r0, #12]
 80085a2:	210c      	movs	r1, #12
 80085a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a6:	a801      	add	r0, sp, #4
 80085a8:	4798      	blx	r3
 80085aa:	4603      	mov	r3, r0
 80085ac:	b370      	cbz	r0, 800860c <emWin_LCD_Init+0x88>
 80085ae:	9801      	ldr	r0, [sp, #4]
 80085b0:	4798      	blx	r3
 80085b2:	4304      	orrs	r4, r0
 80085b4:	3501      	adds	r5, #1
 80085b6:	2d02      	cmp	r5, #2
 80085b8:	d1ed      	bne.n	8008596 <emWin_LCD_Init+0x12>
 80085ba:	bb4c      	cbnz	r4, 8008610 <emWin_LCD_Init+0x8c>
 80085bc:	f003 fe1e 	bl	800c1fc <LCD_InitLUT>
 80085c0:	2401      	movs	r4, #1
 80085c2:	4620      	mov	r0, r4
 80085c4:	f001 f896 	bl	80096f4 <GUI_DEVICE__GetpDriver>
 80085c8:	9001      	str	r0, [sp, #4]
 80085ca:	b1d0      	cbz	r0, 8008602 <emWin_LCD_Init+0x7e>
 80085cc:	4620      	mov	r0, r4
 80085ce:	f000 fcaf 	bl	8008f30 <GUI_SelectLayer>
 80085d2:	2004      	movs	r0, #4
 80085d4:	f7ff fd30 	bl	8008038 <LCD_SetDrawMode>
 80085d8:	f643 72ff 	movw	r2, #16383	; 0x3fff
 80085dc:	2000      	movs	r0, #0
 80085de:	4601      	mov	r1, r0
 80085e0:	4613      	mov	r3, r2
 80085e2:	f7ff fdab 	bl	800813c <LCD_FillRect>
 80085e6:	2000      	movs	r0, #0
 80085e8:	f7ff fd26 	bl	8008038 <LCD_SetDrawMode>
 80085ec:	a802      	add	r0, sp, #8
 80085ee:	210e      	movs	r1, #14
 80085f0:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 80085f4:	68db      	ldr	r3, [r3, #12]
 80085f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f8:	4798      	blx	r3
 80085fa:	4603      	mov	r3, r0
 80085fc:	b108      	cbz	r0, 8008602 <emWin_LCD_Init+0x7e>
 80085fe:	9801      	ldr	r0, [sp, #4]
 8008600:	4798      	blx	r3
 8008602:	f114 34ff 	adds.w	r4, r4, #4294967295
 8008606:	d2dc      	bcs.n	80085c2 <emWin_LCD_Init+0x3e>
 8008608:	2000      	movs	r0, #0
 800860a:	e002      	b.n	8008612 <emWin_LCD_Init+0x8e>
 800860c:	2001      	movs	r0, #1
 800860e:	e000      	b.n	8008612 <emWin_LCD_Init+0x8e>
 8008610:	4620      	mov	r0, r4
 8008612:	b003      	add	sp, #12
 8008614:	bd30      	pop	{r4, r5, pc}
	...

08008618 <LCD_Color2Index>:
 8008618:	b508      	push	{r3, lr}
 800861a:	4b05      	ldr	r3, [pc, #20]	; (8008630 <LCD_Color2Index+0x18>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	7c5a      	ldrb	r2, [r3, #17]
 8008620:	4b04      	ldr	r3, [pc, #16]	; (8008634 <LCD_Color2Index+0x1c>)
 8008622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008626:	691b      	ldr	r3, [r3, #16]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4798      	blx	r3
 800862c:	bd08      	pop	{r3, pc}
 800862e:	bf00      	nop
 8008630:	20000018 	.word	0x20000018
 8008634:	20019604 	.word	0x20019604

08008638 <LCD_Index2Color>:
 8008638:	b508      	push	{r3, lr}
 800863a:	4b05      	ldr	r3, [pc, #20]	; (8008650 <LCD_Index2Color+0x18>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	7c5a      	ldrb	r2, [r3, #17]
 8008640:	4b04      	ldr	r3, [pc, #16]	; (8008654 <LCD_Index2Color+0x1c>)
 8008642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008646:	691b      	ldr	r3, [r3, #16]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	4798      	blx	r3
 800864c:	bd08      	pop	{r3, pc}
 800864e:	bf00      	nop
 8008650:	20000018 	.word	0x20000018
 8008654:	20019604 	.word	0x20019604

08008658 <LCD_SetColorIndex>:
 8008658:	4b04      	ldr	r3, [pc, #16]	; (800866c <LCD_SetColorIndex+0x14>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	7c1a      	ldrb	r2, [r3, #16]
 800865e:	0752      	lsls	r2, r2, #29
 8008660:	bf4c      	ite	mi
 8008662:	6b9b      	ldrmi	r3, [r3, #56]	; 0x38
 8008664:	6bdb      	ldrpl	r3, [r3, #60]	; 0x3c
 8008666:	6018      	str	r0, [r3, #0]
 8008668:	4770      	bx	lr
 800866a:	bf00      	nop
 800866c:	20000018 	.word	0x20000018

08008670 <_SetColor>:
 8008670:	b508      	push	{r3, lr}
 8008672:	4b06      	ldr	r3, [pc, #24]	; (800868c <_SetColor+0x1c>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008678:	4281      	cmp	r1, r0
 800867a:	d006      	beq.n	800868a <_SetColor+0x1a>
 800867c:	6318      	str	r0, [r3, #48]	; 0x30
 800867e:	f7ff ffcb 	bl	8008618 <LCD_Color2Index>
 8008682:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008686:	f7ff bfe7 	b.w	8008658 <LCD_SetColorIndex>
 800868a:	bd08      	pop	{r3, pc}
 800868c:	20000018 	.word	0x20000018

08008690 <LCD_SetBkColorIndex>:
 8008690:	4b04      	ldr	r3, [pc, #16]	; (80086a4 <LCD_SetBkColorIndex+0x14>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	7c1a      	ldrb	r2, [r3, #16]
 8008696:	0752      	lsls	r2, r2, #29
 8008698:	bf4c      	ite	mi
 800869a:	6bdb      	ldrmi	r3, [r3, #60]	; 0x3c
 800869c:	6b9b      	ldrpl	r3, [r3, #56]	; 0x38
 800869e:	6018      	str	r0, [r3, #0]
 80086a0:	4770      	bx	lr
 80086a2:	bf00      	nop
 80086a4:	20000018 	.word	0x20000018

080086a8 <_SetBkColor>:
 80086a8:	b508      	push	{r3, lr}
 80086aa:	4b06      	ldr	r3, [pc, #24]	; (80086c4 <_SetBkColor+0x1c>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80086b0:	4281      	cmp	r1, r0
 80086b2:	d006      	beq.n	80086c2 <_SetBkColor+0x1a>
 80086b4:	6358      	str	r0, [r3, #52]	; 0x34
 80086b6:	f7ff ffaf 	bl	8008618 <LCD_Color2Index>
 80086ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80086be:	f7ff bfe7 	b.w	8008690 <LCD_SetBkColorIndex>
 80086c2:	bd08      	pop	{r3, pc}
 80086c4:	20000018 	.word	0x20000018

080086c8 <LCD_SetBkColor>:
 80086c8:	b508      	push	{r3, lr}
 80086ca:	4b02      	ldr	r3, [pc, #8]	; (80086d4 <LCD_SetBkColor+0xc>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	4798      	blx	r3
 80086d2:	bd08      	pop	{r3, pc}
 80086d4:	20000014 	.word	0x20000014

080086d8 <LCD_SetColor>:
 80086d8:	b508      	push	{r3, lr}
 80086da:	4b02      	ldr	r3, [pc, #8]	; (80086e4 <LCD_SetColor+0xc>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4798      	blx	r3
 80086e2:	bd08      	pop	{r3, pc}
 80086e4:	20000014 	.word	0x20000014

080086e8 <GUI__memset16>:
 80086e8:	b570      	push	{r4, r5, r6, lr}
 80086ea:	0784      	lsls	r4, r0, #30
 80086ec:	d502      	bpl.n	80086f4 <GUI__memset16+0xc>
 80086ee:	8001      	strh	r1, [r0, #0]
 80086f0:	3a01      	subs	r2, #1
 80086f2:	3002      	adds	r0, #2
 80086f4:	0855      	lsrs	r5, r2, #1
 80086f6:	462b      	mov	r3, r5
 80086f8:	b305      	cbz	r5, 800873c <GUI__memset16+0x54>
 80086fa:	2d03      	cmp	r5, #3
 80086fc:	eb01 4401 	add.w	r4, r1, r1, lsl #16
 8008700:	dc02      	bgt.n	8008708 <GUI__memset16+0x20>
 8008702:	4606      	mov	r6, r0
 8008704:	461d      	mov	r5, r3
 8008706:	e012      	b.n	800872e <GUI__memset16+0x46>
 8008708:	4603      	mov	r3, r0
 800870a:	462e      	mov	r6, r5
 800870c:	3e04      	subs	r6, #4
 800870e:	2e03      	cmp	r6, #3
 8008710:	601c      	str	r4, [r3, #0]
 8008712:	605c      	str	r4, [r3, #4]
 8008714:	609c      	str	r4, [r3, #8]
 8008716:	60dc      	str	r4, [r3, #12]
 8008718:	f103 0310 	add.w	r3, r3, #16
 800871c:	dcf6      	bgt.n	800870c <GUI__memset16+0x24>
 800871e:	3d04      	subs	r5, #4
 8008720:	08ab      	lsrs	r3, r5, #2
 8008722:	1c5e      	adds	r6, r3, #1
 8008724:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 8008728:	eba5 0383 	sub.w	r3, r5, r3, lsl #2
 800872c:	e7e9      	b.n	8008702 <GUI__memset16+0x1a>
 800872e:	b11d      	cbz	r5, 8008738 <GUI__memset16+0x50>
 8008730:	f846 4b04 	str.w	r4, [r6], #4
 8008734:	3d01      	subs	r5, #1
 8008736:	e7fa      	b.n	800872e <GUI__memset16+0x46>
 8008738:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800873c:	07d3      	lsls	r3, r2, #31
 800873e:	bf48      	it	mi
 8008740:	8001      	strhmi	r1, [r0, #0]
 8008742:	bd70      	pop	{r4, r5, r6, pc}

08008744 <GUI__memset>:
 8008744:	b570      	push	{r4, r5, r6, lr}
 8008746:	b12a      	cbz	r2, 8008754 <GUI__memset+0x10>
 8008748:	0783      	lsls	r3, r0, #30
 800874a:	d003      	beq.n	8008754 <GUI__memset+0x10>
 800874c:	f800 1b01 	strb.w	r1, [r0], #1
 8008750:	3a01      	subs	r2, #1
 8008752:	e7f8      	b.n	8008746 <GUI__memset+0x2>
 8008754:	0893      	lsrs	r3, r2, #2
 8008756:	d101      	bne.n	800875c <GUI__memset+0x18>
 8008758:	4402      	add	r2, r0
 800875a:	e017      	b.n	800878c <GUI__memset+0x48>
 800875c:	f04f 3401 	mov.w	r4, #16843009	; 0x1010101
 8008760:	f002 0203 	and.w	r2, r2, #3
 8008764:	434c      	muls	r4, r1
 8008766:	2b03      	cmp	r3, #3
 8008768:	4605      	mov	r5, r0
 800876a:	dd06      	ble.n	800877a <GUI__memset+0x36>
 800876c:	6004      	str	r4, [r0, #0]
 800876e:	6044      	str	r4, [r0, #4]
 8008770:	6084      	str	r4, [r0, #8]
 8008772:	60c4      	str	r4, [r0, #12]
 8008774:	3b04      	subs	r3, #4
 8008776:	3010      	adds	r0, #16
 8008778:	e7f5      	b.n	8008766 <GUI__memset+0x22>
 800877a:	461e      	mov	r6, r3
 800877c:	b11b      	cbz	r3, 8008786 <GUI__memset+0x42>
 800877e:	f845 4b04 	str.w	r4, [r5], #4
 8008782:	3b01      	subs	r3, #1
 8008784:	e7fa      	b.n	800877c <GUI__memset+0x38>
 8008786:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 800878a:	e7e5      	b.n	8008758 <GUI__memset+0x14>
 800878c:	4290      	cmp	r0, r2
 800878e:	d002      	beq.n	8008796 <GUI__memset+0x52>
 8008790:	f800 1b01 	strb.w	r1, [r0], #1
 8008794:	e7fa      	b.n	800878c <GUI__memset+0x48>
 8008796:	bd70      	pop	{r4, r5, r6, pc}

08008798 <GUI__ManageCacheEx>:
 8008798:	2801      	cmp	r0, #1
 800879a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800879c:	4604      	mov	r4, r0
 800879e:	460d      	mov	r5, r1
 80087a0:	dc65      	bgt.n	800886e <GUI__ManageCacheEx+0xd6>
 80087a2:	4b34      	ldr	r3, [pc, #208]	; (8008874 <GUI__ManageCacheEx+0xdc>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	b103      	cbz	r3, 80087aa <GUI__ManageCacheEx+0x12>
 80087a8:	4798      	blx	r3
 80087aa:	2d01      	cmp	r5, #1
 80087ac:	d004      	beq.n	80087b8 <GUI__ManageCacheEx+0x20>
 80087ae:	2d02      	cmp	r5, #2
 80087b0:	d021      	beq.n	80087f6 <GUI__ManageCacheEx+0x5e>
 80087b2:	2d00      	cmp	r5, #0
 80087b4:	d15b      	bne.n	800886e <GUI__ManageCacheEx+0xd6>
 80087b6:	e035      	b.n	8008824 <GUI__ManageCacheEx+0x8c>
 80087b8:	4e2f      	ldr	r6, [pc, #188]	; (8008878 <GUI__ManageCacheEx+0xe0>)
 80087ba:	f856 7024 	ldr.w	r7, [r6, r4, lsl #2]
 80087be:	b9b7      	cbnz	r7, 80087ee <GUI__ManageCacheEx+0x56>
 80087c0:	4620      	mov	r0, r4
 80087c2:	f000 ff97 	bl	80096f4 <GUI_DEVICE__GetpDriver>
 80087c6:	9001      	str	r0, [sp, #4]
 80087c8:	2800      	cmp	r0, #0
 80087ca:	d050      	beq.n	800886e <GUI__ManageCacheEx+0xd6>
 80087cc:	68c3      	ldr	r3, [r0, #12]
 80087ce:	210d      	movs	r1, #13
 80087d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d2:	a801      	add	r0, sp, #4
 80087d4:	4798      	blx	r3
 80087d6:	4603      	mov	r3, r0
 80087d8:	2800      	cmp	r0, #0
 80087da:	d048      	beq.n	800886e <GUI__ManageCacheEx+0xd6>
 80087dc:	9801      	ldr	r0, [sp, #4]
 80087de:	4629      	mov	r1, r5
 80087e0:	4798      	blx	r3
 80087e2:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 80087e6:	3301      	adds	r3, #1
 80087e8:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
 80087ec:	e018      	b.n	8008820 <GUI__ManageCacheEx+0x88>
 80087ee:	3701      	adds	r7, #1
 80087f0:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
 80087f4:	e03b      	b.n	800886e <GUI__ManageCacheEx+0xd6>
 80087f6:	4620      	mov	r0, r4
 80087f8:	f000 ff7c 	bl	80096f4 <GUI_DEVICE__GetpDriver>
 80087fc:	9001      	str	r0, [sp, #4]
 80087fe:	2800      	cmp	r0, #0
 8008800:	d035      	beq.n	800886e <GUI__ManageCacheEx+0xd6>
 8008802:	68c3      	ldr	r3, [r0, #12]
 8008804:	210d      	movs	r1, #13
 8008806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008808:	a801      	add	r0, sp, #4
 800880a:	4798      	blx	r3
 800880c:	4604      	mov	r4, r0
 800880e:	2800      	cmp	r0, #0
 8008810:	d02d      	beq.n	800886e <GUI__ManageCacheEx+0xd6>
 8008812:	4b1a      	ldr	r3, [pc, #104]	; (800887c <GUI__ManageCacheEx+0xe4>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	b103      	cbz	r3, 800881a <GUI__ManageCacheEx+0x82>
 8008818:	4798      	blx	r3
 800881a:	9801      	ldr	r0, [sp, #4]
 800881c:	2102      	movs	r1, #2
 800881e:	47a0      	blx	r4
 8008820:	2000      	movs	r0, #0
 8008822:	e025      	b.n	8008870 <GUI__ManageCacheEx+0xd8>
 8008824:	4d14      	ldr	r5, [pc, #80]	; (8008878 <GUI__ManageCacheEx+0xe0>)
 8008826:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800882a:	2b01      	cmp	r3, #1
 800882c:	d001      	beq.n	8008832 <GUI__ManageCacheEx+0x9a>
 800882e:	2001      	movs	r0, #1
 8008830:	e015      	b.n	800885e <GUI__ManageCacheEx+0xc6>
 8008832:	4620      	mov	r0, r4
 8008834:	f000 ff5e 	bl	80096f4 <GUI_DEVICE__GetpDriver>
 8008838:	9001      	str	r0, [sp, #4]
 800883a:	2800      	cmp	r0, #0
 800883c:	d0f7      	beq.n	800882e <GUI__ManageCacheEx+0x96>
 800883e:	68c3      	ldr	r3, [r0, #12]
 8008840:	210d      	movs	r1, #13
 8008842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008844:	a801      	add	r0, sp, #4
 8008846:	4798      	blx	r3
 8008848:	4606      	mov	r6, r0
 800884a:	2800      	cmp	r0, #0
 800884c:	d0ef      	beq.n	800882e <GUI__ManageCacheEx+0x96>
 800884e:	4b0b      	ldr	r3, [pc, #44]	; (800887c <GUI__ManageCacheEx+0xe4>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	b103      	cbz	r3, 8008856 <GUI__ManageCacheEx+0xbe>
 8008854:	4798      	blx	r3
 8008856:	9801      	ldr	r0, [sp, #4]
 8008858:	2100      	movs	r1, #0
 800885a:	47b0      	blx	r6
 800885c:	2000      	movs	r0, #0
 800885e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8008862:	2b00      	cmp	r3, #0
 8008864:	bf18      	it	ne
 8008866:	3b01      	subne	r3, #1
 8008868:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
 800886c:	e000      	b.n	8008870 <GUI__ManageCacheEx+0xd8>
 800886e:	2001      	movs	r0, #1
 8008870:	b003      	add	sp, #12
 8008872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008874:	200190fc 	.word	0x200190fc
 8008878:	200190f4 	.word	0x200190f4
 800887c:	200190f0 	.word	0x200190f0

08008880 <GUI__ManageCache>:
 8008880:	4b02      	ldr	r3, [pc, #8]	; (800888c <GUI__ManageCache+0xc>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4601      	mov	r1, r0
 8008886:	7c58      	ldrb	r0, [r3, #17]
 8008888:	f7ff bf86 	b.w	8008798 <GUI__ManageCacheEx>
 800888c:	20000018 	.word	0x20000018

08008890 <GUI__IntersectRects>:
 8008890:	b570      	push	{r4, r5, r6, lr}
 8008892:	f9b2 3000 	ldrsh.w	r3, [r2]
 8008896:	f9b1 4000 	ldrsh.w	r4, [r1]
 800889a:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800889e:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
 80088a2:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 80088a6:	429c      	cmp	r4, r3
 80088a8:	bfb8      	it	lt
 80088aa:	461c      	movlt	r4, r3
 80088ac:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 80088b0:	429d      	cmp	r5, r3
 80088b2:	bfa8      	it	ge
 80088b4:	462b      	movge	r3, r5
 80088b6:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 80088ba:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80088be:	42ae      	cmp	r6, r5
 80088c0:	bfb8      	it	lt
 80088c2:	4635      	movlt	r5, r6
 80088c4:	b2a4      	uxth	r4, r4
 80088c6:	b2ad      	uxth	r5, r5
 80088c8:	4291      	cmp	r1, r2
 80088ca:	bfb8      	it	lt
 80088cc:	460a      	movlt	r2, r1
 80088ce:	8004      	strh	r4, [r0, #0]
 80088d0:	8085      	strh	r5, [r0, #4]
 80088d2:	b224      	sxth	r4, r4
 80088d4:	b22d      	sxth	r5, r5
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	b292      	uxth	r2, r2
 80088da:	42a5      	cmp	r5, r4
 80088dc:	8043      	strh	r3, [r0, #2]
 80088de:	80c2      	strh	r2, [r0, #6]
 80088e0:	db06      	blt.n	80088f0 <GUI__IntersectRects+0x60>
 80088e2:	b210      	sxth	r0, r2
 80088e4:	b21b      	sxth	r3, r3
 80088e6:	4298      	cmp	r0, r3
 80088e8:	bfb4      	ite	lt
 80088ea:	2000      	movlt	r0, #0
 80088ec:	2001      	movge	r0, #1
 80088ee:	bd70      	pop	{r4, r5, r6, pc}
 80088f0:	2000      	movs	r0, #0
 80088f2:	bd70      	pop	{r4, r5, r6, pc}

080088f4 <GUI__IntersectRect>:
 80088f4:	880b      	ldrh	r3, [r1, #0]
 80088f6:	b510      	push	{r4, lr}
 80088f8:	f9b0 4000 	ldrsh.w	r4, [r0]
 80088fc:	b21a      	sxth	r2, r3
 80088fe:	4294      	cmp	r4, r2
 8008900:	bfb8      	it	lt
 8008902:	8003      	strhlt	r3, [r0, #0]
 8008904:	884b      	ldrh	r3, [r1, #2]
 8008906:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800890a:	b21a      	sxth	r2, r3
 800890c:	4294      	cmp	r4, r2
 800890e:	bfb8      	it	lt
 8008910:	8043      	strhlt	r3, [r0, #2]
 8008912:	888b      	ldrh	r3, [r1, #4]
 8008914:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8008918:	b21a      	sxth	r2, r3
 800891a:	4294      	cmp	r4, r2
 800891c:	bfc8      	it	gt
 800891e:	8083      	strhgt	r3, [r0, #4]
 8008920:	88cb      	ldrh	r3, [r1, #6]
 8008922:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8008926:	b21a      	sxth	r2, r3
 8008928:	4291      	cmp	r1, r2
 800892a:	bfc8      	it	gt
 800892c:	80c3      	strhgt	r3, [r0, #6]
 800892e:	bd10      	pop	{r4, pc}

08008930 <GUI__GetNumChars>:
 8008930:	b513      	push	{r0, r1, r4, lr}
 8008932:	9001      	str	r0, [sp, #4]
 8008934:	b130      	cbz	r0, 8008944 <GUI__GetNumChars+0x14>
 8008936:	2400      	movs	r4, #0
 8008938:	a801      	add	r0, sp, #4
 800893a:	f000 f80f 	bl	800895c <GUI_UC__GetCharCodeInc>
 800893e:	b110      	cbz	r0, 8008946 <GUI__GetNumChars+0x16>
 8008940:	3401      	adds	r4, #1
 8008942:	e7f9      	b.n	8008938 <GUI__GetNumChars+0x8>
 8008944:	4604      	mov	r4, r0
 8008946:	4620      	mov	r0, r4
 8008948:	b002      	add	sp, #8
 800894a:	bd10      	pop	{r4, pc}

0800894c <GUI_SignalEvent>:
 800894c:	b508      	push	{r3, lr}
 800894e:	4b02      	ldr	r3, [pc, #8]	; (8008958 <GUI_SignalEvent+0xc>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	b103      	cbz	r3, 8008956 <GUI_SignalEvent+0xa>
 8008954:	4798      	blx	r3
 8008956:	bd08      	pop	{r3, pc}
 8008958:	20019100 	.word	0x20019100

0800895c <GUI_UC__GetCharCodeInc>:
 800895c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800895e:	4e08      	ldr	r6, [pc, #32]	; (8008980 <GUI_UC__GetCharCodeInc+0x24>)
 8008960:	6804      	ldr	r4, [r0, #0]
 8008962:	6833      	ldr	r3, [r6, #0]
 8008964:	4605      	mov	r5, r0
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4620      	mov	r0, r4
 800896a:	4798      	blx	r3
 800896c:	6833      	ldr	r3, [r6, #0]
 800896e:	4607      	mov	r7, r0
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	4620      	mov	r0, r4
 8008974:	4798      	blx	r3
 8008976:	4420      	add	r0, r4
 8008978:	6028      	str	r0, [r5, #0]
 800897a:	4638      	mov	r0, r7
 800897c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800897e:	bf00      	nop
 8008980:	200195fc 	.word	0x200195fc

08008984 <GUI_UC__NumChars2NumBytes>:
 8008984:	b570      	push	{r4, r5, r6, lr}
 8008986:	4604      	mov	r4, r0
 8008988:	460e      	mov	r6, r1
 800898a:	2500      	movs	r5, #0
 800898c:	b146      	cbz	r6, 80089a0 <GUI_UC__NumChars2NumBytes+0x1c>
 800898e:	4b05      	ldr	r3, [pc, #20]	; (80089a4 <GUI_UC__NumChars2NumBytes+0x20>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4620      	mov	r0, r4
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	4798      	blx	r3
 8008998:	3e01      	subs	r6, #1
 800899a:	4404      	add	r4, r0
 800899c:	4405      	add	r5, r0
 800899e:	e7f5      	b.n	800898c <GUI_UC__NumChars2NumBytes+0x8>
 80089a0:	4628      	mov	r0, r5
 80089a2:	bd70      	pop	{r4, r5, r6, pc}
 80089a4:	200195fc 	.word	0x200195fc

080089a8 <GUI_TOUCH_Calibrate>:
 80089a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80089aa:	2801      	cmp	r0, #1
 80089ac:	9c08      	ldr	r4, [sp, #32]
 80089ae:	d845      	bhi.n	8008a3c <GUI_TOUCH_Calibrate+0x94>
 80089b0:	4d25      	ldr	r5, [pc, #148]	; (8008a48 <GUI_TOUCH_Calibrate+0xa0>)
 80089b2:	d00c      	beq.n	80089ce <GUI_TOUCH_Calibrate+0x26>
 80089b4:	4e25      	ldr	r6, [pc, #148]	; (8008a4c <GUI_TOUCH_Calibrate+0xa4>)
 80089b6:	e886 0006 	stmia.w	r6, {r1, r2}
 80089ba:	6829      	ldr	r1, [r5, #0]
 80089bc:	f001 0206 	and.w	r2, r1, #6
 80089c0:	2a06      	cmp	r2, #6
 80089c2:	4a23      	ldr	r2, [pc, #140]	; (8008a50 <GUI_TOUCH_Calibrate+0xa8>)
 80089c4:	d010      	beq.n	80089e8 <GUI_TOUCH_Calibrate+0x40>
 80089c6:	f001 0105 	and.w	r1, r1, #5
 80089ca:	2901      	cmp	r1, #1
 80089cc:	e00b      	b.n	80089e6 <GUI_TOUCH_Calibrate+0x3e>
 80089ce:	4e21      	ldr	r6, [pc, #132]	; (8008a54 <GUI_TOUCH_Calibrate+0xac>)
 80089d0:	e886 0006 	stmia.w	r6, {r1, r2}
 80089d4:	6829      	ldr	r1, [r5, #0]
 80089d6:	f001 0205 	and.w	r2, r1, #5
 80089da:	2a05      	cmp	r2, #5
 80089dc:	4a1e      	ldr	r2, [pc, #120]	; (8008a58 <GUI_TOUCH_Calibrate+0xb0>)
 80089de:	d003      	beq.n	80089e8 <GUI_TOUCH_Calibrate+0x40>
 80089e0:	f001 0106 	and.w	r1, r1, #6
 80089e4:	2902      	cmp	r1, #2
 80089e6:	d102      	bne.n	80089ee <GUI_TOUCH_Calibrate+0x46>
 80089e8:	6014      	str	r4, [r2, #0]
 80089ea:	6053      	str	r3, [r2, #4]
 80089ec:	e001      	b.n	80089f2 <GUI_TOUCH_Calibrate+0x4a>
 80089ee:	e882 0018 	stmia.w	r2, {r3, r4}
 80089f2:	4b1a      	ldr	r3, [pc, #104]	; (8008a5c <GUI_TOUCH_Calibrate+0xb4>)
 80089f4:	781a      	ldrb	r2, [r3, #0]
 80089f6:	4102      	asrs	r2, r0
 80089f8:	07d2      	lsls	r2, r2, #31
 80089fa:	bf44      	itt	mi
 80089fc:	2200      	movmi	r2, #0
 80089fe:	701a      	strbmi	r2, [r3, #0]
 8008a00:	2201      	movs	r2, #1
 8008a02:	fa02 f000 	lsl.w	r0, r2, r0
 8008a06:	781a      	ldrb	r2, [r3, #0]
 8008a08:	4310      	orrs	r0, r2
 8008a0a:	b2c0      	uxtb	r0, r0
 8008a0c:	2803      	cmp	r0, #3
 8008a0e:	7018      	strb	r0, [r3, #0]
 8008a10:	d116      	bne.n	8008a40 <GUI_TOUCH_Calibrate+0x98>
 8008a12:	4c13      	ldr	r4, [pc, #76]	; (8008a60 <GUI_TOUCH_Calibrate+0xb8>)
 8008a14:	6823      	ldr	r3, [r4, #0]
 8008a16:	7c58      	ldrb	r0, [r3, #17]
 8008a18:	f7ff fa46 	bl	8007ea8 <LCD_GetXSizeEx>
 8008a1c:	6823      	ldr	r3, [r4, #0]
 8008a1e:	4605      	mov	r5, r0
 8008a20:	7c58      	ldrb	r0, [r3, #17]
 8008a22:	f7ff fa44 	bl	8007eae <LCD_GetYSizeEx>
 8008a26:	4b0c      	ldr	r3, [pc, #48]	; (8008a58 <GUI_TOUCH_Calibrate+0xb0>)
 8008a28:	9002      	str	r0, [sp, #8]
 8008a2a:	e88d 0028 	stmia.w	sp, {r3, r5}
 8008a2e:	4907      	ldr	r1, [pc, #28]	; (8008a4c <GUI_TOUCH_Calibrate+0xa4>)
 8008a30:	4a08      	ldr	r2, [pc, #32]	; (8008a54 <GUI_TOUCH_Calibrate+0xac>)
 8008a32:	4b07      	ldr	r3, [pc, #28]	; (8008a50 <GUI_TOUCH_Calibrate+0xa8>)
 8008a34:	2002      	movs	r0, #2
 8008a36:	f000 f815 	bl	8008a64 <GUI_TOUCH_CalcCoefficients>
 8008a3a:	e002      	b.n	8008a42 <GUI_TOUCH_Calibrate+0x9a>
 8008a3c:	2001      	movs	r0, #1
 8008a3e:	e000      	b.n	8008a42 <GUI_TOUCH_Calibrate+0x9a>
 8008a40:	2000      	movs	r0, #0
 8008a42:	b004      	add	sp, #16
 8008a44:	bd70      	pop	{r4, r5, r6, pc}
 8008a46:	bf00      	nop
 8008a48:	20019118 	.word	0x20019118
 8008a4c:	20019104 	.word	0x20019104
 8008a50:	2001911c 	.word	0x2001911c
 8008a54:	20019124 	.word	0x20019124
 8008a58:	2001910c 	.word	0x2001910c
 8008a5c:	20019114 	.word	0x20019114
 8008a60:	20000018 	.word	0x20000018

08008a64 <GUI_TOUCH_CalcCoefficients>:
 8008a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a68:	ed2d 8b02 	vpush	{d8}
 8008a6c:	f8df c3bc 	ldr.w	ip, [pc, #956]	; 8008e2c <GUI_TOUCH_CalcCoefficients+0x3c8>
 8008a70:	b08c      	sub	sp, #48	; 0x30
 8008a72:	2400      	movs	r4, #0
 8008a74:	2802      	cmp	r0, #2
 8008a76:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8008a78:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008a7a:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 8008a7e:	f8cc 4000 	str.w	r4, [ip]
 8008a82:	d135      	bne.n	8008af0 <GUI_TOUCH_CalcCoefficients+0x8c>
 8008a84:	c912      	ldmia	r1, {r1, r4}
 8008a86:	6818      	ldr	r0, [r3, #0]
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	1a61      	subs	r1, r4, r1
 8008a8c:	1a1b      	subs	r3, r3, r0
 8008a8e:	ee00 1a10 	vmov	s0, r1
 8008a92:	ee07 3a90 	vmov	s15, r3
 8008a96:	eeb8 7ac0 	vcvt.f32.s32	s14, s0
 8008a9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008a9e:	ee05 0a10 	vmov	s10, r0
 8008aa2:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8008aa6:	6850      	ldr	r0, [r2, #4]
 8008aa8:	6812      	ldr	r2, [r2, #0]
 8008aaa:	4bdb      	ldr	r3, [pc, #876]	; (8008e18 <GUI_TOUCH_CalcCoefficients+0x3b4>)
 8008aac:	2100      	movs	r1, #0
 8008aae:	1a82      	subs	r2, r0, r2
 8008ab0:	6059      	str	r1, [r3, #4]
 8008ab2:	60d9      	str	r1, [r3, #12]
 8008ab4:	6839      	ldr	r1, [r7, #0]
 8008ab6:	eeb8 7ac5 	vcvt.f32.s32	s14, s10
 8008aba:	ee06 2a10 	vmov	s12, r2
 8008abe:	687a      	ldr	r2, [r7, #4]
 8008ac0:	edc3 7a00 	vstr	s15, [r3]
 8008ac4:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8008ac8:	1a52      	subs	r2, r2, r1
 8008aca:	edc3 7a02 	vstr	s15, [r3, #8]
 8008ace:	ee07 2a90 	vmov	s15, r2
 8008ad2:	eeb8 7ac6 	vcvt.f32.s32	s14, s12
 8008ad6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ada:	ee06 1a90 	vmov	s13, r1
 8008ade:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8008ae2:	eeb8 7ae6 	vcvt.f32.s32	s14, s13
 8008ae6:	edc3 7a04 	vstr	s15, [r3, #16]
 8008aea:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8008aee:	e144      	b.n	8008d7a <GUI_TOUCH_CalcCoefficients+0x316>
 8008af0:	f340 8148 	ble.w	8008d84 <GUI_TOUCH_CalcCoefficients+0x320>
 8008af4:	2803      	cmp	r0, #3
 8008af6:	d128      	bne.n	8008b4a <GUI_TOUCH_CalcCoefficients+0xe6>
 8008af8:	4620      	mov	r0, r4
 8008afa:	581d      	ldr	r5, [r3, r0]
 8008afc:	ee00 5a10 	vmov	s0, r5
 8008b00:	583d      	ldr	r5, [r7, r0]
 8008b02:	eef8 7ac0 	vcvt.f32.s32	s15, s0
 8008b06:	ac00      	add	r4, sp, #0
 8008b08:	ee00 5a10 	vmov	s0, r5
 8008b0c:	580d      	ldr	r5, [r1, r0]
 8008b0e:	4404      	add	r4, r0
 8008b10:	edc4 7a00 	vstr	s15, [r4]
 8008b14:	eef8 7ac0 	vcvt.f32.s32	s15, s0
 8008b18:	ac03      	add	r4, sp, #12
 8008b1a:	ee00 5a10 	vmov	s0, r5
 8008b1e:	4404      	add	r4, r0
 8008b20:	5815      	ldr	r5, [r2, r0]
 8008b22:	edc4 7a00 	vstr	s15, [r4]
 8008b26:	eef8 7ac0 	vcvt.f32.s32	s15, s0
 8008b2a:	ac0c      	add	r4, sp, #48	; 0x30
 8008b2c:	4404      	add	r4, r0
 8008b2e:	ee00 5a10 	vmov	s0, r5
 8008b32:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
 8008b36:	ac0c      	add	r4, sp, #48	; 0x30
 8008b38:	4404      	add	r4, r0
 8008b3a:	eef8 7ac0 	vcvt.f32.s32	s15, s0
 8008b3e:	3004      	adds	r0, #4
 8008b40:	280c      	cmp	r0, #12
 8008b42:	ed44 7a03 	vstr	s15, [r4, #-12]
 8008b46:	d1d8      	bne.n	8008afa <GUI_TOUCH_CalcCoefficients+0x96>
 8008b48:	e09b      	b.n	8008c82 <GUI_TOUCH_CalcCoefficients+0x21e>
 8008b4a:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8008b4e:	44a1      	add	r9, r4
 8008b50:	f04f 0800 	mov.w	r8, #0
 8008b54:	f849 8c0c 	str.w	r8, [r9, #-12]
 8008b58:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8008b5c:	44a1      	add	r9, r4
 8008b5e:	f849 8c18 	str.w	r8, [r9, #-24]
 8008b62:	f10d 090c 	add.w	r9, sp, #12
 8008b66:	44a1      	add	r9, r4
 8008b68:	f8c9 8000 	str.w	r8, [r9]
 8008b6c:	f10d 0900 	add.w	r9, sp, #0
 8008b70:	44a1      	add	r9, r4
 8008b72:	3404      	adds	r4, #4
 8008b74:	2c0c      	cmp	r4, #12
 8008b76:	f8c9 8000 	str.w	r8, [r9]
 8008b7a:	d1e6      	bne.n	8008b4a <GUI_TOUCH_CalcCoefficients+0xe6>
 8008b7c:	ed9d 7a02 	vldr	s14, [sp, #8]
 8008b80:	eddd 7a05 	vldr	s15, [sp, #20]
 8008b84:	eddd 3a08 	vldr	s7, [sp, #32]
 8008b88:	ed9d 4a0b 	vldr	s8, [sp, #44]	; 0x2c
 8008b8c:	eddd 1a00 	vldr	s3, [sp]
 8008b90:	eddd 5a01 	vldr	s11, [sp, #4]
 8008b94:	ed9d 2a04 	vldr	s4, [sp, #16]
 8008b98:	eddd 2a06 	vldr	s5, [sp, #24]
 8008b9c:	ed9d 3a07 	vldr	s6, [sp, #28]
 8008ba0:	eddd 0a09 	vldr	s1, [sp, #36]	; 0x24
 8008ba4:	ed9d 1a0a 	vldr	s2, [sp, #40]	; 0x28
 8008ba8:	ea4f 0880 	mov.w	r8, r0, lsl #2
 8008bac:	2400      	movs	r4, #0
 8008bae:	591d      	ldr	r5, [r3, r4]
 8008bb0:	ee00 5a10 	vmov	s0, r5
 8008bb4:	593d      	ldr	r5, [r7, r4]
 8008bb6:	eeb8 6ac0 	vcvt.f32.s32	s12, s0
 8008bba:	ee00 5a10 	vmov	s0, r5
 8008bbe:	590d      	ldr	r5, [r1, r4]
 8008bc0:	eef8 6ac0 	vcvt.f32.s32	s13, s0
 8008bc4:	ee00 5a10 	vmov	s0, r5
 8008bc8:	5915      	ldr	r5, [r2, r4]
 8008bca:	eef8 4ac0 	vcvt.f32.s32	s9, s0
 8008bce:	ee00 5a10 	vmov	s0, r5
 8008bd2:	eeb8 5ac0 	vcvt.f32.s32	s10, s0
 8008bd6:	eee6 2a24 	vfma.f32	s5, s12, s9
 8008bda:	3404      	adds	r4, #4
 8008bdc:	4544      	cmp	r4, r8
 8008bde:	ee73 3aa4 	vadd.f32	s7, s7, s9
 8008be2:	eea6 3aa4 	vfma.f32	s6, s13, s9
 8008be6:	eef0 4a60 	vmov.f32	s9, s1
 8008bea:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008bee:	eee6 1a06 	vfma.f32	s3, s12, s12
 8008bf2:	eee6 5a26 	vfma.f32	s11, s12, s13
 8008bf6:	eee6 4a05 	vfma.f32	s9, s12, s10
 8008bfa:	eeb0 6a41 	vmov.f32	s12, s2
 8008bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c02:	ee34 4a05 	vadd.f32	s8, s8, s10
 8008c06:	eea6 2aa6 	vfma.f32	s4, s13, s13
 8008c0a:	eea6 6a85 	vfma.f32	s12, s13, s10
 8008c0e:	d004      	beq.n	8008c1a <GUI_TOUCH_CalcCoefficients+0x1b6>
 8008c10:	eef0 0a64 	vmov.f32	s1, s9
 8008c14:	eeb0 1a46 	vmov.f32	s2, s12
 8008c18:	e7c9      	b.n	8008bae <GUI_TOUCH_CalcCoefficients+0x14a>
 8008c1a:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8008c1e:	ee05 0a10 	vmov	s10, r0
 8008c22:	edcd 6a01 	vstr	s13, [sp, #4]
 8008c26:	eef8 6ac5 	vcvt.f32.s32	s13, s10
 8008c2a:	eec1 1a87 	vdiv.f32	s3, s3, s14
 8008c2e:	eec5 5a87 	vdiv.f32	s11, s11, s14
 8008c32:	ee82 2a27 	vdiv.f32	s4, s4, s15
 8008c36:	eec2 2a87 	vdiv.f32	s5, s5, s14
 8008c3a:	ee83 3a27 	vdiv.f32	s6, s6, s15
 8008c3e:	eec4 4a87 	vdiv.f32	s9, s9, s14
 8008c42:	ee86 6a27 	vdiv.f32	s12, s12, s15
 8008c46:	ee87 7a26 	vdiv.f32	s14, s14, s13
 8008c4a:	eec7 7aa6 	vdiv.f32	s15, s15, s13
 8008c4e:	eec3 3aa6 	vdiv.f32	s7, s7, s13
 8008c52:	eec4 6a26 	vdiv.f32	s13, s8, s13
 8008c56:	edcd 1a00 	vstr	s3, [sp]
 8008c5a:	edcd 5a03 	vstr	s11, [sp, #12]
 8008c5e:	ed8d 2a04 	vstr	s4, [sp, #16]
 8008c62:	edcd 2a06 	vstr	s5, [sp, #24]
 8008c66:	ed8d 3a07 	vstr	s6, [sp, #28]
 8008c6a:	edcd 4a09 	vstr	s9, [sp, #36]	; 0x24
 8008c6e:	ed8d 6a0a 	vstr	s12, [sp, #40]	; 0x28
 8008c72:	ed8d 7a02 	vstr	s14, [sp, #8]
 8008c76:	edcd 7a05 	vstr	s15, [sp, #20]
 8008c7a:	edcd 3a08 	vstr	s7, [sp, #32]
 8008c7e:	edcd 6a0b 	vstr	s13, [sp, #44]	; 0x2c
 8008c82:	ed9d 7a02 	vldr	s14, [sp, #8]
 8008c86:	eddd 4a05 	vldr	s9, [sp, #20]
 8008c8a:	ed9d 6a01 	vldr	s12, [sp, #4]
 8008c8e:	ed9d 3a03 	vldr	s6, [sp, #12]
 8008c92:	eddd 5a00 	vldr	s11, [sp]
 8008c96:	eddd 2a04 	vldr	s5, [sp, #16]
 8008c9a:	ee76 6a47 	vsub.f32	s13, s12, s14
 8008c9e:	ee73 1a64 	vsub.f32	s3, s6, s9
 8008ca2:	ee35 2ac7 	vsub.f32	s4, s11, s14
 8008ca6:	ee32 1ae4 	vsub.f32	s2, s5, s9
 8008caa:	ee61 7ae6 	vnmul.f32	s15, s3, s13
 8008cae:	eee2 7a01 	vfma.f32	s15, s4, s2
 8008cb2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cba:	d063      	beq.n	8008d84 <GUI_TOUCH_CalcCoefficients+0x320>
 8008cbc:	ed9d 4a08 	vldr	s8, [sp, #32]
 8008cc0:	eddd 0a07 	vldr	s1, [sp, #28]
 8008cc4:	eddd 3a06 	vldr	s7, [sp, #24]
 8008cc8:	4b53      	ldr	r3, [pc, #332]	; (8008e18 <GUI_TOUCH_CalcCoefficients+0x3b4>)
 8008cca:	ee30 8ac4 	vsub.f32	s16, s1, s8
 8008cce:	ee33 5ac4 	vsub.f32	s10, s7, s8
 8008cd2:	ee21 0ac8 	vnmul.f32	s0, s3, s16
 8008cd6:	eea5 0a01 	vfma.f32	s0, s10, s2
 8008cda:	ee26 5ac5 	vnmul.f32	s10, s13, s10
 8008cde:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8008ce2:	eea8 5a02 	vfma.f32	s10, s16, s4
 8008ce6:	ed83 0a00 	vstr	s0, [r3]
 8008cea:	ee85 5a27 	vdiv.f32	s10, s10, s15
 8008cee:	ed83 5a01 	vstr	s10, [r3, #4]
 8008cf2:	ee23 5ac7 	vnmul.f32	s10, s7, s14
 8008cf6:	eea5 5a84 	vfma.f32	s10, s11, s8
 8008cfa:	ee24 4a46 	vnmul.f32	s8, s8, s12
 8008cfe:	ee22 5a85 	vmul.f32	s10, s5, s10
 8008d02:	eea7 4a20 	vfma.f32	s8, s14, s1
 8008d06:	eea3 5a04 	vfma.f32	s10, s6, s8
 8008d0a:	ee20 4ae5 	vnmul.f32	s8, s1, s11
 8008d0e:	eea6 4a23 	vfma.f32	s8, s12, s7
 8008d12:	eddd 3a0a 	vldr	s7, [sp, #40]	; 0x28
 8008d16:	eea4 5a84 	vfma.f32	s10, s9, s8
 8008d1a:	ed9d 4a09 	vldr	s8, [sp, #36]	; 0x24
 8008d1e:	ee85 5a27 	vdiv.f32	s10, s10, s15
 8008d22:	ed83 5a02 	vstr	s10, [r3, #8]
 8008d26:	ed9d 5a0b 	vldr	s10, [sp, #44]	; 0x2c
 8008d2a:	ee34 0a45 	vsub.f32	s0, s8, s10
 8008d2e:	ee73 0ac5 	vsub.f32	s1, s7, s10
 8008d32:	ee66 6ac0 	vnmul.f32	s13, s13, s0
 8008d36:	ee61 1ae0 	vnmul.f32	s3, s3, s1
 8008d3a:	eee0 6a82 	vfma.f32	s13, s1, s4
 8008d3e:	eee0 1a01 	vfma.f32	s3, s0, s2
 8008d42:	eec6 6aa7 	vdiv.f32	s13, s13, s15
 8008d46:	eec1 1aa7 	vdiv.f32	s3, s3, s15
 8008d4a:	edc3 6a04 	vstr	s13, [r3, #16]
 8008d4e:	ee64 6a47 	vnmul.f32	s13, s8, s14
 8008d52:	edc3 1a03 	vstr	s3, [r3, #12]
 8008d56:	eee5 6a85 	vfma.f32	s13, s11, s10
 8008d5a:	ee25 5a46 	vnmul.f32	s10, s10, s12
 8008d5e:	ee62 6aa6 	vmul.f32	s13, s5, s13
 8008d62:	eea7 5a23 	vfma.f32	s10, s14, s7
 8008d66:	ee63 5ae5 	vnmul.f32	s11, s7, s11
 8008d6a:	eee3 6a05 	vfma.f32	s13, s6, s10
 8008d6e:	eee6 5a04 	vfma.f32	s11, s12, s8
 8008d72:	eee4 6aa5 	vfma.f32	s13, s9, s11
 8008d76:	eec6 7aa7 	vdiv.f32	s15, s13, s15
 8008d7a:	edc3 7a05 	vstr	s15, [r3, #20]
 8008d7e:	2301      	movs	r3, #1
 8008d80:	f8cc 3000 	str.w	r3, [ip]
 8008d84:	f8dc 0000 	ldr.w	r0, [ip]
 8008d88:	2800      	cmp	r0, #0
 8008d8a:	f000 80a7 	beq.w	8008edc <GUI_TOUCH_CalcCoefficients+0x478>
 8008d8e:	4b23      	ldr	r3, [pc, #140]	; (8008e1c <GUI_TOUCH_CalcCoefficients+0x3b8>)
 8008d90:	eddf 7a23 	vldr	s15, [pc, #140]	; 8008e20 <GUI_TOUCH_CalcCoefficients+0x3bc>
 8008d94:	601e      	str	r6, [r3, #0]
 8008d96:	4b23      	ldr	r3, [pc, #140]	; (8008e24 <GUI_TOUCH_CalcCoefficients+0x3c0>)
 8008d98:	f8c3 a000 	str.w	sl, [r3]
 8008d9c:	4b1e      	ldr	r3, [pc, #120]	; (8008e18 <GUI_TOUCH_CalcCoefficients+0x3b4>)
 8008d9e:	ed93 7a00 	vldr	s14, [r3]
 8008da2:	eeb4 7a67 	vcmp.f32	s14, s15
 8008da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008daa:	d012      	beq.n	8008dd2 <GUI_TOUCH_CalcCoefficients+0x36e>
 8008dac:	edd3 6a01 	vldr	s13, [r3, #4]
 8008db0:	eee6 7ae7 	vfms.f32	s15, s13, s15
 8008db4:	edd3 6a02 	vldr	s13, [r3, #8]
 8008db8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008dbc:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8008dc0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008dc4:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8008dc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008dcc:	ee17 1a90 	vmov	r1, s15
 8008dd0:	e001      	b.n	8008dd6 <GUI_TOUCH_CalcCoefficients+0x372>
 8008dd2:	f04f 31ff 	mov.w	r1, #4294967295
 8008dd6:	edd3 7a04 	vldr	s15, [r3, #16]
 8008dda:	eddf 6a11 	vldr	s13, [pc, #68]	; 8008e20 <GUI_TOUCH_CalcCoefficients+0x3bc>
 8008dde:	4c12      	ldr	r4, [pc, #72]	; (8008e28 <GUI_TOUCH_CalcCoefficients+0x3c4>)
 8008de0:	4a0d      	ldr	r2, [pc, #52]	; (8008e18 <GUI_TOUCH_CalcCoefficients+0x3b4>)
 8008de2:	6021      	str	r1, [r4, #0]
 8008de4:	eef4 7a66 	vcmp.f32	s15, s13
 8008de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dec:	4627      	mov	r7, r4
 8008dee:	d01f      	beq.n	8008e30 <GUI_TOUCH_CalcCoefficients+0x3cc>
 8008df0:	ed92 6a03 	vldr	s12, [r2, #12]
 8008df4:	eee6 6a66 	vfms.f32	s13, s12, s13
 8008df8:	ed92 6a05 	vldr	s12, [r2, #20]
 8008dfc:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8008e00:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8008e04:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8008e08:	eec6 6aa7 	vdiv.f32	s13, s13, s15
 8008e0c:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8008e10:	ee16 2a90 	vmov	r2, s13
 8008e14:	e00e      	b.n	8008e34 <GUI_TOUCH_CalcCoefficients+0x3d0>
 8008e16:	bf00      	nop
 8008e18:	20019140 	.word	0x20019140
 8008e1c:	20019134 	.word	0x20019134
 8008e20:	00000000 	.word	0x00000000
 8008e24:	20019138 	.word	0x20019138
 8008e28:	2001912c 	.word	0x2001912c
 8008e2c:	2001913c 	.word	0x2001913c
 8008e30:	f04f 32ff 	mov.w	r2, #4294967295
 8008e34:	4c2e      	ldr	r4, [pc, #184]	; (8008ef0 <GUI_TOUCH_CalcCoefficients+0x48c>)
 8008e36:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8008e3a:	3e01      	subs	r6, #1
 8008e3c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e44:	ee05 6a90 	vmov	s11, r6
 8008e48:	6022      	str	r2, [r4, #0]
 8008e4a:	ee06 aa10 	vmov	s12, sl
 8008e4e:	4626      	mov	r6, r4
 8008e50:	d016      	beq.n	8008e80 <GUI_TOUCH_CalcCoefficients+0x41c>
 8008e52:	ed93 5a01 	vldr	s10, [r3, #4]
 8008e56:	eef8 4ac6 	vcvt.f32.s32	s9, s12
 8008e5a:	eef8 6ae5 	vcvt.f32.s32	s13, s11
 8008e5e:	eee4 6ac5 	vfms.f32	s13, s9, s10
 8008e62:	ed93 5a02 	vldr	s10, [r3, #8]
 8008e66:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8008e6a:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 8008e6e:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8008e72:	ee86 7a87 	vdiv.f32	s14, s13, s14
 8008e76:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8008e7a:	ee17 4a10 	vmov	r4, s14
 8008e7e:	e001      	b.n	8008e84 <GUI_TOUCH_CalcCoefficients+0x420>
 8008e80:	f04f 34ff 	mov.w	r4, #4294967295
 8008e84:	4d1b      	ldr	r5, [pc, #108]	; (8008ef4 <GUI_TOUCH_CalcCoefficients+0x490>)
 8008e86:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e8e:	602c      	str	r4, [r5, #0]
 8008e90:	46ac      	mov	ip, r5
 8008e92:	d016      	beq.n	8008ec2 <GUI_TOUCH_CalcCoefficients+0x45e>
 8008e94:	edd3 6a03 	vldr	s13, [r3, #12]
 8008e98:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8008e9c:	eeb8 7ac6 	vcvt.f32.s32	s14, s12
 8008ea0:	eea5 7ae6 	vfms.f32	s14, s11, s13
 8008ea4:	edd3 6a05 	vldr	s13, [r3, #20]
 8008ea8:	ee37 7a66 	vsub.f32	s14, s14, s13
 8008eac:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8008eb0:	ee37 7a66 	vsub.f32	s14, s14, s13
 8008eb4:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8008eb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008ebc:	ee17 3a90 	vmov	r3, s15
 8008ec0:	e001      	b.n	8008ec6 <GUI_TOUCH_CalcCoefficients+0x462>
 8008ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8008ec6:	42a1      	cmp	r1, r4
 8008ec8:	4d0b      	ldr	r5, [pc, #44]	; (8008ef8 <GUI_TOUCH_CalcCoefficients+0x494>)
 8008eca:	bfc4      	itt	gt
 8008ecc:	603c      	strgt	r4, [r7, #0]
 8008ece:	f8cc 1000 	strgt.w	r1, [ip]
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	602b      	str	r3, [r5, #0]
 8008ed6:	bfc4      	itt	gt
 8008ed8:	6033      	strgt	r3, [r6, #0]
 8008eda:	602a      	strgt	r2, [r5, #0]
 8008edc:	f1d0 0001 	rsbs	r0, r0, #1
 8008ee0:	bf38      	it	cc
 8008ee2:	2000      	movcc	r0, #0
 8008ee4:	b00c      	add	sp, #48	; 0x30
 8008ee6:	ecbd 8b02 	vpop	{d8}
 8008eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008eee:	bf00      	nop
 8008ef0:	20019130 	.word	0x20019130
 8008ef4:	2001915c 	.word	0x2001915c
 8008ef8:	20019158 	.word	0x20019158

08008efc <GUI_SetTextMode>:
 8008efc:	4b03      	ldr	r3, [pc, #12]	; (8008f0c <GUI_SetTextMode+0x10>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	; 0x2a
 8008f04:	8558      	strh	r0, [r3, #42]	; 0x2a
 8008f06:	4610      	mov	r0, r2
 8008f08:	4770      	bx	lr
 8008f0a:	bf00      	nop
 8008f0c:	20000018 	.word	0x20000018

08008f10 <GUI_SetFont>:
 8008f10:	4b03      	ldr	r3, [pc, #12]	; (8008f20 <GUI_SetFont+0x10>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	69d9      	ldr	r1, [r3, #28]
 8008f16:	b100      	cbz	r0, 8008f1a <GUI_SetFont+0xa>
 8008f18:	61d8      	str	r0, [r3, #28]
 8008f1a:	4608      	mov	r0, r1
 8008f1c:	4770      	bx	lr
 8008f1e:	bf00      	nop
 8008f20:	20000018 	.word	0x20000018

08008f24 <GUI_SetDrawMode>:
 8008f24:	f7ff b888 	b.w	8008038 <LCD_SetDrawMode>

08008f28 <GUI_SetBkColor>:
 8008f28:	f7ff bbce 	b.w	80086c8 <LCD_SetBkColor>

08008f2c <GUI_SetColor>:
 8008f2c:	f7ff bbd4 	b.w	80086d8 <LCD_SetColor>

08008f30 <GUI_SelectLayer>:
 8008f30:	b570      	push	{r4, r5, r6, lr}
 8008f32:	4d08      	ldr	r5, [pc, #32]	; (8008f54 <GUI_SelectLayer+0x24>)
 8008f34:	682b      	ldr	r3, [r5, #0]
 8008f36:	2801      	cmp	r0, #1
 8008f38:	4604      	mov	r4, r0
 8008f3a:	7c5e      	ldrb	r6, [r3, #17]
 8008f3c:	d808      	bhi.n	8008f50 <GUI_SelectLayer+0x20>
 8008f3e:	f000 fbd9 	bl	80096f4 <GUI_DEVICE__GetpDriver>
 8008f42:	b128      	cbz	r0, 8008f50 <GUI_SelectLayer+0x20>
 8008f44:	682b      	ldr	r3, [r5, #0]
 8008f46:	745c      	strb	r4, [r3, #17]
 8008f48:	f000 f808 	bl	8008f5c <GUI_SelectLCD>
 8008f4c:	4b02      	ldr	r3, [pc, #8]	; (8008f58 <GUI_SelectLayer+0x28>)
 8008f4e:	601c      	str	r4, [r3, #0]
 8008f50:	4630      	mov	r0, r6
 8008f52:	bd70      	pop	{r4, r5, r6, pc}
 8008f54:	20000018 	.word	0x20000018
 8008f58:	200195a8 	.word	0x200195a8

08008f5c <GUI_SelectLCD>:
 8008f5c:	b508      	push	{r3, lr}
 8008f5e:	f003 f907 	bl	800c170 <LCD_SelectLCD>
 8008f62:	f7fe ff0f 	bl	8007d84 <LCD_UpdateColorIndices>
 8008f66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008f6a:	f7fd bc09 	b.w	8006780 <WM_Activate>

08008f6e <GUI_RectsIntersect>:
 8008f6e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8008f72:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8008f76:	429a      	cmp	r2, r3
 8008f78:	dc14      	bgt.n	8008fa4 <GUI_RectsIntersect+0x36>
 8008f7a:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8008f7e:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8008f82:	429a      	cmp	r2, r3
 8008f84:	dc0e      	bgt.n	8008fa4 <GUI_RectsIntersect+0x36>
 8008f86:	f9b0 2000 	ldrsh.w	r2, [r0]
 8008f8a:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	dc08      	bgt.n	8008fa4 <GUI_RectsIntersect+0x36>
 8008f92:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8008f96:	f9b1 2000 	ldrsh.w	r2, [r1]
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	bfcc      	ite	gt
 8008f9e:	2000      	movgt	r0, #0
 8008fa0:	2001      	movle	r0, #1
 8008fa2:	4770      	bx	lr
 8008fa4:	2000      	movs	r0, #0
 8008fa6:	4770      	bx	lr

08008fa8 <GUI_ALLOC_Realloc>:
 8008fa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008faa:	4604      	mov	r4, r0
 8008fac:	4608      	mov	r0, r1
 8008fae:	460e      	mov	r6, r1
 8008fb0:	f001 fdc0 	bl	800ab34 <GUI_ALLOC_AllocNoInit>
 8008fb4:	4605      	mov	r5, r0
 8008fb6:	b1f8      	cbz	r0, 8008ff8 <GUI_ALLOC_Realloc+0x50>
 8008fb8:	b1f4      	cbz	r4, 8008ff8 <GUI_ALLOC_Realloc+0x50>
 8008fba:	4620      	mov	r0, r4
 8008fbc:	f001 fb94 	bl	800a6e8 <GUI_ALLOC_GetSize>
 8008fc0:	42b0      	cmp	r0, r6
 8008fc2:	bfb4      	ite	lt
 8008fc4:	4607      	movlt	r7, r0
 8008fc6:	4637      	movge	r7, r6
 8008fc8:	4628      	mov	r0, r5
 8008fca:	f001 fb5f 	bl	800a68c <GUI_ALLOC_LockH>
 8008fce:	9000      	str	r0, [sp, #0]
 8008fd0:	4620      	mov	r0, r4
 8008fd2:	f001 fb5b 	bl	800a68c <GUI_ALLOC_LockH>
 8008fd6:	ae02      	add	r6, sp, #8
 8008fd8:	4601      	mov	r1, r0
 8008fda:	463a      	mov	r2, r7
 8008fdc:	9001      	str	r0, [sp, #4]
 8008fde:	f856 0d08 	ldr.w	r0, [r6, #-8]!
 8008fe2:	f003 fc5b 	bl	800c89c <memcpy>
 8008fe6:	4668      	mov	r0, sp
 8008fe8:	f001 fb5e 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 8008fec:	a801      	add	r0, sp, #4
 8008fee:	f001 fb5b 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 8008ff2:	4620      	mov	r0, r4
 8008ff4:	f001 fb84 	bl	800a700 <GUI_ALLOC_Free>
 8008ff8:	4628      	mov	r0, r5
 8008ffa:	b003      	add	sp, #12
 8008ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08009000 <GUI_SetPenSize>:
 8009000:	4b02      	ldr	r3, [pc, #8]	; (800900c <GUI_SetPenSize+0xc>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	7e1a      	ldrb	r2, [r3, #24]
 8009006:	7618      	strb	r0, [r3, #24]
 8009008:	4610      	mov	r0, r2
 800900a:	4770      	bx	lr
 800900c:	20000018 	.word	0x20000018

08009010 <GUI_StoreKey>:
 8009010:	4b02      	ldr	r3, [pc, #8]	; (800901c <GUI_StoreKey+0xc>)
 8009012:	681a      	ldr	r2, [r3, #0]
 8009014:	b902      	cbnz	r2, 8009018 <GUI_StoreKey+0x8>
 8009016:	6018      	str	r0, [r3, #0]
 8009018:	f7ff bc98 	b.w	800894c <GUI_SignalEvent>
 800901c:	20019160 	.word	0x20019160

08009020 <GUI_MoveRect>:
 8009020:	b168      	cbz	r0, 800903e <GUI_MoveRect+0x1e>
 8009022:	8803      	ldrh	r3, [r0, #0]
 8009024:	b289      	uxth	r1, r1
 8009026:	440b      	add	r3, r1
 8009028:	8003      	strh	r3, [r0, #0]
 800902a:	8883      	ldrh	r3, [r0, #4]
 800902c:	4419      	add	r1, r3
 800902e:	8843      	ldrh	r3, [r0, #2]
 8009030:	8081      	strh	r1, [r0, #4]
 8009032:	b292      	uxth	r2, r2
 8009034:	4413      	add	r3, r2
 8009036:	8043      	strh	r3, [r0, #2]
 8009038:	88c3      	ldrh	r3, [r0, #6]
 800903a:	441a      	add	r2, r3
 800903c:	80c2      	strh	r2, [r0, #6]
 800903e:	4770      	bx	lr

08009040 <GUI_MergeRect>:
 8009040:	b510      	push	{r4, lr}
 8009042:	b338      	cbz	r0, 8009094 <GUI_MergeRect+0x54>
 8009044:	b309      	cbz	r1, 800908a <GUI_MergeRect+0x4a>
 8009046:	b30a      	cbz	r2, 800908c <GUI_MergeRect+0x4c>
 8009048:	f9b1 4000 	ldrsh.w	r4, [r1]
 800904c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8009050:	429c      	cmp	r4, r3
 8009052:	bfb8      	it	lt
 8009054:	4623      	movlt	r3, r4
 8009056:	8003      	strh	r3, [r0, #0]
 8009058:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 800905c:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8009060:	429c      	cmp	r4, r3
 8009062:	bfb8      	it	lt
 8009064:	4623      	movlt	r3, r4
 8009066:	8043      	strh	r3, [r0, #2]
 8009068:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 800906c:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8009070:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 8009074:	429c      	cmp	r4, r3
 8009076:	bfa8      	it	ge
 8009078:	4623      	movge	r3, r4
 800907a:	8083      	strh	r3, [r0, #4]
 800907c:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8009080:	4299      	cmp	r1, r3
 8009082:	bfa8      	it	ge
 8009084:	460b      	movge	r3, r1
 8009086:	80c3      	strh	r3, [r0, #6]
 8009088:	bd10      	pop	{r4, pc}
 800908a:	4611      	mov	r1, r2
 800908c:	680b      	ldr	r3, [r1, #0]
 800908e:	6003      	str	r3, [r0, #0]
 8009090:	684b      	ldr	r3, [r1, #4]
 8009092:	6043      	str	r3, [r0, #4]
 8009094:	bd10      	pop	{r4, pc}
	...

08009098 <GUI_GotoXY>:
 8009098:	4b02      	ldr	r3, [pc, #8]	; (80090a4 <GUI_GotoXY+0xc>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	8458      	strh	r0, [r3, #34]	; 0x22
 800909e:	8499      	strh	r1, [r3, #36]	; 0x24
 80090a0:	2000      	movs	r0, #0
 80090a2:	4770      	bx	lr
 80090a4:	20000018 	.word	0x20000018

080090a8 <GL_DrawPoint>:
 80090a8:	b508      	push	{r3, lr}
 80090aa:	4b08      	ldr	r3, [pc, #32]	; (80090cc <GL_DrawPoint+0x24>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	7e1a      	ldrb	r2, [r3, #24]
 80090b0:	2a01      	cmp	r2, #1
 80090b2:	d103      	bne.n	80090bc <GL_DrawPoint+0x14>
 80090b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	4798      	blx	r3
 80090ba:	bd08      	pop	{r3, pc}
 80090bc:	2302      	movs	r3, #2
 80090be:	3a01      	subs	r2, #1
 80090c0:	fb92 f2f3 	sdiv	r2, r2, r3
 80090c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80090c8:	f000 bccc 	b.w	8009a64 <GL_FillCircle>
 80090cc:	20000018 	.word	0x20000018

080090d0 <GUI_DrawPoint>:
 80090d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090d2:	4b09      	ldr	r3, [pc, #36]	; (80090f8 <GUI_DrawPoint+0x28>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4607      	mov	r7, r0
 80090d8:	2000      	movs	r0, #0
 80090da:	460d      	mov	r5, r1
 80090dc:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 80090de:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 80090e0:	f7fd fad0 	bl	8006684 <WM__InitIVRSearch>
 80090e4:	b130      	cbz	r0, 80090f4 <GUI_DrawPoint+0x24>
 80090e6:	19b8      	adds	r0, r7, r6
 80090e8:	1929      	adds	r1, r5, r4
 80090ea:	f7ff ffdd 	bl	80090a8 <GL_DrawPoint>
 80090ee:	f7fd fa07 	bl	8006500 <WM__GetNextIVR>
 80090f2:	e7f7      	b.n	80090e4 <GUI_DrawPoint+0x14>
 80090f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090f6:	bf00      	nop
 80090f8:	20000018 	.word	0x20000018

080090fc <_SetLineColor>:
 80090fc:	4b1e      	ldr	r3, [pc, #120]	; (8009178 <_SetLineColor+0x7c>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	7e9b      	ldrb	r3, [r3, #26]
 8009102:	3b01      	subs	r3, #1
 8009104:	2b03      	cmp	r3, #3
 8009106:	d832      	bhi.n	800916e <_SetLineColor+0x72>
 8009108:	e8df f003 	tbb	[pc, r3]
 800910c:	221a0d02 	.word	0x221a0d02
 8009110:	4b1a      	ldr	r3, [pc, #104]	; (800917c <_SetLineColor+0x80>)
 8009112:	3006      	adds	r0, #6
 8009114:	4003      	ands	r3, r0
 8009116:	2b00      	cmp	r3, #0
 8009118:	da03      	bge.n	8009122 <_SetLineColor+0x26>
 800911a:	3b01      	subs	r3, #1
 800911c:	f063 030f 	orn	r3, r3, #15
 8009120:	3301      	adds	r3, #1
 8009122:	2b0b      	cmp	r3, #11
 8009124:	e008      	b.n	8009138 <_SetLineColor+0x3c>
 8009126:	4b16      	ldr	r3, [pc, #88]	; (8009180 <_SetLineColor+0x84>)
 8009128:	4003      	ands	r3, r0
 800912a:	2b00      	cmp	r3, #0
 800912c:	da03      	bge.n	8009136 <_SetLineColor+0x3a>
 800912e:	3b01      	subs	r3, #1
 8009130:	f063 0303 	orn	r3, r3, #3
 8009134:	3301      	adds	r3, #1
 8009136:	2b01      	cmp	r3, #1
 8009138:	bfcc      	ite	gt
 800913a:	2000      	movgt	r0, #0
 800913c:	2001      	movle	r0, #1
 800913e:	4770      	bx	lr
 8009140:	2314      	movs	r3, #20
 8009142:	fb90 f2f3 	sdiv	r2, r0, r3
 8009146:	fb03 0012 	mls	r0, r3, r2, r0
 800914a:	280b      	cmp	r0, #11
 800914c:	dc09      	bgt.n	8009162 <_SetLineColor+0x66>
 800914e:	e010      	b.n	8009172 <_SetLineColor+0x76>
 8009150:	2318      	movs	r3, #24
 8009152:	fb90 f2f3 	sdiv	r2, r0, r3
 8009156:	fb03 0012 	mls	r0, r3, r2, r0
 800915a:	280b      	cmp	r0, #11
 800915c:	dd09      	ble.n	8009172 <_SetLineColor+0x76>
 800915e:	f020 0004 	bic.w	r0, r0, #4
 8009162:	3810      	subs	r0, #16
 8009164:	2801      	cmp	r0, #1
 8009166:	bf8c      	ite	hi
 8009168:	2000      	movhi	r0, #0
 800916a:	2001      	movls	r0, #1
 800916c:	4770      	bx	lr
 800916e:	2000      	movs	r0, #0
 8009170:	4770      	bx	lr
 8009172:	2001      	movs	r0, #1
 8009174:	4770      	bx	lr
 8009176:	bf00      	nop
 8009178:	20000018 	.word	0x20000018
 800917c:	8000000f 	.word	0x8000000f
 8009180:	80000003 	.word	0x80000003

08009184 <GUI_sin>:
 8009184:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8009188:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 800918c:	bfc6      	itte	gt
 800918e:	f5a0 6000 	subgt.w	r0, r0, #2048	; 0x800
 8009192:	2101      	movgt	r1, #1
 8009194:	2100      	movle	r1, #0
 8009196:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800919a:	bfc8      	it	gt
 800919c:	f5c0 6000 	rsbgt	r0, r0, #2048	; 0x800
 80091a0:	f000 033f 	and.w	r3, r0, #63	; 0x3f
 80091a4:	b510      	push	{r4, lr}
 80091a6:	1182      	asrs	r2, r0, #6
 80091a8:	4c0b      	ldr	r4, [pc, #44]	; (80091d8 <GUI_sin+0x54>)
 80091aa:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	f834 0012 	ldrh.w	r0, [r4, r2, lsl #1]
 80091b4:	2b40      	cmp	r3, #64	; 0x40
 80091b6:	fb00 f003 	mul.w	r0, r0, r3
 80091ba:	d008      	beq.n	80091ce <GUI_sin+0x4a>
 80091bc:	2a10      	cmp	r2, #16
 80091be:	d006      	beq.n	80091ce <GUI_sin+0x4a>
 80091c0:	3201      	adds	r2, #1
 80091c2:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80091c6:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
 80091ca:	fb03 0002 	mla	r0, r3, r2, r0
 80091ce:	3020      	adds	r0, #32
 80091d0:	0980      	lsrs	r0, r0, #6
 80091d2:	b101      	cbz	r1, 80091d6 <GUI_sin+0x52>
 80091d4:	4240      	negs	r0, r0
 80091d6:	bd10      	pop	{r4, pc}
 80091d8:	0800fe6c 	.word	0x0800fe6c

080091dc <GUI_cos>:
 80091dc:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80091e0:	f7ff bfd0 	b.w	8009184 <GUI_sin>

080091e4 <GL_DrawLine1Ex>:
 80091e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091e8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80091ec:	1a17      	subs	r7, r2, r0
 80091ee:	1a5c      	subs	r4, r3, r1
 80091f0:	ea54 0c07 	orrs.w	ip, r4, r7
 80091f4:	4605      	mov	r5, r0
 80091f6:	460e      	mov	r6, r1
 80091f8:	f8d8 b000 	ldr.w	fp, [r8]
 80091fc:	d104      	bne.n	8009208 <GL_DrawLine1Ex+0x24>
 80091fe:	b003      	add	sp, #12
 8009200:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009204:	f7ff bf50 	b.w	80090a8 <GL_DrawPoint>
 8009208:	ea87 70e7 	eor.w	r0, r7, r7, asr #31
 800920c:	eba0 70e7 	sub.w	r0, r0, r7, asr #31
 8009210:	ea84 71e4 	eor.w	r1, r4, r4, asr #31
 8009214:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 8009218:	4288      	cmp	r0, r1
 800921a:	db04      	blt.n	8009226 <GL_DrawLine1Ex+0x42>
 800921c:	4621      	mov	r1, r4
 800921e:	463c      	mov	r4, r7
 8009220:	460f      	mov	r7, r1
 8009222:	2100      	movs	r1, #0
 8009224:	e006      	b.n	8009234 <GL_DrawLine1Ex+0x50>
 8009226:	4611      	mov	r1, r2
 8009228:	461a      	mov	r2, r3
 800922a:	460b      	mov	r3, r1
 800922c:	4629      	mov	r1, r5
 800922e:	4635      	mov	r5, r6
 8009230:	460e      	mov	r6, r1
 8009232:	2101      	movs	r1, #1
 8009234:	9100      	str	r1, [sp, #0]
 8009236:	ea84 71e4 	eor.w	r1, r4, r4, asr #31
 800923a:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 800923e:	428c      	cmp	r4, r1
 8009240:	d008      	beq.n	8009254 <GL_DrawLine1Ex+0x70>
 8009242:	461e      	mov	r6, r3
 8009244:	462b      	mov	r3, r5
 8009246:	4264      	negs	r4, r4
 8009248:	4615      	mov	r5, r2
 800924a:	427f      	negs	r7, r7
 800924c:	461a      	mov	r2, r3
 800924e:	f04f 3aff 	mov.w	sl, #4294967295
 8009252:	e001      	b.n	8009258 <GL_DrawLine1Ex+0x74>
 8009254:	f04f 0a01 	mov.w	sl, #1
 8009258:	2f00      	cmp	r7, #0
 800925a:	f8df 9148 	ldr.w	r9, [pc, #328]	; 80093a4 <GL_DrawLine1Ex+0x1c0>
 800925e:	d13e      	bne.n	80092de <GL_DrawLine1Ex+0xfa>
 8009260:	9b00      	ldr	r3, [sp, #0]
 8009262:	b1d3      	cbz	r3, 800929a <GL_DrawLine1Ex+0xb6>
 8009264:	f8d9 3000 	ldr.w	r3, [r9]
 8009268:	7e9b      	ldrb	r3, [r3, #26]
 800926a:	b98b      	cbnz	r3, 8009290 <GL_DrawLine1Ex+0xac>
 800926c:	4630      	mov	r0, r6
 800926e:	4629      	mov	r1, r5
 8009270:	b003      	add	sp, #12
 8009272:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009276:	f7fe bf3b 	b.w	80080f0 <LCD_DrawVLine>
 800927a:	f7ff ff3f 	bl	80090fc <_SetLineColor>
 800927e:	b930      	cbnz	r0, 800928e <GL_DrawLine1Ex+0xaa>
 8009280:	f8d9 3000 	ldr.w	r3, [r9]
 8009284:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009286:	4630      	mov	r0, r6
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	1979      	adds	r1, r7, r5
 800928c:	4798      	blx	r3
 800928e:	3701      	adds	r7, #1
 8009290:	42a7      	cmp	r7, r4
 8009292:	eb07 000b 	add.w	r0, r7, fp
 8009296:	ddf0      	ble.n	800927a <GL_DrawLine1Ex+0x96>
 8009298:	e01d      	b.n	80092d6 <GL_DrawLine1Ex+0xf2>
 800929a:	f8d9 3000 	ldr.w	r3, [r9]
 800929e:	7e99      	ldrb	r1, [r3, #26]
 80092a0:	b111      	cbz	r1, 80092a8 <GL_DrawLine1Ex+0xc4>
 80092a2:	f8dd a000 	ldr.w	sl, [sp]
 80092a6:	e012      	b.n	80092ce <GL_DrawLine1Ex+0xea>
 80092a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092aa:	4628      	mov	r0, r5
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4631      	mov	r1, r6
 80092b0:	4798      	blx	r3
 80092b2:	e074      	b.n	800939e <GL_DrawLine1Ex+0x1ba>
 80092b4:	f7ff ff22 	bl	80090fc <_SetLineColor>
 80092b8:	b938      	cbnz	r0, 80092ca <GL_DrawLine1Ex+0xe6>
 80092ba:	f8d9 3000 	ldr.w	r3, [r9]
 80092be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092c0:	eb0a 0005 	add.w	r0, sl, r5
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	4631      	mov	r1, r6
 80092c8:	4798      	blx	r3
 80092ca:	f10a 0a01 	add.w	sl, sl, #1
 80092ce:	45a2      	cmp	sl, r4
 80092d0:	eb0a 000b 	add.w	r0, sl, fp
 80092d4:	ddee      	ble.n	80092b4 <GL_DrawLine1Ex+0xd0>
 80092d6:	3801      	subs	r0, #1
 80092d8:	f8c8 0000 	str.w	r0, [r8]
 80092dc:	e05f      	b.n	800939e <GL_DrawLine1Ex+0x1ba>
 80092de:	f8d9 1000 	ldr.w	r1, [r9]
 80092e2:	f04f 0202 	mov.w	r2, #2
 80092e6:	7e89      	ldrb	r1, [r1, #26]
 80092e8:	fb94 f2f2 	sdiv	r2, r4, r2
 80092ec:	bfb8      	it	lt
 80092ee:	4252      	neglt	r2, r2
 80092f0:	b9d9      	cbnz	r1, 800932a <GL_DrawLine1Ex+0x146>
 80092f2:	4693      	mov	fp, r2
 80092f4:	46a8      	mov	r8, r5
 80092f6:	ebc5 0308 	rsb	r3, r5, r8
 80092fa:	42a3      	cmp	r3, r4
 80092fc:	dc4f      	bgt.n	800939e <GL_DrawLine1Ex+0x1ba>
 80092fe:	9b00      	ldr	r3, [sp, #0]
 8009300:	fb9b f1f4 	sdiv	r1, fp, r4
 8009304:	4431      	add	r1, r6
 8009306:	b92b      	cbnz	r3, 8009314 <GL_DrawLine1Ex+0x130>
 8009308:	f8d9 3000 	ldr.w	r3, [r9]
 800930c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800930e:	4640      	mov	r0, r8
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	e005      	b.n	8009320 <GL_DrawLine1Ex+0x13c>
 8009314:	f8d9 3000 	ldr.w	r3, [r9]
 8009318:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	4608      	mov	r0, r1
 800931e:	4641      	mov	r1, r8
 8009320:	4798      	blx	r3
 8009322:	f108 0801 	add.w	r8, r8, #1
 8009326:	44bb      	add	fp, r7
 8009328:	e7e5      	b.n	80092f6 <GL_DrawLine1Ex+0x112>
 800932a:	f1ba 3fff 	cmp.w	sl, #4294967295
 800932e:	bf04      	itt	eq
 8009330:	eb04 010b 	addeq.w	r1, r4, fp
 8009334:	f8c8 1000 	streq.w	r1, [r8]
 8009338:	9201      	str	r2, [sp, #4]
 800933a:	46ab      	mov	fp, r5
 800933c:	ebc5 010b 	rsb	r1, r5, fp
 8009340:	42a1      	cmp	r1, r4
 8009342:	f8d8 0000 	ldr.w	r0, [r8]
 8009346:	dc1e      	bgt.n	8009386 <GL_DrawLine1Ex+0x1a2>
 8009348:	4450      	add	r0, sl
 800934a:	f8c8 0000 	str.w	r0, [r8]
 800934e:	f7ff fed5 	bl	80090fc <_SetLineColor>
 8009352:	b980      	cbnz	r0, 8009376 <GL_DrawLine1Ex+0x192>
 8009354:	f8dd c004 	ldr.w	ip, [sp, #4]
 8009358:	f8d9 0000 	ldr.w	r0, [r9]
 800935c:	9b00      	ldr	r3, [sp, #0]
 800935e:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8009360:	fb9c f1f4 	sdiv	r1, ip, r4
 8009364:	4431      	add	r1, r6
 8009366:	b913      	cbnz	r3, 800936e <GL_DrawLine1Ex+0x18a>
 8009368:	6843      	ldr	r3, [r0, #4]
 800936a:	4658      	mov	r0, fp
 800936c:	e002      	b.n	8009374 <GL_DrawLine1Ex+0x190>
 800936e:	6843      	ldr	r3, [r0, #4]
 8009370:	4608      	mov	r0, r1
 8009372:	4659      	mov	r1, fp
 8009374:	4798      	blx	r3
 8009376:	f8dd c004 	ldr.w	ip, [sp, #4]
 800937a:	44bc      	add	ip, r7
 800937c:	f10b 0b01 	add.w	fp, fp, #1
 8009380:	f8cd c004 	str.w	ip, [sp, #4]
 8009384:	e7da      	b.n	800933c <GL_DrawLine1Ex+0x158>
 8009386:	f1ba 3fff 	cmp.w	sl, #4294967295
 800938a:	bf04      	itt	eq
 800938c:	1824      	addeq	r4, r4, r0
 800938e:	f8c8 4000 	streq.w	r4, [r8]
 8009392:	f8d8 2000 	ldr.w	r2, [r8]
 8009396:	ebca 0302 	rsb	r3, sl, r2
 800939a:	f8c8 3000 	str.w	r3, [r8]
 800939e:	b003      	add	sp, #12
 80093a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093a4:	20000018 	.word	0x20000018

080093a8 <GL_DrawLineEx>:
 80093a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093ac:	4d67      	ldr	r5, [pc, #412]	; (800954c <GL_DrawLineEx+0x1a4>)
 80093ae:	682c      	ldr	r4, [r5, #0]
 80093b0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80093b4:	f1bb 0f01 	cmp.w	fp, #1
 80093b8:	b087      	sub	sp, #28
 80093ba:	4681      	mov	r9, r0
 80093bc:	4688      	mov	r8, r1
 80093be:	4617      	mov	r7, r2
 80093c0:	461e      	mov	r6, r3
 80093c2:	46aa      	mov	sl, r5
 80093c4:	d104      	bne.n	80093d0 <GL_DrawLineEx+0x28>
 80093c6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80093c8:	9400      	str	r4, [sp, #0]
 80093ca:	f7ff ff0b 	bl	80091e4 <GL_DrawLine1Ex>
 80093ce:	e0ba      	b.n	8009546 <GL_DrawLineEx+0x19e>
 80093d0:	1a84      	subs	r4, r0, r2
 80093d2:	1acd      	subs	r5, r1, r3
 80093d4:	ea54 0305 	orrs.w	r3, r4, r5
 80093d8:	f000 80b5 	beq.w	8009546 <GL_DrawLineEx+0x19e>
 80093dc:	2c00      	cmp	r4, #0
 80093de:	bfba      	itte	lt
 80093e0:	4264      	neglt	r4, r4
 80093e2:	2301      	movlt	r3, #1
 80093e4:	2300      	movge	r3, #0
 80093e6:	2d00      	cmp	r5, #0
 80093e8:	bfbc      	itt	lt
 80093ea:	426d      	neglt	r5, r5
 80093ec:	f043 0302 	orrlt.w	r3, r3, #2
 80093f0:	42a5      	cmp	r5, r4
 80093f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80093f6:	dd04      	ble.n	8009402 <GL_DrawLineEx+0x5a>
 80093f8:	4622      	mov	r2, r4
 80093fa:	f043 0304 	orr.w	r3, r3, #4
 80093fe:	462c      	mov	r4, r5
 8009400:	4615      	mov	r5, r2
 8009402:	2202      	movs	r2, #2
 8009404:	fb94 f2f2 	sdiv	r2, r4, r2
 8009408:	eb02 2585 	add.w	r5, r2, r5, lsl #10
 800940c:	fb95 f4f4 	sdiv	r4, r5, r4
 8009410:	11a1      	asrs	r1, r4, #6
 8009412:	4a4f      	ldr	r2, [pc, #316]	; (8009550 <GL_DrawLineEx+0x1a8>)
 8009414:	f3c4 0483 	ubfx	r4, r4, #2, #4
 8009418:	f1c4 0510 	rsb	r5, r4, #16
 800941c:	f932 0011 	ldrsh.w	r0, [r2, r1, lsl #1]
 8009420:	2d10      	cmp	r5, #16
 8009422:	fb05 f000 	mul.w	r0, r5, r0
 8009426:	d004      	beq.n	8009432 <GL_DrawLineEx+0x8a>
 8009428:	3101      	adds	r1, #1
 800942a:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 800942e:	fb04 0002 	mla	r0, r4, r2, r0
 8009432:	2210      	movs	r2, #16
 8009434:	3008      	adds	r0, #8
 8009436:	fb90 f0f2 	sdiv	r0, r0, r2
 800943a:	0759      	lsls	r1, r3, #29
 800943c:	bf48      	it	mi
 800943e:	f5c0 6080 	rsbmi	r0, r0, #1024	; 0x400
 8009442:	07da      	lsls	r2, r3, #31
 8009444:	bf48      	it	mi
 8009446:	f5c0 6000 	rsbmi	r0, r0, #2048	; 0x800
 800944a:	079b      	lsls	r3, r3, #30
 800944c:	bf48      	it	mi
 800944e:	f5c0 5080 	rsbmi	r0, r0, #4096	; 0x1000
 8009452:	f500 6580 	add.w	r5, r0, #1024	; 0x400
 8009456:	4628      	mov	r0, r5
 8009458:	f7ff fec0 	bl	80091dc <GUI_cos>
 800945c:	fb00 f40b 	mul.w	r4, r0, fp
 8009460:	4628      	mov	r0, r5
 8009462:	f7ff fe8f 	bl	8009184 <GUI_sin>
 8009466:	2c00      	cmp	r4, #0
 8009468:	fb00 f00b 	mul.w	r0, r0, fp
 800946c:	da04      	bge.n	8009478 <GL_DrawLineEx+0xd0>
 800946e:	f5c4 7300 	rsb	r3, r4, #512	; 0x200
 8009472:	129b      	asrs	r3, r3, #10
 8009474:	425b      	negs	r3, r3
 8009476:	e002      	b.n	800947e <GL_DrawLineEx+0xd6>
 8009478:	f504 7300 	add.w	r3, r4, #512	; 0x200
 800947c:	129b      	asrs	r3, r3, #10
 800947e:	2800      	cmp	r0, #0
 8009480:	da06      	bge.n	8009490 <GL_DrawLineEx+0xe8>
 8009482:	f5c0 7b00 	rsb	fp, r0, #512	; 0x200
 8009486:	ea4f 2bab 	mov.w	fp, fp, asr #10
 800948a:	f1cb 0b00 	rsb	fp, fp, #0
 800948e:	e003      	b.n	8009498 <GL_DrawLineEx+0xf0>
 8009490:	f500 7b00 	add.w	fp, r0, #512	; 0x200
 8009494:	ea4f 2bab 	mov.w	fp, fp, asr #10
 8009498:	2b00      	cmp	r3, #0
 800949a:	dd03      	ble.n	80094a4 <GL_DrawLineEx+0xfc>
 800949c:	1c58      	adds	r0, r3, #1
 800949e:	1040      	asrs	r0, r0, #1
 80094a0:	105b      	asrs	r3, r3, #1
 80094a2:	e005      	b.n	80094b0 <GL_DrawLineEx+0x108>
 80094a4:	2202      	movs	r2, #2
 80094a6:	fb93 f0f2 	sdiv	r0, r3, r2
 80094aa:	3b01      	subs	r3, #1
 80094ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80094b0:	f1bb 0f00 	cmp.w	fp, #0
 80094b4:	dd05      	ble.n	80094c2 <GL_DrawLineEx+0x11a>
 80094b6:	f10b 0201 	add.w	r2, fp, #1
 80094ba:	1052      	asrs	r2, r2, #1
 80094bc:	ea4f 0b6b 	mov.w	fp, fp, asr #1
 80094c0:	e006      	b.n	80094d0 <GL_DrawLineEx+0x128>
 80094c2:	2102      	movs	r1, #2
 80094c4:	fb9b f2f1 	sdiv	r2, fp, r1
 80094c8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80094cc:	fb9b fbf1 	sdiv	fp, fp, r1
 80094d0:	b280      	uxth	r0, r0
 80094d2:	fa1f f489 	uxth.w	r4, r9
 80094d6:	1901      	adds	r1, r0, r4
 80094d8:	b292      	uxth	r2, r2
 80094da:	f8ad 1008 	strh.w	r1, [sp, #8]
 80094de:	fa1f fb8b 	uxth.w	fp, fp
 80094e2:	fa1f f188 	uxth.w	r1, r8
 80094e6:	1855      	adds	r5, r2, r1
 80094e8:	ebcb 0101 	rsb	r1, fp, r1
 80094ec:	b29b      	uxth	r3, r3
 80094ee:	f8ad 100e 	strh.w	r1, [sp, #14]
 80094f2:	b2b9      	uxth	r1, r7
 80094f4:	1ae4      	subs	r4, r4, r3
 80094f6:	1acb      	subs	r3, r1, r3
 80094f8:	f8ad 3010 	strh.w	r3, [sp, #16]
 80094fc:	b2b3      	uxth	r3, r6
 80094fe:	4401      	add	r1, r0
 8009500:	ebcb 0b03 	rsb	fp, fp, r3
 8009504:	4413      	add	r3, r2
 8009506:	2200      	movs	r2, #0
 8009508:	f8ad 1014 	strh.w	r1, [sp, #20]
 800950c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009510:	a802      	add	r0, sp, #8
 8009512:	4613      	mov	r3, r2
 8009514:	2104      	movs	r1, #4
 8009516:	f8ad 500a 	strh.w	r5, [sp, #10]
 800951a:	f8ad 400c 	strh.w	r4, [sp, #12]
 800951e:	f8ad b012 	strh.w	fp, [sp, #18]
 8009522:	f003 f803 	bl	800c52c <GL_FillPolygon>
 8009526:	f8da 3000 	ldr.w	r3, [sl]
 800952a:	7e5b      	ldrb	r3, [r3, #25]
 800952c:	b91b      	cbnz	r3, 8009536 <GL_DrawLineEx+0x18e>
 800952e:	4648      	mov	r0, r9
 8009530:	4641      	mov	r1, r8
 8009532:	f7ff fdb9 	bl	80090a8 <GL_DrawPoint>
 8009536:	f8da 3000 	ldr.w	r3, [sl]
 800953a:	7e5b      	ldrb	r3, [r3, #25]
 800953c:	b91b      	cbnz	r3, 8009546 <GL_DrawLineEx+0x19e>
 800953e:	4638      	mov	r0, r7
 8009540:	4631      	mov	r1, r6
 8009542:	f7ff fdb1 	bl	80090a8 <GL_DrawPoint>
 8009546:	b007      	add	sp, #28
 8009548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800954c:	20000018 	.word	0x20000018
 8009550:	0800fe8e 	.word	0x0800fe8e

08009554 <GL_DrawLine>:
 8009554:	b530      	push	{r4, r5, lr}
 8009556:	b085      	sub	sp, #20
 8009558:	ac04      	add	r4, sp, #16
 800955a:	2500      	movs	r5, #0
 800955c:	f844 5d04 	str.w	r5, [r4, #-4]!
 8009560:	9400      	str	r4, [sp, #0]
 8009562:	f7ff ff21 	bl	80093a8 <GL_DrawLineEx>
 8009566:	b005      	add	sp, #20
 8009568:	bd30      	pop	{r4, r5, pc}
	...

0800956c <GUI_DrawLine>:
 800956c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009570:	461e      	mov	r6, r3
 8009572:	4b0c      	ldr	r3, [pc, #48]	; (80095a4 <GUI_DrawLine+0x38>)
 8009574:	681c      	ldr	r4, [r3, #0]
 8009576:	4681      	mov	r9, r0
 8009578:	2000      	movs	r0, #0
 800957a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800957c:	6d24      	ldr	r4, [r4, #80]	; 0x50
 800957e:	4688      	mov	r8, r1
 8009580:	4617      	mov	r7, r2
 8009582:	f7fd f87f 	bl	8006684 <WM__InitIVRSearch>
 8009586:	b150      	cbz	r0, 800959e <GUI_DrawLine+0x32>
 8009588:	eb09 0005 	add.w	r0, r9, r5
 800958c:	eb08 0104 	add.w	r1, r8, r4
 8009590:	197a      	adds	r2, r7, r5
 8009592:	1933      	adds	r3, r6, r4
 8009594:	f7ff ffde 	bl	8009554 <GL_DrawLine>
 8009598:	f7fc ffb2 	bl	8006500 <WM__GetNextIVR>
 800959c:	e7f3      	b.n	8009586 <GUI_DrawLine+0x1a>
 800959e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095a2:	bf00      	nop
 80095a4:	20000018 	.word	0x20000018

080095a8 <GUI_DispStringHCenterAt>:
 80095a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095aa:	4b0b      	ldr	r3, [pc, #44]	; (80095d8 <GUI_DispStringHCenterAt+0x30>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	4605      	mov	r5, r0
 80095b0:	f9b3 002c 	ldrsh.w	r0, [r3, #44]	; 0x2c
 80095b4:	f040 0002 	orr.w	r0, r0, #2
 80095b8:	460f      	mov	r7, r1
 80095ba:	4616      	mov	r6, r2
 80095bc:	f002 ff64 	bl	800c488 <GUI_SetTextAlign>
 80095c0:	4639      	mov	r1, r7
 80095c2:	4604      	mov	r4, r0
 80095c4:	4632      	mov	r2, r6
 80095c6:	4628      	mov	r0, r5
 80095c8:	f000 f808 	bl	80095dc <GUI_DispStringAt>
 80095cc:	4620      	mov	r0, r4
 80095ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80095d2:	f002 bf59 	b.w	800c488 <GUI_SetTextAlign>
 80095d6:	bf00      	nop
 80095d8:	20000018 	.word	0x20000018

080095dc <GUI_DispStringAt>:
 80095dc:	4b02      	ldr	r3, [pc, #8]	; (80095e8 <GUI_DispStringAt+0xc>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	8459      	strh	r1, [r3, #34]	; 0x22
 80095e2:	849a      	strh	r2, [r3, #36]	; 0x24
 80095e4:	f000 b802 	b.w	80095ec <GUI_DispString>
 80095e8:	20000018 	.word	0x20000018

080095ec <GUI_DispString>:
 80095ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095f0:	4604      	mov	r4, r0
 80095f2:	2800      	cmp	r0, #0
 80095f4:	d079      	beq.n	80096ea <GUI_DispString+0xfe>
 80095f6:	4d3e      	ldr	r5, [pc, #248]	; (80096f0 <GUI_DispString+0x104>)
 80095f8:	f000 fd1c 	bl	800a034 <GUI_GetFontDistY>
 80095fc:	682b      	ldr	r3, [r5, #0]
 80095fe:	4680      	mov	r8, r0
 8009600:	f8b3 9022 	ldrh.w	r9, [r3, #34]	; 0x22
 8009604:	f000 fcfe 	bl	800a004 <GUI_GetYAdjust>
 8009608:	682b      	ldr	r3, [r5, #0]
 800960a:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800960c:	b287      	uxth	r7, r0
 800960e:	1bd2      	subs	r2, r2, r7
 8009610:	849a      	strh	r2, [r3, #36]	; 0x24
 8009612:	7823      	ldrb	r3, [r4, #0]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d05d      	beq.n	80096d4 <GUI_DispString+0xe8>
 8009618:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800961c:	4620      	mov	r0, r4
 800961e:	f000 fc3f 	bl	8009ea0 <GUI__GetLineNumChars>
 8009622:	4606      	mov	r6, r0
 8009624:	4631      	mov	r1, r6
 8009626:	4620      	mov	r0, r4
 8009628:	f000 fc68 	bl	8009efc <GUI__GetLineDistX>
 800962c:	682b      	ldr	r3, [r5, #0]
 800962e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009630:	f002 0203 	and.w	r2, r2, #3
 8009634:	2a01      	cmp	r2, #1
 8009636:	d005      	beq.n	8009644 <GUI_DispString+0x58>
 8009638:	2a02      	cmp	r2, #2
 800963a:	bf14      	ite	ne
 800963c:	2200      	movne	r2, #0
 800963e:	fb90 f2f2 	sdiveq	r2, r0, r2
 8009642:	e000      	b.n	8009646 <GUI_DispString+0x5a>
 8009644:	4602      	mov	r2, r0
 8009646:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8009648:	1a8a      	subs	r2, r1, r2
 800964a:	b292      	uxth	r2, r2
 800964c:	b291      	uxth	r1, r2
 800964e:	8459      	strh	r1, [r3, #34]	; 0x22
 8009650:	fa1f fa80 	uxth.w	sl, r0
 8009654:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009656:	f8ad 1000 	strh.w	r1, [sp]
 800965a:	f10a 31ff 	add.w	r1, sl, #4294967295
 800965e:	440a      	add	r2, r1
 8009660:	f8ad 3002 	strh.w	r3, [sp, #2]
 8009664:	fa1f fb88 	uxth.w	fp, r8
 8009668:	3b01      	subs	r3, #1
 800966a:	445b      	add	r3, fp
 800966c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8009670:	4620      	mov	r0, r4
 8009672:	4631      	mov	r1, r6
 8009674:	466a      	mov	r2, sp
 8009676:	f8ad 3006 	strh.w	r3, [sp, #6]
 800967a:	f000 fc6f 	bl	8009f5c <GUI__DispLine>
 800967e:	682b      	ldr	r3, [r5, #0]
 8009680:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8009684:	849a      	strh	r2, [r3, #36]	; 0x24
 8009686:	4620      	mov	r0, r4
 8009688:	4631      	mov	r1, r6
 800968a:	f7ff f97b 	bl	8008984 <GUI_UC__NumChars2NumBytes>
 800968e:	5c23      	ldrb	r3, [r4, r0]
 8009690:	2b0a      	cmp	r3, #10
 8009692:	eb04 0200 	add.w	r2, r4, r0
 8009696:	d001      	beq.n	800969c <GUI_DispString+0xb0>
 8009698:	2b0d      	cmp	r3, #13
 800969a:	d112      	bne.n	80096c2 <GUI_DispString+0xd6>
 800969c:	682b      	ldr	r3, [r5, #0]
 800969e:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 80096a0:	f001 0103 	and.w	r1, r1, #3
 80096a4:	3901      	subs	r1, #1
 80096a6:	2901      	cmp	r1, #1
 80096a8:	bf8a      	itet	hi
 80096aa:	8c19      	ldrhhi	r1, [r3, #32]
 80096ac:	f8a3 9022 	strhls.w	r9, [r3, #34]	; 0x22
 80096b0:	8459      	strhhi	r1, [r3, #34]	; 0x22
 80096b2:	7811      	ldrb	r1, [r2, #0]
 80096b4:	290a      	cmp	r1, #10
 80096b6:	d10b      	bne.n	80096d0 <GUI_DispString+0xe4>
 80096b8:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 80096ba:	448b      	add	fp, r1
 80096bc:	f8a3 b024 	strh.w	fp, [r3, #36]	; 0x24
 80096c0:	e006      	b.n	80096d0 <GUI_DispString+0xe4>
 80096c2:	4b0b      	ldr	r3, [pc, #44]	; (80096f0 <GUI_DispString+0x104>)
 80096c4:	f8bd 0000 	ldrh.w	r0, [sp]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	4482      	add	sl, r0
 80096cc:	f8a3 a022 	strh.w	sl, [r3, #34]	; 0x22
 80096d0:	7813      	ldrb	r3, [r2, #0]
 80096d2:	b943      	cbnz	r3, 80096e6 <GUI_DispString+0xfa>
 80096d4:	682b      	ldr	r3, [r5, #0]
 80096d6:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 80096d8:	4417      	add	r7, r2
 80096da:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80096dc:	849f      	strh	r7, [r3, #36]	; 0x24
 80096de:	f022 0203 	bic.w	r2, r2, #3
 80096e2:	859a      	strh	r2, [r3, #44]	; 0x2c
 80096e4:	e001      	b.n	80096ea <GUI_DispString+0xfe>
 80096e6:	1c54      	adds	r4, r2, #1
 80096e8:	e793      	b.n	8009612 <GUI_DispString+0x26>
 80096ea:	b003      	add	sp, #12
 80096ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096f0:	20000018 	.word	0x20000018

080096f4 <GUI_DEVICE__GetpDriver>:
 80096f4:	2801      	cmp	r0, #1
 80096f6:	dc09      	bgt.n	800970c <GUI_DEVICE__GetpDriver+0x18>
 80096f8:	4b05      	ldr	r3, [pc, #20]	; (8009710 <GUI_DEVICE__GetpDriver+0x1c>)
 80096fa:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80096fe:	b120      	cbz	r0, 800970a <GUI_DEVICE__GetpDriver+0x16>
 8009700:	68c3      	ldr	r3, [r0, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	b11b      	cbz	r3, 800970e <GUI_DEVICE__GetpDriver+0x1a>
 8009706:	6800      	ldr	r0, [r0, #0]
 8009708:	e7f9      	b.n	80096fe <GUI_DEVICE__GetpDriver+0xa>
 800970a:	4770      	bx	lr
 800970c:	2000      	movs	r0, #0
 800970e:	4770      	bx	lr
 8009710:	20019604 	.word	0x20019604

08009714 <GUI_DEVICE_Delete>:
 8009714:	f000 bfa6 	b.w	800a664 <GUI_ALLOC_FreeFixedBlock>

08009718 <GUI_DEVICE_Create>:
 8009718:	2b01      	cmp	r3, #1
 800971a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800971c:	4606      	mov	r6, r0
 800971e:	460d      	mov	r5, r1
 8009720:	4617      	mov	r7, r2
 8009722:	461c      	mov	r4, r3
 8009724:	dd01      	ble.n	800972a <GUI_DEVICE_Create+0x12>
 8009726:	2000      	movs	r0, #0
 8009728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800972a:	201c      	movs	r0, #28
 800972c:	f001 f906 	bl	800a93c <GUI_ALLOC_GetFixedBlock>
 8009730:	2800      	cmp	r0, #0
 8009732:	d0f8      	beq.n	8009726 <GUI_DEVICE_Create+0xe>
 8009734:	b10d      	cbz	r5, 800973a <GUI_DEVICE_Create+0x22>
 8009736:	6105      	str	r5, [r0, #16]
 8009738:	e009      	b.n	800974e <GUI_DEVICE_Create+0x36>
 800973a:	4b09      	ldr	r3, [pc, #36]	; (8009760 <GUI_DEVICE_Create+0x48>)
 800973c:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8009740:	b129      	cbz	r1, 800974e <GUI_DEVICE_Create+0x36>
 8009742:	680b      	ldr	r3, [r1, #0]
 8009744:	b10b      	cbz	r3, 800974a <GUI_DEVICE_Create+0x32>
 8009746:	4619      	mov	r1, r3
 8009748:	e7fb      	b.n	8009742 <GUI_DEVICE_Create+0x2a>
 800974a:	690b      	ldr	r3, [r1, #16]
 800974c:	6103      	str	r3, [r0, #16]
 800974e:	2300      	movs	r3, #0
 8009750:	6083      	str	r3, [r0, #8]
 8009752:	6184      	str	r4, [r0, #24]
 8009754:	8287      	strh	r7, [r0, #20]
 8009756:	60c6      	str	r6, [r0, #12]
 8009758:	6003      	str	r3, [r0, #0]
 800975a:	6043      	str	r3, [r0, #4]
 800975c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800975e:	bf00      	nop
 8009760:	20019604 	.word	0x20019604

08009764 <GUI_DEVICE_Unlink>:
 8009764:	4b09      	ldr	r3, [pc, #36]	; (800978c <GUI_DEVICE_Unlink+0x28>)
 8009766:	6982      	ldr	r2, [r0, #24]
 8009768:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800976c:	4281      	cmp	r1, r0
 800976e:	bf04      	itt	eq
 8009770:	6801      	ldreq	r1, [r0, #0]
 8009772:	f843 1022 	streq.w	r1, [r3, r2, lsl #2]
 8009776:	6843      	ldr	r3, [r0, #4]
 8009778:	b10b      	cbz	r3, 800977e <GUI_DEVICE_Unlink+0x1a>
 800977a:	6802      	ldr	r2, [r0, #0]
 800977c:	601a      	str	r2, [r3, #0]
 800977e:	6802      	ldr	r2, [r0, #0]
 8009780:	b102      	cbz	r2, 8009784 <GUI_DEVICE_Unlink+0x20>
 8009782:	6053      	str	r3, [r2, #4]
 8009784:	2300      	movs	r3, #0
 8009786:	6003      	str	r3, [r0, #0]
 8009788:	6043      	str	r3, [r0, #4]
 800978a:	4770      	bx	lr
 800978c:	20019604 	.word	0x20019604

08009790 <GUI_DEVICE_Link>:
 8009790:	b570      	push	{r4, r5, r6, lr}
 8009792:	b338      	cbz	r0, 80097e4 <GUI_DEVICE_Link+0x54>
 8009794:	6982      	ldr	r2, [r0, #24]
 8009796:	2a01      	cmp	r2, #1
 8009798:	dc24      	bgt.n	80097e4 <GUI_DEVICE_Link+0x54>
 800979a:	4919      	ldr	r1, [pc, #100]	; (8009800 <GUI_DEVICE_Link+0x70>)
 800979c:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 80097a0:	460d      	mov	r5, r1
 80097a2:	b913      	cbnz	r3, 80097aa <GUI_DEVICE_Link+0x1a>
 80097a4:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 80097a8:	e01a      	b.n	80097e0 <GUI_DEVICE_Link+0x50>
 80097aa:	6859      	ldr	r1, [r3, #4]
 80097ac:	b109      	cbz	r1, 80097b2 <GUI_DEVICE_Link+0x22>
 80097ae:	460b      	mov	r3, r1
 80097b0:	e7fb      	b.n	80097aa <GUI_DEVICE_Link+0x1a>
 80097b2:	68c1      	ldr	r1, [r0, #12]
 80097b4:	680e      	ldr	r6, [r1, #0]
 80097b6:	68d9      	ldr	r1, [r3, #12]
 80097b8:	680c      	ldr	r4, [r1, #0]
 80097ba:	42b4      	cmp	r4, r6
 80097bc:	dd03      	ble.n	80097c6 <GUI_DEVICE_Link+0x36>
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d1f8      	bne.n	80097b6 <GUI_DEVICE_Link+0x26>
 80097c4:	e00e      	b.n	80097e4 <GUI_DEVICE_Link+0x54>
 80097c6:	d102      	bne.n	80097ce <GUI_DEVICE_Link+0x3e>
 80097c8:	8a81      	ldrh	r1, [r0, #20]
 80097ca:	2901      	cmp	r1, #1
 80097cc:	d011      	beq.n	80097f2 <GUI_DEVICE_Link+0x62>
 80097ce:	6859      	ldr	r1, [r3, #4]
 80097d0:	b199      	cbz	r1, 80097fa <GUI_DEVICE_Link+0x6a>
 80097d2:	6008      	str	r0, [r1, #0]
 80097d4:	6041      	str	r1, [r0, #4]
 80097d6:	6058      	str	r0, [r3, #4]
 80097d8:	4298      	cmp	r0, r3
 80097da:	bf08      	it	eq
 80097dc:	2300      	moveq	r3, #0
 80097de:	6003      	str	r3, [r0, #0]
 80097e0:	2000      	movs	r0, #0
 80097e2:	bd70      	pop	{r4, r5, r6, pc}
 80097e4:	2001      	movs	r0, #1
 80097e6:	bd70      	pop	{r4, r5, r6, pc}
 80097e8:	68cb      	ldr	r3, [r1, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	42a3      	cmp	r3, r4
 80097ee:	460b      	mov	r3, r1
 80097f0:	dbed      	blt.n	80097ce <GUI_DEVICE_Link+0x3e>
 80097f2:	6819      	ldr	r1, [r3, #0]
 80097f4:	2900      	cmp	r1, #0
 80097f6:	d1f7      	bne.n	80097e8 <GUI_DEVICE_Link+0x58>
 80097f8:	e7e9      	b.n	80097ce <GUI_DEVICE_Link+0x3e>
 80097fa:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
 80097fe:	e7ea      	b.n	80097d6 <GUI_DEVICE_Link+0x46>
 8009800:	20019604 	.word	0x20019604

08009804 <GUI_DEVICE_CreateAndLink>:
 8009804:	b538      	push	{r3, r4, r5, lr}
 8009806:	461d      	mov	r5, r3
 8009808:	f7ff ff86 	bl	8009718 <GUI_DEVICE_Create>
 800980c:	4604      	mov	r4, r0
 800980e:	b148      	cbz	r0, 8009824 <GUI_DEVICE_CreateAndLink+0x20>
 8009810:	f7ff ffbe 	bl	8009790 <GUI_DEVICE_Link>
 8009814:	68e3      	ldr	r3, [r4, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	b923      	cbnz	r3, 8009824 <GUI_DEVICE_CreateAndLink+0x20>
 800981a:	4b03      	ldr	r3, [pc, #12]	; (8009828 <GUI_DEVICE_CreateAndLink+0x24>)
 800981c:	3516      	adds	r5, #22
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
 8009824:	4620      	mov	r0, r4
 8009826:	bd38      	pop	{r3, r4, r5, pc}
 8009828:	20000018 	.word	0x20000018

0800982c <_OnExit>:
 800982c:	b510      	push	{r4, lr}
 800982e:	4b07      	ldr	r3, [pc, #28]	; (800984c <_OnExit+0x20>)
 8009830:	4807      	ldr	r0, [pc, #28]	; (8009850 <_OnExit+0x24>)
 8009832:	2400      	movs	r4, #0
 8009834:	4621      	mov	r1, r4
 8009836:	2270      	movs	r2, #112	; 0x70
 8009838:	601c      	str	r4, [r3, #0]
 800983a:	f7fe ff83 	bl	8008744 <GUI__memset>
 800983e:	4621      	mov	r1, r4
 8009840:	4804      	ldr	r0, [pc, #16]	; (8009854 <_OnExit+0x28>)
 8009842:	2208      	movs	r2, #8
 8009844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009848:	f7fe bf7c 	b.w	8008744 <GUI__memset>
 800984c:	200191e0 	.word	0x200191e0
 8009850:	20019168 	.word	0x20019168
 8009854:	20019604 	.word	0x20019604

08009858 <_InitContext>:
 8009858:	b538      	push	{r3, r4, r5, lr}
 800985a:	4d19      	ldr	r5, [pc, #100]	; (80098c0 <_InitContext+0x68>)
 800985c:	682b      	ldr	r3, [r5, #0]
 800985e:	1d1a      	adds	r2, r3, #4
 8009860:	63da      	str	r2, [r3, #60]	; 0x3c
 8009862:	f103 0208 	add.w	r2, r3, #8
 8009866:	639b      	str	r3, [r3, #56]	; 0x38
 8009868:	641b      	str	r3, [r3, #64]	; 0x40
 800986a:	6142      	str	r2, [r0, #20]
 800986c:	7c5a      	ldrb	r2, [r3, #17]
 800986e:	4b15      	ldr	r3, [pc, #84]	; (80098c4 <_InitContext+0x6c>)
 8009870:	4604      	mov	r4, r0
 8009872:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009876:	68c3      	ldr	r3, [r0, #12]
 8009878:	f104 0108 	add.w	r1, r4, #8
 800987c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800987e:	4798      	blx	r3
 8009880:	4b11      	ldr	r3, [pc, #68]	; (80098c8 <_InitContext+0x70>)
 8009882:	6663      	str	r3, [r4, #100]	; 0x64
 8009884:	4b11      	ldr	r3, [pc, #68]	; (80098cc <_InitContext+0x74>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	61e3      	str	r3, [r4, #28]
 800988a:	682b      	ldr	r3, [r5, #0]
 800988c:	3308      	adds	r3, #8
 800988e:	6163      	str	r3, [r4, #20]
 8009890:	2301      	movs	r3, #1
 8009892:	7623      	strb	r3, [r4, #24]
 8009894:	f7fc fa10 	bl	8005cb8 <WM_GetDesktopWindow>
 8009898:	2303      	movs	r3, #3
 800989a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800989e:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80098a2:	6323      	str	r3, [r4, #48]	; 0x30
 80098a4:	6363      	str	r3, [r4, #52]	; 0x34
 80098a6:	64a0      	str	r0, [r4, #72]	; 0x48
 80098a8:	2000      	movs	r0, #0
 80098aa:	f7fe ff0d 	bl	80086c8 <LCD_SetBkColor>
 80098ae:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80098b2:	f7fe ff11 	bl	80086d8 <LCD_SetColor>
 80098b6:	4b06      	ldr	r3, [pc, #24]	; (80098d0 <_InitContext+0x78>)
 80098b8:	4a06      	ldr	r2, [pc, #24]	; (80098d4 <_InitContext+0x7c>)
 80098ba:	601a      	str	r2, [r3, #0]
 80098bc:	bd38      	pop	{r3, r4, r5, pc}
 80098be:	bf00      	nop
 80098c0:	20000018 	.word	0x20000018
 80098c4:	20019604 	.word	0x20019604
 80098c8:	0800feb0 	.word	0x0800feb0
 80098cc:	2000001c 	.word	0x2000001c
 80098d0:	200195fc 	.word	0x200195fc
 80098d4:	08010340 	.word	0x08010340

080098d8 <GUI_SetDefaultFont>:
 80098d8:	4b01      	ldr	r3, [pc, #4]	; (80098e0 <GUI_SetDefaultFont+0x8>)
 80098da:	6018      	str	r0, [r3, #0]
 80098dc:	4770      	bx	lr
 80098de:	bf00      	nop
 80098e0:	2000001c 	.word	0x2000001c

080098e4 <GUI_ClearRect>:
 80098e4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80098e8:	4607      	mov	r7, r0
 80098ea:	2004      	movs	r0, #4
 80098ec:	469a      	mov	sl, r3
 80098ee:	460e      	mov	r6, r1
 80098f0:	4691      	mov	r9, r2
 80098f2:	f7fe fba1 	bl	8008038 <LCD_SetDrawMode>
 80098f6:	4b13      	ldr	r3, [pc, #76]	; (8009944 <GUI_ClearRect+0x60>)
 80098f8:	681c      	ldr	r4, [r3, #0]
 80098fa:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80098fc:	6d24      	ldr	r4, [r4, #80]	; 0x50
 80098fe:	442f      	add	r7, r5
 8009900:	4426      	add	r6, r4
 8009902:	4680      	mov	r8, r0
 8009904:	444d      	add	r5, r9
 8009906:	4454      	add	r4, sl
 8009908:	4668      	mov	r0, sp
 800990a:	f8ad 7000 	strh.w	r7, [sp]
 800990e:	f8ad 5004 	strh.w	r5, [sp, #4]
 8009912:	f8ad 6002 	strh.w	r6, [sp, #2]
 8009916:	f8ad 4006 	strh.w	r4, [sp, #6]
 800991a:	f7fc feb3 	bl	8006684 <WM__InitIVRSearch>
 800991e:	b928      	cbnz	r0, 800992c <GUI_ClearRect+0x48>
 8009920:	4640      	mov	r0, r8
 8009922:	f7fe fb89 	bl	8008038 <LCD_SetDrawMode>
 8009926:	b002      	add	sp, #8
 8009928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800992c:	4638      	mov	r0, r7
 800992e:	4631      	mov	r1, r6
 8009930:	462a      	mov	r2, r5
 8009932:	4623      	mov	r3, r4
 8009934:	f7fe fc02 	bl	800813c <LCD_FillRect>
 8009938:	f7fc fde2 	bl	8006500 <WM__GetNextIVR>
 800993c:	2800      	cmp	r0, #0
 800993e:	d1f5      	bne.n	800992c <GUI_ClearRect+0x48>
 8009940:	e7ee      	b.n	8009920 <GUI_ClearRect+0x3c>
 8009942:	bf00      	nop
 8009944:	20000018 	.word	0x20000018

08009948 <GUI_Clear>:
 8009948:	b510      	push	{r4, lr}
 800994a:	2000      	movs	r0, #0
 800994c:	4601      	mov	r1, r0
 800994e:	f7ff fba3 	bl	8009098 <GUI_GotoXY>
 8009952:	4804      	ldr	r0, [pc, #16]	; (8009964 <GUI_Clear+0x1c>)
 8009954:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8009958:	4601      	mov	r1, r0
 800995a:	4613      	mov	r3, r2
 800995c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009960:	f7ff bfc0 	b.w	80098e4 <GUI_ClearRect>
 8009964:	ffffc001 	.word	0xffffc001

08009968 <GUI__RegisterExit>:
 8009968:	b480      	push	{r7}
 800996a:	b083      	sub	sp, #12
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	4b05      	ldr	r3, [pc, #20]	; (8009988 <GUI__RegisterExit+0x20>)
 8009972:	681a      	ldr	r2, [r3, #0]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	605a      	str	r2, [r3, #4]
 8009978:	4b03      	ldr	r3, [pc, #12]	; (8009988 <GUI__RegisterExit+0x20>)
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	601a      	str	r2, [r3, #0]
 800997e:	370c      	adds	r7, #12
 8009980:	46bd      	mov	sp, r7
 8009982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009986:	4770      	bx	lr
 8009988:	20019164 	.word	0x20019164

0800998c <GUI__Config>:
 800998c:	b508      	push	{r3, lr}
 800998e:	4b08      	ldr	r3, [pc, #32]	; (80099b0 <GUI__Config+0x24>)
 8009990:	681a      	ldr	r2, [r3, #0]
 8009992:	b962      	cbnz	r2, 80099ae <GUI__Config+0x22>
 8009994:	2201      	movs	r2, #1
 8009996:	601a      	str	r2, [r3, #0]
 8009998:	f7fb f8f6 	bl	8004b88 <GUI_X_Config>
 800999c:	f7fb f906 	bl	8004bac <LCD_X_Config>
 80099a0:	4804      	ldr	r0, [pc, #16]	; (80099b4 <GUI__Config+0x28>)
 80099a2:	4b05      	ldr	r3, [pc, #20]	; (80099b8 <GUI__Config+0x2c>)
 80099a4:	6003      	str	r3, [r0, #0]
 80099a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80099aa:	f7ff bfdd 	b.w	8009968 <GUI__RegisterExit>
 80099ae:	bd08      	pop	{r3, pc}
 80099b0:	200191e0 	.word	0x200191e0
 80099b4:	200191d8 	.word	0x200191d8
 80099b8:	0800982d 	.word	0x0800982d

080099bc <GUI_Init>:
 80099bc:	b590      	push	{r4, r7, lr}
 80099be:	b083      	sub	sp, #12
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	4b20      	ldr	r3, [pc, #128]	; (8009a44 <GUI_Init+0x88>)
 80099c4:	4a1f      	ldr	r2, [pc, #124]	; (8009a44 <GUI_Init+0x88>)
 80099c6:	6812      	ldr	r2, [r2, #0]
 80099c8:	f022 0201 	bic.w	r2, r2, #1
 80099cc:	601a      	str	r2, [r3, #0]
 80099ce:	4b1e      	ldr	r3, [pc, #120]	; (8009a48 <GUI_Init+0x8c>)
 80099d0:	2201      	movs	r2, #1
 80099d2:	601a      	str	r2, [r3, #0]
 80099d4:	4b1d      	ldr	r3, [pc, #116]	; (8009a4c <GUI_Init+0x90>)
 80099d6:	4a1e      	ldr	r2, [pc, #120]	; (8009a50 <GUI_Init+0x94>)
 80099d8:	601a      	str	r2, [r3, #0]
 80099da:	4b1c      	ldr	r3, [pc, #112]	; (8009a4c <GUI_Init+0x90>)
 80099dc:	681a      	ldr	r2, [r3, #0]
 80099de:	4b1d      	ldr	r3, [pc, #116]	; (8009a54 <GUI_Init+0x98>)
 80099e0:	429a      	cmp	r2, r3
 80099e2:	d000      	beq.n	80099e6 <GUI_Init+0x2a>
 80099e4:	e7fe      	b.n	80099e4 <GUI_Init+0x28>
 80099e6:	f7ff ffd1 	bl	800998c <GUI__Config>
 80099ea:	4b1b      	ldr	r3, [pc, #108]	; (8009a58 <GUI_Init+0x9c>)
 80099ec:	222e      	movs	r2, #46	; 0x2e
 80099ee:	701a      	strb	r2, [r3, #0]
 80099f0:	f7fb f8da 	bl	8004ba8 <GUI_X_Init>
 80099f4:	4819      	ldr	r0, [pc, #100]	; (8009a5c <GUI_Init+0xa0>)
 80099f6:	f7ff ff2f 	bl	8009858 <_InitContext>
 80099fa:	f7fe fdc3 	bl	8008584 <emWin_LCD_Init>
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	f7fe faa4 	bl	8007f4c <LCD_GetXSizeDisplay>
 8009a04:	4603      	mov	r3, r0
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d004      	beq.n	8009a14 <GUI_Init+0x58>
 8009a0a:	f7fe faa5 	bl	8007f58 <LCD_GetYSizeDisplay>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d109      	bne.n	8009a28 <GUI_Init+0x6c>
 8009a14:	f7fe fa8a 	bl	8007f2c <LCD_GetXSizeMax>
 8009a18:	4604      	mov	r4, r0
 8009a1a:	f7fe fa8a 	bl	8007f32 <LCD_GetYSizeMax>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	4620      	mov	r0, r4
 8009a22:	4619      	mov	r1, r3
 8009a24:	f7fe fa88 	bl	8007f38 <LCD_SetDisplaySize>
 8009a28:	2000      	movs	r0, #0
 8009a2a:	2100      	movs	r1, #0
 8009a2c:	f002 fd36 	bl	800c49c <GUI_SetOrg>
 8009a30:	f7fc ff10 	bl	8006854 <WM_Init>
 8009a34:	4b0a      	ldr	r3, [pc, #40]	; (8009a60 <GUI_Init+0xa4>)
 8009a36:	2201      	movs	r2, #1
 8009a38:	701a      	strb	r2, [r3, #0]
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	370c      	adds	r7, #12
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd90      	pop	{r4, r7, pc}
 8009a44:	e0002000 	.word	0xe0002000
 8009a48:	40023008 	.word	0x40023008
 8009a4c:	40023000 	.word	0x40023000
 8009a50:	f407a5c2 	.word	0xf407a5c2
 8009a54:	b5e8b5cd 	.word	0xb5e8b5cd
 8009a58:	200195d6 	.word	0x200195d6
 8009a5c:	20019168 	.word	0x20019168
 8009a60:	200195f4 	.word	0x200195f4

08009a64 <GL_FillCircle>:
 8009a64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a68:	f240 29c3 	movw	r9, #707	; 0x2c3
 8009a6c:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8009b24 <GL_FillCircle+0xc0>
 8009a70:	fb09 f902 	mul.w	r9, r9, r2
 8009a74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009a78:	fb99 f9f3 	sdiv	r9, r9, r3
 8009a7c:	f8d8 3000 	ldr.w	r3, [r8]
 8009a80:	f04f 0b02 	mov.w	fp, #2
 8009a84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a86:	4606      	mov	r6, r0
 8009a88:	fb92 fbfb 	sdiv	fp, r2, fp
 8009a8c:	1a80      	subs	r0, r0, r2
 8009a8e:	4614      	mov	r4, r2
 8009a90:	fb02 bb02 	mla	fp, r2, r2, fp
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	18b2      	adds	r2, r6, r2
 8009a98:	460f      	mov	r7, r1
 8009a9a:	4798      	blx	r3
 8009a9c:	f109 0901 	add.w	r9, r9, #1
 8009aa0:	2501      	movs	r5, #1
 8009aa2:	454d      	cmp	r5, r9
 8009aa4:	dc3a      	bgt.n	8009b1c <GL_FillCircle+0xb8>
 8009aa6:	fb04 f304 	mul.w	r3, r4, r4
 8009aaa:	fb05 3305 	mla	r3, r5, r5, r3
 8009aae:	455b      	cmp	r3, fp
 8009ab0:	dd1b      	ble.n	8009aea <GL_FillCircle+0x86>
 8009ab2:	454c      	cmp	r4, r9
 8009ab4:	dd18      	ble.n	8009ae8 <GL_FillCircle+0x84>
 8009ab6:	f8d8 2000 	ldr.w	r2, [r8]
 8009aba:	1c73      	adds	r3, r6, #1
 8009abc:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8009abe:	f106 3aff 	add.w	sl, r6, #4294967295
 8009ac2:	1b5b      	subs	r3, r3, r5
 8009ac4:	44aa      	add	sl, r5
 8009ac6:	f8d2 c000 	ldr.w	ip, [r2]
 8009aca:	9301      	str	r3, [sp, #4]
 8009acc:	4618      	mov	r0, r3
 8009ace:	1939      	adds	r1, r7, r4
 8009ad0:	4652      	mov	r2, sl
 8009ad2:	47e0      	blx	ip
 8009ad4:	f8d8 2000 	ldr.w	r2, [r8]
 8009ad8:	9b01      	ldr	r3, [sp, #4]
 8009ada:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8009adc:	4618      	mov	r0, r3
 8009ade:	f8d2 c000 	ldr.w	ip, [r2]
 8009ae2:	1b39      	subs	r1, r7, r4
 8009ae4:	4652      	mov	r2, sl
 8009ae6:	47e0      	blx	ip
 8009ae8:	3c01      	subs	r4, #1
 8009aea:	f8d8 2000 	ldr.w	r2, [r8]
 8009aee:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8009af0:	1b33      	subs	r3, r6, r4
 8009af2:	eb06 0a04 	add.w	sl, r6, r4
 8009af6:	f8d2 c000 	ldr.w	ip, [r2]
 8009afa:	9301      	str	r3, [sp, #4]
 8009afc:	4618      	mov	r0, r3
 8009afe:	19e9      	adds	r1, r5, r7
 8009b00:	4652      	mov	r2, sl
 8009b02:	47e0      	blx	ip
 8009b04:	f8d8 2000 	ldr.w	r2, [r8]
 8009b08:	9b01      	ldr	r3, [sp, #4]
 8009b0a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8009b0c:	1b79      	subs	r1, r7, r5
 8009b0e:	f8d2 c000 	ldr.w	ip, [r2]
 8009b12:	4618      	mov	r0, r3
 8009b14:	4652      	mov	r2, sl
 8009b16:	47e0      	blx	ip
 8009b18:	3501      	adds	r5, #1
 8009b1a:	e7c2      	b.n	8009aa2 <GL_FillCircle+0x3e>
 8009b1c:	b003      	add	sp, #12
 8009b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b22:	bf00      	nop
 8009b24:	20000018 	.word	0x20000018

08009b28 <GUIPROP__FindChar>:
 8009b28:	b138      	cbz	r0, 8009b3a <GUIPROP__FindChar+0x12>
 8009b2a:	8803      	ldrh	r3, [r0, #0]
 8009b2c:	428b      	cmp	r3, r1
 8009b2e:	d802      	bhi.n	8009b36 <GUIPROP__FindChar+0xe>
 8009b30:	8843      	ldrh	r3, [r0, #2]
 8009b32:	428b      	cmp	r3, r1
 8009b34:	d201      	bcs.n	8009b3a <GUIPROP__FindChar+0x12>
 8009b36:	6880      	ldr	r0, [r0, #8]
 8009b38:	e7f6      	b.n	8009b28 <GUIPROP__FindChar>
 8009b3a:	4770      	bx	lr

08009b3c <GUIPROP_DispChar>:
 8009b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b40:	4c38      	ldr	r4, [pc, #224]	; (8009c24 <GUIPROP_DispChar+0xe8>)
 8009b42:	6823      	ldr	r3, [r4, #0]
 8009b44:	f9b3 902a 	ldrsh.w	r9, [r3, #42]	; 0x2a
 8009b48:	69db      	ldr	r3, [r3, #28]
 8009b4a:	4605      	mov	r5, r0
 8009b4c:	b089      	sub	sp, #36	; 0x24
 8009b4e:	69d8      	ldr	r0, [r3, #28]
 8009b50:	4629      	mov	r1, r5
 8009b52:	f7ff ffe9 	bl	8009b28 <GUIPROP__FindChar>
 8009b56:	2800      	cmp	r0, #0
 8009b58:	d061      	beq.n	8009c1e <GUIPROP_DispChar+0xe2>
 8009b5a:	f8b0 8000 	ldrh.w	r8, [r0]
 8009b5e:	6847      	ldr	r7, [r0, #4]
 8009b60:	ebc8 0805 	rsb	r8, r8, r5
 8009b64:	eb07 06c8 	add.w	r6, r7, r8, lsl #3
 8009b68:	4648      	mov	r0, r9
 8009b6a:	f896 b002 	ldrb.w	fp, [r6, #2]
 8009b6e:	f7fe fa63 	bl	8008038 <LCD_SetDrawMode>
 8009b72:	6825      	ldr	r5, [r4, #0]
 8009b74:	f817 2038 	ldrb.w	r2, [r7, r8, lsl #3]
 8009b78:	f8d5 e01c 	ldr.w	lr, [r5, #28]
 8009b7c:	f9b5 1024 	ldrsh.w	r1, [r5, #36]	; 0x24
 8009b80:	f89e c01a 	ldrb.w	ip, [lr, #26]
 8009b84:	f89e 3018 	ldrb.w	r3, [lr, #24]
 8009b88:	9306      	str	r3, [sp, #24]
 8009b8a:	4682      	mov	sl, r0
 8009b8c:	f9b5 0022 	ldrsh.w	r0, [r5, #34]	; 0x22
 8009b90:	f8cd c000 	str.w	ip, [sp]
 8009b94:	f89e e01b 	ldrb.w	lr, [lr, #27]
 8009b98:	f8cd e004 	str.w	lr, [sp, #4]
 8009b9c:	f04f 0e01 	mov.w	lr, #1
 8009ba0:	f8cd b00c 	str.w	fp, [sp, #12]
 8009ba4:	f8cd e008 	str.w	lr, [sp, #8]
 8009ba8:	6873      	ldr	r3, [r6, #4]
 8009baa:	9304      	str	r3, [sp, #16]
 8009bac:	6bad      	ldr	r5, [r5, #56]	; 0x38
 8009bae:	9b06      	ldr	r3, [sp, #24]
 8009bb0:	9505      	str	r5, [sp, #20]
 8009bb2:	f7fe fbcb 	bl	800834c <LCD_DrawBitmap>
 8009bb6:	6823      	ldr	r3, [r4, #0]
 8009bb8:	69da      	ldr	r2, [r3, #28]
 8009bba:	f892 b019 	ldrb.w	fp, [r2, #25]
 8009bbe:	7e11      	ldrb	r1, [r2, #24]
 8009bc0:	458b      	cmp	fp, r1
 8009bc2:	d920      	bls.n	8009c06 <GUIPROP_DispChar+0xca>
 8009bc4:	f1b9 0f02 	cmp.w	r9, #2
 8009bc8:	7ed5      	ldrb	r5, [r2, #27]
 8009bca:	d01c      	beq.n	8009c06 <GUIPROP_DispChar+0xca>
 8009bcc:	9107      	str	r1, [sp, #28]
 8009bce:	f002 fc86 	bl	800c4de <GUI_GetColor>
 8009bd2:	4681      	mov	r9, r0
 8009bd4:	f002 fc7c 	bl	800c4d0 <GUI_GetBkColor>
 8009bd8:	f7ff f9a8 	bl	8008f2c <GUI_SetColor>
 8009bdc:	6824      	ldr	r4, [r4, #0]
 8009bde:	f817 7038 	ldrb.w	r7, [r7, r8, lsl #3]
 8009be2:	69e2      	ldr	r2, [r4, #28]
 8009be4:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 8009be8:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8009bec:	7ed2      	ldrb	r2, [r2, #27]
 8009bee:	9907      	ldr	r1, [sp, #28]
 8009bf0:	fb07 0202 	mla	r2, r7, r2, r0
 8009bf4:	fb01 3105 	mla	r1, r1, r5, r3
 8009bf8:	fb0b 3305 	mla	r3, fp, r5, r3
 8009bfc:	f7fe fa9e 	bl	800813c <LCD_FillRect>
 8009c00:	4648      	mov	r0, r9
 8009c02:	f7ff f993 	bl	8008f2c <GUI_SetColor>
 8009c06:	4650      	mov	r0, sl
 8009c08:	f7fe fa16 	bl	8008038 <LCD_SetDrawMode>
 8009c0c:	4b05      	ldr	r3, [pc, #20]	; (8009c24 <GUIPROP_DispChar+0xe8>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	69da      	ldr	r2, [r3, #28]
 8009c12:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8009c14:	7e90      	ldrb	r0, [r2, #26]
 8009c16:	7872      	ldrb	r2, [r6, #1]
 8009c18:	fb00 1202 	mla	r2, r0, r2, r1
 8009c1c:	845a      	strh	r2, [r3, #34]	; 0x22
 8009c1e:	b009      	add	sp, #36	; 0x24
 8009c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c24:	20000018 	.word	0x20000018

08009c28 <GUIPROP_GetCharDistX>:
 8009c28:	4b0d      	ldr	r3, [pc, #52]	; (8009c60 <GUIPROP_GetCharDistX+0x38>)
 8009c2a:	b570      	push	{r4, r5, r6, lr}
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	69dd      	ldr	r5, [r3, #28]
 8009c30:	4606      	mov	r6, r0
 8009c32:	460c      	mov	r4, r1
 8009c34:	69e8      	ldr	r0, [r5, #28]
 8009c36:	4631      	mov	r1, r6
 8009c38:	f7ff ff76 	bl	8009b28 <GUIPROP__FindChar>
 8009c3c:	b170      	cbz	r0, 8009c5c <GUIPROP_GetCharDistX+0x34>
 8009c3e:	8803      	ldrh	r3, [r0, #0]
 8009c40:	6842      	ldr	r2, [r0, #4]
 8009c42:	1af6      	subs	r6, r6, r3
 8009c44:	eb02 03c6 	add.w	r3, r2, r6, lsl #3
 8009c48:	7858      	ldrb	r0, [r3, #1]
 8009c4a:	7eab      	ldrb	r3, [r5, #26]
 8009c4c:	fb10 f003 	smulbb	r0, r0, r3
 8009c50:	b124      	cbz	r4, 8009c5c <GUIPROP_GetCharDistX+0x34>
 8009c52:	f812 2036 	ldrb.w	r2, [r2, r6, lsl #3]
 8009c56:	fb12 f303 	smulbb	r3, r2, r3
 8009c5a:	6023      	str	r3, [r4, #0]
 8009c5c:	bd70      	pop	{r4, r5, r6, pc}
 8009c5e:	bf00      	nop
 8009c60:	20000018 	.word	0x20000018

08009c64 <GUIPROP_GetFontInfo>:
 8009c64:	2301      	movs	r3, #1
 8009c66:	800b      	strh	r3, [r1, #0]
 8009c68:	4770      	bx	lr

08009c6a <GUIPROP_IsInFont>:
 8009c6a:	b508      	push	{r3, lr}
 8009c6c:	69c0      	ldr	r0, [r0, #28]
 8009c6e:	f7ff ff5b 	bl	8009b28 <GUIPROP__FindChar>
 8009c72:	3000      	adds	r0, #0
 8009c74:	bf18      	it	ne
 8009c76:	2001      	movne	r0, #1
 8009c78:	bd08      	pop	{r3, pc}
	...

08009c7c <GUIMONO_DispChar>:
 8009c7c:	4b52      	ldr	r3, [pc, #328]	; (8009dc8 <GUIMONO_DispChar+0x14c>)
 8009c7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	69d9      	ldr	r1, [r3, #28]
 8009c86:	8c5f      	ldrh	r7, [r3, #34]	; 0x22
 8009c88:	69cc      	ldr	r4, [r1, #28]
 8009c8a:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
 8009c8c:	89a2      	ldrh	r2, [r4, #12]
 8009c8e:	4290      	cmp	r0, r2
 8009c90:	b08b      	sub	sp, #44	; 0x2c
 8009c92:	d308      	bcc.n	8009ca6 <GUIMONO_DispChar+0x2a>
 8009c94:	89e6      	ldrh	r6, [r4, #14]
 8009c96:	4286      	cmp	r6, r0
 8009c98:	d305      	bcc.n	8009ca6 <GUIMONO_DispChar+0x2a>
 8009c9a:	f8d4 9000 	ldr.w	r9, [r4]
 8009c9e:	1a82      	subs	r2, r0, r2
 8009ca0:	f04f 3bff 	mov.w	fp, #4294967295
 8009ca4:	e015      	b.n	8009cd2 <GUIMONO_DispChar+0x56>
 8009ca6:	68a2      	ldr	r2, [r4, #8]
 8009ca8:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8009cac:	2a00      	cmp	r2, #0
 8009cae:	f000 8081 	beq.w	8009db4 <GUIMONO_DispChar+0x138>
 8009cb2:	8816      	ldrh	r6, [r2, #0]
 8009cb4:	42b0      	cmp	r0, r6
 8009cb6:	d37d      	bcc.n	8009db4 <GUIMONO_DispChar+0x138>
 8009cb8:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 8009cbc:	4584      	cmp	ip, r0
 8009cbe:	d379      	bcc.n	8009db4 <GUIMONO_DispChar+0x138>
 8009cc0:	6852      	ldr	r2, [r2, #4]
 8009cc2:	1b80      	subs	r0, r0, r6
 8009cc4:	b280      	uxth	r0, r0
 8009cc6:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8009cca:	f932 2020 	ldrsh.w	r2, [r2, r0, lsl #2]
 8009cce:	f9b6 b002 	ldrsh.w	fp, [r6, #2]
 8009cd2:	1c50      	adds	r0, r2, #1
 8009cd4:	d06e      	beq.n	8009db4 <GUIMONO_DispChar+0x138>
 8009cd6:	f891 8018 	ldrb.w	r8, [r1, #24]
 8009cda:	7ca1      	ldrb	r1, [r4, #18]
 8009cdc:	f8b3 a02a 	ldrh.w	sl, [r3, #42]	; 0x2a
 8009ce0:	7c26      	ldrb	r6, [r4, #16]
 8009ce2:	9206      	str	r2, [sp, #24]
 8009ce4:	fb18 f101 	smulbb	r1, r8, r1
 8009ce8:	9107      	str	r1, [sp, #28]
 8009cea:	fa0f f18a 	sxth.w	r1, sl
 8009cee:	4608      	mov	r0, r1
 8009cf0:	9108      	str	r1, [sp, #32]
 8009cf2:	f7fe f9a1 	bl	8008038 <LCD_SetDrawMode>
 8009cf6:	4934      	ldr	r1, [pc, #208]	; (8009dc8 <GUIMONO_DispChar+0x14c>)
 8009cf8:	9009      	str	r0, [sp, #36]	; 0x24
 8009cfa:	680b      	ldr	r3, [r1, #0]
 8009cfc:	9a06      	ldr	r2, [sp, #24]
 8009cfe:	69d9      	ldr	r1, [r3, #28]
 8009d00:	7e88      	ldrb	r0, [r1, #26]
 8009d02:	9000      	str	r0, [sp, #0]
 8009d04:	7ec9      	ldrb	r1, [r1, #27]
 8009d06:	9101      	str	r1, [sp, #4]
 8009d08:	2101      	movs	r1, #1
 8009d0a:	9102      	str	r1, [sp, #8]
 8009d0c:	7ca1      	ldrb	r1, [r4, #18]
 8009d0e:	9103      	str	r1, [sp, #12]
 8009d10:	9907      	ldr	r1, [sp, #28]
 8009d12:	fb01 9202 	mla	r2, r1, r2, r9
 8009d16:	9204      	str	r2, [sp, #16]
 8009d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d1a:	9305      	str	r3, [sp, #20]
 8009d1c:	b23f      	sxth	r7, r7
 8009d1e:	b22d      	sxth	r5, r5
 8009d20:	4638      	mov	r0, r7
 8009d22:	4629      	mov	r1, r5
 8009d24:	4632      	mov	r2, r6
 8009d26:	4643      	mov	r3, r8
 8009d28:	f7fe fb10 	bl	800834c <LCD_DrawBitmap>
 8009d2c:	f1bb 3fff 	cmp.w	fp, #4294967295
 8009d30:	d01b      	beq.n	8009d6a <GUIMONO_DispChar+0xee>
 8009d32:	f04a 0002 	orr.w	r0, sl, #2
 8009d36:	b200      	sxth	r0, r0
 8009d38:	f7fe f97e 	bl	8008038 <LCD_SetDrawMode>
 8009d3c:	4a22      	ldr	r2, [pc, #136]	; (8009dc8 <GUIMONO_DispChar+0x14c>)
 8009d3e:	6813      	ldr	r3, [r2, #0]
 8009d40:	69da      	ldr	r2, [r3, #28]
 8009d42:	7e91      	ldrb	r1, [r2, #26]
 8009d44:	9100      	str	r1, [sp, #0]
 8009d46:	7ed2      	ldrb	r2, [r2, #27]
 8009d48:	9201      	str	r2, [sp, #4]
 8009d4a:	2101      	movs	r1, #1
 8009d4c:	9102      	str	r1, [sp, #8]
 8009d4e:	9907      	ldr	r1, [sp, #28]
 8009d50:	7ca2      	ldrb	r2, [r4, #18]
 8009d52:	9203      	str	r2, [sp, #12]
 8009d54:	fb01 920b 	mla	r2, r1, fp, r9
 8009d58:	9204      	str	r2, [sp, #16]
 8009d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d5c:	9305      	str	r3, [sp, #20]
 8009d5e:	4638      	mov	r0, r7
 8009d60:	4629      	mov	r1, r5
 8009d62:	4632      	mov	r2, r6
 8009d64:	4643      	mov	r3, r8
 8009d66:	f7fe faf1 	bl	800834c <LCD_DrawBitmap>
 8009d6a:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8009dc8 <GUIMONO_DispChar+0x14c>
 8009d6e:	f8d8 3000 	ldr.w	r3, [r8]
 8009d72:	69db      	ldr	r3, [r3, #28]
 8009d74:	7e5a      	ldrb	r2, [r3, #25]
 8009d76:	7e1b      	ldrb	r3, [r3, #24]
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	d917      	bls.n	8009dac <GUIMONO_DispChar+0x130>
 8009d7c:	9a08      	ldr	r2, [sp, #32]
 8009d7e:	2a02      	cmp	r2, #2
 8009d80:	d014      	beq.n	8009dac <GUIMONO_DispChar+0x130>
 8009d82:	f08a 0004 	eor.w	r0, sl, #4
 8009d86:	b200      	sxth	r0, r0
 8009d88:	f7fe f956 	bl	8008038 <LCD_SetDrawMode>
 8009d8c:	f8d8 3000 	ldr.w	r3, [r8]
 8009d90:	69db      	ldr	r3, [r3, #28]
 8009d92:	f893 e018 	ldrb.w	lr, [r3, #24]
 8009d96:	7ed9      	ldrb	r1, [r3, #27]
 8009d98:	7e9a      	ldrb	r2, [r3, #26]
 8009d9a:	7e5b      	ldrb	r3, [r3, #25]
 8009d9c:	4638      	mov	r0, r7
 8009d9e:	fb0e 5101 	mla	r1, lr, r1, r5
 8009da2:	fb06 7202 	mla	r2, r6, r2, r7
 8009da6:	442b      	add	r3, r5
 8009da8:	f7fe f9c8 	bl	800813c <LCD_FillRect>
 8009dac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dae:	b2d8      	uxtb	r0, r3
 8009db0:	f7fe f942 	bl	8008038 <LCD_SetDrawMode>
 8009db4:	4b04      	ldr	r3, [pc, #16]	; (8009dc8 <GUIMONO_DispChar+0x14c>)
 8009db6:	7c61      	ldrb	r1, [r4, #17]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8009dbc:	440a      	add	r2, r1
 8009dbe:	845a      	strh	r2, [r3, #34]	; 0x22
 8009dc0:	b00b      	add	sp, #44	; 0x2c
 8009dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dc6:	bf00      	nop
 8009dc8:	20000018 	.word	0x20000018

08009dcc <GUIMONO_GetCharDistX>:
 8009dcc:	4b04      	ldr	r3, [pc, #16]	; (8009de0 <GUIMONO_GetCharDistX+0x14>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	69db      	ldr	r3, [r3, #28]
 8009dd2:	69db      	ldr	r3, [r3, #28]
 8009dd4:	b109      	cbz	r1, 8009dda <GUIMONO_GetCharDistX+0xe>
 8009dd6:	7c1a      	ldrb	r2, [r3, #16]
 8009dd8:	600a      	str	r2, [r1, #0]
 8009dda:	7c58      	ldrb	r0, [r3, #17]
 8009ddc:	4770      	bx	lr
 8009dde:	bf00      	nop
 8009de0:	20000018 	.word	0x20000018

08009de4 <GUIMONO_GetFontInfo>:
 8009de4:	2302      	movs	r3, #2
 8009de6:	800b      	strh	r3, [r1, #0]
 8009de8:	4770      	bx	lr

08009dea <GUIMONO_IsInFont>:
 8009dea:	69c3      	ldr	r3, [r0, #28]
 8009dec:	899a      	ldrh	r2, [r3, #12]
 8009dee:	428a      	cmp	r2, r1
 8009df0:	d802      	bhi.n	8009df8 <GUIMONO_IsInFont+0xe>
 8009df2:	89da      	ldrh	r2, [r3, #14]
 8009df4:	428a      	cmp	r2, r1
 8009df6:	d20f      	bcs.n	8009e18 <GUIMONO_IsInFont+0x2e>
 8009df8:	6898      	ldr	r0, [r3, #8]
 8009dfa:	b180      	cbz	r0, 8009e1e <GUIMONO_IsInFont+0x34>
 8009dfc:	8803      	ldrh	r3, [r0, #0]
 8009dfe:	4299      	cmp	r1, r3
 8009e00:	d30c      	bcc.n	8009e1c <GUIMONO_IsInFont+0x32>
 8009e02:	8842      	ldrh	r2, [r0, #2]
 8009e04:	428a      	cmp	r2, r1
 8009e06:	d309      	bcc.n	8009e1c <GUIMONO_IsInFont+0x32>
 8009e08:	1ac9      	subs	r1, r1, r3
 8009e0a:	6842      	ldr	r2, [r0, #4]
 8009e0c:	f832 0021 	ldrh.w	r0, [r2, r1, lsl #2]
 8009e10:	43c0      	mvns	r0, r0
 8009e12:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 8009e16:	4770      	bx	lr
 8009e18:	2001      	movs	r0, #1
 8009e1a:	4770      	bx	lr
 8009e1c:	2000      	movs	r0, #0
 8009e1e:	4770      	bx	lr

08009e20 <_Log2VisBuffered>:
 8009e20:	4770      	bx	lr
	...

08009e24 <_DispLine>:
 8009e24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e26:	4615      	mov	r5, r2
 8009e28:	ab02      	add	r3, sp, #8
 8009e2a:	4a1a      	ldr	r2, [pc, #104]	; (8009e94 <_DispLine+0x70>)
 8009e2c:	f843 1d08 	str.w	r1, [r3, #-8]!
 8009e30:	9001      	str	r0, [sp, #4]
 8009e32:	6812      	ldr	r2, [r2, #0]
 8009e34:	4c18      	ldr	r4, [pc, #96]	; (8009e98 <_DispLine+0x74>)
 8009e36:	4669      	mov	r1, sp
 8009e38:	4790      	blx	r2
 8009e3a:	6823      	ldr	r3, [r4, #0]
 8009e3c:	9001      	str	r0, [sp, #4]
 8009e3e:	6958      	ldr	r0, [r3, #20]
 8009e40:	b958      	cbnz	r0, 8009e5a <_DispLine+0x36>
 8009e42:	2001      	movs	r0, #1
 8009e44:	f7fe fd1c 	bl	8008880 <GUI__ManageCache>
 8009e48:	6823      	ldr	r3, [r4, #0]
 8009e4a:	69db      	ldr	r3, [r3, #28]
 8009e4c:	695b      	ldr	r3, [r3, #20]
 8009e4e:	b1bb      	cbz	r3, 8009e80 <_DispLine+0x5c>
 8009e50:	689b      	ldr	r3, [r3, #8]
 8009e52:	9801      	ldr	r0, [sp, #4]
 8009e54:	9900      	ldr	r1, [sp, #0]
 8009e56:	4798      	blx	r3
 8009e58:	e017      	b.n	8009e8a <_DispLine+0x66>
 8009e5a:	4629      	mov	r1, r5
 8009e5c:	f7ff f887 	bl	8008f6e <GUI_RectsIntersect>
 8009e60:	2800      	cmp	r0, #0
 8009e62:	d1ee      	bne.n	8009e42 <_DispLine+0x1e>
 8009e64:	e014      	b.n	8009e90 <_DispLine+0x6c>
 8009e66:	a801      	add	r0, sp, #4
 8009e68:	f7fe fd78 	bl	800895c <GUI_UC__GetCharCodeInc>
 8009e6c:	6823      	ldr	r3, [r4, #0]
 8009e6e:	69db      	ldr	r3, [r3, #28]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4605      	mov	r5, r0
 8009e74:	4798      	blx	r3
 8009e76:	4b09      	ldr	r3, [pc, #36]	; (8009e9c <_DispLine+0x78>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	b10b      	cbz	r3, 8009e80 <_DispLine+0x5c>
 8009e7c:	4628      	mov	r0, r5
 8009e7e:	4798      	blx	r3
 8009e80:	9b00      	ldr	r3, [sp, #0]
 8009e82:	3b01      	subs	r3, #1
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	9300      	str	r3, [sp, #0]
 8009e88:	daed      	bge.n	8009e66 <_DispLine+0x42>
 8009e8a:	2000      	movs	r0, #0
 8009e8c:	f7fe fcf8 	bl	8008880 <GUI__ManageCache>
 8009e90:	b003      	add	sp, #12
 8009e92:	bd30      	pop	{r4, r5, pc}
 8009e94:	20000020 	.word	0x20000020
 8009e98:	20000018 	.word	0x20000018
 8009e9c:	200195f0 	.word	0x200195f0

08009ea0 <GUI__GetLineNumChars>:
 8009ea0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ea2:	460d      	mov	r5, r1
 8009ea4:	9001      	str	r0, [sp, #4]
 8009ea6:	4604      	mov	r4, r0
 8009ea8:	b198      	cbz	r0, 8009ed2 <GUI__GetLineNumChars+0x32>
 8009eaa:	4b0b      	ldr	r3, [pc, #44]	; (8009ed8 <GUI__GetLineNumChars+0x38>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	69db      	ldr	r3, [r3, #28]
 8009eb0:	695b      	ldr	r3, [r3, #20]
 8009eb2:	b10b      	cbz	r3, 8009eb8 <GUI__GetLineNumChars+0x18>
 8009eb4:	685b      	ldr	r3, [r3, #4]
 8009eb6:	b90b      	cbnz	r3, 8009ebc <GUI__GetLineNumChars+0x1c>
 8009eb8:	2400      	movs	r4, #0
 8009eba:	e008      	b.n	8009ece <GUI__GetLineNumChars+0x2e>
 8009ebc:	4798      	blx	r3
 8009ebe:	e009      	b.n	8009ed4 <GUI__GetLineNumChars+0x34>
 8009ec0:	a801      	add	r0, sp, #4
 8009ec2:	f7fe fd4b 	bl	800895c <GUI_UC__GetCharCodeInc>
 8009ec6:	b120      	cbz	r0, 8009ed2 <GUI__GetLineNumChars+0x32>
 8009ec8:	280a      	cmp	r0, #10
 8009eca:	d002      	beq.n	8009ed2 <GUI__GetLineNumChars+0x32>
 8009ecc:	3401      	adds	r4, #1
 8009ece:	42ac      	cmp	r4, r5
 8009ed0:	dbf6      	blt.n	8009ec0 <GUI__GetLineNumChars+0x20>
 8009ed2:	4620      	mov	r0, r4
 8009ed4:	b003      	add	sp, #12
 8009ed6:	bd30      	pop	{r4, r5, pc}
 8009ed8:	20000018 	.word	0x20000018

08009edc <GUI__GetOverlap>:
 8009edc:	b513      	push	{r0, r1, r4, lr}
 8009ede:	a902      	add	r1, sp, #8
 8009ee0:	2400      	movs	r4, #0
 8009ee2:	f841 4d04 	str.w	r4, [r1, #-4]!
 8009ee6:	f000 f8b7 	bl	800a058 <GUI_GetCharDistXEx>
 8009eea:	9b01      	ldr	r3, [sp, #4]
 8009eec:	4283      	cmp	r3, r0
 8009eee:	bfcc      	ite	gt
 8009ef0:	ebc0 0003 	rsbgt	r0, r0, r3
 8009ef4:	4620      	movle	r0, r4
 8009ef6:	b002      	add	sp, #8
 8009ef8:	bd10      	pop	{r4, pc}
	...

08009efc <GUI__GetLineDistX>:
 8009efc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009efe:	4a15      	ldr	r2, [pc, #84]	; (8009f54 <GUI__GetLineDistX+0x58>)
 8009f00:	9001      	str	r0, [sp, #4]
 8009f02:	ab02      	add	r3, sp, #8
 8009f04:	6812      	ldr	r2, [r2, #0]
 8009f06:	f843 1d08 	str.w	r1, [r3, #-8]!
 8009f0a:	4669      	mov	r1, sp
 8009f0c:	4790      	blx	r2
 8009f0e:	9001      	str	r0, [sp, #4]
 8009f10:	b1f0      	cbz	r0, 8009f50 <GUI__GetLineDistX+0x54>
 8009f12:	4b11      	ldr	r3, [pc, #68]	; (8009f58 <GUI__GetLineDistX+0x5c>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	69db      	ldr	r3, [r3, #28]
 8009f18:	695b      	ldr	r3, [r3, #20]
 8009f1a:	b10b      	cbz	r3, 8009f20 <GUI__GetLineDistX+0x24>
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	b913      	cbnz	r3, 8009f26 <GUI__GetLineDistX+0x2a>
 8009f20:	2500      	movs	r5, #0
 8009f22:	462c      	mov	r4, r5
 8009f24:	e002      	b.n	8009f2c <GUI__GetLineDistX+0x30>
 8009f26:	9900      	ldr	r1, [sp, #0]
 8009f28:	4798      	blx	r3
 8009f2a:	e011      	b.n	8009f50 <GUI__GetLineDistX+0x54>
 8009f2c:	9b00      	ldr	r3, [sp, #0]
 8009f2e:	3b01      	subs	r3, #1
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	9300      	str	r3, [sp, #0]
 8009f34:	db07      	blt.n	8009f46 <GUI__GetLineDistX+0x4a>
 8009f36:	a801      	add	r0, sp, #4
 8009f38:	f7fe fd10 	bl	800895c <GUI_UC__GetCharCodeInc>
 8009f3c:	4605      	mov	r5, r0
 8009f3e:	f000 f881 	bl	800a044 <GUI_GetCharDistX>
 8009f42:	4404      	add	r4, r0
 8009f44:	e7f2      	b.n	8009f2c <GUI__GetLineDistX+0x30>
 8009f46:	4628      	mov	r0, r5
 8009f48:	f7ff ffc8 	bl	8009edc <GUI__GetOverlap>
 8009f4c:	4420      	add	r0, r4
 8009f4e:	e7ff      	b.n	8009f50 <GUI__GetLineDistX+0x54>
 8009f50:	b003      	add	sp, #12
 8009f52:	bd30      	pop	{r4, r5, pc}
 8009f54:	20000020 	.word	0x20000020
 8009f58:	20000018 	.word	0x20000018

08009f5c <GUI__DispLine>:
 8009f5c:	4b27      	ldr	r3, [pc, #156]	; (8009ffc <GUI__DispLine+0xa0>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009f62:	4605      	mov	r5, r0
 8009f64:	460c      	mov	r4, r1
 8009f66:	b163      	cbz	r3, 8009f82 <GUI__DispLine+0x26>
 8009f68:	2000      	movs	r0, #0
 8009f6a:	f7fc fb8b 	bl	8006684 <WM__InitIVRSearch>
 8009f6e:	2800      	cmp	r0, #0
 8009f70:	d041      	beq.n	8009ff6 <GUI__DispLine+0x9a>
 8009f72:	4628      	mov	r0, r5
 8009f74:	4621      	mov	r1, r4
 8009f76:	466a      	mov	r2, sp
 8009f78:	f7ff ff54 	bl	8009e24 <_DispLine>
 8009f7c:	f7fc fac0 	bl	8006500 <WM__GetNextIVR>
 8009f80:	e7f5      	b.n	8009f6e <GUI__DispLine+0x12>
 8009f82:	6810      	ldr	r0, [r2, #0]
 8009f84:	6851      	ldr	r1, [r2, #4]
 8009f86:	4e1e      	ldr	r6, [pc, #120]	; (800a000 <GUI__DispLine+0xa4>)
 8009f88:	466b      	mov	r3, sp
 8009f8a:	c303      	stmia	r3!, {r0, r1}
 8009f8c:	6833      	ldr	r3, [r6, #0]
 8009f8e:	f8bd 1000 	ldrh.w	r1, [sp]
 8009f92:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8009f96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f9a:	4411      	add	r1, r2
 8009f9c:	f8ad 1000 	strh.w	r1, [sp]
 8009fa0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8009fa4:	4419      	add	r1, r3
 8009fa6:	f8ad 1002 	strh.w	r1, [sp, #2]
 8009faa:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8009fae:	440a      	add	r2, r1
 8009fb0:	f8ad 2004 	strh.w	r2, [sp, #4]
 8009fb4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8009fb8:	4668      	mov	r0, sp
 8009fba:	4413      	add	r3, r2
 8009fbc:	f8ad 3006 	strh.w	r3, [sp, #6]
 8009fc0:	f7fc fb60 	bl	8006684 <WM__InitIVRSearch>
 8009fc4:	6833      	ldr	r3, [r6, #0]
 8009fc6:	b940      	cbnz	r0, 8009fda <GUI__DispLine+0x7e>
 8009fc8:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8009fca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009fcc:	1a8a      	subs	r2, r1, r2
 8009fce:	845a      	strh	r2, [r3, #34]	; 0x22
 8009fd0:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 8009fd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009fd4:	1a8a      	subs	r2, r1, r2
 8009fd6:	849a      	strh	r2, [r3, #36]	; 0x24
 8009fd8:	e00d      	b.n	8009ff6 <GUI__DispLine+0x9a>
 8009fda:	f8bd 2000 	ldrh.w	r2, [sp]
 8009fde:	845a      	strh	r2, [r3, #34]	; 0x22
 8009fe0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8009fe4:	849a      	strh	r2, [r3, #36]	; 0x24
 8009fe6:	4628      	mov	r0, r5
 8009fe8:	4621      	mov	r1, r4
 8009fea:	466a      	mov	r2, sp
 8009fec:	f7ff ff1a 	bl	8009e24 <_DispLine>
 8009ff0:	f7fc fa86 	bl	8006500 <WM__GetNextIVR>
 8009ff4:	e7e6      	b.n	8009fc4 <GUI__DispLine+0x68>
 8009ff6:	b002      	add	sp, #8
 8009ff8:	bd70      	pop	{r4, r5, r6, pc}
 8009ffa:	bf00      	nop
 8009ffc:	200195d8 	.word	0x200195d8
 800a000:	20000018 	.word	0x20000018

0800a004 <GUI_GetYAdjust>:
 800a004:	4b0a      	ldr	r3, [pc, #40]	; (800a030 <GUI_GetYAdjust+0x2c>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a00a:	f002 020c 	and.w	r2, r2, #12
 800a00e:	2a08      	cmp	r2, #8
 800a010:	d007      	beq.n	800a022 <GUI_GetYAdjust+0x1e>
 800a012:	2a0c      	cmp	r2, #12
 800a014:	d005      	beq.n	800a022 <GUI_GetYAdjust+0x1e>
 800a016:	2a04      	cmp	r2, #4
 800a018:	d107      	bne.n	800a02a <GUI_GetYAdjust+0x26>
 800a01a:	69db      	ldr	r3, [r3, #28]
 800a01c:	7e18      	ldrb	r0, [r3, #24]
 800a01e:	3801      	subs	r0, #1
 800a020:	4770      	bx	lr
 800a022:	69db      	ldr	r3, [r3, #28]
 800a024:	7e18      	ldrb	r0, [r3, #24]
 800a026:	0840      	lsrs	r0, r0, #1
 800a028:	4770      	bx	lr
 800a02a:	2000      	movs	r0, #0
 800a02c:	4770      	bx	lr
 800a02e:	bf00      	nop
 800a030:	20000018 	.word	0x20000018

0800a034 <GUI_GetFontDistY>:
 800a034:	4b02      	ldr	r3, [pc, #8]	; (800a040 <GUI_GetFontDistY+0xc>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	69db      	ldr	r3, [r3, #28]
 800a03a:	7e58      	ldrb	r0, [r3, #25]
 800a03c:	4770      	bx	lr
 800a03e:	bf00      	nop
 800a040:	20000018 	.word	0x20000018

0800a044 <GUI_GetCharDistX>:
 800a044:	b508      	push	{r3, lr}
 800a046:	4b03      	ldr	r3, [pc, #12]	; (800a054 <GUI_GetCharDistX+0x10>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	69db      	ldr	r3, [r3, #28]
 800a04c:	2100      	movs	r1, #0
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	4798      	blx	r3
 800a052:	bd08      	pop	{r3, pc}
 800a054:	20000018 	.word	0x20000018

0800a058 <GUI_GetCharDistXEx>:
 800a058:	b508      	push	{r3, lr}
 800a05a:	4b03      	ldr	r3, [pc, #12]	; (800a068 <GUI_GetCharDistXEx+0x10>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	69db      	ldr	r3, [r3, #28]
 800a060:	685b      	ldr	r3, [r3, #4]
 800a062:	4798      	blx	r3
 800a064:	bd08      	pop	{r3, pc}
 800a066:	bf00      	nop
 800a068:	20000018 	.word	0x20000018

0800a06c <_DrawArc.isra.0>:
 800a06c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a070:	f8df a2d8 	ldr.w	sl, [pc, #728]	; 800a34c <_DrawArc.isra.0+0x2e0>
 800a074:	ed2d 8b0a 	vpush	{d8-d12}
 800a078:	ee06 2a10 	vmov	s12, r2
 800a07c:	f8da 2000 	ldr.w	r2, [sl]
 800a080:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
 800a084:	7e12      	ldrb	r2, [r2, #24]
 800a086:	ee07 2a10 	vmov	s14, r2
 800a08a:	eeb8 8ac6 	vcvt.f32.s32	s16, s12
 800a08e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800a092:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800a096:	fb04 f703 	mul.w	r7, r4, r3
 800a09a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a09e:	eef0 8a48 	vmov.f32	s17, s16
 800a0a2:	4680      	mov	r8, r0
 800a0a4:	4638      	mov	r0, r7
 800a0a6:	eee7 8a67 	vfms.f32	s17, s14, s15
 800a0aa:	460d      	mov	r5, r1
 800a0ac:	eea7 8a27 	vfma.f32	s16, s14, s15
 800a0b0:	f002 f8e2 	bl	800c278 <GUI__SinHQ>
 800a0b4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a0b6:	435c      	muls	r4, r3
 800a0b8:	ee0a 0a10 	vmov	s20, r0
 800a0bc:	4620      	mov	r0, r4
 800a0be:	f002 f8db 	bl	800c278 <GUI__SinHQ>
 800a0c2:	ee0a 0a90 	vmov	s21, r0
 800a0c6:	4638      	mov	r0, r7
 800a0c8:	f002 f918 	bl	800c2fc <GUI__CosHQ>
 800a0cc:	ee0b 0a90 	vmov	s23, r0
 800a0d0:	4620      	mov	r0, r4
 800a0d2:	f002 f913 	bl	800c2fc <GUI__CosHQ>
 800a0d6:	eeb8 aaca 	vcvt.f32.s32	s20, s20
 800a0da:	eef8 baeb 	vcvt.f32.s32	s23, s23
 800a0de:	ee28 9a8a 	vmul.f32	s18, s17, s20
 800a0e2:	ee28 aa0a 	vmul.f32	s20, s16, s20
 800a0e6:	ee06 0a10 	vmov	s12, r0
 800a0ea:	eebd 9ac9 	vcvt.s32.f32	s18, s18
 800a0ee:	eebd aaca 	vcvt.s32.f32	s20, s20
 800a0f2:	ee28 baab 	vmul.f32	s22, s17, s23
 800a0f6:	ee68 ba2b 	vmul.f32	s23, s16, s23
 800a0fa:	eef8 7ac6 	vcvt.f32.s32	s15, s12
 800a0fe:	ee19 1a10 	vmov	r1, s18
 800a102:	ee1a 2a10 	vmov	r2, s20
 800a106:	eef8 aaea 	vcvt.f32.s32	s21, s21
 800a10a:	eebd bacb 	vcvt.s32.f32	s22, s22
 800a10e:	eefd baeb 	vcvt.s32.f32	s23, s23
 800a112:	ee68 9aaa 	vmul.f32	s19, s17, s21
 800a116:	ee28 caa8 	vmul.f32	s24, s17, s17
 800a11a:	ee68 ca08 	vmul.f32	s25, s16, s16
 800a11e:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800a122:	1409      	asrs	r1, r1, #16
 800a124:	1412      	asrs	r2, r2, #16
 800a126:	ee68 aa2a 	vmul.f32	s21, s16, s21
 800a12a:	ee28 8a27 	vmul.f32	s16, s16, s15
 800a12e:	ee09 1a10 	vmov	s18, r1
 800a132:	ee0a 2a10 	vmov	s20, r2
 800a136:	ee1b 1a10 	vmov	r1, s22
 800a13a:	ee1b 2a90 	vmov	r2, s23
 800a13e:	eefd 9ae9 	vcvt.s32.f32	s19, s19
 800a142:	eefd aaea 	vcvt.s32.f32	s21, s21
 800a146:	eefd 8ae8 	vcvt.s32.f32	s17, s17
 800a14a:	eebd 8ac8 	vcvt.s32.f32	s16, s16
 800a14e:	1409      	asrs	r1, r1, #16
 800a150:	1412      	asrs	r2, r2, #16
 800a152:	ee19 3a90 	vmov	r3, s19
 800a156:	ee1a ea90 	vmov	lr, s21
 800a15a:	ee0b 1a10 	vmov	s22, r1
 800a15e:	ee0b 2a90 	vmov	s23, r2
 800a162:	ee18 1a90 	vmov	r1, s17
 800a166:	ee18 2a10 	vmov	r2, s16
 800a16a:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 800a16e:	141b      	asrs	r3, r3, #16
 800a170:	ea4f 4e2e 	mov.w	lr, lr, asr #16
 800a174:	1412      	asrs	r2, r2, #16
 800a176:	1409      	asrs	r1, r1, #16
 800a178:	ee19 0a10 	vmov	r0, s18
 800a17c:	ee09 3a90 	vmov	s19, r3
 800a180:	ee0a ea90 	vmov	s21, lr
 800a184:	ee08 2a10 	vmov	s16, r2
 800a188:	ee08 1a90 	vmov	s17, r1
 800a18c:	f7f6 f9fc 	bl	8000588 <__aeabi_f2d>
 800a190:	ec41 0b10 	vmov	d0, r0, r1
 800a194:	f002 ff90 	bl	800d0b8 <ceil>
 800a198:	ec51 0b10 	vmov	r0, r1, d0
 800a19c:	f7f6 fce6 	bl	8000b6c <__aeabi_d2iz>
 800a1a0:	eef8 aaea 	vcvt.f32.s32	s21, s21
 800a1a4:	4607      	mov	r7, r0
 800a1a6:	ee1a 0a90 	vmov	r0, s21
 800a1aa:	f7f6 f9ed 	bl	8000588 <__aeabi_f2d>
 800a1ae:	ec41 0b10 	vmov	d0, r0, r1
 800a1b2:	f003 f845 	bl	800d240 <floor>
 800a1b6:	ec51 0b10 	vmov	r0, r1, d0
 800a1ba:	f7f6 fcd7 	bl	8000b6c <__aeabi_d2iz>
 800a1be:	f8da 3000 	ldr.w	r3, [sl]
 800a1c2:	eebc cacc 	vcvt.u32.f32	s24, s24
 800a1c6:	695b      	ldr	r3, [r3, #20]
 800a1c8:	ee1c 6a10 	vmov	r6, s24
 800a1cc:	eefc caec 	vcvt.u32.f32	s25, s25
 800a1d0:	eeb8 aaca 	vcvt.f32.s32	s20, s20
 800a1d4:	eef8 9ae9 	vcvt.f32.s32	s19, s19
 800a1d8:	eeb8 bacb 	vcvt.f32.s32	s22, s22
 800a1dc:	eef8 baeb 	vcvt.f32.s32	s23, s23
 800a1e0:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 800a1e4:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 800a1e8:	4604      	mov	r4, r0
 800a1ea:	b1f3      	cbz	r3, 800a22a <_DrawArc.isra.0+0x1be>
 800a1ec:	f1b9 0f01 	cmp.w	r9, #1
 800a1f0:	d10c      	bne.n	800a20c <_DrawArc.isra.0+0x1a0>
 800a1f2:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800a1f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a1fa:	1b52      	subs	r2, r2, r5
 800a1fc:	1b5b      	subs	r3, r3, r5
 800a1fe:	4294      	cmp	r4, r2
 800a200:	bfa8      	it	ge
 800a202:	4614      	movge	r4, r2
 800a204:	429f      	cmp	r7, r3
 800a206:	bfb8      	it	lt
 800a208:	461f      	movlt	r7, r3
 800a20a:	e00e      	b.n	800a22a <_DrawArc.isra.0+0x1be>
 800a20c:	f1b9 3fff 	cmp.w	r9, #4294967295
 800a210:	d10b      	bne.n	800a22a <_DrawArc.isra.0+0x1be>
 800a212:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800a216:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a21a:	1b52      	subs	r2, r2, r5
 800a21c:	1b5b      	subs	r3, r3, r5
 800a21e:	4297      	cmp	r7, r2
 800a220:	bfa8      	it	ge
 800a222:	4617      	movge	r7, r2
 800a224:	429c      	cmp	r4, r3
 800a226:	bfb8      	it	lt
 800a228:	461c      	movlt	r4, r3
 800a22a:	f1c9 0a00 	rsb	sl, r9, #0
 800a22e:	fb09 5904 	mla	r9, r9, r4, r5
 800a232:	2500      	movs	r5, #0
 800a234:	46ab      	mov	fp, r5
 800a236:	42bc      	cmp	r4, r7
 800a238:	f2c0 8083 	blt.w	800a342 <_DrawArc.isra.0+0x2d6>
 800a23c:	fb04 f304 	mul.w	r3, r4, r4
 800a240:	42b3      	cmp	r3, r6
 800a242:	d208      	bcs.n	800a256 <_DrawArc.isra.0+0x1ea>
 800a244:	f10b 0201 	add.w	r2, fp, #1
 800a248:	fb02 f002 	mul.w	r0, r2, r2
 800a24c:	1af1      	subs	r1, r6, r3
 800a24e:	4288      	cmp	r0, r1
 800a250:	d203      	bcs.n	800a25a <_DrawArc.isra.0+0x1ee>
 800a252:	4693      	mov	fp, r2
 800a254:	e7f6      	b.n	800a244 <_DrawArc.isra.0+0x1d8>
 800a256:	f04f 0b00 	mov.w	fp, #0
 800a25a:	ee1c ea90 	vmov	lr, s25
 800a25e:	4573      	cmp	r3, lr
 800a260:	d20a      	bcs.n	800a278 <_DrawArc.isra.0+0x20c>
 800a262:	ee1c ea90 	vmov	lr, s25
 800a266:	1c6a      	adds	r2, r5, #1
 800a268:	fb02 f002 	mul.w	r0, r2, r2
 800a26c:	ebc3 010e 	rsb	r1, r3, lr
 800a270:	4288      	cmp	r0, r1
 800a272:	d202      	bcs.n	800a27a <_DrawArc.isra.0+0x20e>
 800a274:	4615      	mov	r5, r2
 800a276:	e7f4      	b.n	800a262 <_DrawArc.isra.0+0x1f6>
 800a278:	2500      	movs	r5, #0
 800a27a:	ee06 4a90 	vmov	s13, r4
 800a27e:	eebd 6aeb 	vcvt.s32.f32	s12, s23
 800a282:	eef8 7ae6 	vcvt.f32.s32	s15, s13
 800a286:	1e6b      	subs	r3, r5, #1
 800a288:	ee16 5a10 	vmov	r5, s12
 800a28c:	eef4 7aca 	vcmpe.f32	s15, s20
 800a290:	42ab      	cmp	r3, r5
 800a292:	bfb8      	it	lt
 800a294:	461d      	movlt	r5, r3
 800a296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a29a:	d51a      	bpl.n	800a2d2 <_DrawArc.isra.0+0x266>
 800a29c:	eeb4 aa49 	vcmp.f32	s20, s18
 800a2a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2a4:	d00e      	beq.n	800a2c4 <_DrawArc.isra.0+0x258>
 800a2a6:	ee7a 6a49 	vsub.f32	s13, s20, s18
 800a2aa:	ee3b 7acb 	vsub.f32	s14, s23, s22
 800a2ae:	eeb0 6a4b 	vmov.f32	s12, s22
 800a2b2:	ee87 7a26 	vdiv.f32	s14, s14, s13
 800a2b6:	ee77 6ac9 	vsub.f32	s13, s15, s18
 800a2ba:	eea6 6a87 	vfma.f32	s12, s13, s14
 800a2be:	eeb0 7a46 	vmov.f32	s14, s12
 800a2c2:	e001      	b.n	800a2c8 <_DrawArc.isra.0+0x25c>
 800a2c4:	eeb0 7a49 	vmov.f32	s14, s18
 800a2c8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800a2cc:	ee17 2a10 	vmov	r2, s14
 800a2d0:	e000      	b.n	800a2d4 <_DrawArc.isra.0+0x268>
 800a2d2:	462a      	mov	r2, r5
 800a2d4:	eef4 7ae9 	vcmpe.f32	s15, s19
 800a2d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2dc:	dd1a      	ble.n	800a314 <_DrawArc.isra.0+0x2a8>
 800a2de:	eef4 aa69 	vcmp.f32	s21, s19
 800a2e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2e6:	d00e      	beq.n	800a306 <_DrawArc.isra.0+0x29a>
 800a2e8:	ee7a 6ae9 	vsub.f32	s13, s21, s19
 800a2ec:	ee38 7a68 	vsub.f32	s14, s16, s17
 800a2f0:	ee77 7ae9 	vsub.f32	s15, s15, s19
 800a2f4:	ee87 7a26 	vdiv.f32	s14, s14, s13
 800a2f8:	eef0 6a68 	vmov.f32	s13, s17
 800a2fc:	eee7 6a87 	vfma.f32	s13, s15, s14
 800a300:	eef0 7a66 	vmov.f32	s15, s13
 800a304:	e001      	b.n	800a30a <_DrawArc.isra.0+0x29e>
 800a306:	eef0 7a69 	vmov.f32	s15, s19
 800a30a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a30e:	ee17 3a90 	vmov	r3, s15
 800a312:	e000      	b.n	800a316 <_DrawArc.isra.0+0x2aa>
 800a314:	465b      	mov	r3, fp
 800a316:	9915      	ldr	r1, [sp, #84]	; 0x54
 800a318:	2900      	cmp	r1, #0
 800a31a:	490c      	ldr	r1, [pc, #48]	; (800a34c <_DrawArc.isra.0+0x2e0>)
 800a31c:	6809      	ldr	r1, [r1, #0]
 800a31e:	6e49      	ldr	r1, [r1, #100]	; 0x64
 800a320:	f8d1 c000 	ldr.w	ip, [r1]
 800a324:	dd04      	ble.n	800a330 <_DrawArc.isra.0+0x2c4>
 800a326:	eb03 0008 	add.w	r0, r3, r8
 800a32a:	4649      	mov	r1, r9
 800a32c:	4442      	add	r2, r8
 800a32e:	e004      	b.n	800a33a <_DrawArc.isra.0+0x2ce>
 800a330:	ebc2 0008 	rsb	r0, r2, r8
 800a334:	4649      	mov	r1, r9
 800a336:	ebc3 0208 	rsb	r2, r3, r8
 800a33a:	47e0      	blx	ip
 800a33c:	3c01      	subs	r4, #1
 800a33e:	44d1      	add	r9, sl
 800a340:	e779      	b.n	800a236 <_DrawArc.isra.0+0x1ca>
 800a342:	ecbd 8b0a 	vpop	{d8-d12}
 800a346:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a34a:	bf00      	nop
 800a34c:	20000018 	.word	0x20000018

0800a350 <GL_DrawArc>:
 800a350:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800a354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a356:	4690      	mov	r8, r2
 800a358:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a35a:	4606      	mov	r6, r0
 800a35c:	460f      	mov	r7, r1
 800a35e:	f503 74b4 	add.w	r4, r3, #360	; 0x168
 800a362:	1ad5      	subs	r5, r2, r3
 800a364:	f5b4 7fb4 	cmp.w	r4, #360	; 0x168
 800a368:	4425      	add	r5, r4
 800a36a:	db67      	blt.n	800a43c <GL_DrawArc+0xec>
 800a36c:	f5a4 74b4 	sub.w	r4, r4, #360	; 0x168
 800a370:	e7f7      	b.n	800a362 <GL_DrawArc+0x12>
 800a372:	2c59      	cmp	r4, #89	; 0x59
 800a374:	dc11      	bgt.n	800a39a <GL_DrawArc+0x4a>
 800a376:	2d5a      	cmp	r5, #90	; 0x5a
 800a378:	bfb4      	ite	lt
 800a37a:	462b      	movlt	r3, r5
 800a37c:	235a      	movge	r3, #90	; 0x5a
 800a37e:	9300      	str	r3, [sp, #0]
 800a380:	2301      	movs	r3, #1
 800a382:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800a386:	9301      	str	r3, [sp, #4]
 800a388:	f04f 33ff 	mov.w	r3, #4294967295
 800a38c:	9302      	str	r3, [sp, #8]
 800a38e:	4630      	mov	r0, r6
 800a390:	4639      	mov	r1, r7
 800a392:	4642      	mov	r2, r8
 800a394:	4623      	mov	r3, r4
 800a396:	f7ff fe69 	bl	800a06c <_DrawArc.isra.0>
 800a39a:	f1a5 035a 	sub.w	r3, r5, #90	; 0x5a
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	f1a4 045a 	sub.w	r4, r4, #90	; 0x5a
 800a3a4:	dd4c      	ble.n	800a440 <GL_DrawArc+0xf0>
 800a3a6:	2c59      	cmp	r4, #89	; 0x59
 800a3a8:	dc12      	bgt.n	800a3d0 <GL_DrawArc+0x80>
 800a3aa:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800a3ae:	f1c4 025a 	rsb	r2, r4, #90	; 0x5a
 800a3b2:	2b5a      	cmp	r3, #90	; 0x5a
 800a3b4:	bfa8      	it	ge
 800a3b6:	235a      	movge	r3, #90	; 0x5a
 800a3b8:	9200      	str	r2, [sp, #0]
 800a3ba:	f04f 32ff 	mov.w	r2, #4294967295
 800a3be:	9201      	str	r2, [sp, #4]
 800a3c0:	9202      	str	r2, [sp, #8]
 800a3c2:	4630      	mov	r0, r6
 800a3c4:	4639      	mov	r1, r7
 800a3c6:	4642      	mov	r2, r8
 800a3c8:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 800a3cc:	f7ff fe4e 	bl	800a06c <_DrawArc.isra.0>
 800a3d0:	f1a5 03b4 	sub.w	r3, r5, #180	; 0xb4
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	f1a4 045a 	sub.w	r4, r4, #90	; 0x5a
 800a3da:	dd31      	ble.n	800a440 <GL_DrawArc+0xf0>
 800a3dc:	2c59      	cmp	r4, #89	; 0x59
 800a3de:	dc10      	bgt.n	800a402 <GL_DrawArc+0xb2>
 800a3e0:	2b5a      	cmp	r3, #90	; 0x5a
 800a3e2:	bfa8      	it	ge
 800a3e4:	235a      	movge	r3, #90	; 0x5a
 800a3e6:	9300      	str	r3, [sp, #0]
 800a3e8:	f04f 33ff 	mov.w	r3, #4294967295
 800a3ec:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800a3f0:	9301      	str	r3, [sp, #4]
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	9302      	str	r3, [sp, #8]
 800a3f6:	4630      	mov	r0, r6
 800a3f8:	4639      	mov	r1, r7
 800a3fa:	4642      	mov	r2, r8
 800a3fc:	4623      	mov	r3, r4
 800a3fe:	f7ff fe35 	bl	800a06c <_DrawArc.isra.0>
 800a402:	f5a5 7387 	sub.w	r3, r5, #270	; 0x10e
 800a406:	2b00      	cmp	r3, #0
 800a408:	f1a4 045a 	sub.w	r4, r4, #90	; 0x5a
 800a40c:	dd18      	ble.n	800a440 <GL_DrawArc+0xf0>
 800a40e:	2c59      	cmp	r4, #89	; 0x59
 800a410:	dc11      	bgt.n	800a436 <GL_DrawArc+0xe6>
 800a412:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800a416:	f1c4 025a 	rsb	r2, r4, #90	; 0x5a
 800a41a:	2b5a      	cmp	r3, #90	; 0x5a
 800a41c:	bfa8      	it	ge
 800a41e:	235a      	movge	r3, #90	; 0x5a
 800a420:	9200      	str	r2, [sp, #0]
 800a422:	2201      	movs	r2, #1
 800a424:	9201      	str	r2, [sp, #4]
 800a426:	9202      	str	r2, [sp, #8]
 800a428:	4630      	mov	r0, r6
 800a42a:	4639      	mov	r1, r7
 800a42c:	4642      	mov	r2, r8
 800a42e:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 800a432:	f7ff fe1b 	bl	800a06c <_DrawArc.isra.0>
 800a436:	f5a5 75b4 	sub.w	r5, r5, #360	; 0x168
 800a43a:	3c5a      	subs	r4, #90	; 0x5a
 800a43c:	2d00      	cmp	r5, #0
 800a43e:	dc98      	bgt.n	800a372 <GL_DrawArc+0x22>
 800a440:	b004      	add	sp, #16
 800a442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800a448 <GUI_DrawArc>:
 800a448:	e92d 4bf3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, fp, lr}
 800a44c:	461f      	mov	r7, r3
 800a44e:	4b0e      	ldr	r3, [pc, #56]	; (800a488 <GUI_DrawArc+0x40>)
 800a450:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a452:	681c      	ldr	r4, [r3, #0]
 800a454:	4683      	mov	fp, r0
 800a456:	2000      	movs	r0, #0
 800a458:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800a45a:	6d24      	ldr	r4, [r4, #80]	; 0x50
 800a45c:	4689      	mov	r9, r1
 800a45e:	4690      	mov	r8, r2
 800a460:	f7fc f910 	bl	8006684 <WM__InitIVRSearch>
 800a464:	b168      	cbz	r0, 800a482 <GUI_DrawArc+0x3a>
 800a466:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a468:	9301      	str	r3, [sp, #4]
 800a46a:	eb0b 0005 	add.w	r0, fp, r5
 800a46e:	eb09 0104 	add.w	r1, r9, r4
 800a472:	4642      	mov	r2, r8
 800a474:	463b      	mov	r3, r7
 800a476:	9600      	str	r6, [sp, #0]
 800a478:	f7ff ff6a 	bl	800a350 <GL_DrawArc>
 800a47c:	f7fc f840 	bl	8006500 <WM__GetNextIVR>
 800a480:	e7f0      	b.n	800a464 <GUI_DrawArc+0x1c>
 800a482:	b002      	add	sp, #8
 800a484:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 800a488:	20000018 	.word	0x20000018

0800a48c <_PushFreeBlock>:
 800a48c:	4b07      	ldr	r3, [pc, #28]	; (800a4ac <_PushFreeBlock+0x20>)
 800a48e:	685a      	ldr	r2, [r3, #4]
 800a490:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a492:	3201      	adds	r2, #1
 800a494:	b510      	push	{r4, lr}
 800a496:	605a      	str	r2, [r3, #4]
 800a498:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a49a:	eb02 04c0 	add.w	r4, r2, r0, lsl #3
 800a49e:	6061      	str	r1, [r4, #4]
 800a4a0:	2100      	movs	r1, #0
 800a4a2:	f802 1030 	strb.w	r1, [r2, r0, lsl #3]
 800a4a6:	6258      	str	r0, [r3, #36]	; 0x24
 800a4a8:	bd10      	pop	{r4, pc}
 800a4aa:	bf00      	nop
 800a4ac:	20019614 	.word	0x20019614

0800a4b0 <_OnExit>:
 800a4b0:	b538      	push	{r3, r4, r5, lr}
 800a4b2:	4d0b      	ldr	r5, [pc, #44]	; (800a4e0 <_OnExit+0x30>)
 800a4b4:	2400      	movs	r4, #0
 800a4b6:	f105 0040 	add.w	r0, r5, #64	; 0x40
 800a4ba:	4621      	mov	r1, r4
 800a4bc:	2280      	movs	r2, #128	; 0x80
 800a4be:	f885 4028 	strb.w	r4, [r5, #40]	; 0x28
 800a4c2:	f7fe f93f 	bl	8008744 <GUI__memset>
 800a4c6:	4628      	mov	r0, r5
 800a4c8:	4621      	mov	r1, r4
 800a4ca:	22c0      	movs	r2, #192	; 0xc0
 800a4cc:	f7fe f93a 	bl	8008744 <GUI__memset>
 800a4d0:	4621      	mov	r1, r4
 800a4d2:	4804      	ldr	r0, [pc, #16]	; (800a4e4 <_OnExit+0x34>)
 800a4d4:	220c      	movs	r2, #12
 800a4d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4da:	f7fe b933 	b.w	8008744 <GUI__memset>
 800a4de:	bf00      	nop
 800a4e0:	20019614 	.word	0x20019614
 800a4e4:	200191e4 	.word	0x200191e4

0800a4e8 <_RemoveFreeBlock>:
 800a4e8:	b510      	push	{r4, lr}
 800a4ea:	6842      	ldr	r2, [r0, #4]
 800a4ec:	230f      	movs	r3, #15
 800a4ee:	490d      	ldr	r1, [pc, #52]	; (800a524 <_RemoveFreeBlock+0x3c>)
 800a4f0:	eb01 04c3 	add.w	r4, r1, r3, lsl #3
 800a4f4:	6c24      	ldr	r4, [r4, #64]	; 0x40
 800a4f6:	42a2      	cmp	r2, r4
 800a4f8:	d203      	bcs.n	800a502 <_RemoveFreeBlock+0x1a>
 800a4fa:	f113 33ff 	adds.w	r3, r3, #4294967295
 800a4fe:	d2f6      	bcs.n	800a4ee <_RemoveFreeBlock+0x6>
 800a500:	bd10      	pop	{r4, pc}
 800a502:	2b0f      	cmp	r3, #15
 800a504:	d80c      	bhi.n	800a520 <_RemoveFreeBlock+0x38>
 800a506:	680c      	ldr	r4, [r1, #0]
 800a508:	1aa2      	subs	r2, r4, r2
 800a50a:	600a      	str	r2, [r1, #0]
 800a50c:	6882      	ldr	r2, [r0, #8]
 800a50e:	68c0      	ldr	r0, [r0, #12]
 800a510:	b102      	cbz	r2, 800a514 <_RemoveFreeBlock+0x2c>
 800a512:	6050      	str	r0, [r2, #4]
 800a514:	b108      	cbz	r0, 800a51a <_RemoveFreeBlock+0x32>
 800a516:	6002      	str	r2, [r0, #0]
 800a518:	bd10      	pop	{r4, pc}
 800a51a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800a51e:	645a      	str	r2, [r3, #68]	; 0x44
 800a520:	bd10      	pop	{r4, pc}
 800a522:	bf00      	nop
 800a524:	20019614 	.word	0x20019614

0800a528 <_AddFreeMemory>:
 800a528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a52a:	4e26      	ldr	r6, [pc, #152]	; (800a5c4 <_AddFreeMemory+0x9c>)
 800a52c:	68f3      	ldr	r3, [r6, #12]
 800a52e:	1e5a      	subs	r2, r3, #1
 800a530:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800a532:	4605      	mov	r5, r0
 800a534:	4413      	add	r3, r2
 800a536:	1808      	adds	r0, r1, r0
 800a538:	4298      	cmp	r0, r3
 800a53a:	460c      	mov	r4, r1
 800a53c:	d805      	bhi.n	800a54a <_AddFreeMemory+0x22>
 800a53e:	594b      	ldr	r3, [r1, r5]
 800a540:	b91b      	cbnz	r3, 800a54a <_AddFreeMemory+0x22>
 800a542:	6843      	ldr	r3, [r0, #4]
 800a544:	441d      	add	r5, r3
 800a546:	f7ff ffcf 	bl	800a4e8 <_RemoveFreeBlock>
 800a54a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800a54c:	429c      	cmp	r4, r3
 800a54e:	d90a      	bls.n	800a566 <_AddFreeMemory+0x3e>
 800a550:	f854 7c04 	ldr.w	r7, [r4, #-4]
 800a554:	1be7      	subs	r7, r4, r7
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	b92b      	cbnz	r3, 800a566 <_AddFreeMemory+0x3e>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	4638      	mov	r0, r7
 800a55e:	441d      	add	r5, r3
 800a560:	f7ff ffc2 	bl	800a4e8 <_RemoveFreeBlock>
 800a564:	463c      	mov	r4, r7
 800a566:	230f      	movs	r3, #15
 800a568:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800a56c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800a56e:	4295      	cmp	r5, r2
 800a570:	d203      	bcs.n	800a57a <_AddFreeMemory+0x52>
 800a572:	f113 33ff 	adds.w	r3, r3, #4294967295
 800a576:	d2f7      	bcs.n	800a568 <_AddFreeMemory+0x40>
 800a578:	e022      	b.n	800a5c0 <_AddFreeMemory+0x98>
 800a57a:	2b0f      	cmp	r3, #15
 800a57c:	d820      	bhi.n	800a5c0 <_AddFreeMemory+0x98>
 800a57e:	3308      	adds	r3, #8
 800a580:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800a584:	1961      	adds	r1, r4, r5
 800a586:	6852      	ldr	r2, [r2, #4]
 800a588:	60a2      	str	r2, [r4, #8]
 800a58a:	2000      	movs	r0, #0
 800a58c:	e884 0021 	stmia.w	r4, {r0, r5}
 800a590:	6124      	str	r4, [r4, #16]
 800a592:	f841 5c04 	str.w	r5, [r1, #-4]
 800a596:	f104 0108 	add.w	r1, r4, #8
 800a59a:	b102      	cbz	r2, 800a59e <_AddFreeMemory+0x76>
 800a59c:	6051      	str	r1, [r2, #4]
 800a59e:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800a5a2:	60e0      	str	r0, [r4, #12]
 800a5a4:	6059      	str	r1, [r3, #4]
 800a5a6:	6833      	ldr	r3, [r6, #0]
 800a5a8:	f896 1029 	ldrb.w	r1, [r6, #41]	; 0x29
 800a5ac:	4a05      	ldr	r2, [pc, #20]	; (800a5c4 <_AddFreeMemory+0x9c>)
 800a5ae:	442b      	add	r3, r5
 800a5b0:	6033      	str	r3, [r6, #0]
 800a5b2:	b929      	cbnz	r1, 800a5c0 <_AddFreeMemory+0x98>
 800a5b4:	68d1      	ldr	r1, [r2, #12]
 800a5b6:	1acb      	subs	r3, r1, r3
 800a5b8:	6891      	ldr	r1, [r2, #8]
 800a5ba:	4299      	cmp	r1, r3
 800a5bc:	bf38      	it	cc
 800a5be:	6093      	strcc	r3, [r2, #8]
 800a5c0:	4628      	mov	r0, r5
 800a5c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5c4:	20019614 	.word	0x20019614

0800a5c8 <_RemoveHoles>:
 800a5c8:	4b25      	ldr	r3, [pc, #148]	; (800a660 <_RemoveHoles+0x98>)
 800a5ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ce:	68da      	ldr	r2, [r3, #12]
 800a5d0:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800a5d2:	3a01      	subs	r2, #1
 800a5d4:	4682      	mov	sl, r0
 800a5d6:	eb02 0904 	add.w	r9, r2, r4
 800a5da:	469b      	mov	fp, r3
 800a5dc:	e894 0028 	ldmia.w	r4, {r3, r5}
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d133      	bne.n	800a64c <_RemoveHoles+0x84>
 800a5e4:	eb04 0805 	add.w	r8, r4, r5
 800a5e8:	45c8      	cmp	r8, r9
 800a5ea:	d22f      	bcs.n	800a64c <_RemoveHoles+0x84>
 800a5ec:	f854 c005 	ldr.w	ip, [r4, r5]
 800a5f0:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800a5f4:	f1bc 0f00 	cmp.w	ip, #0
 800a5f8:	d028      	beq.n	800a64c <_RemoveHoles+0x84>
 800a5fa:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 800a5fe:	4f18      	ldr	r7, [pc, #96]	; (800a660 <_RemoveHoles+0x98>)
 800a600:	f813 303c 	ldrb.w	r3, [r3, ip, lsl #3]
 800a604:	2b01      	cmp	r3, #1
 800a606:	d121      	bne.n	800a64c <_RemoveHoles+0x84>
 800a608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a60a:	4620      	mov	r0, r4
 800a60c:	e88d 1008 	stmia.w	sp, {r3, ip}
 800a610:	f7ff ff6a 	bl	800a4e8 <_RemoveFreeBlock>
 800a614:	f8d8 1000 	ldr.w	r1, [r8]
 800a618:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a61a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800a61e:	4620      	mov	r0, r4
 800a620:	6054      	str	r4, [r2, #4]
 800a622:	4641      	mov	r1, r8
 800a624:	4632      	mov	r2, r6
 800a626:	f002 f944 	bl	800c8b2 <memmove>
 800a62a:	e89d 1008 	ldmia.w	sp, {r3, ip}
 800a62e:	459c      	cmp	ip, r3
 800a630:	d102      	bne.n	800a638 <_RemoveHoles+0x70>
 800a632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a634:	1b5b      	subs	r3, r3, r5
 800a636:	637b      	str	r3, [r7, #52]	; 0x34
 800a638:	4628      	mov	r0, r5
 800a63a:	19a1      	adds	r1, r4, r6
 800a63c:	f7ff ff74 	bl	800a528 <_AddFreeMemory>
 800a640:	f1ba 0f00 	cmp.w	sl, #0
 800a644:	d001      	beq.n	800a64a <_RemoveHoles+0x82>
 800a646:	4582      	cmp	sl, r0
 800a648:	d905      	bls.n	800a656 <_RemoveHoles+0x8e>
 800a64a:	4635      	mov	r5, r6
 800a64c:	442c      	add	r4, r5
 800a64e:	454c      	cmp	r4, r9
 800a650:	d3c4      	bcc.n	800a5dc <_RemoveHoles+0x14>
 800a652:	2001      	movs	r0, #1
 800a654:	e000      	b.n	800a658 <_RemoveHoles+0x90>
 800a656:	2000      	movs	r0, #0
 800a658:	b003      	add	sp, #12
 800a65a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a65e:	bf00      	nop
 800a660:	20019614 	.word	0x20019614

0800a664 <GUI_ALLOC_FreeFixedBlock>:
 800a664:	b128      	cbz	r0, 800a672 <GUI_ALLOC_FreeFixedBlock+0xe>
 800a666:	4a03      	ldr	r2, [pc, #12]	; (800a674 <GUI_ALLOC_FreeFixedBlock+0x10>)
 800a668:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800a66a:	6003      	str	r3, [r0, #0]
 800a66c:	b103      	cbz	r3, 800a670 <GUI_ALLOC_FreeFixedBlock+0xc>
 800a66e:	6058      	str	r0, [r3, #4]
 800a670:	63d0      	str	r0, [r2, #60]	; 0x3c
 800a672:	4770      	bx	lr
 800a674:	20019614 	.word	0x20019614

0800a678 <GUI_ALLOC_h2p>:
 800a678:	b128      	cbz	r0, 800a686 <GUI_ALLOC_h2p+0xe>
 800a67a:	4b03      	ldr	r3, [pc, #12]	; (800a688 <GUI_ALLOC_h2p+0x10>)
 800a67c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a67e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800a682:	6840      	ldr	r0, [r0, #4]
 800a684:	3008      	adds	r0, #8
 800a686:	4770      	bx	lr
 800a688:	20019614 	.word	0x20019614

0800a68c <GUI_ALLOC_LockH>:
 800a68c:	4b05      	ldr	r3, [pc, #20]	; (800a6a4 <GUI_ALLOC_LockH+0x18>)
 800a68e:	69d9      	ldr	r1, [r3, #28]
 800a690:	3101      	adds	r1, #1
 800a692:	61d9      	str	r1, [r3, #28]
 800a694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a696:	f813 1030 	ldrb.w	r1, [r3, r0, lsl #3]
 800a69a:	3101      	adds	r1, #1
 800a69c:	f803 1030 	strb.w	r1, [r3, r0, lsl #3]
 800a6a0:	f7ff bfea 	b.w	800a678 <GUI_ALLOC_h2p>
 800a6a4:	20019614 	.word	0x20019614

0800a6a8 <GUI_ALLOC_UnlockH>:
 800a6a8:	b530      	push	{r4, r5, lr}
 800a6aa:	6802      	ldr	r2, [r0, #0]
 800a6ac:	4b09      	ldr	r3, [pc, #36]	; (800a6d4 <GUI_ALLOC_UnlockH+0x2c>)
 800a6ae:	f852 1c08 	ldr.w	r1, [r2, #-8]
 800a6b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a6b4:	f812 4031 	ldrb.w	r4, [r2, r1, lsl #3]
 800a6b8:	2c01      	cmp	r4, #1
 800a6ba:	d903      	bls.n	800a6c4 <GUI_ALLOC_UnlockH+0x1c>
 800a6bc:	69dd      	ldr	r5, [r3, #28]
 800a6be:	b10d      	cbz	r5, 800a6c4 <GUI_ALLOC_UnlockH+0x1c>
 800a6c0:	3d01      	subs	r5, #1
 800a6c2:	61dd      	str	r5, [r3, #28]
 800a6c4:	3c01      	subs	r4, #1
 800a6c6:	f802 4031 	strb.w	r4, [r2, r1, lsl #3]
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	6003      	str	r3, [r0, #0]
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	bd30      	pop	{r4, r5, pc}
 800a6d2:	bf00      	nop
 800a6d4:	20019614 	.word	0x20019614

0800a6d8 <GUI_ALLOC_AssignMemory>:
 800a6d8:	4b02      	ldr	r3, [pc, #8]	; (800a6e4 <GUI_ALLOC_AssignMemory+0xc>)
 800a6da:	f021 0103 	bic.w	r1, r1, #3
 800a6de:	6018      	str	r0, [r3, #0]
 800a6e0:	6059      	str	r1, [r3, #4]
 800a6e2:	4770      	bx	lr
 800a6e4:	200191e4 	.word	0x200191e4

0800a6e8 <GUI_ALLOC_GetSize>:
 800a6e8:	b130      	cbz	r0, 800a6f8 <GUI_ALLOC_GetSize+0x10>
 800a6ea:	4b04      	ldr	r3, [pc, #16]	; (800a6fc <GUI_ALLOC_GetSize+0x14>)
 800a6ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6ee:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800a6f2:	6843      	ldr	r3, [r0, #4]
 800a6f4:	6858      	ldr	r0, [r3, #4]
 800a6f6:	380c      	subs	r0, #12
 800a6f8:	4770      	bx	lr
 800a6fa:	bf00      	nop
 800a6fc:	20019614 	.word	0x20019614

0800a700 <GUI_ALLOC_Free>:
 800a700:	b510      	push	{r4, lr}
 800a702:	4604      	mov	r4, r0
 800a704:	b180      	cbz	r0, 800a728 <GUI_ALLOC_Free+0x28>
 800a706:	4b09      	ldr	r3, [pc, #36]	; (800a72c <GUI_ALLOC_Free+0x2c>)
 800a708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a70a:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
 800a70e:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 800a712:	2b01      	cmp	r3, #1
 800a714:	d108      	bne.n	800a728 <GUI_ALLOC_Free+0x28>
 800a716:	6851      	ldr	r1, [r2, #4]
 800a718:	6848      	ldr	r0, [r1, #4]
 800a71a:	f7ff ff05 	bl	800a528 <_AddFreeMemory>
 800a71e:	4620      	mov	r0, r4
 800a720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a724:	f7ff beb2 	b.w	800a48c <_PushFreeBlock>
 800a728:	bd10      	pop	{r4, pc}
 800a72a:	bf00      	nop
 800a72c:	20019614 	.word	0x20019614

0800a730 <_EnlargeBlocks>:
 800a730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a734:	4c22      	ldr	r4, [pc, #136]	; (800a7c0 <_EnlargeBlocks+0x90>)
 800a736:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a738:	b93b      	cbnz	r3, 800a74a <_EnlargeBlocks+0x1a>
 800a73a:	4b22      	ldr	r3, [pc, #136]	; (800a7c4 <_EnlargeBlocks+0x94>)
 800a73c:	689d      	ldr	r5, [r3, #8]
 800a73e:	685b      	ldr	r3, [r3, #4]
 800a740:	3508      	adds	r5, #8
 800a742:	fbb3 f5f5 	udiv	r5, r3, r5
 800a746:	3502      	adds	r5, #2
 800a748:	e003      	b.n	800a752 <_EnlargeBlocks+0x22>
 800a74a:	6923      	ldr	r3, [r4, #16]
 800a74c:	1d1d      	adds	r5, r3, #4
 800a74e:	eb05 05d3 	add.w	r5, r5, r3, lsr #3
 800a752:	00e8      	lsls	r0, r5, #3
 800a754:	f000 f978 	bl	800aa48 <_Alloc>
 800a758:	4680      	mov	r8, r0
 800a75a:	b360      	cbz	r0, 800a7b6 <_EnlargeBlocks+0x86>
 800a75c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a75e:	6922      	ldr	r2, [r4, #16]
 800a760:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a762:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
 800a766:	00d2      	lsls	r2, r2, #3
 800a768:	685e      	ldr	r6, [r3, #4]
 800a76a:	3608      	adds	r6, #8
 800a76c:	4630      	mov	r0, r6
 800a76e:	f002 f895 	bl	800c89c <memcpy>
 800a772:	6922      	ldr	r2, [r4, #16]
 800a774:	6366      	str	r6, [r4, #52]	; 0x34
 800a776:	eb06 01c2 	add.w	r1, r6, r2, lsl #3
 800a77a:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 800a77e:	3104      	adds	r1, #4
 800a780:	4613      	mov	r3, r2
 800a782:	1e68      	subs	r0, r5, #1
 800a784:	4283      	cmp	r3, r0
 800a786:	f101 0108 	add.w	r1, r1, #8
 800a78a:	d203      	bcs.n	800a794 <_EnlargeBlocks+0x64>
 800a78c:	3301      	adds	r3, #1
 800a78e:	f841 3c08 	str.w	r3, [r1, #-8]
 800a792:	e7f6      	b.n	800a782 <_EnlargeBlocks+0x52>
 800a794:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800a798:	2600      	movs	r6, #0
 800a79a:	605e      	str	r6, [r3, #4]
 800a79c:	6863      	ldr	r3, [r4, #4]
 800a79e:	6262      	str	r2, [r4, #36]	; 0x24
 800a7a0:	1a9b      	subs	r3, r3, r2
 800a7a2:	442b      	add	r3, r5
 800a7a4:	6063      	str	r3, [r4, #4]
 800a7a6:	6125      	str	r5, [r4, #16]
 800a7a8:	4638      	mov	r0, r7
 800a7aa:	b13f      	cbz	r7, 800a7bc <_EnlargeBlocks+0x8c>
 800a7ac:	f7ff ffa8 	bl	800a700 <GUI_ALLOC_Free>
 800a7b0:	4630      	mov	r0, r6
 800a7b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7b6:	2001      	movs	r0, #1
 800a7b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7c0:	20019614 	.word	0x20019614
 800a7c4:	200191e4 	.word	0x200191e4

0800a7c8 <_InitOnce>:
 800a7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ca:	4e58      	ldr	r6, [pc, #352]	; (800a92c <_InitOnce+0x164>)
 800a7cc:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800a7d0:	2900      	cmp	r1, #0
 800a7d2:	f040 80aa 	bne.w	800a92a <_InitOnce+0x162>
 800a7d6:	4d56      	ldr	r5, [pc, #344]	; (800a930 <_InitOnce+0x168>)
 800a7d8:	686a      	ldr	r2, [r5, #4]
 800a7da:	2301      	movs	r3, #1
 800a7dc:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
 800a7e0:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 800a7e4:	bf28      	it	cs
 800a7e6:	f44f 5220 	movcs.w	r2, #10240	; 0x2800
 800a7ea:	682b      	ldr	r3, [r5, #0]
 800a7ec:	0894      	lsrs	r4, r2, #2
 800a7ee:	2000      	movs	r0, #0
 800a7f0:	42a0      	cmp	r0, r4
 800a7f2:	d00c      	beq.n	800a80e <_InitOnce+0x46>
 800a7f4:	1847      	adds	r7, r0, r1
 800a7f6:	f04f 0eff 	mov.w	lr, #255	; 0xff
 800a7fa:	fbb7 fefe 	udiv	lr, r7, lr
 800a7fe:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 800a802:	ebce 0707 	rsb	r7, lr, r7
 800a806:	f843 7020 	str.w	r7, [r3, r0, lsl #2]
 800a80a:	3001      	adds	r0, #1
 800a80c:	e7f0      	b.n	800a7f0 <_InitOnce+0x28>
 800a80e:	2000      	movs	r0, #0
 800a810:	42a0      	cmp	r0, r4
 800a812:	d016      	beq.n	800a842 <_InitOnce+0x7a>
 800a814:	1847      	adds	r7, r0, r1
 800a816:	f04f 0eff 	mov.w	lr, #255	; 0xff
 800a81a:	fbb7 fefe 	udiv	lr, r7, lr
 800a81e:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 800a822:	ebce 0e07 	rsb	lr, lr, r7
 800a826:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800a82a:	4577      	cmp	r7, lr
 800a82c:	d007      	beq.n	800a83e <_InitOnce+0x76>
 800a82e:	68aa      	ldr	r2, [r5, #8]
 800a830:	4b3f      	ldr	r3, [pc, #252]	; (800a930 <_InitOnce+0x168>)
 800a832:	2a00      	cmp	r2, #0
 800a834:	d155      	bne.n	800a8e2 <_InitOnce+0x11a>
 800a836:	685a      	ldr	r2, [r3, #4]
 800a838:	0892      	lsrs	r2, r2, #2
 800a83a:	609a      	str	r2, [r3, #8]
 800a83c:	e051      	b.n	800a8e2 <_InitOnce+0x11a>
 800a83e:	3001      	adds	r0, #1
 800a840:	e7e6      	b.n	800a810 <_InitOnce+0x48>
 800a842:	3101      	adds	r1, #1
 800a844:	2902      	cmp	r1, #2
 800a846:	d1d2      	bne.n	800a7ee <_InitOnce+0x26>
 800a848:	0854      	lsrs	r4, r2, #1
 800a84a:	2100      	movs	r1, #0
 800a84c:	2000      	movs	r0, #0
 800a84e:	42a0      	cmp	r0, r4
 800a850:	d00c      	beq.n	800a86c <_InitOnce+0xa4>
 800a852:	1847      	adds	r7, r0, r1
 800a854:	f04f 0eff 	mov.w	lr, #255	; 0xff
 800a858:	fbb7 fefe 	udiv	lr, r7, lr
 800a85c:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 800a860:	ebce 0707 	rsb	r7, lr, r7
 800a864:	f823 7010 	strh.w	r7, [r3, r0, lsl #1]
 800a868:	3001      	adds	r0, #1
 800a86a:	e7f0      	b.n	800a84e <_InitOnce+0x86>
 800a86c:	2000      	movs	r0, #0
 800a86e:	42a0      	cmp	r0, r4
 800a870:	d00f      	beq.n	800a892 <_InitOnce+0xca>
 800a872:	1847      	adds	r7, r0, r1
 800a874:	f04f 0eff 	mov.w	lr, #255	; 0xff
 800a878:	fbb7 fefe 	udiv	lr, r7, lr
 800a87c:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 800a880:	ebce 0707 	rsb	r7, lr, r7
 800a884:	f833 c010 	ldrh.w	ip, [r3, r0, lsl #1]
 800a888:	b2bf      	uxth	r7, r7
 800a88a:	45bc      	cmp	ip, r7
 800a88c:	d1cf      	bne.n	800a82e <_InitOnce+0x66>
 800a88e:	3001      	adds	r0, #1
 800a890:	e7ed      	b.n	800a86e <_InitOnce+0xa6>
 800a892:	3101      	adds	r1, #1
 800a894:	2902      	cmp	r1, #2
 800a896:	d1d9      	bne.n	800a84c <_InitOnce+0x84>
 800a898:	2100      	movs	r1, #0
 800a89a:	2000      	movs	r0, #0
 800a89c:	4290      	cmp	r0, r2
 800a89e:	d007      	beq.n	800a8b0 <_InitOnce+0xe8>
 800a8a0:	1844      	adds	r4, r0, r1
 800a8a2:	27ff      	movs	r7, #255	; 0xff
 800a8a4:	fbb4 f7f7 	udiv	r7, r4, r7
 800a8a8:	443c      	add	r4, r7
 800a8aa:	541c      	strb	r4, [r3, r0]
 800a8ac:	3001      	adds	r0, #1
 800a8ae:	e7f5      	b.n	800a89c <_InitOnce+0xd4>
 800a8b0:	2000      	movs	r0, #0
 800a8b2:	4290      	cmp	r0, r2
 800a8b4:	d00b      	beq.n	800a8ce <_InitOnce+0x106>
 800a8b6:	1844      	adds	r4, r0, r1
 800a8b8:	27ff      	movs	r7, #255	; 0xff
 800a8ba:	fbb4 f7f7 	udiv	r7, r4, r7
 800a8be:	443c      	add	r4, r7
 800a8c0:	5c1f      	ldrb	r7, [r3, r0]
 800a8c2:	f004 04ff 	and.w	r4, r4, #255	; 0xff
 800a8c6:	42a7      	cmp	r7, r4
 800a8c8:	d1b1      	bne.n	800a82e <_InitOnce+0x66>
 800a8ca:	3001      	adds	r0, #1
 800a8cc:	e7f1      	b.n	800a8b2 <_InitOnce+0xea>
 800a8ce:	3101      	adds	r1, #1
 800a8d0:	2902      	cmp	r1, #2
 800a8d2:	d1e2      	bne.n	800a89a <_InitOnce+0xd2>
 800a8d4:	2100      	movs	r1, #0
 800a8d6:	4291      	cmp	r1, r2
 800a8d8:	d0a9      	beq.n	800a82e <_InitOnce+0x66>
 800a8da:	2000      	movs	r0, #0
 800a8dc:	5458      	strb	r0, [r3, r1]
 800a8de:	3101      	adds	r1, #1
 800a8e0:	e7f9      	b.n	800a8d6 <_InitOnce+0x10e>
 800a8e2:	4814      	ldr	r0, [pc, #80]	; (800a934 <_InitOnce+0x16c>)
 800a8e4:	4b14      	ldr	r3, [pc, #80]	; (800a938 <_InitOnce+0x170>)
 800a8e6:	6003      	str	r3, [r0, #0]
 800a8e8:	f7ff f83e 	bl	8009968 <GUI__RegisterExit>
 800a8ec:	235a      	movs	r3, #90	; 0x5a
 800a8ee:	6233      	str	r3, [r6, #32]
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	2110      	movs	r1, #16
 800a8f4:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800a8f8:	4099      	lsls	r1, r3
 800a8fa:	3301      	adds	r3, #1
 800a8fc:	2b10      	cmp	r3, #16
 800a8fe:	4c0b      	ldr	r4, [pc, #44]	; (800a92c <_InitOnce+0x164>)
 800a900:	6411      	str	r1, [r2, #64]	; 0x40
 800a902:	d1f6      	bne.n	800a8f2 <_InitOnce+0x12a>
 800a904:	6868      	ldr	r0, [r5, #4]
 800a906:	6829      	ldr	r1, [r5, #0]
 800a908:	63a1      	str	r1, [r4, #56]	; 0x38
 800a90a:	2302      	movs	r3, #2
 800a90c:	6123      	str	r3, [r4, #16]
 800a90e:	f1a0 0314 	sub.w	r3, r0, #20
 800a912:	440b      	add	r3, r1
 800a914:	2501      	movs	r5, #1
 800a916:	6363      	str	r3, [r4, #52]	; 0x34
 800a918:	60e0      	str	r0, [r4, #12]
 800a91a:	605d      	str	r5, [r3, #4]
 800a91c:	6265      	str	r5, [r4, #36]	; 0x24
 800a91e:	6065      	str	r5, [r4, #4]
 800a920:	f7ff fe02 	bl	800a528 <_AddFreeMemory>
 800a924:	f7ff ff04 	bl	800a730 <_EnlargeBlocks>
 800a928:	6325      	str	r5, [r4, #48]	; 0x30
 800a92a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a92c:	20019614 	.word	0x20019614
 800a930:	200191e4 	.word	0x200191e4
 800a934:	200191f0 	.word	0x200191f0
 800a938:	0800a4b1 	.word	0x0800a4b1

0800a93c <GUI_ALLOC_GetFixedBlock>:
 800a93c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a940:	4605      	mov	r5, r0
 800a942:	4e26      	ldr	r6, [pc, #152]	; (800a9dc <GUI_ALLOC_GetFixedBlock+0xa0>)
 800a944:	3503      	adds	r5, #3
 800a946:	f7ff ff3f 	bl	800a7c8 <_InitOnce>
 800a94a:	f025 0503 	bic.w	r5, r5, #3
 800a94e:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800a950:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 800a952:	3504      	adds	r5, #4
 800a954:	429d      	cmp	r5, r3
 800a956:	bf38      	it	cc
 800a958:	461d      	movcc	r5, r3
 800a95a:	4614      	mov	r4, r2
 800a95c:	b12c      	cbz	r4, 800a96a <GUI_ALLOC_GetFixedBlock+0x2e>
 800a95e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a962:	42ab      	cmp	r3, r5
 800a964:	d02c      	beq.n	800a9c0 <GUI_ALLOC_GetFixedBlock+0x84>
 800a966:	6824      	ldr	r4, [r4, #0]
 800a968:	e7f8      	b.n	800a95c <GUI_ALLOC_GetFixedBlock+0x20>
 800a96a:	68f3      	ldr	r3, [r6, #12]
 800a96c:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 800a96e:	eb02 0803 	add.w	r8, r2, r3
 800a972:	f858 7c04 	ldr.w	r7, [r8, #-4]
 800a976:	ebc7 0708 	rsb	r7, r7, r8
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	b133      	cbz	r3, 800a98c <GUI_ALLOC_GetFixedBlock+0x50>
 800a97e:	4620      	mov	r0, r4
 800a980:	f7ff fe22 	bl	800a5c8 <_RemoveHoles>
 800a984:	f858 7c04 	ldr.w	r7, [r8, #-4]
 800a988:	ebc7 0708 	rsb	r7, r7, r8
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	bb13      	cbnz	r3, 800a9d6 <GUI_ALLOC_GetFixedBlock+0x9a>
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	42ab      	cmp	r3, r5
 800a994:	db1f      	blt.n	800a9d6 <GUI_ALLOC_GetFixedBlock+0x9a>
 800a996:	4638      	mov	r0, r7
 800a998:	1d1c      	adds	r4, r3, #4
 800a99a:	f7ff fda5 	bl	800a4e8 <_RemoveFreeBlock>
 800a99e:	68f3      	ldr	r3, [r6, #12]
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	1b5b      	subs	r3, r3, r5
 800a9a4:	60f3      	str	r3, [r6, #12]
 800a9a6:	6973      	ldr	r3, [r6, #20]
 800a9a8:	1b64      	subs	r4, r4, r5
 800a9aa:	442b      	add	r3, r5
 800a9ac:	1b40      	subs	r0, r0, r5
 800a9ae:	443c      	add	r4, r7
 800a9b0:	6173      	str	r3, [r6, #20]
 800a9b2:	d002      	beq.n	800a9ba <GUI_ALLOC_GetFixedBlock+0x7e>
 800a9b4:	4639      	mov	r1, r7
 800a9b6:	f7ff fdb7 	bl	800a528 <_AddFreeMemory>
 800a9ba:	f844 5c04 	str.w	r5, [r4, #-4]
 800a9be:	e00a      	b.n	800a9d6 <GUI_ALLOC_GetFixedBlock+0x9a>
 800a9c0:	6823      	ldr	r3, [r4, #0]
 800a9c2:	b10b      	cbz	r3, 800a9c8 <GUI_ALLOC_GetFixedBlock+0x8c>
 800a9c4:	6861      	ldr	r1, [r4, #4]
 800a9c6:	6059      	str	r1, [r3, #4]
 800a9c8:	6861      	ldr	r1, [r4, #4]
 800a9ca:	b101      	cbz	r1, 800a9ce <GUI_ALLOC_GetFixedBlock+0x92>
 800a9cc:	600b      	str	r3, [r1, #0]
 800a9ce:	42a2      	cmp	r2, r4
 800a9d0:	d101      	bne.n	800a9d6 <GUI_ALLOC_GetFixedBlock+0x9a>
 800a9d2:	6823      	ldr	r3, [r4, #0]
 800a9d4:	63f3      	str	r3, [r6, #60]	; 0x3c
 800a9d6:	4620      	mov	r0, r4
 800a9d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9dc:	20019614 	.word	0x20019614

0800a9e0 <GUI_ALLOC_GetMaxSize>:
 800a9e0:	b508      	push	{r3, lr}
 800a9e2:	f7ff fef1 	bl	800a7c8 <_InitOnce>
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	4b0b      	ldr	r3, [pc, #44]	; (800aa18 <GUI_ALLOC_GetMaxSize+0x38>)
 800a9ea:	4413      	add	r3, r2
 800a9ec:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a9f0:	b113      	cbz	r3, 800a9f8 <GUI_ALLOC_GetMaxSize+0x18>
 800a9f2:	689b      	ldr	r3, [r3, #8]
 800a9f4:	2000      	movs	r0, #0
 800a9f6:	e00b      	b.n	800aa10 <GUI_ALLOC_GetMaxSize+0x30>
 800a9f8:	3a08      	subs	r2, #8
 800a9fa:	f112 0f80 	cmn.w	r2, #128	; 0x80
 800a9fe:	d1f3      	bne.n	800a9e8 <GUI_ALLOC_GetMaxSize+0x8>
 800aa00:	e7f8      	b.n	800a9f4 <GUI_ALLOC_GetMaxSize+0x14>
 800aa02:	685a      	ldr	r2, [r3, #4]
 800aa04:	689b      	ldr	r3, [r3, #8]
 800aa06:	4290      	cmp	r0, r2
 800aa08:	bf38      	it	cc
 800aa0a:	4610      	movcc	r0, r2
 800aa0c:	b113      	cbz	r3, 800aa14 <GUI_ALLOC_GetMaxSize+0x34>
 800aa0e:	689b      	ldr	r3, [r3, #8]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d1f6      	bne.n	800aa02 <GUI_ALLOC_GetMaxSize+0x22>
 800aa14:	380c      	subs	r0, #12
 800aa16:	bd08      	pop	{r3, pc}
 800aa18:	20019614 	.word	0x20019614

0800aa1c <GUI_ALLOC_RequestSize>:
 800aa1c:	b508      	push	{r3, lr}
 800aa1e:	f7ff ffdf 	bl	800a9e0 <GUI_ALLOC_GetMaxSize>
 800aa22:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 800aa26:	f04f 0364 	mov.w	r3, #100	; 0x64
 800aa2a:	4a06      	ldr	r2, [pc, #24]	; (800aa44 <GUI_ALLOC_RequestSize+0x28>)
 800aa2c:	d904      	bls.n	800aa38 <GUI_ALLOC_RequestSize+0x1c>
 800aa2e:	fb90 f0f3 	sdiv	r0, r0, r3
 800aa32:	6a13      	ldr	r3, [r2, #32]
 800aa34:	4358      	muls	r0, r3
 800aa36:	bd08      	pop	{r3, pc}
 800aa38:	6a12      	ldr	r2, [r2, #32]
 800aa3a:	4350      	muls	r0, r2
 800aa3c:	fbb0 f0f3 	udiv	r0, r0, r3
 800aa40:	bd08      	pop	{r3, pc}
 800aa42:	bf00      	nop
 800aa44:	20019614 	.word	0x20019614

0800aa48 <_Alloc>:
 800aa48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa4c:	4d38      	ldr	r5, [pc, #224]	; (800ab30 <_Alloc+0xe8>)
 800aa4e:	4604      	mov	r4, r0
 800aa50:	f7ff feba 	bl	800a7c8 <_InitOnce>
 800aa54:	6c2f      	ldr	r7, [r5, #64]	; 0x40
 800aa56:	682b      	ldr	r3, [r5, #0]
 800aa58:	42bc      	cmp	r4, r7
 800aa5a:	bf24      	itt	cs
 800aa5c:	1ce7      	addcs	r7, r4, #3
 800aa5e:	f027 0703 	biccs.w	r7, r7, #3
 800aa62:	370c      	adds	r7, #12
 800aa64:	429f      	cmp	r7, r3
 800aa66:	4c32      	ldr	r4, [pc, #200]	; (800ab30 <_Alloc+0xe8>)
 800aa68:	d83e      	bhi.n	800aae8 <_Alloc+0xa0>
 800aa6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800aa6c:	6862      	ldr	r2, [r4, #4]
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	d90f      	bls.n	800aa92 <_Alloc+0x4a>
 800aa72:	686b      	ldr	r3, [r5, #4]
 800aa74:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 800aa76:	3b01      	subs	r3, #1
 800aa78:	606b      	str	r3, [r5, #4]
 800aa7a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800aa7c:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 800aa80:	eb03 0209 	add.w	r2, r3, r9
 800aa84:	6852      	ldr	r2, [r2, #4]
 800aa86:	626a      	str	r2, [r5, #36]	; 0x24
 800aa88:	2201      	movs	r2, #1
 800aa8a:	f803 2036 	strb.w	r2, [r3, r6, lsl #3]
 800aa8e:	b956      	cbnz	r6, 800aaa6 <_Alloc+0x5e>
 800aa90:	e02a      	b.n	800aae8 <_Alloc+0xa0>
 800aa92:	3b01      	subs	r3, #1
 800aa94:	6323      	str	r3, [r4, #48]	; 0x30
 800aa96:	f7ff fe4b 	bl	800a730 <_EnlargeBlocks>
 800aa9a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	6323      	str	r3, [r4, #48]	; 0x30
 800aaa0:	2800      	cmp	r0, #0
 800aaa2:	d0e6      	beq.n	800aa72 <_Alloc+0x2a>
 800aaa4:	e020      	b.n	800aae8 <_Alloc+0xa0>
 800aaa6:	230f      	movs	r3, #15
 800aaa8:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 800aaac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800aaae:	4297      	cmp	r7, r2
 800aab0:	d20c      	bcs.n	800aacc <_Alloc+0x84>
 800aab2:	f113 33ff 	adds.w	r3, r3, #4294967295
 800aab6:	d2f7      	bcs.n	800aaa8 <_Alloc+0x60>
 800aab8:	e008      	b.n	800aacc <_Alloc+0x84>
 800aaba:	6894      	ldr	r4, [r2, #8]
 800aabc:	b12c      	cbz	r4, 800aaca <_Alloc+0x82>
 800aabe:	6862      	ldr	r2, [r4, #4]
 800aac0:	4297      	cmp	r7, r2
 800aac2:	d914      	bls.n	800aaee <_Alloc+0xa6>
 800aac4:	68a2      	ldr	r2, [r4, #8]
 800aac6:	2a00      	cmp	r2, #0
 800aac8:	d1f7      	bne.n	800aaba <_Alloc+0x72>
 800aaca:	3301      	adds	r3, #1
 800aacc:	2b0f      	cmp	r3, #15
 800aace:	d803      	bhi.n	800aad8 <_Alloc+0x90>
 800aad0:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 800aad4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800aad6:	e7f6      	b.n	800aac6 <_Alloc+0x7e>
 800aad8:	4638      	mov	r0, r7
 800aada:	f7ff fd75 	bl	800a5c8 <_RemoveHoles>
 800aade:	2800      	cmp	r0, #0
 800aae0:	d0e1      	beq.n	800aaa6 <_Alloc+0x5e>
 800aae2:	4630      	mov	r0, r6
 800aae4:	f7ff fcd2 	bl	800a48c <_PushFreeBlock>
 800aae8:	2000      	movs	r0, #0
 800aaea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aaee:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800aaf2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800aaf4:	ebc7 0208 	rsb	r2, r7, r8
 800aaf8:	330c      	adds	r3, #12
 800aafa:	4620      	mov	r0, r4
 800aafc:	429a      	cmp	r2, r3
 800aafe:	bf38      	it	cc
 800ab00:	4647      	movcc	r7, r8
 800ab02:	f7ff fcf1 	bl	800a4e8 <_RemoveFreeBlock>
 800ab06:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800ab08:	444b      	add	r3, r9
 800ab0a:	19e1      	adds	r1, r4, r7
 800ab0c:	605c      	str	r4, [r3, #4]
 800ab0e:	45b8      	cmp	r8, r7
 800ab10:	f04f 0300 	mov.w	r3, #0
 800ab14:	e884 00c0 	stmia.w	r4, {r6, r7}
 800ab18:	60a3      	str	r3, [r4, #8]
 800ab1a:	6124      	str	r4, [r4, #16]
 800ab1c:	f841 7c04 	str.w	r7, [r1, #-4]
 800ab20:	dd03      	ble.n	800ab2a <_Alloc+0xe2>
 800ab22:	ebc7 0008 	rsb	r0, r7, r8
 800ab26:	f7ff fcff 	bl	800a528 <_AddFreeMemory>
 800ab2a:	4630      	mov	r0, r6
 800ab2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab30:	20019614 	.word	0x20019614

0800ab34 <GUI_ALLOC_AllocNoInit>:
 800ab34:	b108      	cbz	r0, 800ab3a <GUI_ALLOC_AllocNoInit+0x6>
 800ab36:	f7ff bf87 	b.w	800aa48 <_Alloc>
 800ab3a:	4770      	bx	lr

0800ab3c <GUI_ALLOC_FreePtr>:
 800ab3c:	b510      	push	{r4, lr}
 800ab3e:	4604      	mov	r4, r0
 800ab40:	6800      	ldr	r0, [r0, #0]
 800ab42:	f7ff fddd 	bl	800a700 <GUI_ALLOC_Free>
 800ab46:	2300      	movs	r3, #0
 800ab48:	6023      	str	r3, [r4, #0]
 800ab4a:	bd10      	pop	{r4, pc}

0800ab4c <GUI_ALLOC_AllocZero>:
 800ab4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ab4e:	4605      	mov	r5, r0
 800ab50:	f7ff fff0 	bl	800ab34 <GUI_ALLOC_AllocNoInit>
 800ab54:	4606      	mov	r6, r0
 800ab56:	b158      	cbz	r0, 800ab70 <GUI_ALLOC_AllocZero+0x24>
 800ab58:	f7ff fd98 	bl	800a68c <GUI_ALLOC_LockH>
 800ab5c:	ac02      	add	r4, sp, #8
 800ab5e:	2100      	movs	r1, #0
 800ab60:	f844 0d04 	str.w	r0, [r4, #-4]!
 800ab64:	462a      	mov	r2, r5
 800ab66:	f7fd fded 	bl	8008744 <GUI__memset>
 800ab6a:	4620      	mov	r0, r4
 800ab6c:	f7ff fd9c 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 800ab70:	4630      	mov	r0, r6
 800ab72:	b002      	add	sp, #8
 800ab74:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ab78 <LCD_Index2Color_M565>:
 800ab78:	f3c0 21c4 	ubfx	r1, r0, #11, #5
 800ab7c:	4b06      	ldr	r3, [pc, #24]	; (800ab98 <LCD_Index2Color_M565+0x20>)
 800ab7e:	f000 021f 	and.w	r2, r0, #31
 800ab82:	f3c0 1045 	ubfx	r0, r0, #5, #6
 800ab86:	5c9a      	ldrb	r2, [r3, r2]
 800ab88:	5c5b      	ldrb	r3, [r3, r1]
 800ab8a:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 800ab8e:	4a03      	ldr	r2, [pc, #12]	; (800ab9c <LCD_Index2Color_M565+0x24>)
 800ab90:	5c10      	ldrb	r0, [r2, r0]
 800ab92:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 800ab96:	4770      	bx	lr
 800ab98:	08010120 	.word	0x08010120
 800ab9c:	080100e0 	.word	0x080100e0

0800aba0 <_Color2Index_M565>:
 800aba0:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800aba4:	4b06      	ldr	r3, [pc, #24]	; (800abc0 <_Color2Index_M565+0x20>)
 800aba6:	b2c2      	uxtb	r2, r0
 800aba8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800abac:	5c9a      	ldrb	r2, [r3, r2]
 800abae:	5c5b      	ldrb	r3, [r3, r1]
 800abb0:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
 800abb4:	4a03      	ldr	r2, [pc, #12]	; (800abc4 <_Color2Index_M565+0x24>)
 800abb6:	5c10      	ldrb	r0, [r2, r0]
 800abb8:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 800abbc:	4770      	bx	lr
 800abbe:	bf00      	nop
 800abc0:	08010240 	.word	0x08010240
 800abc4:	08010140 	.word	0x08010140

0800abc8 <_GetIndexMask_M565>:
 800abc8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800abcc:	4770      	bx	lr
	...

0800abd0 <_Color2IndexBulk>:
 800abd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abd2:	4f0f      	ldr	r7, [pc, #60]	; (800ac10 <_Color2IndexBulk+0x40>)
 800abd4:	683f      	ldr	r7, [r7, #0]
 800abd6:	4606      	mov	r6, r0
 800abd8:	460d      	mov	r5, r1
 800abda:	4614      	mov	r4, r2
 800abdc:	469c      	mov	ip, r3
 800abde:	b10f      	cbz	r7, 800abe4 <_Color2IndexBulk+0x14>
 800abe0:	47b8      	blx	r7
 800abe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abe4:	f856 2b04 	ldr.w	r2, [r6], #4
 800abe8:	490a      	ldr	r1, [pc, #40]	; (800ac14 <_Color2IndexBulk+0x44>)
 800abea:	b2d3      	uxtb	r3, r2
 800abec:	3c01      	subs	r4, #1
 800abee:	5cc8      	ldrb	r0, [r1, r3]
 800abf0:	f3c2 4307 	ubfx	r3, r2, #16, #8
 800abf4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800abf8:	5ccb      	ldrb	r3, [r1, r3]
 800abfa:	4907      	ldr	r1, [pc, #28]	; (800ac18 <_Color2IndexBulk+0x48>)
 800abfc:	5c8a      	ldrb	r2, [r1, r2]
 800abfe:	eb03 23c0 	add.w	r3, r3, r0, lsl #11
 800ac02:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800ac06:	802b      	strh	r3, [r5, #0]
 800ac08:	4465      	add	r5, ip
 800ac0a:	d1eb      	bne.n	800abe4 <_Color2IndexBulk+0x14>
 800ac0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac0e:	bf00      	nop
 800ac10:	200191fc 	.word	0x200191fc
 800ac14:	08010240 	.word	0x08010240
 800ac18:	08010140 	.word	0x08010140

0800ac1c <_Index2ColorBulk>:
 800ac1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac1e:	4e13      	ldr	r6, [pc, #76]	; (800ac6c <_Index2ColorBulk+0x50>)
 800ac20:	6836      	ldr	r6, [r6, #0]
 800ac22:	4684      	mov	ip, r0
 800ac24:	4614      	mov	r4, r2
 800ac26:	461d      	mov	r5, r3
 800ac28:	b10e      	cbz	r6, 800ac2e <_Index2ColorBulk+0x12>
 800ac2a:	47b0      	blx	r6
 800ac2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac2e:	1e50      	subs	r0, r2, #1
 800ac30:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800ac34:	3a01      	subs	r2, #1
 800ac36:	fb03 c000 	mla	r0, r3, r0, ip
 800ac3a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ac3e:	8802      	ldrh	r2, [r0, #0]
 800ac40:	4b0b      	ldr	r3, [pc, #44]	; (800ac70 <_Index2ColorBulk+0x54>)
 800ac42:	f002 061f 	and.w	r6, r2, #31
 800ac46:	0ad7      	lsrs	r7, r2, #11
 800ac48:	5d9e      	ldrb	r6, [r3, r6]
 800ac4a:	5ddb      	ldrb	r3, [r3, r7]
 800ac4c:	f3c2 1245 	ubfx	r2, r2, #5, #6
 800ac50:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 800ac54:	4e07      	ldr	r6, [pc, #28]	; (800ac74 <_Index2ColorBulk+0x58>)
 800ac56:	5cb2      	ldrb	r2, [r6, r2]
 800ac58:	3c01      	subs	r4, #1
 800ac5a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800ac5e:	f841 3904 	str.w	r3, [r1], #-4
 800ac62:	ebc5 0000 	rsb	r0, r5, r0
 800ac66:	d1ea      	bne.n	800ac3e <_Index2ColorBulk+0x22>
 800ac68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac6a:	bf00      	nop
 800ac6c:	200191f8 	.word	0x200191f8
 800ac70:	08010120 	.word	0x08010120
 800ac74:	080100e0 	.word	0x080100e0

0800ac78 <LCD_Index2Color_8888>:
 800ac78:	4770      	bx	lr

0800ac7a <_Color2Index_8888>:
 800ac7a:	4770      	bx	lr

0800ac7c <_GetIndexMask_8888>:
 800ac7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac80:	4770      	bx	lr

0800ac82 <_Color2IndexBulk>:
 800ac82:	b510      	push	{r4, lr}
 800ac84:	f850 4b04 	ldr.w	r4, [r0], #4
 800ac88:	600c      	str	r4, [r1, #0]
 800ac8a:	3a01      	subs	r2, #1
 800ac8c:	4419      	add	r1, r3
 800ac8e:	d1f9      	bne.n	800ac84 <_Color2IndexBulk+0x2>
 800ac90:	bd10      	pop	{r4, pc}

0800ac92 <_Index2ColorBulk>:
 800ac92:	b510      	push	{r4, lr}
 800ac94:	6804      	ldr	r4, [r0, #0]
 800ac96:	f841 4b04 	str.w	r4, [r1], #4
 800ac9a:	3a01      	subs	r2, #1
 800ac9c:	4418      	add	r0, r3
 800ac9e:	d1f9      	bne.n	800ac94 <_Index2ColorBulk+0x2>
 800aca0:	bd10      	pop	{r4, pc}
	...

0800aca4 <WM__SendMessage>:
 800aca4:	b570      	push	{r4, r5, r6, lr}
 800aca6:	4c0d      	ldr	r4, [pc, #52]	; (800acdc <WM__SendMessage+0x38>)
 800aca8:	6823      	ldr	r3, [r4, #0]
 800acaa:	2b13      	cmp	r3, #19
 800acac:	4606      	mov	r6, r0
 800acae:	460d      	mov	r5, r1
 800acb0:	dc12      	bgt.n	800acd8 <WM__SendMessage+0x34>
 800acb2:	f7ff fce1 	bl	800a678 <GUI_ALLOC_h2p>
 800acb6:	6903      	ldr	r3, [r0, #16]
 800acb8:	606e      	str	r6, [r5, #4]
 800acba:	b143      	cbz	r3, 800acce <WM__SendMessage+0x2a>
 800acbc:	6822      	ldr	r2, [r4, #0]
 800acbe:	4628      	mov	r0, r5
 800acc0:	3201      	adds	r2, #1
 800acc2:	6022      	str	r2, [r4, #0]
 800acc4:	4798      	blx	r3
 800acc6:	6823      	ldr	r3, [r4, #0]
 800acc8:	3b01      	subs	r3, #1
 800acca:	6023      	str	r3, [r4, #0]
 800accc:	bd70      	pop	{r4, r5, r6, pc}
 800acce:	4628      	mov	r0, r5
 800acd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800acd4:	f7fb bd66 	b.w	80067a4 <WM_DefaultProc>
 800acd8:	bd70      	pop	{r4, r5, r6, pc}
 800acda:	bf00      	nop
 800acdc:	20019200 	.word	0x20019200

0800ace0 <WM__GetPrevSibling>:
 800ace0:	b538      	push	{r3, r4, r5, lr}
 800ace2:	4605      	mov	r5, r0
 800ace4:	f000 f80f 	bl	800ad06 <WM__GetFirstSibling>
 800ace8:	4604      	mov	r4, r0
 800acea:	b154      	cbz	r4, 800ad02 <WM__GetPrevSibling+0x22>
 800acec:	42ac      	cmp	r4, r5
 800acee:	d007      	beq.n	800ad00 <WM__GetPrevSibling+0x20>
 800acf0:	4620      	mov	r0, r4
 800acf2:	f7ff fcc1 	bl	800a678 <GUI_ALLOC_h2p>
 800acf6:	6a03      	ldr	r3, [r0, #32]
 800acf8:	42ab      	cmp	r3, r5
 800acfa:	d002      	beq.n	800ad02 <WM__GetPrevSibling+0x22>
 800acfc:	461c      	mov	r4, r3
 800acfe:	e7f4      	b.n	800acea <WM__GetPrevSibling+0xa>
 800ad00:	2400      	movs	r4, #0
 800ad02:	4620      	mov	r0, r4
 800ad04:	bd38      	pop	{r3, r4, r5, pc}

0800ad06 <WM__GetFirstSibling>:
 800ad06:	b508      	push	{r3, lr}
 800ad08:	f7fa ff94 	bl	8005c34 <WM_GetParent>
 800ad0c:	b118      	cbz	r0, 800ad16 <WM__GetFirstSibling+0x10>
 800ad0e:	f7ff fcb3 	bl	800a678 <GUI_ALLOC_h2p>
 800ad12:	69c0      	ldr	r0, [r0, #28]
 800ad14:	bd08      	pop	{r3, pc}
 800ad16:	bd08      	pop	{r3, pc}

0800ad18 <WM_SendToParent>:
 800ad18:	b538      	push	{r3, r4, r5, lr}
 800ad1a:	4605      	mov	r5, r0
 800ad1c:	460c      	mov	r4, r1
 800ad1e:	b141      	cbz	r1, 800ad32 <WM_SendToParent+0x1a>
 800ad20:	f7fa ff88 	bl	8005c34 <WM_GetParent>
 800ad24:	b128      	cbz	r0, 800ad32 <WM_SendToParent+0x1a>
 800ad26:	60a5      	str	r5, [r4, #8]
 800ad28:	4621      	mov	r1, r4
 800ad2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad2e:	f7ff bfb9 	b.w	800aca4 <WM__SendMessage>
 800ad32:	bd38      	pop	{r3, r4, r5, pc}

0800ad34 <WM__AddCriticalHandle>:
 800ad34:	4b02      	ldr	r3, [pc, #8]	; (800ad40 <WM__AddCriticalHandle+0xc>)
 800ad36:	681a      	ldr	r2, [r3, #0]
 800ad38:	6002      	str	r2, [r0, #0]
 800ad3a:	6018      	str	r0, [r3, #0]
 800ad3c:	4770      	bx	lr
 800ad3e:	bf00      	nop
 800ad40:	200195bc 	.word	0x200195bc

0800ad44 <WM_BringToBottom>:
 800ad44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ad48:	4604      	mov	r4, r0
 800ad4a:	b087      	sub	sp, #28
 800ad4c:	2800      	cmp	r0, #0
 800ad4e:	d039      	beq.n	800adc4 <WM_BringToBottom+0x80>
 800ad50:	f7ff fc9c 	bl	800a68c <GUI_ALLOC_LockH>
 800ad54:	4603      	mov	r3, r0
 800ad56:	9001      	str	r0, [sp, #4]
 800ad58:	c803      	ldmia	r0, {r0, r1}
 800ad5a:	ad04      	add	r5, sp, #16
 800ad5c:	e885 0003 	stmia.w	r5, {r0, r1}
 800ad60:	a801      	add	r0, sp, #4
 800ad62:	6a1e      	ldr	r6, [r3, #32]
 800ad64:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
 800ad68:	f7ff fc9e 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 800ad6c:	4620      	mov	r0, r4
 800ad6e:	f7ff ffb7 	bl	800ace0 <WM__GetPrevSibling>
 800ad72:	4607      	mov	r7, r0
 800ad74:	b330      	cbz	r0, 800adc4 <WM_BringToBottom+0x80>
 800ad76:	4620      	mov	r0, r4
 800ad78:	f7fa ff5c 	bl	8005c34 <WM_GetParent>
 800ad7c:	f019 0f02 	tst.w	r9, #2
 800ad80:	4680      	mov	r8, r0
 800ad82:	d004      	beq.n	800ad8e <WM_BringToBottom+0x4a>
 800ad84:	4628      	mov	r0, r5
 800ad86:	4641      	mov	r1, r8
 800ad88:	4632      	mov	r2, r6
 800ad8a:	f7fb fa74 	bl	8006276 <WM__InvalidateRectEx>
 800ad8e:	4620      	mov	r0, r4
 800ad90:	f7ff fc7c 	bl	800a68c <GUI_ALLOC_LockH>
 800ad94:	9001      	str	r0, [sp, #4]
 800ad96:	4640      	mov	r0, r8
 800ad98:	f7ff fc78 	bl	800a68c <GUI_ALLOC_LockH>
 800ad9c:	9003      	str	r0, [sp, #12]
 800ad9e:	4638      	mov	r0, r7
 800ada0:	f7ff fc74 	bl	800a68c <GUI_ALLOC_LockH>
 800ada4:	9b03      	ldr	r3, [sp, #12]
 800ada6:	9a01      	ldr	r2, [sp, #4]
 800ada8:	69d9      	ldr	r1, [r3, #28]
 800adaa:	6206      	str	r6, [r0, #32]
 800adac:	9002      	str	r0, [sp, #8]
 800adae:	6211      	str	r1, [r2, #32]
 800adb0:	a801      	add	r0, sp, #4
 800adb2:	61dc      	str	r4, [r3, #28]
 800adb4:	f7ff fc78 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 800adb8:	a803      	add	r0, sp, #12
 800adba:	f7ff fc75 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 800adbe:	a802      	add	r0, sp, #8
 800adc0:	f7ff fc72 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 800adc4:	b007      	add	sp, #28
 800adc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800adca <_Convert16>:
 800adca:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adce:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800add2:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800add6:	4605      	mov	r5, r0
 800add8:	460e      	mov	r6, r1
 800adda:	4690      	mov	r8, r2
 800addc:	461f      	mov	r7, r3
 800adde:	4614      	mov	r4, r2
 800ade0:	4689      	mov	r9, r1
 800ade2:	f835 0b02 	ldrh.w	r0, [r5], #2
 800ade6:	47d8      	blx	fp
 800ade8:	47d0      	blx	sl
 800adea:	3c01      	subs	r4, #1
 800adec:	f849 0b04 	str.w	r0, [r9], #4
 800adf0:	d1f7      	bne.n	800ade2 <_Convert16+0x18>
 800adf2:	2f1f      	cmp	r7, #31
 800adf4:	d806      	bhi.n	800ae04 <_Convert16+0x3a>
 800adf6:	4630      	mov	r0, r6
 800adf8:	4641      	mov	r1, r8
 800adfa:	463a      	mov	r2, r7
 800adfc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae00:	f001 ba82 	b.w	800c308 <GUI__CompactPixelIndices>
 800ae04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ae08 <_Convert8>:
 800ae08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae0c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800ae10:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800ae14:	4605      	mov	r5, r0
 800ae16:	460e      	mov	r6, r1
 800ae18:	4690      	mov	r8, r2
 800ae1a:	461f      	mov	r7, r3
 800ae1c:	4689      	mov	r9, r1
 800ae1e:	4604      	mov	r4, r0
 800ae20:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ae24:	47d8      	blx	fp
 800ae26:	47d0      	blx	sl
 800ae28:	1b2b      	subs	r3, r5, r4
 800ae2a:	4443      	add	r3, r8
 800ae2c:	f849 0b04 	str.w	r0, [r9], #4
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d1f5      	bne.n	800ae20 <_Convert8+0x18>
 800ae34:	2f1f      	cmp	r7, #31
 800ae36:	d806      	bhi.n	800ae46 <_Convert8+0x3e>
 800ae38:	4630      	mov	r0, r6
 800ae3a:	4641      	mov	r1, r8
 800ae3c:	463a      	mov	r2, r7
 800ae3e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae42:	f001 ba61 	b.w	800c308 <GUI__CompactPixelIndices>
 800ae46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800ae4c <GUI_MEMDEV__WriteToActiveOpaque>:
 800ae4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae50:	b09d      	sub	sp, #116	; 0x74
 800ae52:	4606      	mov	r6, r0
 800ae54:	910f      	str	r1, [sp, #60]	; 0x3c
 800ae56:	920d      	str	r2, [sp, #52]	; 0x34
 800ae58:	2800      	cmp	r0, #0
 800ae5a:	f000 8386 	beq.w	800b56a <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800ae5e:	f7ff fc15 	bl	800a68c <GUI_ALLOC_LockH>
 800ae62:	ab1c      	add	r3, sp, #112	; 0x70
 800ae64:	6944      	ldr	r4, [r0, #20]
 800ae66:	f843 0d1c 	str.w	r0, [r3, #-28]!
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f7ff fc1c 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 800ae70:	4630      	mov	r0, r6
 800ae72:	f7fb fdfb 	bl	8006a6c <GUI_MEMDEV_GetBitsPerPixel>
 800ae76:	2808      	cmp	r0, #8
 800ae78:	4601      	mov	r1, r0
 800ae7a:	dd02      	ble.n	800ae82 <GUI_MEMDEV__WriteToActiveOpaque+0x36>
 800ae7c:	2c00      	cmp	r4, #0
 800ae7e:	f000 81c3 	beq.w	800b208 <GUI_MEMDEV__WriteToActiveOpaque+0x3bc>
 800ae82:	2201      	movs	r2, #1
 800ae84:	f04f 0800 	mov.w	r8, #0
 800ae88:	4630      	mov	r0, r6
 800ae8a:	921b      	str	r2, [sp, #108]	; 0x6c
 800ae8c:	920b      	str	r2, [sp, #44]	; 0x2c
 800ae8e:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800ae92:	f7ff fbfb 	bl	800a68c <GUI_ALLOC_LockH>
 800ae96:	6803      	ldr	r3, [r0, #0]
 800ae98:	f8df a60c 	ldr.w	sl, [pc, #1548]	; 800b4a8 <GUI_MEMDEV__WriteToActiveOpaque+0x65c>
 800ae9c:	691b      	ldr	r3, [r3, #16]
 800ae9e:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	930e      	str	r3, [sp, #56]	; 0x38
 800aea6:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 800aeaa:	f8da 3000 	ldr.w	r3, [sl]
 800aeae:	f84b 0d14 	str.w	r0, [fp, #-20]!
 800aeb2:	6904      	ldr	r4, [r0, #16]
 800aeb4:	6945      	ldr	r5, [r0, #20]
 800aeb6:	f8d0 900c 	ldr.w	r9, [r0, #12]
 800aeba:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 800aebe:	7c58      	ldrb	r0, [r3, #17]
 800aec0:	9112      	str	r1, [sp, #72]	; 0x48
 800aec2:	f7fd f805 	bl	8007ed0 <GUI_GetBitsPerPixelEx>
 800aec6:	f8da 3000 	ldr.w	r3, [sl]
 800aeca:	9010      	str	r0, [sp, #64]	; 0x40
 800aecc:	7c58      	ldrb	r0, [r3, #17]
 800aece:	f7fd f81d 	bl	8007f0c <GUI_GetpfIndex2ColorEx>
 800aed2:	4603      	mov	r3, r0
 800aed4:	4658      	mov	r0, fp
 800aed6:	9309      	str	r3, [sp, #36]	; 0x24
 800aed8:	f7ff fbe6 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 800aedc:	2c08      	cmp	r4, #8
 800aede:	4651      	mov	r1, sl
 800aee0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aee4:	d904      	bls.n	800aef0 <GUI_MEMDEV__WriteToActiveOpaque+0xa4>
 800aee6:	2c10      	cmp	r4, #16
 800aee8:	bf8c      	ite	hi
 800aeea:	2204      	movhi	r2, #4
 800aeec:	2202      	movls	r2, #2
 800aeee:	e005      	b.n	800aefc <GUI_MEMDEV__WriteToActiveOpaque+0xb0>
 800aef0:	2c01      	cmp	r4, #1
 800aef2:	d103      	bne.n	800aefc <GUI_MEMDEV__WriteToActiveOpaque+0xb0>
 800aef4:	9411      	str	r4, [sp, #68]	; 0x44
 800aef6:	f10d 0868 	add.w	r8, sp, #104	; 0x68
 800aefa:	e000      	b.n	800aefe <GUI_MEMDEV__WriteToActiveOpaque+0xb2>
 800aefc:	9211      	str	r2, [sp, #68]	; 0x44
 800aefe:	980e      	ldr	r0, [sp, #56]	; 0x38
 800af00:	4298      	cmp	r0, r3
 800af02:	f000 80e2 	beq.w	800b0ca <GUI_MEMDEV__WriteToActiveOpaque+0x27e>
 800af06:	680b      	ldr	r3, [r1, #0]
 800af08:	7c58      	ldrb	r0, [r3, #17]
 800af0a:	f7fd f807 	bl	8007f1c <GUI_GetpfColor2IndexEx>
 800af0e:	9013      	str	r0, [sp, #76]	; 0x4c
 800af10:	00b8      	lsls	r0, r7, #2
 800af12:	f7ff fe0f 	bl	800ab34 <GUI_ALLOC_AllocNoInit>
 800af16:	900c      	str	r0, [sp, #48]	; 0x30
 800af18:	2800      	cmp	r0, #0
 800af1a:	f000 8326 	beq.w	800b56a <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800af1e:	4630      	mov	r0, r6
 800af20:	f7fb fd12 	bl	8006948 <GUI_MEMDEV_GetDataPtr>
 800af24:	4606      	mov	r6, r0
 800af26:	2d00      	cmp	r5, #0
 800af28:	f000 80be 	beq.w	800b0a8 <GUI_MEMDEV__WriteToActiveOpaque+0x25c>
 800af2c:	4628      	mov	r0, r5
 800af2e:	f7ff fbad 	bl	800a68c <GUI_ALLOC_LockH>
 800af32:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800af36:	9018      	str	r0, [sp, #96]	; 0x60
 800af38:	f04f 0a00 	mov.w	sl, #0
 800af3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800af3e:	4592      	cmp	sl, r2
 800af40:	f280 80ae 	bge.w	800b0a0 <GUI_MEMDEV__WriteToActiveOpaque+0x254>
 800af44:	9818      	ldr	r0, [sp, #96]	; 0x60
 800af46:	2300      	movs	r3, #0
 800af48:	9319      	str	r3, [sp, #100]	; 0x64
 800af4a:	6883      	ldr	r3, [r0, #8]
 800af4c:	a919      	add	r1, sp, #100	; 0x64
 800af4e:	695b      	ldr	r3, [r3, #20]
 800af50:	4652      	mov	r2, sl
 800af52:	4798      	blx	r3
 800af54:	42b8      	cmp	r0, r7
 800af56:	4605      	mov	r5, r0
 800af58:	d12f      	bne.n	800afba <GUI_MEMDEV__WriteToActiveOpaque+0x16e>
 800af5a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800af5c:	f7ff fb96 	bl	800a68c <GUI_ALLOC_LockH>
 800af60:	2c08      	cmp	r4, #8
 800af62:	4601      	mov	r1, r0
 800af64:	9016      	str	r0, [sp, #88]	; 0x58
 800af66:	d909      	bls.n	800af7c <GUI_MEMDEV__WriteToActiveOpaque+0x130>
 800af68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af6a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800af6c:	9200      	str	r2, [sp, #0]
 800af6e:	9301      	str	r3, [sp, #4]
 800af70:	4630      	mov	r0, r6
 800af72:	463a      	mov	r2, r7
 800af74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800af76:	f7ff ff28 	bl	800adca <_Convert16>
 800af7a:	e008      	b.n	800af8e <GUI_MEMDEV__WriteToActiveOpaque+0x142>
 800af7c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800af7e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800af80:	9000      	str	r0, [sp, #0]
 800af82:	9201      	str	r2, [sp, #4]
 800af84:	4630      	mov	r0, r6
 800af86:	463a      	mov	r2, r7
 800af88:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800af8a:	f7ff ff3d 	bl	800ae08 <_Convert8>
 800af8e:	2301      	movs	r3, #1
 800af90:	9810      	ldr	r0, [sp, #64]	; 0x40
 800af92:	9002      	str	r0, [sp, #8]
 800af94:	ad1c      	add	r5, sp, #112	; 0x70
 800af96:	2200      	movs	r2, #0
 800af98:	9300      	str	r3, [sp, #0]
 800af9a:	9301      	str	r3, [sp, #4]
 800af9c:	9203      	str	r2, [sp, #12]
 800af9e:	f855 2d18 	ldr.w	r2, [r5, #-24]!
 800afa2:	9204      	str	r2, [sp, #16]
 800afa4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800afa6:	f8cd 8014 	str.w	r8, [sp, #20]
 800afaa:	4659      	mov	r1, fp
 800afac:	463a      	mov	r2, r7
 800afae:	f7fd f9cd 	bl	800834c <LCD_DrawBitmap>
 800afb2:	4628      	mov	r0, r5
 800afb4:	f7ff fb78 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 800afb8:	e060      	b.n	800b07c <GUI_MEMDEV__WriteToActiveOpaque+0x230>
 800afba:	2c01      	cmp	r4, #1
 800afbc:	d15c      	bne.n	800b078 <GUI_MEMDEV__WriteToActiveOpaque+0x22c>
 800afbe:	2d00      	cmp	r5, #0
 800afc0:	d05c      	beq.n	800b07c <GUI_MEMDEV__WriteToActiveOpaque+0x230>
 800afc2:	9819      	ldr	r0, [sp, #100]	; 0x64
 800afc4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800afc6:	f8cd 900c 	str.w	r9, [sp, #12]
 800afca:	2208      	movs	r2, #8
 800afcc:	fb90 f2f2 	sdiv	r2, r0, r2
 800afd0:	4432      	add	r2, r6
 800afd2:	2301      	movs	r3, #1
 800afd4:	9204      	str	r2, [sp, #16]
 800afd6:	f000 0207 	and.w	r2, r0, #7
 800afda:	9300      	str	r3, [sp, #0]
 800afdc:	4408      	add	r0, r1
 800afde:	9301      	str	r3, [sp, #4]
 800afe0:	9302      	str	r3, [sp, #8]
 800afe2:	9206      	str	r2, [sp, #24]
 800afe4:	4659      	mov	r1, fp
 800afe6:	462a      	mov	r2, r5
 800afe8:	f8cd 8014 	str.w	r8, [sp, #20]
 800afec:	f7fd f8d2 	bl	8008194 <LCD__DrawBitmap_1bpp>
 800aff0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aff2:	9818      	ldr	r0, [sp, #96]	; 0x60
 800aff4:	441d      	add	r5, r3
 800aff6:	6883      	ldr	r3, [r0, #8]
 800aff8:	9519      	str	r5, [sp, #100]	; 0x64
 800affa:	695b      	ldr	r3, [r3, #20]
 800affc:	a919      	add	r1, sp, #100	; 0x64
 800affe:	4652      	mov	r2, sl
 800b000:	4798      	blx	r3
 800b002:	4605      	mov	r5, r0
 800b004:	e7db      	b.n	800afbe <GUI_MEMDEV__WriteToActiveOpaque+0x172>
 800b006:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b008:	f7ff fb40 	bl	800a68c <GUI_ALLOC_LockH>
 800b00c:	2c08      	cmp	r4, #8
 800b00e:	4601      	mov	r1, r0
 800b010:	9016      	str	r0, [sp, #88]	; 0x58
 800b012:	9819      	ldr	r0, [sp, #100]	; 0x64
 800b014:	d938      	bls.n	800b088 <GUI_MEMDEV__WriteToActiveOpaque+0x23c>
 800b016:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b018:	9200      	str	r2, [sp, #0]
 800b01a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b01c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b01e:	9301      	str	r3, [sp, #4]
 800b020:	fb00 6002 	mla	r0, r0, r2, r6
 800b024:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b026:	462a      	mov	r2, r5
 800b028:	f7ff fecf 	bl	800adca <_Convert16>
 800b02c:	2301      	movs	r3, #1
 800b02e:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
 800b032:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b034:	9300      	str	r3, [sp, #0]
 800b036:	2200      	movs	r2, #0
 800b038:	9301      	str	r3, [sp, #4]
 800b03a:	9002      	str	r0, [sp, #8]
 800b03c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b03e:	9203      	str	r2, [sp, #12]
 800b040:	9819      	ldr	r0, [sp, #100]	; 0x64
 800b042:	f85c 2d18 	ldr.w	r2, [ip, #-24]!
 800b046:	9204      	str	r2, [sp, #16]
 800b048:	4408      	add	r0, r1
 800b04a:	462a      	mov	r2, r5
 800b04c:	4659      	mov	r1, fp
 800b04e:	f8cd 8014 	str.w	r8, [sp, #20]
 800b052:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 800b056:	f7fd f979 	bl	800834c <LCD_DrawBitmap>
 800b05a:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 800b05e:	4660      	mov	r0, ip
 800b060:	f7ff fb22 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 800b064:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b066:	9818      	ldr	r0, [sp, #96]	; 0x60
 800b068:	441d      	add	r5, r3
 800b06a:	6883      	ldr	r3, [r0, #8]
 800b06c:	9519      	str	r5, [sp, #100]	; 0x64
 800b06e:	695b      	ldr	r3, [r3, #20]
 800b070:	a919      	add	r1, sp, #100	; 0x64
 800b072:	4652      	mov	r2, sl
 800b074:	4798      	blx	r3
 800b076:	4605      	mov	r5, r0
 800b078:	2d00      	cmp	r5, #0
 800b07a:	d1c4      	bne.n	800b006 <GUI_MEMDEV__WriteToActiveOpaque+0x1ba>
 800b07c:	444e      	add	r6, r9
 800b07e:	f10a 0a01 	add.w	sl, sl, #1
 800b082:	f10b 0b01 	add.w	fp, fp, #1
 800b086:	e759      	b.n	800af3c <GUI_MEMDEV__WriteToActiveOpaque+0xf0>
 800b088:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b08a:	9300      	str	r3, [sp, #0]
 800b08c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b08e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b090:	9201      	str	r2, [sp, #4]
 800b092:	fb00 6003 	mla	r0, r0, r3, r6
 800b096:	462a      	mov	r2, r5
 800b098:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b09a:	f7ff feb5 	bl	800ae08 <_Convert8>
 800b09e:	e7c5      	b.n	800b02c <GUI_MEMDEV__WriteToActiveOpaque+0x1e0>
 800b0a0:	a818      	add	r0, sp, #96	; 0x60
 800b0a2:	f7ff fb01 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 800b0a6:	e00e      	b.n	800b0c6 <GUI_MEMDEV__WriteToActiveOpaque+0x27a>
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	9300      	str	r3, [sp, #0]
 800b0ac:	9301      	str	r3, [sp, #4]
 800b0ae:	9004      	str	r0, [sp, #16]
 800b0b0:	9402      	str	r4, [sp, #8]
 800b0b2:	f8cd 900c 	str.w	r9, [sp, #12]
 800b0b6:	f8cd 8014 	str.w	r8, [sp, #20]
 800b0ba:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800b0bc:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b0be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b0c0:	463a      	mov	r2, r7
 800b0c2:	f7fd f943 	bl	800834c <LCD_DrawBitmap>
 800b0c6:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b0c8:	e24d      	b.n	800b566 <GUI_MEMDEV__WriteToActiveOpaque+0x71a>
 800b0ca:	4630      	mov	r0, r6
 800b0cc:	f7fb fc3c 	bl	8006948 <GUI_MEMDEV_GetDataPtr>
 800b0d0:	4606      	mov	r6, r0
 800b0d2:	2d00      	cmp	r5, #0
 800b0d4:	f000 808a 	beq.w	800b1ec <GUI_MEMDEV__WriteToActiveOpaque+0x3a0>
 800b0d8:	4628      	mov	r0, r5
 800b0da:	f7ff fad7 	bl	800a68c <GUI_ALLOC_LockH>
 800b0de:	2500      	movs	r5, #0
 800b0e0:	9018      	str	r0, [sp, #96]	; 0x60
 800b0e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b0e4:	429d      	cmp	r5, r3
 800b0e6:	da7d      	bge.n	800b1e4 <GUI_MEMDEV__WriteToActiveOpaque+0x398>
 800b0e8:	9818      	ldr	r0, [sp, #96]	; 0x60
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	9319      	str	r3, [sp, #100]	; 0x64
 800b0ee:	6883      	ldr	r3, [r0, #8]
 800b0f0:	a919      	add	r1, sp, #100	; 0x64
 800b0f2:	695b      	ldr	r3, [r3, #20]
 800b0f4:	462a      	mov	r2, r5
 800b0f6:	4798      	blx	r3
 800b0f8:	42b8      	cmp	r0, r7
 800b0fa:	4682      	mov	sl, r0
 800b0fc:	d124      	bne.n	800b148 <GUI_MEMDEV__WriteToActiveOpaque+0x2fc>
 800b0fe:	46aa      	mov	sl, r5
 800b100:	9818      	ldr	r0, [sp, #96]	; 0x60
 800b102:	6883      	ldr	r3, [r0, #8]
 800b104:	f10a 0b01 	add.w	fp, sl, #1
 800b108:	695b      	ldr	r3, [r3, #20]
 800b10a:	a919      	add	r1, sp, #100	; 0x64
 800b10c:	465a      	mov	r2, fp
 800b10e:	4798      	blx	r3
 800b110:	42b8      	cmp	r0, r7
 800b112:	d101      	bne.n	800b118 <GUI_MEMDEV__WriteToActiveOpaque+0x2cc>
 800b114:	46da      	mov	sl, fp
 800b116:	e7f3      	b.n	800b100 <GUI_MEMDEV__WriteToActiveOpaque+0x2b4>
 800b118:	ebc5 0b0a 	rsb	fp, r5, sl
 800b11c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b11e:	9604      	str	r6, [sp, #16]
 800b120:	2301      	movs	r3, #1
 800b122:	f10b 0b01 	add.w	fp, fp, #1
 800b126:	9300      	str	r3, [sp, #0]
 800b128:	9301      	str	r3, [sp, #4]
 800b12a:	4429      	add	r1, r5
 800b12c:	9402      	str	r4, [sp, #8]
 800b12e:	f8cd 900c 	str.w	r9, [sp, #12]
 800b132:	f8cd 8014 	str.w	r8, [sp, #20]
 800b136:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800b138:	463a      	mov	r2, r7
 800b13a:	465b      	mov	r3, fp
 800b13c:	f7fd f906 	bl	800834c <LCD_DrawBitmap>
 800b140:	fb09 660b 	mla	r6, r9, fp, r6
 800b144:	4655      	mov	r5, sl
 800b146:	e04b      	b.n	800b1e0 <GUI_MEMDEV__WriteToActiveOpaque+0x394>
 800b148:	2c01      	cmp	r4, #1
 800b14a:	d127      	bne.n	800b19c <GUI_MEMDEV__WriteToActiveOpaque+0x350>
 800b14c:	f1ba 0f00 	cmp.w	sl, #0
 800b150:	d022      	beq.n	800b198 <GUI_MEMDEV__WriteToActiveOpaque+0x34c>
 800b152:	9819      	ldr	r0, [sp, #100]	; 0x64
 800b154:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b156:	f8cd 900c 	str.w	r9, [sp, #12]
 800b15a:	2208      	movs	r2, #8
 800b15c:	fb90 f2f2 	sdiv	r2, r0, r2
 800b160:	4432      	add	r2, r6
 800b162:	9204      	str	r2, [sp, #16]
 800b164:	f000 0207 	and.w	r2, r0, #7
 800b168:	4408      	add	r0, r1
 800b16a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b16c:	9206      	str	r2, [sp, #24]
 800b16e:	2301      	movs	r3, #1
 800b170:	4652      	mov	r2, sl
 800b172:	9300      	str	r3, [sp, #0]
 800b174:	9301      	str	r3, [sp, #4]
 800b176:	9302      	str	r3, [sp, #8]
 800b178:	4429      	add	r1, r5
 800b17a:	f8cd 8014 	str.w	r8, [sp, #20]
 800b17e:	f7fd f809 	bl	8008194 <LCD__DrawBitmap_1bpp>
 800b182:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b184:	9818      	ldr	r0, [sp, #96]	; 0x60
 800b186:	4453      	add	r3, sl
 800b188:	9319      	str	r3, [sp, #100]	; 0x64
 800b18a:	6883      	ldr	r3, [r0, #8]
 800b18c:	a919      	add	r1, sp, #100	; 0x64
 800b18e:	695b      	ldr	r3, [r3, #20]
 800b190:	462a      	mov	r2, r5
 800b192:	4798      	blx	r3
 800b194:	4682      	mov	sl, r0
 800b196:	e7d9      	b.n	800b14c <GUI_MEMDEV__WriteToActiveOpaque+0x300>
 800b198:	444e      	add	r6, r9
 800b19a:	e021      	b.n	800b1e0 <GUI_MEMDEV__WriteToActiveOpaque+0x394>
 800b19c:	f1ba 0f00 	cmp.w	sl, #0
 800b1a0:	d0fa      	beq.n	800b198 <GUI_MEMDEV__WriteToActiveOpaque+0x34c>
 800b1a2:	9819      	ldr	r0, [sp, #100]	; 0x64
 800b1a4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b1a6:	9402      	str	r4, [sp, #8]
 800b1a8:	fb00 6201 	mla	r2, r0, r1, r6
 800b1ac:	9204      	str	r2, [sp, #16]
 800b1ae:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b1b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b1b2:	f8cd 900c 	str.w	r9, [sp, #12]
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	4410      	add	r0, r2
 800b1ba:	9300      	str	r3, [sp, #0]
 800b1bc:	4652      	mov	r2, sl
 800b1be:	9301      	str	r3, [sp, #4]
 800b1c0:	4429      	add	r1, r5
 800b1c2:	f8cd 8014 	str.w	r8, [sp, #20]
 800b1c6:	f7fd f8c1 	bl	800834c <LCD_DrawBitmap>
 800b1ca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b1cc:	9818      	ldr	r0, [sp, #96]	; 0x60
 800b1ce:	4453      	add	r3, sl
 800b1d0:	9319      	str	r3, [sp, #100]	; 0x64
 800b1d2:	6883      	ldr	r3, [r0, #8]
 800b1d4:	a919      	add	r1, sp, #100	; 0x64
 800b1d6:	695b      	ldr	r3, [r3, #20]
 800b1d8:	462a      	mov	r2, r5
 800b1da:	4798      	blx	r3
 800b1dc:	4682      	mov	sl, r0
 800b1de:	e7dd      	b.n	800b19c <GUI_MEMDEV__WriteToActiveOpaque+0x350>
 800b1e0:	3501      	adds	r5, #1
 800b1e2:	e77e      	b.n	800b0e2 <GUI_MEMDEV__WriteToActiveOpaque+0x296>
 800b1e4:	a818      	add	r0, sp, #96	; 0x60
 800b1e6:	f7ff fa5f 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 800b1ea:	e1be      	b.n	800b56a <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800b1ec:	2301      	movs	r3, #1
 800b1ee:	9300      	str	r3, [sp, #0]
 800b1f0:	9301      	str	r3, [sp, #4]
 800b1f2:	9004      	str	r0, [sp, #16]
 800b1f4:	9402      	str	r4, [sp, #8]
 800b1f6:	f8cd 900c 	str.w	r9, [sp, #12]
 800b1fa:	f8cd 8014 	str.w	r8, [sp, #20]
 800b1fe:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800b200:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b202:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b204:	463a      	mov	r2, r7
 800b206:	e041      	b.n	800b28c <GUI_MEMDEV__WriteToActiveOpaque+0x440>
 800b208:	4630      	mov	r0, r6
 800b20a:	910a      	str	r1, [sp, #40]	; 0x28
 800b20c:	f7ff fa3e 	bl	800a68c <GUI_ALLOC_LockH>
 800b210:	4682      	mov	sl, r0
 800b212:	a81c      	add	r0, sp, #112	; 0x70
 800b214:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 800b218:	f840 ad10 	str.w	sl, [r0, #-16]!
 800b21c:	f8da 4000 	ldr.w	r4, [sl]
 800b220:	9210      	str	r2, [sp, #64]	; 0x40
 800b222:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b226:	f8ba 7008 	ldrh.w	r7, [sl, #8]
 800b22a:	4c9e      	ldr	r4, [pc, #632]	; (800b4a4 <GUI_MEMDEV__WriteToActiveOpaque+0x658>)
 800b22c:	b213      	sxth	r3, r2
 800b22e:	f8da 200c 	ldr.w	r2, [sl, #12]
 800b232:	920b      	str	r2, [sp, #44]	; 0x2c
 800b234:	9309      	str	r3, [sp, #36]	; 0x24
 800b236:	f7ff fa37 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 800b23a:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800b23e:	900e      	str	r0, [sp, #56]	; 0x38
 800b240:	4899      	ldr	r0, [pc, #612]	; (800b4a8 <GUI_MEMDEV__WriteToActiveOpaque+0x65c>)
 800b242:	6800      	ldr	r0, [r0, #0]
 800b244:	7c40      	ldrb	r0, [r0, #17]
 800b246:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
 800b24a:	6925      	ldr	r5, [r4, #16]
 800b24c:	f8d5 8000 	ldr.w	r8, [r5]
 800b250:	f7fc fe3e 	bl	8007ed0 <GUI_GetBitsPerPixelEx>
 800b254:	2808      	cmp	r0, #8
 800b256:	fa0f fb87 	sxth.w	fp, r7
 800b25a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b25c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b25e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b260:	d904      	bls.n	800b26c <GUI_MEMDEV__WriteToActiveOpaque+0x420>
 800b262:	2810      	cmp	r0, #16
 800b264:	bf8c      	ite	hi
 800b266:	2404      	movhi	r4, #4
 800b268:	2402      	movls	r4, #2
 800b26a:	e000      	b.n	800b26e <GUI_MEMDEV__WriteToActiveOpaque+0x422>
 800b26c:	2401      	movs	r4, #1
 800b26e:	45a9      	cmp	r9, r5
 800b270:	d10f      	bne.n	800b292 <GUI_MEMDEV__WriteToActiveOpaque+0x446>
 800b272:	2001      	movs	r0, #1
 800b274:	9203      	str	r2, [sp, #12]
 800b276:	f10a 0218 	add.w	r2, sl, #24
 800b27a:	9000      	str	r0, [sp, #0]
 800b27c:	9001      	str	r0, [sp, #4]
 800b27e:	9102      	str	r1, [sp, #8]
 800b280:	9204      	str	r2, [sp, #16]
 800b282:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800b284:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b286:	2200      	movs	r2, #0
 800b288:	9205      	str	r2, [sp, #20]
 800b28a:	465a      	mov	r2, fp
 800b28c:	f7fd f85e 	bl	800834c <LCD_DrawBitmap>
 800b290:	e16b      	b.n	800b56a <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800b292:	2920      	cmp	r1, #32
 800b294:	f040 808e 	bne.w	800b3b4 <GUI_MEMDEV__WriteToActiveOpaque+0x568>
 800b298:	fb0b f004 	mul.w	r0, fp, r4
 800b29c:	f7ff fc4a 	bl	800ab34 <GUI_ALLOC_AllocNoInit>
 800b2a0:	900e      	str	r0, [sp, #56]	; 0x38
 800b2a2:	2800      	cmp	r0, #0
 800b2a4:	f000 8161 	beq.w	800b56a <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800b2a8:	f7ff f9f0 	bl	800a68c <GUI_ALLOC_LockH>
 800b2ac:	901a      	str	r0, [sp, #104]	; 0x68
 800b2ae:	4630      	mov	r0, r6
 800b2b0:	f7ff f9ec 	bl	800a68c <GUI_ALLOC_LockH>
 800b2b4:	9018      	str	r0, [sp, #96]	; 0x60
 800b2b6:	692b      	ldr	r3, [r5, #16]
 800b2b8:	f100 0a18 	add.w	sl, r0, #24
 800b2bc:	ea4f 068b 	mov.w	r6, fp, lsl #2
 800b2c0:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d02f      	beq.n	800b328 <GUI_MEMDEV__WriteToActiveOpaque+0x4dc>
 800b2c8:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 800b2cc:	2c02      	cmp	r4, #2
 800b2ce:	d003      	beq.n	800b2d8 <GUI_MEMDEV__WriteToActiveOpaque+0x48c>
 800b2d0:	2c04      	cmp	r4, #4
 800b2d2:	d001      	beq.n	800b2d8 <GUI_MEMDEV__WriteToActiveOpaque+0x48c>
 800b2d4:	2c01      	cmp	r4, #1
 800b2d6:	d106      	bne.n	800b2e6 <GUI_MEMDEV__WriteToActiveOpaque+0x49a>
 800b2d8:	4650      	mov	r0, sl
 800b2da:	692f      	ldr	r7, [r5, #16]
 800b2dc:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b2de:	465a      	mov	r2, fp
 800b2e0:	4623      	mov	r3, r4
 800b2e2:	47b8      	blx	r7
 800b2e4:	44b2      	add	sl, r6
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b2ec:	9300      	str	r3, [sp, #0]
 800b2ee:	9301      	str	r3, [sp, #4]
 800b2f0:	9203      	str	r2, [sp, #12]
 800b2f2:	9104      	str	r1, [sp, #16]
 800b2f4:	9205      	str	r2, [sp, #20]
 800b2f6:	4641      	mov	r1, r8
 800b2f8:	465a      	mov	r2, fp
 800b2fa:	f8cd 9008 	str.w	r9, [sp, #8]
 800b2fe:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800b300:	f7fd f824 	bl	800834c <LCD_DrawBitmap>
 800b304:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b306:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b308:	f108 0701 	add.w	r7, r8, #1
 800b30c:	fa02 f381 	sxtah	r3, r2, r1
 800b310:	42bb      	cmp	r3, r7
 800b312:	d107      	bne.n	800b324 <GUI_MEMDEV__WriteToActiveOpaque+0x4d8>
 800b314:	a818      	add	r0, sp, #96	; 0x60
 800b316:	f7ff f9c7 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 800b31a:	a81a      	add	r0, sp, #104	; 0x68
 800b31c:	f7ff f9c4 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 800b320:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b322:	e120      	b.n	800b566 <GUI_MEMDEV__WriteToActiveOpaque+0x71a>
 800b324:	46b8      	mov	r8, r7
 800b326:	e7d1      	b.n	800b2cc <GUI_MEMDEV__WriteToActiveOpaque+0x480>
 800b328:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b32a:	2c02      	cmp	r4, #2
 800b32c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800b32e:	d00e      	beq.n	800b34e <GUI_MEMDEV__WriteToActiveOpaque+0x502>
 800b330:	2c04      	cmp	r4, #4
 800b332:	d018      	beq.n	800b366 <GUI_MEMDEV__WriteToActiveOpaque+0x51a>
 800b334:	2c01      	cmp	r4, #1
 800b336:	d125      	bne.n	800b384 <GUI_MEMDEV__WriteToActiveOpaque+0x538>
 800b338:	2300      	movs	r3, #0
 800b33a:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 800b33e:	9309      	str	r3, [sp, #36]	; 0x24
 800b340:	47c0      	blx	r8
 800b342:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b344:	54f8      	strb	r0, [r7, r3]
 800b346:	3301      	adds	r3, #1
 800b348:	459b      	cmp	fp, r3
 800b34a:	d1f6      	bne.n	800b33a <GUI_MEMDEV__WriteToActiveOpaque+0x4ee>
 800b34c:	e019      	b.n	800b382 <GUI_MEMDEV__WriteToActiveOpaque+0x536>
 800b34e:	2300      	movs	r3, #0
 800b350:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 800b354:	9309      	str	r3, [sp, #36]	; 0x24
 800b356:	47c0      	blx	r8
 800b358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b35a:	f827 0013 	strh.w	r0, [r7, r3, lsl #1]
 800b35e:	3301      	adds	r3, #1
 800b360:	459b      	cmp	fp, r3
 800b362:	d1f5      	bne.n	800b350 <GUI_MEMDEV__WriteToActiveOpaque+0x504>
 800b364:	e00d      	b.n	800b382 <GUI_MEMDEV__WriteToActiveOpaque+0x536>
 800b366:	465a      	mov	r2, fp
 800b368:	2300      	movs	r3, #0
 800b36a:	f85a 0003 	ldr.w	r0, [sl, r3]
 800b36e:	920b      	str	r2, [sp, #44]	; 0x2c
 800b370:	9309      	str	r3, [sp, #36]	; 0x24
 800b372:	47c0      	blx	r8
 800b374:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b378:	3a01      	subs	r2, #1
 800b37a:	50f8      	str	r0, [r7, r3]
 800b37c:	f103 0304 	add.w	r3, r3, #4
 800b380:	d1f3      	bne.n	800b36a <GUI_MEMDEV__WriteToActiveOpaque+0x51e>
 800b382:	44b2      	add	sl, r6
 800b384:	2301      	movs	r3, #1
 800b386:	2200      	movs	r2, #0
 800b388:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b38a:	9300      	str	r3, [sp, #0]
 800b38c:	9301      	str	r3, [sp, #4]
 800b38e:	9203      	str	r2, [sp, #12]
 800b390:	9104      	str	r1, [sp, #16]
 800b392:	9205      	str	r2, [sp, #20]
 800b394:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800b396:	f8cd 9008 	str.w	r9, [sp, #8]
 800b39a:	4629      	mov	r1, r5
 800b39c:	465a      	mov	r2, fp
 800b39e:	f7fc ffd5 	bl	800834c <LCD_DrawBitmap>
 800b3a2:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b3a4:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b3a6:	1c6f      	adds	r7, r5, #1
 800b3a8:	fa01 f380 	sxtah	r3, r1, r0
 800b3ac:	42bb      	cmp	r3, r7
 800b3ae:	d0b1      	beq.n	800b314 <GUI_MEMDEV__WriteToActiveOpaque+0x4c8>
 800b3b0:	463d      	mov	r5, r7
 800b3b2:	e7ba      	b.n	800b32a <GUI_MEMDEV__WriteToActiveOpaque+0x4de>
 800b3b4:	2910      	cmp	r1, #16
 800b3b6:	f040 80d8 	bne.w	800b56a <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800b3ba:	fa0f fa87 	sxth.w	sl, r7
 800b3be:	fb0a f004 	mul.w	r0, sl, r4
 800b3c2:	f7ff fbb7 	bl	800ab34 <GUI_ALLOC_AllocNoInit>
 800b3c6:	9012      	str	r0, [sp, #72]	; 0x48
 800b3c8:	2800      	cmp	r0, #0
 800b3ca:	f000 80ce 	beq.w	800b56a <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800b3ce:	f7ff f95d 	bl	800a68c <GUI_ALLOC_LockH>
 800b3d2:	901a      	str	r0, [sp, #104]	; 0x68
 800b3d4:	4630      	mov	r0, r6
 800b3d6:	f7ff f959 	bl	800a68c <GUI_ALLOC_LockH>
 800b3da:	9018      	str	r0, [sp, #96]	; 0x60
 800b3dc:	692b      	ldr	r3, [r5, #16]
 800b3de:	f100 0618 	add.w	r6, r0, #24
 800b3e2:	b113      	cbz	r3, 800b3ea <GUI_MEMDEV__WriteToActiveOpaque+0x59e>
 800b3e4:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800b3e8:	b92b      	cbnz	r3, 800b3f6 <GUI_MEMDEV__WriteToActiveOpaque+0x5aa>
 800b3ea:	00e2      	lsls	r2, r4, #3
 800b3ec:	b23f      	sxth	r7, r7
 800b3ee:	9211      	str	r2, [sp, #68]	; 0x44
 800b3f0:	007f      	lsls	r7, r7, #1
 800b3f2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b3f4:	e088      	b.n	800b508 <GUI_MEMDEV__WriteToActiveOpaque+0x6bc>
 800b3f6:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 800b3fa:	0080      	lsls	r0, r0, #2
 800b3fc:	f7ff fb9a 	bl	800ab34 <GUI_ALLOC_AllocNoInit>
 800b400:	9011      	str	r0, [sp, #68]	; 0x44
 800b402:	b118      	cbz	r0, 800b40c <GUI_MEMDEV__WriteToActiveOpaque+0x5c0>
 800b404:	f7ff f942 	bl	800a68c <GUI_ALLOC_LockH>
 800b408:	9019      	str	r0, [sp, #100]	; 0x64
 800b40a:	e001      	b.n	800b410 <GUI_MEMDEV__WriteToActiveOpaque+0x5c4>
 800b40c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b40e:	9319      	str	r3, [sp, #100]	; 0x64
 800b410:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b412:	2b00      	cmp	r3, #0
 800b414:	f000 80a0 	beq.w	800b558 <GUI_MEMDEV__WriteToActiveOpaque+0x70c>
 800b418:	b23f      	sxth	r7, r7
 800b41a:	007f      	lsls	r7, r7, #1
 800b41c:	970e      	str	r7, [sp, #56]	; 0x38
 800b41e:	00e7      	lsls	r7, r4, #3
 800b420:	9713      	str	r7, [sp, #76]	; 0x4c
 800b422:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800b424:	970c      	str	r7, [sp, #48]	; 0x30
 800b426:	2c02      	cmp	r4, #2
 800b428:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800b42c:	d004      	beq.n	800b438 <GUI_MEMDEV__WriteToActiveOpaque+0x5ec>
 800b42e:	2c04      	cmp	r4, #4
 800b430:	d007      	beq.n	800b442 <GUI_MEMDEV__WriteToActiveOpaque+0x5f6>
 800b432:	2c01      	cmp	r4, #1
 800b434:	d114      	bne.n	800b460 <GUI_MEMDEV__WriteToActiveOpaque+0x614>
 800b436:	e004      	b.n	800b442 <GUI_MEMDEV__WriteToActiveOpaque+0x5f6>
 800b438:	4630      	mov	r0, r6
 800b43a:	9919      	ldr	r1, [sp, #100]	; 0x64
 800b43c:	4652      	mov	r2, sl
 800b43e:	4623      	mov	r3, r4
 800b440:	e003      	b.n	800b44a <GUI_MEMDEV__WriteToActiveOpaque+0x5fe>
 800b442:	9919      	ldr	r1, [sp, #100]	; 0x64
 800b444:	4630      	mov	r0, r6
 800b446:	4652      	mov	r2, sl
 800b448:	2302      	movs	r3, #2
 800b44a:	f8d9 7014 	ldr.w	r7, [r9, #20]
 800b44e:	47b8      	blx	r7
 800b450:	692f      	ldr	r7, [r5, #16]
 800b452:	9819      	ldr	r0, [sp, #100]	; 0x64
 800b454:	4641      	mov	r1, r8
 800b456:	4652      	mov	r2, sl
 800b458:	4623      	mov	r3, r4
 800b45a:	47b8      	blx	r7
 800b45c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800b45e:	443e      	add	r6, r7
 800b460:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800b462:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b464:	9104      	str	r1, [sp, #16]
 800b466:	2301      	movs	r3, #1
 800b468:	2200      	movs	r2, #0
 800b46a:	f107 0801 	add.w	r8, r7, #1
 800b46e:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800b470:	9300      	str	r3, [sp, #0]
 800b472:	9301      	str	r3, [sp, #4]
 800b474:	9702      	str	r7, [sp, #8]
 800b476:	9203      	str	r2, [sp, #12]
 800b478:	9205      	str	r2, [sp, #20]
 800b47a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800b47c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b47e:	465a      	mov	r2, fp
 800b480:	f7fc ff64 	bl	800834c <LCD_DrawBitmap>
 800b484:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800b486:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b488:	fa00 f387 	sxtah	r3, r0, r7
 800b48c:	4543      	cmp	r3, r8
 800b48e:	d002      	beq.n	800b496 <GUI_MEMDEV__WriteToActiveOpaque+0x64a>
 800b490:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800b494:	e7c7      	b.n	800b426 <GUI_MEMDEV__WriteToActiveOpaque+0x5da>
 800b496:	a819      	add	r0, sp, #100	; 0x64
 800b498:	f7ff f906 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 800b49c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800b49e:	f7ff f92f 	bl	800a700 <GUI_ALLOC_Free>
 800b4a2:	e059      	b.n	800b558 <GUI_MEMDEV__WriteToActiveOpaque+0x70c>
 800b4a4:	20019604 	.word	0x20019604
 800b4a8:	20000018 	.word	0x20000018
 800b4ac:	2c04      	cmp	r4, #4
 800b4ae:	d041      	beq.n	800b534 <GUI_MEMDEV__WriteToActiveOpaque+0x6e8>
 800b4b0:	2c01      	cmp	r4, #1
 800b4b2:	d111      	bne.n	800b4d8 <GUI_MEMDEV__WriteToActiveOpaque+0x68c>
 800b4b4:	464a      	mov	r2, r9
 800b4b6:	4631      	mov	r1, r6
 800b4b8:	f831 0b02 	ldrh.w	r0, [r1], #2
 800b4bc:	910a      	str	r1, [sp, #40]	; 0x28
 800b4be:	920b      	str	r2, [sp, #44]	; 0x2c
 800b4c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b4c2:	4798      	blx	r3
 800b4c4:	47c0      	blx	r8
 800b4c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b4c8:	f802 0b01 	strb.w	r0, [r2], #1
 800b4cc:	eb09 000a 	add.w	r0, r9, sl
 800b4d0:	4282      	cmp	r2, r0
 800b4d2:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b4d4:	d1f0      	bne.n	800b4b8 <GUI_MEMDEV__WriteToActiveOpaque+0x66c>
 800b4d6:	443e      	add	r6, r7
 800b4d8:	2301      	movs	r3, #1
 800b4da:	9811      	ldr	r0, [sp, #68]	; 0x44
 800b4dc:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b4de:	9300      	str	r3, [sp, #0]
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	9301      	str	r3, [sp, #4]
 800b4e4:	9002      	str	r0, [sp, #8]
 800b4e6:	9203      	str	r2, [sp, #12]
 800b4e8:	9104      	str	r1, [sp, #16]
 800b4ea:	9205      	str	r2, [sp, #20]
 800b4ec:	4629      	mov	r1, r5
 800b4ee:	465a      	mov	r2, fp
 800b4f0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800b4f2:	f7fc ff2b 	bl	800834c <LCD_DrawBitmap>
 800b4f6:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b4f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b4fa:	f105 0901 	add.w	r9, r5, #1
 800b4fe:	fa02 f381 	sxtah	r3, r2, r1
 800b502:	454b      	cmp	r3, r9
 800b504:	d028      	beq.n	800b558 <GUI_MEMDEV__WriteToActiveOpaque+0x70c>
 800b506:	464d      	mov	r5, r9
 800b508:	2c02      	cmp	r4, #2
 800b50a:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 800b50e:	d1cd      	bne.n	800b4ac <GUI_MEMDEV__WriteToActiveOpaque+0x660>
 800b510:	464b      	mov	r3, r9
 800b512:	4631      	mov	r1, r6
 800b514:	46d9      	mov	r9, fp
 800b516:	f831 0b02 	ldrh.w	r0, [r1], #2
 800b51a:	910a      	str	r1, [sp, #40]	; 0x28
 800b51c:	9309      	str	r3, [sp, #36]	; 0x24
 800b51e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b520:	4790      	blx	r2
 800b522:	47c0      	blx	r8
 800b524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b526:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b528:	f823 0b02 	strh.w	r0, [r3], #2
 800b52c:	f1b9 0901 	subs.w	r9, r9, #1
 800b530:	d1f1      	bne.n	800b516 <GUI_MEMDEV__WriteToActiveOpaque+0x6ca>
 800b532:	e7d0      	b.n	800b4d6 <GUI_MEMDEV__WriteToActiveOpaque+0x68a>
 800b534:	464b      	mov	r3, r9
 800b536:	4631      	mov	r1, r6
 800b538:	46d9      	mov	r9, fp
 800b53a:	f831 0b02 	ldrh.w	r0, [r1], #2
 800b53e:	910a      	str	r1, [sp, #40]	; 0x28
 800b540:	9309      	str	r3, [sp, #36]	; 0x24
 800b542:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b544:	4790      	blx	r2
 800b546:	47c0      	blx	r8
 800b548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b54a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b54c:	f843 0b04 	str.w	r0, [r3], #4
 800b550:	f1b9 0901 	subs.w	r9, r9, #1
 800b554:	d1f1      	bne.n	800b53a <GUI_MEMDEV__WriteToActiveOpaque+0x6ee>
 800b556:	e7be      	b.n	800b4d6 <GUI_MEMDEV__WriteToActiveOpaque+0x68a>
 800b558:	a818      	add	r0, sp, #96	; 0x60
 800b55a:	f7ff f8a5 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 800b55e:	a81a      	add	r0, sp, #104	; 0x68
 800b560:	f7ff f8a2 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 800b564:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b566:	f7ff f8cb 	bl	800a700 <GUI_ALLOC_Free>
 800b56a:	b01d      	add	sp, #116	; 0x74
 800b56c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b570 <GUI_USAGE_BM_AddPixel>:
 800b570:	4603      	mov	r3, r0
 800b572:	b510      	push	{r4, lr}
 800b574:	f933 4b14 	ldrsh.w	r4, [r3], #20
 800b578:	1b09      	subs	r1, r1, r4
 800b57a:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800b57e:	6900      	ldr	r0, [r0, #16]
 800b580:	1b12      	subs	r2, r2, r4
 800b582:	fb00 3302 	mla	r3, r0, r2, r3
 800b586:	10c8      	asrs	r0, r1, #3
 800b588:	2280      	movs	r2, #128	; 0x80
 800b58a:	f001 0107 	and.w	r1, r1, #7
 800b58e:	fa42 f101 	asr.w	r1, r2, r1
 800b592:	5c1a      	ldrb	r2, [r3, r0]
 800b594:	4311      	orrs	r1, r2
 800b596:	5419      	strb	r1, [r3, r0]
 800b598:	bd10      	pop	{r4, pc}

0800b59a <GUI_USAGE_BM_GetNextDirty>:
 800b59a:	b570      	push	{r4, r5, r6, lr}
 800b59c:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 800b5a0:	680b      	ldr	r3, [r1, #0]
 800b5a2:	8886      	ldrh	r6, [r0, #4]
 800b5a4:	42a2      	cmp	r2, r4
 800b5a6:	da41      	bge.n	800b62c <GUI_USAGE_BM_GetNextDirty+0x92>
 800b5a8:	b236      	sxth	r6, r6
 800b5aa:	42b3      	cmp	r3, r6
 800b5ac:	6904      	ldr	r4, [r0, #16]
 800b5ae:	da3d      	bge.n	800b62c <GUI_USAGE_BM_GetNextDirty+0x92>
 800b5b0:	3014      	adds	r0, #20
 800b5b2:	fb04 0202 	mla	r2, r4, r2, r0
 800b5b6:	10dd      	asrs	r5, r3, #3
 800b5b8:	1e70      	subs	r0, r6, #1
 800b5ba:	1954      	adds	r4, r2, r5
 800b5bc:	ebc5 00e0 	rsb	r0, r5, r0, asr #3
 800b5c0:	5d55      	ldrb	r5, [r2, r5]
 800b5c2:	f003 0207 	and.w	r2, r3, #7
 800b5c6:	fa05 f202 	lsl.w	r2, r5, r2
 800b5ca:	3401      	adds	r4, #1
 800b5cc:	b2d2      	uxtb	r2, r2
 800b5ce:	b93a      	cbnz	r2, 800b5e0 <GUI_USAGE_BM_GetNextDirty+0x46>
 800b5d0:	b368      	cbz	r0, 800b62e <GUI_USAGE_BM_GetNextDirty+0x94>
 800b5d2:	3308      	adds	r3, #8
 800b5d4:	f814 2b01 	ldrb.w	r2, [r4], #1
 800b5d8:	3801      	subs	r0, #1
 800b5da:	f023 0307 	bic.w	r3, r3, #7
 800b5de:	e7f6      	b.n	800b5ce <GUI_USAGE_BM_GetNextDirty+0x34>
 800b5e0:	0615      	lsls	r5, r2, #24
 800b5e2:	d403      	bmi.n	800b5ec <GUI_USAGE_BM_GetNextDirty+0x52>
 800b5e4:	0052      	lsls	r2, r2, #1
 800b5e6:	b2d2      	uxtb	r2, r2
 800b5e8:	3301      	adds	r3, #1
 800b5ea:	e7f9      	b.n	800b5e0 <GUI_USAGE_BM_GetNextDirty+0x46>
 800b5ec:	2aff      	cmp	r2, #255	; 0xff
 800b5ee:	461d      	mov	r5, r3
 800b5f0:	d005      	beq.n	800b5fe <GUI_USAGE_BM_GetNextDirty+0x64>
 800b5f2:	0656      	lsls	r6, r2, #25
 800b5f4:	d504      	bpl.n	800b600 <GUI_USAGE_BM_GetNextDirty+0x66>
 800b5f6:	0052      	lsls	r2, r2, #1
 800b5f8:	b2d2      	uxtb	r2, r2
 800b5fa:	3301      	adds	r3, #1
 800b5fc:	e7f9      	b.n	800b5f2 <GUI_USAGE_BM_GetNextDirty+0x58>
 800b5fe:	3307      	adds	r3, #7
 800b600:	f003 0207 	and.w	r2, r3, #7
 800b604:	2a07      	cmp	r2, #7
 800b606:	d10d      	bne.n	800b624 <GUI_USAGE_BM_GetNextDirty+0x8a>
 800b608:	3801      	subs	r0, #1
 800b60a:	d40b      	bmi.n	800b624 <GUI_USAGE_BM_GetNextDirty+0x8a>
 800b60c:	f814 2b01 	ldrb.w	r2, [r4], #1
 800b610:	2aff      	cmp	r2, #255	; 0xff
 800b612:	d101      	bne.n	800b618 <GUI_USAGE_BM_GetNextDirty+0x7e>
 800b614:	3308      	adds	r3, #8
 800b616:	e7f7      	b.n	800b608 <GUI_USAGE_BM_GetNextDirty+0x6e>
 800b618:	0610      	lsls	r0, r2, #24
 800b61a:	d503      	bpl.n	800b624 <GUI_USAGE_BM_GetNextDirty+0x8a>
 800b61c:	0052      	lsls	r2, r2, #1
 800b61e:	b2d2      	uxtb	r2, r2
 800b620:	3301      	adds	r3, #1
 800b622:	e7f9      	b.n	800b618 <GUI_USAGE_BM_GetNextDirty+0x7e>
 800b624:	1b58      	subs	r0, r3, r5
 800b626:	600d      	str	r5, [r1, #0]
 800b628:	3001      	adds	r0, #1
 800b62a:	bd70      	pop	{r4, r5, r6, pc}
 800b62c:	2000      	movs	r0, #0
 800b62e:	bd70      	pop	{r4, r5, r6, pc}

0800b630 <_GUI_USAGE_BM_Delete>:
 800b630:	f7ff b866 	b.w	800a700 <GUI_ALLOC_Free>

0800b634 <GUI_USAGE_BM_Clear>:
 800b634:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800b638:	6902      	ldr	r2, [r0, #16]
 800b63a:	2100      	movs	r1, #0
 800b63c:	3014      	adds	r0, #20
 800b63e:	435a      	muls	r2, r3
 800b640:	f001 b950 	b.w	800c8e4 <memset>

0800b644 <GUI_USAGE_BM_AddHLine>:
 800b644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b646:	f9b0 4000 	ldrsh.w	r4, [r0]
 800b64a:	1b09      	subs	r1, r1, r4
 800b64c:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800b650:	42a1      	cmp	r1, r4
 800b652:	da2f      	bge.n	800b6b4 <GUI_USAGE_BM_AddHLine+0x70>
 800b654:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 800b658:	440b      	add	r3, r1
 800b65a:	f100 0414 	add.w	r4, r0, #20
 800b65e:	3b01      	subs	r3, #1
 800b660:	6900      	ldr	r0, [r0, #16]
 800b662:	1b52      	subs	r2, r2, r5
 800b664:	43de      	mvns	r6, r3
 800b666:	fb00 4202 	mla	r2, r0, r2, r4
 800b66a:	f001 0707 	and.w	r7, r1, #7
 800b66e:	10cc      	asrs	r4, r1, #3
 800b670:	f006 0607 	and.w	r6, r6, #7
 800b674:	21ff      	movs	r1, #255	; 0xff
 800b676:	fa41 f707 	asr.w	r7, r1, r7
 800b67a:	fa01 f606 	lsl.w	r6, r1, r6
 800b67e:	ebd4 03e3 	rsbs	r3, r4, r3, asr #3
 800b682:	eb02 0504 	add.w	r5, r2, r4
 800b686:	b2ff      	uxtb	r7, r7
 800b688:	b2f6      	uxtb	r6, r6
 800b68a:	5d10      	ldrb	r0, [r2, r4]
 800b68c:	d103      	bne.n	800b696 <GUI_USAGE_BM_AddHLine+0x52>
 800b68e:	403e      	ands	r6, r7
 800b690:	4330      	orrs	r0, r6
 800b692:	5510      	strb	r0, [r2, r4]
 800b694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b696:	4338      	orrs	r0, r7
 800b698:	5510      	strb	r0, [r2, r4]
 800b69a:	1e5c      	subs	r4, r3, #1
 800b69c:	2c00      	cmp	r4, #0
 800b69e:	f105 0501 	add.w	r5, r5, #1
 800b6a2:	dd04      	ble.n	800b6ae <GUI_USAGE_BM_AddHLine+0x6a>
 800b6a4:	4628      	mov	r0, r5
 800b6a6:	4622      	mov	r2, r4
 800b6a8:	f001 f91c 	bl	800c8e4 <memset>
 800b6ac:	4425      	add	r5, r4
 800b6ae:	782b      	ldrb	r3, [r5, #0]
 800b6b0:	431e      	orrs	r6, r3
 800b6b2:	702e      	strb	r6, [r5, #0]
 800b6b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b6b8 <GUI_USAGE_BM_Create>:
 800b6b8:	e92d 4fd3 	stmdb	sp!, {r0, r1, r4, r6, r7, r8, r9, sl, fp, lr}
 800b6bc:	f102 060f 	add.w	r6, r2, #15
 800b6c0:	1136      	asrs	r6, r6, #4
 800b6c2:	0076      	lsls	r6, r6, #1
 800b6c4:	4682      	mov	sl, r0
 800b6c6:	fb06 f003 	mul.w	r0, r6, r3
 800b6ca:	3014      	adds	r0, #20
 800b6cc:	4689      	mov	r9, r1
 800b6ce:	4690      	mov	r8, r2
 800b6d0:	461f      	mov	r7, r3
 800b6d2:	f7ff fa3b 	bl	800ab4c <GUI_ALLOC_AllocZero>
 800b6d6:	4683      	mov	fp, r0
 800b6d8:	b198      	cbz	r0, 800b702 <GUI_USAGE_BM_Create+0x4a>
 800b6da:	f7fe ffd7 	bl	800a68c <GUI_ALLOC_LockH>
 800b6de:	4604      	mov	r4, r0
 800b6e0:	4b0a      	ldr	r3, [pc, #40]	; (800b70c <GUI_USAGE_BM_Create+0x54>)
 800b6e2:	60a3      	str	r3, [r4, #8]
 800b6e4:	a802      	add	r0, sp, #8
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	f840 4d04 	str.w	r4, [r0, #-4]!
 800b6ec:	f8a4 8004 	strh.w	r8, [r4, #4]
 800b6f0:	f8a4 a000 	strh.w	sl, [r4]
 800b6f4:	f8a4 9002 	strh.w	r9, [r4, #2]
 800b6f8:	80e7      	strh	r7, [r4, #6]
 800b6fa:	81a3      	strh	r3, [r4, #12]
 800b6fc:	6126      	str	r6, [r4, #16]
 800b6fe:	f7fe ffd3 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 800b702:	4658      	mov	r0, fp
 800b704:	b002      	add	sp, #8
 800b706:	e8bd 8fd0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, sl, fp, pc}
 800b70a:	bf00      	nop
 800b70c:	0800fee8 	.word	0x0800fee8

0800b710 <GUI_USAGE_DecUseCnt>:
 800b710:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b712:	4605      	mov	r5, r0
 800b714:	f7fe ffba 	bl	800a68c <GUI_ALLOC_LockH>
 800b718:	4602      	mov	r2, r0
 800b71a:	a802      	add	r0, sp, #8
 800b71c:	8994      	ldrh	r4, [r2, #12]
 800b71e:	f840 2d04 	str.w	r2, [r0, #-4]!
 800b722:	3c01      	subs	r4, #1
 800b724:	b2a4      	uxth	r4, r4
 800b726:	8194      	strh	r4, [r2, #12]
 800b728:	f7fe ffbe 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 800b72c:	b914      	cbnz	r4, 800b734 <GUI_USAGE_DecUseCnt+0x24>
 800b72e:	4628      	mov	r0, r5
 800b730:	f7fe ffe6 	bl	800a700 <GUI_ALLOC_Free>
 800b734:	b003      	add	sp, #12
 800b736:	bd30      	pop	{r4, r5, pc}

0800b738 <GUI_USAGE_AddRect>:
 800b738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b73c:	4605      	mov	r5, r0
 800b73e:	4688      	mov	r8, r1
 800b740:	4617      	mov	r7, r2
 800b742:	4699      	mov	r9, r3
 800b744:	68a8      	ldr	r0, [r5, #8]
 800b746:	464b      	mov	r3, r9
 800b748:	6846      	ldr	r6, [r0, #4]
 800b74a:	4641      	mov	r1, r8
 800b74c:	4628      	mov	r0, r5
 800b74e:	1c54      	adds	r4, r2, #1
 800b750:	47b0      	blx	r6
 800b752:	9b08      	ldr	r3, [sp, #32]
 800b754:	443b      	add	r3, r7
 800b756:	42a3      	cmp	r3, r4
 800b758:	d001      	beq.n	800b75e <GUI_USAGE_AddRect+0x26>
 800b75a:	4622      	mov	r2, r4
 800b75c:	e7f2      	b.n	800b744 <GUI_USAGE_AddRect+0xc>
 800b75e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0800b764 <_GetDevData>:
 800b764:	4802      	ldr	r0, [pc, #8]	; (800b770 <_GetDevData+0xc>)
 800b766:	2901      	cmp	r1, #1
 800b768:	bf18      	it	ne
 800b76a:	2000      	movne	r0, #0
 800b76c:	4770      	bx	lr
 800b76e:	bf00      	nop
 800b770:	0800ff40 	.word	0x0800ff40

0800b774 <_GetDevFunc>:
 800b774:	4802      	ldr	r0, [pc, #8]	; (800b780 <_GetDevFunc+0xc>)
 800b776:	2916      	cmp	r1, #22
 800b778:	bf18      	it	ne
 800b77a:	2000      	movne	r0, #0
 800b77c:	4770      	bx	lr
 800b77e:	bf00      	nop
 800b780:	0800ae4d 	.word	0x0800ae4d

0800b784 <_SetOrg>:
 800b784:	6800      	ldr	r0, [r0, #0]
 800b786:	b508      	push	{r3, lr}
 800b788:	b110      	cbz	r0, 800b790 <_SetOrg+0xc>
 800b78a:	68c3      	ldr	r3, [r0, #12]
 800b78c:	6a1b      	ldr	r3, [r3, #32]
 800b78e:	4798      	blx	r3
 800b790:	bd08      	pop	{r3, pc}

0800b792 <_GetDevProp>:
 800b792:	6800      	ldr	r0, [r0, #0]
 800b794:	b508      	push	{r3, lr}
 800b796:	b118      	cbz	r0, 800b7a0 <_GetDevProp+0xe>
 800b798:	68c3      	ldr	r3, [r0, #12]
 800b79a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b79c:	4798      	blx	r3
 800b79e:	bd08      	pop	{r3, pc}
 800b7a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b7a4:	bd08      	pop	{r3, pc}

0800b7a6 <_GetRect>:
 800b7a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b7a8:	6880      	ldr	r0, [r0, #8]
 800b7aa:	460c      	mov	r4, r1
 800b7ac:	f7fe ff6e 	bl	800a68c <GUI_ALLOC_LockH>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	a802      	add	r0, sp, #8
 800b7b4:	8899      	ldrh	r1, [r3, #4]
 800b7b6:	88da      	ldrh	r2, [r3, #6]
 800b7b8:	891d      	ldrh	r5, [r3, #8]
 800b7ba:	f840 3d04 	str.w	r3, [r0, #-4]!
 800b7be:	895b      	ldrh	r3, [r3, #10]
 800b7c0:	8021      	strh	r1, [r4, #0]
 800b7c2:	8062      	strh	r2, [r4, #2]
 800b7c4:	4429      	add	r1, r5
 800b7c6:	441a      	add	r2, r3
 800b7c8:	3901      	subs	r1, #1
 800b7ca:	3a01      	subs	r2, #1
 800b7cc:	80a1      	strh	r1, [r4, #4]
 800b7ce:	80e2      	strh	r2, [r4, #6]
 800b7d0:	f7fe ff6a 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 800b7d4:	b003      	add	sp, #12
 800b7d6:	bd30      	pop	{r4, r5, pc}

0800b7d8 <_XY2PTR>:
 800b7d8:	4b0e      	ldr	r3, [pc, #56]	; (800b814 <_XY2PTR+0x3c>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b7de:	4605      	mov	r5, r0
 800b7e0:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800b7e2:	460e      	mov	r6, r1
 800b7e4:	f7fe ff52 	bl	800a68c <GUI_ALLOC_LockH>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	a802      	add	r0, sp, #8
 800b7ec:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 800b7f0:	f840 3d04 	str.w	r3, [r0, #-4]!
 800b7f4:	f103 0118 	add.w	r1, r3, #24
 800b7f8:	1b36      	subs	r6, r6, r4
 800b7fa:	68dc      	ldr	r4, [r3, #12]
 800b7fc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b800:	fb04 1406 	mla	r4, r4, r6, r1
 800b804:	1aed      	subs	r5, r5, r3
 800b806:	f7fe ff4f 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 800b80a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800b80e:	4620      	mov	r0, r4
 800b810:	b002      	add	sp, #8
 800b812:	bd70      	pop	{r4, r5, r6, pc}
 800b814:	20000018 	.word	0x20000018

0800b818 <_GetPixelIndex>:
 800b818:	b508      	push	{r3, lr}
 800b81a:	4608      	mov	r0, r1
 800b81c:	4611      	mov	r1, r2
 800b81e:	f7ff ffdb 	bl	800b7d8 <_XY2PTR>
 800b822:	8800      	ldrh	r0, [r0, #0]
 800b824:	bd08      	pop	{r3, pc}
	...

0800b828 <_XorPixel>:
 800b828:	4b14      	ldr	r3, [pc, #80]	; (800b87c <_XorPixel+0x54>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b82e:	4607      	mov	r7, r0
 800b830:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800b832:	4615      	mov	r5, r2
 800b834:	460e      	mov	r6, r1
 800b836:	f7fe ff29 	bl	800a68c <GUI_ALLOC_LockH>
 800b83a:	4629      	mov	r1, r5
 800b83c:	9000      	str	r0, [sp, #0]
 800b83e:	4630      	mov	r0, r6
 800b840:	f7ff ffca 	bl	800b7d8 <_XY2PTR>
 800b844:	693b      	ldr	r3, [r7, #16]
 800b846:	4604      	mov	r4, r0
 800b848:	689b      	ldr	r3, [r3, #8]
 800b84a:	4798      	blx	r3
 800b84c:	8823      	ldrh	r3, [r4, #0]
 800b84e:	4058      	eors	r0, r3
 800b850:	9b00      	ldr	r3, [sp, #0]
 800b852:	8020      	strh	r0, [r4, #0]
 800b854:	6958      	ldr	r0, [r3, #20]
 800b856:	b160      	cbz	r0, 800b872 <_XorPixel+0x4a>
 800b858:	f7fe ff18 	bl	800a68c <GUI_ALLOC_LockH>
 800b85c:	ac02      	add	r4, sp, #8
 800b85e:	6883      	ldr	r3, [r0, #8]
 800b860:	f844 0d04 	str.w	r0, [r4, #-4]!
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	4631      	mov	r1, r6
 800b868:	462a      	mov	r2, r5
 800b86a:	4798      	blx	r3
 800b86c:	4620      	mov	r0, r4
 800b86e:	f7fe ff1b 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 800b872:	4668      	mov	r0, sp
 800b874:	f7fe ff18 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 800b878:	b003      	add	sp, #12
 800b87a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b87c:	20000018 	.word	0x20000018

0800b880 <_SetPixelIndex>:
 800b880:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b882:	461c      	mov	r4, r3
 800b884:	4b10      	ldr	r3, [pc, #64]	; (800b8c8 <_SetPixelIndex+0x48>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800b88a:	460e      	mov	r6, r1
 800b88c:	4615      	mov	r5, r2
 800b88e:	f7fe fefd 	bl	800a68c <GUI_ALLOC_LockH>
 800b892:	4629      	mov	r1, r5
 800b894:	9000      	str	r0, [sp, #0]
 800b896:	4630      	mov	r0, r6
 800b898:	f7ff ff9e 	bl	800b7d8 <_XY2PTR>
 800b89c:	9b00      	ldr	r3, [sp, #0]
 800b89e:	8004      	strh	r4, [r0, #0]
 800b8a0:	6958      	ldr	r0, [r3, #20]
 800b8a2:	b160      	cbz	r0, 800b8be <_SetPixelIndex+0x3e>
 800b8a4:	f7fe fef2 	bl	800a68c <GUI_ALLOC_LockH>
 800b8a8:	ac02      	add	r4, sp, #8
 800b8aa:	6883      	ldr	r3, [r0, #8]
 800b8ac:	f844 0d04 	str.w	r0, [r4, #-4]!
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	4631      	mov	r1, r6
 800b8b4:	462a      	mov	r2, r5
 800b8b6:	4798      	blx	r3
 800b8b8:	4620      	mov	r0, r4
 800b8ba:	f7fe fef5 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 800b8be:	4668      	mov	r0, sp
 800b8c0:	f7fe fef2 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 800b8c4:	b002      	add	sp, #8
 800b8c6:	bd70      	pop	{r4, r5, r6, pc}
 800b8c8:	20000018 	.word	0x20000018

0800b8cc <_DrawVLine>:
 800b8cc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800b8d0:	4d2c      	ldr	r5, [pc, #176]	; (800b984 <_DrawVLine+0xb8>)
 800b8d2:	461e      	mov	r6, r3
 800b8d4:	682b      	ldr	r3, [r5, #0]
 800b8d6:	4681      	mov	r9, r0
 800b8d8:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800b8da:	460f      	mov	r7, r1
 800b8dc:	4614      	mov	r4, r2
 800b8de:	f7fe fed5 	bl	800a68c <GUI_ALLOC_LockH>
 800b8e2:	9000      	str	r0, [sp, #0]
 800b8e4:	6940      	ldr	r0, [r0, #20]
 800b8e6:	46aa      	mov	sl, r5
 800b8e8:	b108      	cbz	r0, 800b8ee <_DrawVLine+0x22>
 800b8ea:	f7fe fecf 	bl	800a68c <GUI_ALLOC_LockH>
 800b8ee:	9001      	str	r0, [sp, #4]
 800b8f0:	4621      	mov	r1, r4
 800b8f2:	4638      	mov	r0, r7
 800b8f4:	f7ff ff70 	bl	800b7d8 <_XY2PTR>
 800b8f8:	9b00      	ldr	r3, [sp, #0]
 800b8fa:	f8d3 800c 	ldr.w	r8, [r3, #12]
 800b8fe:	f8da 3000 	ldr.w	r3, [sl]
 800b902:	7c1a      	ldrb	r2, [r3, #16]
 800b904:	07d2      	lsls	r2, r2, #31
 800b906:	4605      	mov	r5, r0
 800b908:	d51f      	bpl.n	800b94a <_DrawVLine+0x7e>
 800b90a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b90e:	689b      	ldr	r3, [r3, #8]
 800b910:	4798      	blx	r3
 800b912:	fa1f f880 	uxth.w	r8, r0
 800b916:	9801      	ldr	r0, [sp, #4]
 800b918:	b120      	cbz	r0, 800b924 <_DrawVLine+0x58>
 800b91a:	6883      	ldr	r3, [r0, #8]
 800b91c:	4639      	mov	r1, r7
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	4622      	mov	r2, r4
 800b922:	4798      	blx	r3
 800b924:	882b      	ldrh	r3, [r5, #0]
 800b926:	ea88 0303 	eor.w	r3, r8, r3
 800b92a:	802b      	strh	r3, [r5, #0]
 800b92c:	9b00      	ldr	r3, [sp, #0]
 800b92e:	3401      	adds	r4, #1
 800b930:	68db      	ldr	r3, [r3, #12]
 800b932:	42b4      	cmp	r4, r6
 800b934:	441d      	add	r5, r3
 800b936:	ddee      	ble.n	800b916 <_DrawVLine+0x4a>
 800b938:	4668      	mov	r0, sp
 800b93a:	f7fe feb5 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 800b93e:	9b01      	ldr	r3, [sp, #4]
 800b940:	b1eb      	cbz	r3, 800b97e <_DrawVLine+0xb2>
 800b942:	a801      	add	r0, sp, #4
 800b944:	f7fe feb0 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 800b948:	e019      	b.n	800b97e <_DrawVLine+0xb2>
 800b94a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b94c:	f8d3 9000 	ldr.w	r9, [r3]
 800b950:	9b01      	ldr	r3, [sp, #4]
 800b952:	b163      	cbz	r3, 800b96e <_DrawVLine+0xa2>
 800b954:	9801      	ldr	r0, [sp, #4]
 800b956:	6883      	ldr	r3, [r0, #8]
 800b958:	4622      	mov	r2, r4
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	4639      	mov	r1, r7
 800b95e:	3401      	adds	r4, #1
 800b960:	4798      	blx	r3
 800b962:	42b4      	cmp	r4, r6
 800b964:	f8a5 9000 	strh.w	r9, [r5]
 800b968:	4445      	add	r5, r8
 800b96a:	ddf3      	ble.n	800b954 <_DrawVLine+0x88>
 800b96c:	e7e4      	b.n	800b938 <_DrawVLine+0x6c>
 800b96e:	1b34      	subs	r4, r6, r4
 800b970:	3401      	adds	r4, #1
 800b972:	3c01      	subs	r4, #1
 800b974:	f8a5 9000 	strh.w	r9, [r5]
 800b978:	4445      	add	r5, r8
 800b97a:	d1fa      	bne.n	800b972 <_DrawVLine+0xa6>
 800b97c:	e7dc      	b.n	800b938 <_DrawVLine+0x6c>
 800b97e:	b002      	add	sp, #8
 800b980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b984:	20000018 	.word	0x20000018

0800b988 <_FillRect>:
 800b988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b98c:	4f2a      	ldr	r7, [pc, #168]	; (800ba38 <_FillRect+0xb0>)
 800b98e:	4614      	mov	r4, r2
 800b990:	683a      	ldr	r2, [r7, #0]
 800b992:	4698      	mov	r8, r3
 800b994:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800b996:	b087      	sub	sp, #28
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	9302      	str	r3, [sp, #8]
 800b99c:	4682      	mov	sl, r0
 800b99e:	6e10      	ldr	r0, [r2, #96]	; 0x60
 800b9a0:	460e      	mov	r6, r1
 800b9a2:	f7fe fe73 	bl	800a68c <GUI_ALLOC_LockH>
 800b9a6:	4621      	mov	r1, r4
 800b9a8:	9004      	str	r0, [sp, #16]
 800b9aa:	4630      	mov	r0, r6
 800b9ac:	f7ff ff14 	bl	800b7d8 <_XY2PTR>
 800b9b0:	9a04      	ldr	r2, [sp, #16]
 800b9b2:	4605      	mov	r5, r0
 800b9b4:	6950      	ldr	r0, [r2, #20]
 800b9b6:	68d3      	ldr	r3, [r2, #12]
 800b9b8:	9303      	str	r3, [sp, #12]
 800b9ba:	ebc6 0908 	rsb	r9, r6, r8
 800b9be:	f109 0801 	add.w	r8, r9, #1
 800b9c2:	46bb      	mov	fp, r7
 800b9c4:	b180      	cbz	r0, 800b9e8 <_FillRect+0x60>
 800b9c6:	f7fe fe61 	bl	800a68c <GUI_ALLOC_LockH>
 800b9ca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b9cc:	af06      	add	r7, sp, #24
 800b9ce:	1b13      	subs	r3, r2, r4
 800b9d0:	f847 0d04 	str.w	r0, [r7, #-4]!
 800b9d4:	3301      	adds	r3, #1
 800b9d6:	9300      	str	r3, [sp, #0]
 800b9d8:	4631      	mov	r1, r6
 800b9da:	4622      	mov	r2, r4
 800b9dc:	4643      	mov	r3, r8
 800b9de:	f7ff feab 	bl	800b738 <GUI_USAGE_AddRect>
 800b9e2:	4638      	mov	r0, r7
 800b9e4:	f7fe fe60 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 800b9e8:	ea4f 0649 	mov.w	r6, r9, lsl #1
 800b9ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b9ee:	429c      	cmp	r4, r3
 800b9f0:	dc1c      	bgt.n	800ba2c <_FillRect+0xa4>
 800b9f2:	f8db 3000 	ldr.w	r3, [fp]
 800b9f6:	7c1b      	ldrb	r3, [r3, #16]
 800b9f8:	07db      	lsls	r3, r3, #31
 800b9fa:	d50d      	bpl.n	800ba18 <_FillRect+0x90>
 800b9fc:	f8da 3010 	ldr.w	r3, [sl, #16]
 800ba00:	689b      	ldr	r3, [r3, #8]
 800ba02:	4798      	blx	r3
 800ba04:	19aa      	adds	r2, r5, r6
 800ba06:	b280      	uxth	r0, r0
 800ba08:	1eab      	subs	r3, r5, #2
 800ba0a:	8859      	ldrh	r1, [r3, #2]
 800ba0c:	4041      	eors	r1, r0
 800ba0e:	f823 1f02 	strh.w	r1, [r3, #2]!
 800ba12:	4293      	cmp	r3, r2
 800ba14:	d1f9      	bne.n	800ba0a <_FillRect+0x82>
 800ba16:	e005      	b.n	800ba24 <_FillRect+0x9c>
 800ba18:	9b02      	ldr	r3, [sp, #8]
 800ba1a:	4628      	mov	r0, r5
 800ba1c:	b299      	uxth	r1, r3
 800ba1e:	4642      	mov	r2, r8
 800ba20:	f7fc fe62 	bl	80086e8 <GUI__memset16>
 800ba24:	9a03      	ldr	r2, [sp, #12]
 800ba26:	3401      	adds	r4, #1
 800ba28:	4415      	add	r5, r2
 800ba2a:	e7df      	b.n	800b9ec <_FillRect+0x64>
 800ba2c:	a804      	add	r0, sp, #16
 800ba2e:	f7fe fe3b 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 800ba32:	b007      	add	sp, #28
 800ba34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba38:	20000018 	.word	0x20000018

0800ba3c <_DrawHLine>:
 800ba3c:	b507      	push	{r0, r1, r2, lr}
 800ba3e:	9200      	str	r2, [sp, #0]
 800ba40:	f7ff ffa2 	bl	800b988 <_FillRect>
 800ba44:	b003      	add	sp, #12
 800ba46:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800ba4c <_DrawBitmap>:
 800ba4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba50:	4c8a      	ldr	r4, [pc, #552]	; (800bc7c <_DrawBitmap+0x230>)
 800ba52:	b093      	sub	sp, #76	; 0x4c
 800ba54:	469b      	mov	fp, r3
 800ba56:	6823      	ldr	r3, [r4, #0]
 800ba58:	900d      	str	r0, [sp, #52]	; 0x34
 800ba5a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800ba5c:	9207      	str	r2, [sp, #28]
 800ba5e:	460d      	mov	r5, r1
 800ba60:	f8dd a07c 	ldr.w	sl, [sp, #124]	; 0x7c
 800ba64:	f7fe fe12 	bl	800a68c <GUI_ALLOC_LockH>
 800ba68:	9010      	str	r0, [sp, #64]	; 0x40
 800ba6a:	6940      	ldr	r0, [r0, #20]
 800ba6c:	b108      	cbz	r0, 800ba72 <_DrawBitmap+0x26>
 800ba6e:	f7fe fe0d 	bl	800a68c <GUI_ALLOC_LockH>
 800ba72:	9011      	str	r0, [sp, #68]	; 0x44
 800ba74:	a812      	add	r0, sp, #72	; 0x48
 800ba76:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 800ba7a:	68db      	ldr	r3, [r3, #12]
 800ba7c:	9308      	str	r3, [sp, #32]
 800ba7e:	f7fe fe13 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 800ba82:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800ba84:	9811      	ldr	r0, [sp, #68]	; 0x44
 800ba86:	442e      	add	r6, r5
 800ba88:	9604      	str	r6, [sp, #16]
 800ba8a:	b150      	cbz	r0, 800baa2 <_DrawBitmap+0x56>
 800ba8c:	6823      	ldr	r3, [r4, #0]
 800ba8e:	7c1b      	ldrb	r3, [r3, #16]
 800ba90:	0799      	lsls	r1, r3, #30
 800ba92:	d106      	bne.n	800baa2 <_DrawBitmap+0x56>
 800ba94:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800ba96:	9700      	str	r7, [sp, #0]
 800ba98:	4631      	mov	r1, r6
 800ba9a:	9a07      	ldr	r2, [sp, #28]
 800ba9c:	465b      	mov	r3, fp
 800ba9e:	f7ff fe4b 	bl	800b738 <GUI_USAGE_AddRect>
 800baa2:	9804      	ldr	r0, [sp, #16]
 800baa4:	9907      	ldr	r1, [sp, #28]
 800baa6:	f7ff fe97 	bl	800b7d8 <_XY2PTR>
 800baaa:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800baac:	2e10      	cmp	r6, #16
 800baae:	4604      	mov	r4, r0
 800bab0:	d139      	bne.n	800bb26 <_DrawBitmap+0xda>
 800bab2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bab4:	b11b      	cbz	r3, 800babe <_DrawBitmap+0x72>
 800bab6:	ea4f 064b 	mov.w	r6, fp, lsl #1
 800baba:	2500      	movs	r5, #0
 800babc:	e014      	b.n	800bae8 <_DrawBitmap+0x9c>
 800babe:	4b70      	ldr	r3, [pc, #448]	; (800bc80 <_DrawBitmap+0x234>)
 800bac0:	681d      	ldr	r5, [r3, #0]
 800bac2:	2d00      	cmp	r5, #0
 800bac4:	d0f7      	beq.n	800bab6 <_DrawBitmap+0x6a>
 800bac6:	9e08      	ldr	r6, [sp, #32]
 800bac8:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800baca:	9600      	str	r6, [sp, #0]
 800bacc:	9701      	str	r7, [sp, #4]
 800bace:	4651      	mov	r1, sl
 800bad0:	465a      	mov	r2, fp
 800bad2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800bad4:	47a8      	blx	r5
 800bad6:	e345      	b.n	800c164 <_DrawBitmap+0x718>
 800bad8:	f1ba 0f00 	cmp.w	sl, #0
 800badc:	d10a      	bne.n	800baf4 <_DrawBitmap+0xa8>
 800bade:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800bae0:	44ba      	add	sl, r7
 800bae2:	9f08      	ldr	r7, [sp, #32]
 800bae4:	3501      	adds	r5, #1
 800bae6:	443c      	add	r4, r7
 800bae8:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800baea:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 800baee:	42bd      	cmp	r5, r7
 800baf0:	dbf2      	blt.n	800bad8 <_DrawBitmap+0x8c>
 800baf2:	e013      	b.n	800bb1c <_DrawBitmap+0xd0>
 800baf4:	2c00      	cmp	r4, #0
 800baf6:	d0f2      	beq.n	800bade <_DrawBitmap+0x92>
 800baf8:	4620      	mov	r0, r4
 800bafa:	4651      	mov	r1, sl
 800bafc:	4632      	mov	r2, r6
 800bafe:	f000 fecd 	bl	800c89c <memcpy>
 800bb02:	f1b8 0f00 	cmp.w	r8, #0
 800bb06:	d0ea      	beq.n	800bade <_DrawBitmap+0x92>
 800bb08:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bb0c:	9a07      	ldr	r2, [sp, #28]
 800bb0e:	685f      	ldr	r7, [r3, #4]
 800bb10:	9904      	ldr	r1, [sp, #16]
 800bb12:	4640      	mov	r0, r8
 800bb14:	442a      	add	r2, r5
 800bb16:	465b      	mov	r3, fp
 800bb18:	47b8      	blx	r7
 800bb1a:	e7e0      	b.n	800bade <_DrawBitmap+0x92>
 800bb1c:	f1b8 0f00 	cmp.w	r8, #0
 800bb20:	f040 831d 	bne.w	800c15e <_DrawBitmap+0x712>
 800bb24:	e31e      	b.n	800c164 <_DrawBitmap+0x718>
 800bb26:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800bb28:	2e17      	cmp	r6, #23
 800bb2a:	dd38      	ble.n	800bb9e <_DrawBitmap+0x152>
 800bb2c:	2600      	movs	r6, #0
 800bb2e:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800bb30:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800bb32:	42be      	cmp	r6, r7
 800bb34:	f280 809d 	bge.w	800bc72 <_DrawBitmap+0x226>
 800bb38:	9f07      	ldr	r7, [sp, #28]
 800bb3a:	4437      	add	r7, r6
 800bb3c:	f1ba 0f00 	cmp.w	sl, #0
 800bb40:	d027      	beq.n	800bb92 <_DrawBitmap+0x146>
 800bb42:	b334      	cbz	r4, 800bb92 <_DrawBitmap+0x146>
 800bb44:	b13d      	cbz	r5, 800bb56 <_DrawBitmap+0x10a>
 800bb46:	68ab      	ldr	r3, [r5, #8]
 800bb48:	9904      	ldr	r1, [sp, #16]
 800bb4a:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800bb4e:	4628      	mov	r0, r5
 800bb50:	463a      	mov	r2, r7
 800bb52:	465b      	mov	r3, fp
 800bb54:	47e0      	blx	ip
 800bb56:	1ea3      	subs	r3, r4, #2
 800bb58:	f1aa 0904 	sub.w	r9, sl, #4
 800bb5c:	9303      	str	r3, [sp, #12]
 800bb5e:	46d8      	mov	r8, fp
 800bb60:	9b04      	ldr	r3, [sp, #16]
 800bb62:	980d      	ldr	r0, [sp, #52]	; 0x34
 800bb64:	445b      	add	r3, fp
 800bb66:	ebc8 0103 	rsb	r1, r8, r3
 800bb6a:	6903      	ldr	r3, [r0, #16]
 800bb6c:	f859 0f04 	ldr.w	r0, [r9, #4]!
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	9102      	str	r1, [sp, #8]
 800bb74:	4798      	blx	r3
 800bb76:	9b03      	ldr	r3, [sp, #12]
 800bb78:	9902      	ldr	r1, [sp, #8]
 800bb7a:	f823 0f02 	strh.w	r0, [r3, #2]!
 800bb7e:	9303      	str	r3, [sp, #12]
 800bb80:	b125      	cbz	r5, 800bb8c <_DrawBitmap+0x140>
 800bb82:	68ab      	ldr	r3, [r5, #8]
 800bb84:	4628      	mov	r0, r5
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	463a      	mov	r2, r7
 800bb8a:	4798      	blx	r3
 800bb8c:	f1b8 0801 	subs.w	r8, r8, #1
 800bb90:	d1e6      	bne.n	800bb60 <_DrawBitmap+0x114>
 800bb92:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800bb94:	44ba      	add	sl, r7
 800bb96:	9f08      	ldr	r7, [sp, #32]
 800bb98:	3601      	adds	r6, #1
 800bb9a:	443c      	add	r4, r7
 800bb9c:	e7c7      	b.n	800bb2e <_DrawBitmap+0xe2>
 800bb9e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800bba0:	2e08      	cmp	r6, #8
 800bba2:	f100 0402 	add.w	r4, r0, #2
 800bba6:	d16d      	bne.n	800bc84 <_DrawBitmap+0x238>
 800bba8:	9e07      	ldr	r6, [sp, #28]
 800bbaa:	9f07      	ldr	r7, [sp, #28]
 800bbac:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800bbae:	1bf3      	subs	r3, r6, r7
 800bbb0:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800bbb2:	42bb      	cmp	r3, r7
 800bbb4:	f1a4 0002 	sub.w	r0, r4, #2
 800bbb8:	da5b      	bge.n	800bc72 <_DrawBitmap+0x226>
 800bbba:	4b30      	ldr	r3, [pc, #192]	; (800bc7c <_DrawBitmap+0x230>)
 800bbbc:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	7c1b      	ldrb	r3, [r3, #16]
 800bbc2:	b367      	cbz	r7, 800bc1e <_DrawBitmap+0x1d2>
 800bbc4:	f013 0303 	ands.w	r3, r3, #3
 800bbc8:	d004      	beq.n	800bbd4 <_DrawBitmap+0x188>
 800bbca:	2b02      	cmp	r3, #2
 800bbcc:	d14b      	bne.n	800bc66 <_DrawBitmap+0x21a>
 800bbce:	46a0      	mov	r8, r4
 800bbd0:	9f04      	ldr	r7, [sp, #16]
 800bbd2:	e01d      	b.n	800bc10 <_DrawBitmap+0x1c4>
 800bbd4:	f81a 2003 	ldrb.w	r2, [sl, r3]
 800bbd8:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800bbda:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800bbde:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 800bbe2:	3301      	adds	r3, #1
 800bbe4:	455b      	cmp	r3, fp
 800bbe6:	d1f5      	bne.n	800bbd4 <_DrawBitmap+0x188>
 800bbe8:	e03d      	b.n	800bc66 <_DrawBitmap+0x21a>
 800bbea:	9921      	ldr	r1, [sp, #132]	; 0x84
 800bbec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bbf0:	f828 3c02 	strh.w	r3, [r8, #-2]
 800bbf4:	b12d      	cbz	r5, 800bc02 <_DrawBitmap+0x1b6>
 800bbf6:	68ab      	ldr	r3, [r5, #8]
 800bbf8:	4628      	mov	r0, r5
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	4639      	mov	r1, r7
 800bbfe:	4632      	mov	r2, r6
 800bc00:	4798      	blx	r3
 800bc02:	9b04      	ldr	r3, [sp, #16]
 800bc04:	3701      	adds	r7, #1
 800bc06:	445b      	add	r3, fp
 800bc08:	42bb      	cmp	r3, r7
 800bc0a:	f108 0802 	add.w	r8, r8, #2
 800bc0e:	d02a      	beq.n	800bc66 <_DrawBitmap+0x21a>
 800bc10:	9804      	ldr	r0, [sp, #16]
 800bc12:	ebc0 030a 	rsb	r3, r0, sl
 800bc16:	5ddb      	ldrb	r3, [r3, r7]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d0f2      	beq.n	800bc02 <_DrawBitmap+0x1b6>
 800bc1c:	e7e5      	b.n	800bbea <_DrawBitmap+0x19e>
 800bc1e:	f013 0303 	ands.w	r3, r3, #3
 800bc22:	d004      	beq.n	800bc2e <_DrawBitmap+0x1e2>
 800bc24:	2b02      	cmp	r3, #2
 800bc26:	d11e      	bne.n	800bc66 <_DrawBitmap+0x21a>
 800bc28:	46a0      	mov	r8, r4
 800bc2a:	9f04      	ldr	r7, [sp, #16]
 800bc2c:	e014      	b.n	800bc58 <_DrawBitmap+0x20c>
 800bc2e:	4651      	mov	r1, sl
 800bc30:	465a      	mov	r2, fp
 800bc32:	f000 fe33 	bl	800c89c <memcpy>
 800bc36:	e016      	b.n	800bc66 <_DrawBitmap+0x21a>
 800bc38:	f828 3c02 	strh.w	r3, [r8, #-2]
 800bc3c:	b12d      	cbz	r5, 800bc4a <_DrawBitmap+0x1fe>
 800bc3e:	68ab      	ldr	r3, [r5, #8]
 800bc40:	4628      	mov	r0, r5
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	4639      	mov	r1, r7
 800bc46:	4632      	mov	r2, r6
 800bc48:	4798      	blx	r3
 800bc4a:	9b04      	ldr	r3, [sp, #16]
 800bc4c:	3701      	adds	r7, #1
 800bc4e:	445b      	add	r3, fp
 800bc50:	42bb      	cmp	r3, r7
 800bc52:	f108 0802 	add.w	r8, r8, #2
 800bc56:	d006      	beq.n	800bc66 <_DrawBitmap+0x21a>
 800bc58:	9a04      	ldr	r2, [sp, #16]
 800bc5a:	ebc2 030a 	rsb	r3, r2, sl
 800bc5e:	5ddb      	ldrb	r3, [r3, r7]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d0f2      	beq.n	800bc4a <_DrawBitmap+0x1fe>
 800bc64:	e7e8      	b.n	800bc38 <_DrawBitmap+0x1ec>
 800bc66:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800bc68:	44ba      	add	sl, r7
 800bc6a:	9f08      	ldr	r7, [sp, #32]
 800bc6c:	3601      	adds	r6, #1
 800bc6e:	443c      	add	r4, r7
 800bc70:	e79b      	b.n	800bbaa <_DrawBitmap+0x15e>
 800bc72:	2d00      	cmp	r5, #0
 800bc74:	f040 8273 	bne.w	800c15e <_DrawBitmap+0x712>
 800bc78:	e274      	b.n	800c164 <_DrawBitmap+0x718>
 800bc7a:	bf00      	nop
 800bc7c:	20000018 	.word	0x20000018
 800bc80:	20019204 	.word	0x20019204
 800bc84:	9e21      	ldr	r6, [sp, #132]	; 0x84
 800bc86:	4bab      	ldr	r3, [pc, #684]	; (800bf34 <_DrawBitmap+0x4e8>)
 800bc88:	9f20      	ldr	r7, [sp, #128]	; 0x80
 800bc8a:	9409      	str	r4, [sp, #36]	; 0x24
 800bc8c:	2e00      	cmp	r6, #0
 800bc8e:	bf08      	it	eq
 800bc90:	461e      	moveq	r6, r3
 800bc92:	9621      	str	r6, [sp, #132]	; 0x84
 800bc94:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800bc96:	0076      	lsls	r6, r6, #1
 800bc98:	960e      	str	r6, [sp, #56]	; 0x38
 800bc9a:	00bf      	lsls	r7, r7, #2
 800bc9c:	9e07      	ldr	r6, [sp, #28]
 800bc9e:	970f      	str	r7, [sp, #60]	; 0x3c
 800bca0:	9605      	str	r6, [sp, #20]
 800bca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bca4:	9e05      	ldr	r6, [sp, #20]
 800bca6:	9f07      	ldr	r7, [sp, #28]
 800bca8:	1e9c      	subs	r4, r3, #2
 800bcaa:	1bf3      	subs	r3, r6, r7
 800bcac:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800bcae:	42b3      	cmp	r3, r6
 800bcb0:	f280 8253 	bge.w	800c15a <_DrawBitmap+0x70e>
 800bcb4:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800bcb6:	2f02      	cmp	r7, #2
 800bcb8:	f000 80d9 	beq.w	800be6e <_DrawBitmap+0x422>
 800bcbc:	2f04      	cmp	r7, #4
 800bcbe:	f000 8178 	beq.w	800bfb2 <_DrawBitmap+0x566>
 800bcc2:	2f01      	cmp	r7, #1
 800bcc4:	f040 823f 	bne.w	800c146 <_DrawBitmap+0x6fa>
 800bcc8:	f8df 9270 	ldr.w	r9, [pc, #624]	; 800bf3c <_DrawBitmap+0x4f0>
 800bccc:	f8d9 3000 	ldr.w	r3, [r9]
 800bcd0:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800bcd2:	f7fe fcdb 	bl	800a68c <GUI_ALLOC_LockH>
 800bcd6:	f89a 3000 	ldrb.w	r3, [sl]
 800bcda:	4a97      	ldr	r2, [pc, #604]	; (800bf38 <_DrawBitmap+0x4ec>)
 800bcdc:	9010      	str	r0, [sp, #64]	; 0x40
 800bcde:	5cd5      	ldrb	r5, [r2, r3]
 800bce0:	f8d9 3000 	ldr.w	r3, [r9]
 800bce4:	9820      	ldr	r0, [sp, #128]	; 0x80
 800bce6:	7c1b      	ldrb	r3, [r3, #16]
 800bce8:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800bcea:	f003 0303 	and.w	r3, r3, #3
 800bcee:	2b02      	cmp	r3, #2
 800bcf0:	465e      	mov	r6, fp
 800bcf2:	f1c0 0808 	rsb	r8, r0, #8
 800bcf6:	fa45 f500 	asr.w	r5, r5, r0
 800bcfa:	d022      	beq.n	800bd42 <_DrawBitmap+0x2f6>
 800bcfc:	2b03      	cmp	r3, #3
 800bcfe:	d062      	beq.n	800bdc6 <_DrawBitmap+0x37a>
 800bd00:	2b01      	cmp	r3, #1
 800bd02:	d060      	beq.n	800bdc6 <_DrawBitmap+0x37a>
 800bd04:	4652      	mov	r2, sl
 800bd06:	4546      	cmp	r6, r8
 800bd08:	bf38      	it	cc
 800bd0a:	46b0      	movcc	r8, r6
 800bd0c:	ebc8 0606 	rsb	r6, r8, r6
 800bd10:	4643      	mov	r3, r8
 800bd12:	4621      	mov	r1, r4
 800bd14:	f005 0001 	and.w	r0, r5, #1
 800bd18:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800bd1a:	3b01      	subs	r3, #1
 800bd1c:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 800bd20:	f821 0b02 	strh.w	r0, [r1], #2
 800bd24:	ea4f 0555 	mov.w	r5, r5, lsr #1
 800bd28:	d1f4      	bne.n	800bd14 <_DrawBitmap+0x2c8>
 800bd2a:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 800bd2e:	2e00      	cmp	r6, #0
 800bd30:	f000 8099 	beq.w	800be66 <_DrawBitmap+0x41a>
 800bd34:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800bd38:	497f      	ldr	r1, [pc, #508]	; (800bf38 <_DrawBitmap+0x4ec>)
 800bd3a:	f04f 0808 	mov.w	r8, #8
 800bd3e:	5ccd      	ldrb	r5, [r1, r3]
 800bd40:	e7e1      	b.n	800bd06 <_DrawBitmap+0x2ba>
 800bd42:	9821      	ldr	r0, [sp, #132]	; 0x84
 800bd44:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800bd48:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 800bd4c:	f8cd a018 	str.w	sl, [sp, #24]
 800bd50:	4546      	cmp	r6, r8
 800bd52:	bf38      	it	cc
 800bd54:	46b0      	movcc	r8, r6
 800bd56:	ebc8 0606 	rsb	r6, r8, r6
 800bd5a:	b32f      	cbz	r7, 800bda8 <_DrawBitmap+0x35c>
 800bd5c:	b91d      	cbnz	r5, 800bd66 <_DrawBitmap+0x31a>
 800bd5e:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 800bd62:	44c1      	add	r9, r8
 800bd64:	e024      	b.n	800bdb0 <_DrawBitmap+0x364>
 800bd66:	07ea      	lsls	r2, r5, #31
 800bd68:	d50b      	bpl.n	800bd82 <_DrawBitmap+0x336>
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	9a05      	ldr	r2, [sp, #20]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	f8cd c008 	str.w	ip, [sp, #8]
 800bd74:	4638      	mov	r0, r7
 800bd76:	4649      	mov	r1, r9
 800bd78:	4798      	blx	r3
 800bd7a:	f8dd c008 	ldr.w	ip, [sp, #8]
 800bd7e:	f8a4 c000 	strh.w	ip, [r4]
 800bd82:	f1b8 0801 	subs.w	r8, r8, #1
 800bd86:	f109 0901 	add.w	r9, r9, #1
 800bd8a:	f104 0402 	add.w	r4, r4, #2
 800bd8e:	d00f      	beq.n	800bdb0 <_DrawBitmap+0x364>
 800bd90:	086d      	lsrs	r5, r5, #1
 800bd92:	e7e3      	b.n	800bd5c <_DrawBitmap+0x310>
 800bd94:	07eb      	lsls	r3, r5, #31
 800bd96:	bf48      	it	mi
 800bd98:	f8a4 c000 	strhmi.w	ip, [r4]
 800bd9c:	f1b8 0801 	subs.w	r8, r8, #1
 800bda0:	f104 0402 	add.w	r4, r4, #2
 800bda4:	d004      	beq.n	800bdb0 <_DrawBitmap+0x364>
 800bda6:	086d      	lsrs	r5, r5, #1
 800bda8:	2d00      	cmp	r5, #0
 800bdaa:	d1f3      	bne.n	800bd94 <_DrawBitmap+0x348>
 800bdac:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 800bdb0:	2e00      	cmp	r6, #0
 800bdb2:	d058      	beq.n	800be66 <_DrawBitmap+0x41a>
 800bdb4:	9906      	ldr	r1, [sp, #24]
 800bdb6:	4a60      	ldr	r2, [pc, #384]	; (800bf38 <_DrawBitmap+0x4ec>)
 800bdb8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bdbc:	9106      	str	r1, [sp, #24]
 800bdbe:	5cd5      	ldrb	r5, [r2, r3]
 800bdc0:	f04f 0808 	mov.w	r8, #8
 800bdc4:	e7c4      	b.n	800bd50 <_DrawBitmap+0x304>
 800bdc6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bdc8:	6913      	ldr	r3, [r2, #16]
 800bdca:	689b      	ldr	r3, [r3, #8]
 800bdcc:	4798      	blx	r3
 800bdce:	9b04      	ldr	r3, [sp, #16]
 800bdd0:	930b      	str	r3, [sp, #44]	; 0x2c
 800bdd2:	b280      	uxth	r0, r0
 800bdd4:	900a      	str	r0, [sp, #40]	; 0x28
 800bdd6:	f10a 0901 	add.w	r9, sl, #1
 800bdda:	4546      	cmp	r6, r8
 800bddc:	bf38      	it	cc
 800bdde:	46b0      	movcc	r8, r6
 800bde0:	ebc8 0606 	rsb	r6, r8, r6
 800bde4:	1ca3      	adds	r3, r4, #2
 800bde6:	b31f      	cbz	r7, 800be30 <_DrawBitmap+0x3e4>
 800bde8:	f8cd 8018 	str.w	r8, [sp, #24]
 800bdec:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800bdee:	9a06      	ldr	r2, [sp, #24]
 800bdf0:	4440      	add	r0, r8
 800bdf2:	900c      	str	r0, [sp, #48]	; 0x30
 800bdf4:	1a81      	subs	r1, r0, r2
 800bdf6:	07e8      	lsls	r0, r5, #31
 800bdf8:	d50d      	bpl.n	800be16 <_DrawBitmap+0x3ca>
 800bdfa:	68ba      	ldr	r2, [r7, #8]
 800bdfc:	4638      	mov	r0, r7
 800bdfe:	f8d2 c000 	ldr.w	ip, [r2]
 800be02:	9a05      	ldr	r2, [sp, #20]
 800be04:	9302      	str	r3, [sp, #8]
 800be06:	47e0      	blx	ip
 800be08:	9b02      	ldr	r3, [sp, #8]
 800be0a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800be0c:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 800be10:	4042      	eors	r2, r0
 800be12:	f823 2c02 	strh.w	r2, [r3, #-2]
 800be16:	9906      	ldr	r1, [sp, #24]
 800be18:	3901      	subs	r1, #1
 800be1a:	ea4f 0555 	mov.w	r5, r5, lsr #1
 800be1e:	f103 0302 	add.w	r3, r3, #2
 800be22:	9106      	str	r1, [sp, #24]
 800be24:	d1e2      	bne.n	800bdec <_DrawBitmap+0x3a0>
 800be26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be28:	930b      	str	r3, [sp, #44]	; 0x2c
 800be2a:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 800be2e:	e010      	b.n	800be52 <_DrawBitmap+0x406>
 800be30:	4642      	mov	r2, r8
 800be32:	07e9      	lsls	r1, r5, #31
 800be34:	d505      	bpl.n	800be42 <_DrawBitmap+0x3f6>
 800be36:	f833 1c02 	ldrh.w	r1, [r3, #-2]
 800be3a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800be3c:	4041      	eors	r1, r0
 800be3e:	f823 1c02 	strh.w	r1, [r3, #-2]
 800be42:	3a01      	subs	r2, #1
 800be44:	ea4f 0555 	mov.w	r5, r5, lsr #1
 800be48:	f103 0302 	add.w	r3, r3, #2
 800be4c:	d1f1      	bne.n	800be32 <_DrawBitmap+0x3e6>
 800be4e:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 800be52:	b146      	cbz	r6, 800be66 <_DrawBitmap+0x41a>
 800be54:	f899 3000 	ldrb.w	r3, [r9]
 800be58:	4a37      	ldr	r2, [pc, #220]	; (800bf38 <_DrawBitmap+0x4ec>)
 800be5a:	f109 0901 	add.w	r9, r9, #1
 800be5e:	5cd5      	ldrb	r5, [r2, r3]
 800be60:	f04f 0808 	mov.w	r8, #8
 800be64:	e7b9      	b.n	800bdda <_DrawBitmap+0x38e>
 800be66:	a810      	add	r0, sp, #64	; 0x40
 800be68:	f7fe fc1e 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 800be6c:	e16b      	b.n	800c146 <_DrawBitmap+0x6fa>
 800be6e:	4b33      	ldr	r3, [pc, #204]	; (800bf3c <_DrawBitmap+0x4f0>)
 800be70:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800be76:	7c1b      	ldrb	r3, [r3, #16]
 800be78:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 800be7c:	f1c6 0504 	rsb	r5, r6, #4
 800be80:	f89a 6000 	ldrb.w	r6, [sl]
 800be84:	f003 0303 	and.w	r3, r3, #3
 800be88:	40be      	lsls	r6, r7
 800be8a:	2b01      	cmp	r3, #1
 800be8c:	b2ed      	uxtb	r5, r5
 800be8e:	b2f6      	uxtb	r6, r6
 800be90:	d06a      	beq.n	800bf68 <_DrawBitmap+0x51c>
 800be92:	d308      	bcc.n	800bea6 <_DrawBitmap+0x45a>
 800be94:	2b02      	cmp	r3, #2
 800be96:	f040 8156 	bne.w	800c146 <_DrawBitmap+0x6fa>
 800be9a:	f8cd a018 	str.w	sl, [sp, #24]
 800be9e:	465f      	mov	r7, fp
 800bea0:	f8dd c010 	ldr.w	ip, [sp, #16]
 800bea4:	e03e      	b.n	800bf24 <_DrawBitmap+0x4d8>
 800bea6:	4652      	mov	r2, sl
 800bea8:	465b      	mov	r3, fp
 800beaa:	429d      	cmp	r5, r3
 800beac:	bfc8      	it	gt
 800beae:	b2dd      	uxtbgt	r5, r3
 800beb0:	1b5b      	subs	r3, r3, r5
 800beb2:	4629      	mov	r1, r5
 800beb4:	4620      	mov	r0, r4
 800beb6:	ea4f 1c96 	mov.w	ip, r6, lsr #6
 800beba:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800bebc:	3901      	subs	r1, #1
 800bebe:	f857 c02c 	ldr.w	ip, [r7, ip, lsl #2]
 800bec2:	f820 cb02 	strh.w	ip, [r0], #2
 800bec6:	00b6      	lsls	r6, r6, #2
 800bec8:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 800becc:	b2f6      	uxtb	r6, r6
 800bece:	d1f2      	bne.n	800beb6 <_DrawBitmap+0x46a>
 800bed0:	3d01      	subs	r5, #1
 800bed2:	b2ed      	uxtb	r5, r5
 800bed4:	3501      	adds	r5, #1
 800bed6:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800beda:	2b00      	cmp	r3, #0
 800bedc:	f000 8133 	beq.w	800c146 <_DrawBitmap+0x6fa>
 800bee0:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 800bee4:	2504      	movs	r5, #4
 800bee6:	e7e0      	b.n	800beaa <_DrawBitmap+0x45e>
 800bee8:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 800beec:	eb08 010c 	add.w	r1, r8, ip
 800bef0:	d126      	bne.n	800bf40 <_DrawBitmap+0x4f4>
 800bef2:	f108 0801 	add.w	r8, r8, #1
 800bef6:	fa5f f388 	uxtb.w	r3, r8
 800befa:	00b6      	lsls	r6, r6, #2
 800befc:	429d      	cmp	r5, r3
 800befe:	b2f6      	uxtb	r6, r6
 800bf00:	d1f2      	bne.n	800bee8 <_DrawBitmap+0x49c>
 800bf02:	3d01      	subs	r5, #1
 800bf04:	b2ed      	uxtb	r5, r5
 800bf06:	1c6b      	adds	r3, r5, #1
 800bf08:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800bf0c:	f10c 0301 	add.w	r3, ip, #1
 800bf10:	eb03 0c05 	add.w	ip, r3, r5
 800bf14:	2f00      	cmp	r7, #0
 800bf16:	f000 8116 	beq.w	800c146 <_DrawBitmap+0x6fa>
 800bf1a:	9b06      	ldr	r3, [sp, #24]
 800bf1c:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 800bf20:	9306      	str	r3, [sp, #24]
 800bf22:	2504      	movs	r5, #4
 800bf24:	42bd      	cmp	r5, r7
 800bf26:	bfc8      	it	gt
 800bf28:	b2fd      	uxtbgt	r5, r7
 800bf2a:	1b7f      	subs	r7, r7, r5
 800bf2c:	f04f 0800 	mov.w	r8, #0
 800bf30:	e7da      	b.n	800bee8 <_DrawBitmap+0x49c>
 800bf32:	bf00      	nop
 800bf34:	0800ff00 	.word	0x0800ff00
 800bf38:	0800fd60 	.word	0x0800fd60
 800bf3c:	20000018 	.word	0x20000018
 800bf40:	09b3      	lsrs	r3, r6, #6
 800bf42:	9821      	ldr	r0, [sp, #132]	; 0x84
 800bf44:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800bf48:	f824 3018 	strh.w	r3, [r4, r8, lsl #1]
 800bf4c:	f1b9 0f00 	cmp.w	r9, #0
 800bf50:	d0cf      	beq.n	800bef2 <_DrawBitmap+0x4a6>
 800bf52:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800bf56:	9a05      	ldr	r2, [sp, #20]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	f8cd c008 	str.w	ip, [sp, #8]
 800bf5e:	4648      	mov	r0, r9
 800bf60:	4798      	blx	r3
 800bf62:	f8dd c008 	ldr.w	ip, [sp, #8]
 800bf66:	e7c4      	b.n	800bef2 <_DrawBitmap+0x4a6>
 800bf68:	4651      	mov	r1, sl
 800bf6a:	465b      	mov	r3, fp
 800bf6c:	429d      	cmp	r5, r3
 800bf6e:	bfc8      	it	gt
 800bf70:	b2dd      	uxtbgt	r5, r3
 800bf72:	1b5b      	subs	r3, r3, r5
 800bf74:	1ca2      	adds	r2, r4, #2
 800bf76:	4628      	mov	r0, r5
 800bf78:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 800bf7c:	d005      	beq.n	800bf8a <_DrawBitmap+0x53e>
 800bf7e:	f832 7c02 	ldrh.w	r7, [r2, #-2]
 800bf82:	f087 07ff 	eor.w	r7, r7, #255	; 0xff
 800bf86:	f822 7c02 	strh.w	r7, [r2, #-2]
 800bf8a:	3801      	subs	r0, #1
 800bf8c:	00b6      	lsls	r6, r6, #2
 800bf8e:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 800bf92:	b2f6      	uxtb	r6, r6
 800bf94:	f102 0202 	add.w	r2, r2, #2
 800bf98:	d1ee      	bne.n	800bf78 <_DrawBitmap+0x52c>
 800bf9a:	3d01      	subs	r5, #1
 800bf9c:	b2ed      	uxtb	r5, r5
 800bf9e:	3501      	adds	r5, #1
 800bfa0:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	f000 80ce 	beq.w	800c146 <_DrawBitmap+0x6fa>
 800bfaa:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 800bfae:	2504      	movs	r5, #4
 800bfb0:	e7dc      	b.n	800bf6c <_DrawBitmap+0x520>
 800bfb2:	4a6e      	ldr	r2, [pc, #440]	; (800c16c <_DrawBitmap+0x720>)
 800bfb4:	f89a 3000 	ldrb.w	r3, [sl]
 800bfb8:	6812      	ldr	r2, [r2, #0]
 800bfba:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800bfbc:	7c12      	ldrb	r2, [r2, #16]
 800bfbe:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800bfc0:	f002 0203 	and.w	r2, r2, #3
 800bfc4:	40bb      	lsls	r3, r7
 800bfc6:	2a01      	cmp	r2, #1
 800bfc8:	b2dd      	uxtb	r5, r3
 800bfca:	f000 8095 	beq.w	800c0f8 <_DrawBitmap+0x6ac>
 800bfce:	d302      	bcc.n	800bfd6 <_DrawBitmap+0x58a>
 800bfd0:	2a02      	cmp	r2, #2
 800bfd2:	d036      	beq.n	800c042 <_DrawBitmap+0x5f6>
 800bfd4:	e0b7      	b.n	800c146 <_DrawBitmap+0x6fa>
 800bfd6:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800bfd8:	b166      	cbz	r6, 800bff4 <_DrawBitmap+0x5a8>
 800bfda:	092d      	lsrs	r5, r5, #4
 800bfdc:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800bfde:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 800bfe2:	8023      	strh	r3, [r4, #0]
 800bfe4:	f10a 0201 	add.w	r2, sl, #1
 800bfe8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800bfea:	f89a 5001 	ldrb.w	r5, [sl, #1]
 800bfee:	f10b 33ff 	add.w	r3, fp, #4294967295
 800bff2:	e001      	b.n	800bff8 <_DrawBitmap+0x5ac>
 800bff4:	465b      	mov	r3, fp
 800bff6:	4652      	mov	r2, sl
 800bff8:	2b01      	cmp	r3, #1
 800bffa:	dd19      	ble.n	800c030 <_DrawBitmap+0x5e4>
 800bffc:	1058      	asrs	r0, r3, #1
 800bffe:	1d21      	adds	r1, r4, #4
 800c000:	f003 0301 	and.w	r3, r3, #1
 800c004:	eb02 0c00 	add.w	ip, r2, r0
 800c008:	092f      	lsrs	r7, r5, #4
 800c00a:	9e21      	ldr	r6, [sp, #132]	; 0x84
 800c00c:	f005 050f 	and.w	r5, r5, #15
 800c010:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 800c014:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800c018:	f821 7c04 	strh.w	r7, [r1, #-4]
 800c01c:	f821 5c02 	strh.w	r5, [r1, #-2]
 800c020:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800c024:	4562      	cmp	r2, ip
 800c026:	f101 0104 	add.w	r1, r1, #4
 800c02a:	d1ed      	bne.n	800c008 <_DrawBitmap+0x5bc>
 800c02c:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800c030:	2b00      	cmp	r3, #0
 800c032:	f000 8088 	beq.w	800c146 <_DrawBitmap+0x6fa>
 800c036:	092d      	lsrs	r5, r5, #4
 800c038:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800c03a:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 800c03e:	8023      	strh	r3, [r4, #0]
 800c040:	e081      	b.n	800c146 <_DrawBitmap+0x6fa>
 800c042:	9f20      	ldr	r7, [sp, #128]	; 0x80
 800c044:	b1c7      	cbz	r7, 800c078 <_DrawBitmap+0x62c>
 800c046:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800c04a:	d00b      	beq.n	800c064 <_DrawBitmap+0x618>
 800c04c:	092d      	lsrs	r5, r5, #4
 800c04e:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800c050:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 800c054:	8023      	strh	r3, [r4, #0]
 800c056:	b12e      	cbz	r6, 800c064 <_DrawBitmap+0x618>
 800c058:	68b3      	ldr	r3, [r6, #8]
 800c05a:	9904      	ldr	r1, [sp, #16]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	9a05      	ldr	r2, [sp, #20]
 800c060:	4630      	mov	r0, r6
 800c062:	4798      	blx	r3
 800c064:	9804      	ldr	r0, [sp, #16]
 800c066:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800c068:	f89a 5001 	ldrb.w	r5, [sl, #1]
 800c06c:	1c47      	adds	r7, r0, #1
 800c06e:	f10b 39ff 	add.w	r9, fp, #4294967295
 800c072:	f10a 0801 	add.w	r8, sl, #1
 800c076:	e00f      	b.n	800c098 <_DrawBitmap+0x64c>
 800c078:	46d9      	mov	r9, fp
 800c07a:	46d0      	mov	r8, sl
 800c07c:	9f04      	ldr	r7, [sp, #16]
 800c07e:	e00b      	b.n	800c098 <_DrawBitmap+0x64c>
 800c080:	f015 0ff0 	tst.w	r5, #240	; 0xf0
 800c084:	d10c      	bne.n	800c0a0 <_DrawBitmap+0x654>
 800c086:	f015 050f 	ands.w	r5, r5, #15
 800c08a:	d117      	bne.n	800c0bc <_DrawBitmap+0x670>
 800c08c:	f818 5f01 	ldrb.w	r5, [r8, #1]!
 800c090:	3404      	adds	r4, #4
 800c092:	3702      	adds	r7, #2
 800c094:	f1a9 0902 	sub.w	r9, r9, #2
 800c098:	f1b9 0f01 	cmp.w	r9, #1
 800c09c:	dcf0      	bgt.n	800c080 <_DrawBitmap+0x634>
 800c09e:	e01a      	b.n	800c0d6 <_DrawBitmap+0x68a>
 800c0a0:	092b      	lsrs	r3, r5, #4
 800c0a2:	9921      	ldr	r1, [sp, #132]	; 0x84
 800c0a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c0a8:	8023      	strh	r3, [r4, #0]
 800c0aa:	2e00      	cmp	r6, #0
 800c0ac:	d0eb      	beq.n	800c086 <_DrawBitmap+0x63a>
 800c0ae:	68b3      	ldr	r3, [r6, #8]
 800c0b0:	9a05      	ldr	r2, [sp, #20]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	4630      	mov	r0, r6
 800c0b6:	4639      	mov	r1, r7
 800c0b8:	4798      	blx	r3
 800c0ba:	e7e4      	b.n	800c086 <_DrawBitmap+0x63a>
 800c0bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c0be:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
 800c0c2:	8063      	strh	r3, [r4, #2]
 800c0c4:	2e00      	cmp	r6, #0
 800c0c6:	d0e1      	beq.n	800c08c <_DrawBitmap+0x640>
 800c0c8:	68b3      	ldr	r3, [r6, #8]
 800c0ca:	9a05      	ldr	r2, [sp, #20]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	4630      	mov	r0, r6
 800c0d0:	1c79      	adds	r1, r7, #1
 800c0d2:	4798      	blx	r3
 800c0d4:	e7da      	b.n	800c08c <_DrawBitmap+0x640>
 800c0d6:	f1b9 0f00 	cmp.w	r9, #0
 800c0da:	d034      	beq.n	800c146 <_DrawBitmap+0x6fa>
 800c0dc:	092d      	lsrs	r5, r5, #4
 800c0de:	d032      	beq.n	800c146 <_DrawBitmap+0x6fa>
 800c0e0:	9821      	ldr	r0, [sp, #132]	; 0x84
 800c0e2:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
 800c0e6:	8023      	strh	r3, [r4, #0]
 800c0e8:	b36e      	cbz	r6, 800c146 <_DrawBitmap+0x6fa>
 800c0ea:	68b3      	ldr	r3, [r6, #8]
 800c0ec:	9a05      	ldr	r2, [sp, #20]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	4630      	mov	r0, r6
 800c0f2:	4639      	mov	r1, r7
 800c0f4:	4798      	blx	r3
 800c0f6:	e026      	b.n	800c146 <_DrawBitmap+0x6fa>
 800c0f8:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800c0fa:	f1c6 0302 	rsb	r3, r6, #2
 800c0fe:	b2db      	uxtb	r3, r3
 800c100:	4650      	mov	r0, sl
 800c102:	465a      	mov	r2, fp
 800c104:	4293      	cmp	r3, r2
 800c106:	bfc8      	it	gt
 800c108:	b2d3      	uxtbgt	r3, r2
 800c10a:	1ad2      	subs	r2, r2, r3
 800c10c:	1ca1      	adds	r1, r4, #2
 800c10e:	461e      	mov	r6, r3
 800c110:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 800c114:	d005      	beq.n	800c122 <_DrawBitmap+0x6d6>
 800c116:	f831 7c02 	ldrh.w	r7, [r1, #-2]
 800c11a:	f087 07ff 	eor.w	r7, r7, #255	; 0xff
 800c11e:	f821 7c02 	strh.w	r7, [r1, #-2]
 800c122:	3e01      	subs	r6, #1
 800c124:	012d      	lsls	r5, r5, #4
 800c126:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 800c12a:	b2ed      	uxtb	r5, r5
 800c12c:	f101 0102 	add.w	r1, r1, #2
 800c130:	d1ee      	bne.n	800c110 <_DrawBitmap+0x6c4>
 800c132:	3b01      	subs	r3, #1
 800c134:	b2db      	uxtb	r3, r3
 800c136:	3301      	adds	r3, #1
 800c138:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800c13c:	b11a      	cbz	r2, 800c146 <_DrawBitmap+0x6fa>
 800c13e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c142:	2302      	movs	r3, #2
 800c144:	e7de      	b.n	800c104 <_DrawBitmap+0x6b8>
 800c146:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800c148:	9b05      	ldr	r3, [sp, #20]
 800c14a:	9e08      	ldr	r6, [sp, #32]
 800c14c:	44ba      	add	sl, r7
 800c14e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c150:	3301      	adds	r3, #1
 800c152:	4437      	add	r7, r6
 800c154:	9305      	str	r3, [sp, #20]
 800c156:	9709      	str	r7, [sp, #36]	; 0x24
 800c158:	e5a3      	b.n	800bca2 <_DrawBitmap+0x256>
 800c15a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c15c:	b113      	cbz	r3, 800c164 <_DrawBitmap+0x718>
 800c15e:	a811      	add	r0, sp, #68	; 0x44
 800c160:	f7fe faa2 	bl	800a6a8 <GUI_ALLOC_UnlockH>
 800c164:	b013      	add	sp, #76	; 0x4c
 800c166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c16a:	bf00      	nop
 800c16c:	20000018 	.word	0x20000018

0800c170 <LCD_SelectLCD>:
 800c170:	b510      	push	{r4, lr}
 800c172:	4b0d      	ldr	r3, [pc, #52]	; (800c1a8 <LCD_SelectLCD+0x38>)
 800c174:	681a      	ldr	r2, [r3, #0]
 800c176:	7c51      	ldrb	r1, [r2, #17]
 800c178:	4a0c      	ldr	r2, [pc, #48]	; (800c1ac <LCD_SelectLCD+0x3c>)
 800c17a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800c17e:	461c      	mov	r4, r3
 800c180:	b140      	cbz	r0, 800c194 <LCD_SelectLCD+0x24>
 800c182:	68c3      	ldr	r3, [r0, #12]
 800c184:	b113      	cbz	r3, 800c18c <LCD_SelectLCD+0x1c>
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	2b04      	cmp	r3, #4
 800c18a:	d001      	beq.n	800c190 <LCD_SelectLCD+0x20>
 800c18c:	6800      	ldr	r0, [r0, #0]
 800c18e:	e7f7      	b.n	800c180 <LCD_SelectLCD+0x10>
 800c190:	f7fd fae8 	bl	8009764 <GUI_DEVICE_Unlink>
 800c194:	6823      	ldr	r3, [r4, #0]
 800c196:	2200      	movs	r2, #0
 800c198:	661a      	str	r2, [r3, #96]	; 0x60
 800c19a:	f103 0208 	add.w	r2, r3, #8
 800c19e:	615a      	str	r2, [r3, #20]
 800c1a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1a4:	f7fc b9de 	b.w	8008564 <LCD_SetClipRectMax>
 800c1a8:	20000018 	.word	0x20000018
 800c1ac:	20019604 	.word	0x20019604

0800c1b0 <_OnExit>:
 800c1b0:	b510      	push	{r4, lr}
 800c1b2:	4c03      	ldr	r4, [pc, #12]	; (800c1c0 <_OnExit+0x10>)
 800c1b4:	6820      	ldr	r0, [r4, #0]
 800c1b6:	f7fe fa55 	bl	800a664 <GUI_ALLOC_FreeFixedBlock>
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	6023      	str	r3, [r4, #0]
 800c1be:	bd10      	pop	{r4, pc}
 800c1c0:	20019704 	.word	0x20019704

0800c1c4 <LCD_InitColors>:
 800c1c4:	b538      	push	{r3, r4, r5, lr}
 800c1c6:	4d09      	ldr	r5, [pc, #36]	; (800c1ec <LCD_InitColors+0x28>)
 800c1c8:	682c      	ldr	r4, [r5, #0]
 800c1ca:	b95c      	cbnz	r4, 800c1e4 <LCD_InitColors+0x20>
 800c1cc:	4b08      	ldr	r3, [pc, #32]	; (800c1f0 <LCD_InitColors+0x2c>)
 800c1ce:	6818      	ldr	r0, [r3, #0]
 800c1d0:	0080      	lsls	r0, r0, #2
 800c1d2:	f7fe fbb3 	bl	800a93c <GUI_ALLOC_GetFixedBlock>
 800c1d6:	6028      	str	r0, [r5, #0]
 800c1d8:	b130      	cbz	r0, 800c1e8 <LCD_InitColors+0x24>
 800c1da:	4806      	ldr	r0, [pc, #24]	; (800c1f4 <LCD_InitColors+0x30>)
 800c1dc:	4b06      	ldr	r3, [pc, #24]	; (800c1f8 <LCD_InitColors+0x34>)
 800c1de:	6003      	str	r3, [r0, #0]
 800c1e0:	f7fd fbc2 	bl	8009968 <GUI__RegisterExit>
 800c1e4:	2000      	movs	r0, #0
 800c1e6:	bd38      	pop	{r3, r4, r5, pc}
 800c1e8:	2001      	movs	r0, #1
 800c1ea:	bd38      	pop	{r3, r4, r5, pc}
 800c1ec:	20019704 	.word	0x20019704
 800c1f0:	20000024 	.word	0x20000024
 800c1f4:	20019208 	.word	0x20019208
 800c1f8:	0800c1b1 	.word	0x0800c1b1

0800c1fc <LCD_InitLUT>:
 800c1fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c200:	f000 fadb 	bl	800c7ba <LCD_GetNumLayers>
 800c204:	2400      	movs	r4, #0
 800c206:	4680      	mov	r8, r0
 800c208:	4544      	cmp	r4, r8
 800c20a:	da2c      	bge.n	800c266 <LCD_InitLUT+0x6a>
 800c20c:	4620      	mov	r0, r4
 800c20e:	f7fd fa71 	bl	80096f4 <GUI_DEVICE__GetpDriver>
 800c212:	b330      	cbz	r0, 800c262 <LCD_InitLUT+0x66>
 800c214:	4e15      	ldr	r6, [pc, #84]	; (800c26c <LCD_InitLUT+0x70>)
 800c216:	6833      	ldr	r3, [r6, #0]
 800c218:	4620      	mov	r0, r4
 800c21a:	f893 9011 	ldrb.w	r9, [r3, #17]
 800c21e:	745c      	strb	r4, [r3, #17]
 800c220:	f7fb fe48 	bl	8007eb4 <LCD_GetBitsPerPixelEx>
 800c224:	2808      	cmp	r0, #8
 800c226:	dd03      	ble.n	800c230 <LCD_InitLUT+0x34>
 800c228:	6833      	ldr	r3, [r6, #0]
 800c22a:	f883 9011 	strb.w	r9, [r3, #17]
 800c22e:	e018      	b.n	800c262 <LCD_InitLUT+0x66>
 800c230:	4b0f      	ldr	r3, [pc, #60]	; (800c270 <LCD_InitLUT+0x74>)
 800c232:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c236:	691a      	ldr	r2, [r3, #16]
 800c238:	4b0e      	ldr	r3, [pc, #56]	; (800c274 <LCD_InitLUT+0x78>)
 800c23a:	429a      	cmp	r2, r3
 800c23c:	d0f4      	beq.n	800c228 <LCD_InitLUT+0x2c>
 800c23e:	4620      	mov	r0, r4
 800c240:	f7fb fe3b 	bl	8007eba <LCD_GetNumColorsEx>
 800c244:	2500      	movs	r5, #0
 800c246:	4682      	mov	sl, r0
 800c248:	4555      	cmp	r5, sl
 800c24a:	daed      	bge.n	800c228 <LCD_InitLUT+0x2c>
 800c24c:	b2ef      	uxtb	r7, r5
 800c24e:	4638      	mov	r0, r7
 800c250:	f7fc f9f2 	bl	8008638 <LCD_Index2Color>
 800c254:	4639      	mov	r1, r7
 800c256:	4602      	mov	r2, r0
 800c258:	4620      	mov	r0, r4
 800c25a:	f7fb fded 	bl	8007e38 <LCD_SetLUTEntryEx>
 800c25e:	3501      	adds	r5, #1
 800c260:	e7f2      	b.n	800c248 <LCD_InitLUT+0x4c>
 800c262:	3401      	adds	r4, #1
 800c264:	e7d0      	b.n	800c208 <LCD_InitLUT+0xc>
 800c266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c26a:	bf00      	nop
 800c26c:	20000018 	.word	0x20000018
 800c270:	20019604 	.word	0x20019604
 800c274:	08010350 	.word	0x08010350

0800c278 <GUI__SinHQ>:
 800c278:	2800      	cmp	r0, #0
 800c27a:	4b1b      	ldr	r3, [pc, #108]	; (800c2e8 <GUI__SinHQ+0x70>)
 800c27c:	bfb8      	it	lt
 800c27e:	4240      	neglt	r0, r0
 800c280:	fb90 f1f3 	sdiv	r1, r0, r3
 800c284:	fb03 0311 	mls	r3, r3, r1, r0
 800c288:	4918      	ldr	r1, [pc, #96]	; (800c2ec <GUI__SinHQ+0x74>)
 800c28a:	bfb4      	ite	lt
 800c28c:	f04f 32ff 	movlt.w	r2, #4294967295
 800c290:	2201      	movge	r2, #1
 800c292:	428b      	cmp	r3, r1
 800c294:	b570      	push	{r4, r5, r6, lr}
 800c296:	dd04      	ble.n	800c2a2 <GUI__SinHQ+0x2a>
 800c298:	f5a3 332f 	sub.w	r3, r3, #179200	; 0x2bc00
 800c29c:	4252      	negs	r2, r2
 800c29e:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 800c2a2:	4913      	ldr	r1, [pc, #76]	; (800c2f0 <GUI__SinHQ+0x78>)
 800c2a4:	428b      	cmp	r3, r1
 800c2a6:	bfc4      	itt	gt
 800c2a8:	f5c3 332f 	rsbgt	r3, r3, #179200	; 0x2bc00
 800c2ac:	f503 7348 	addgt.w	r3, r3, #800	; 0x320
 800c2b0:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800c2b4:	fb93 f1f5 	sdiv	r1, r3, r5
 800c2b8:	295a      	cmp	r1, #90	; 0x5a
 800c2ba:	d00e      	beq.n	800c2da <GUI__SinHQ+0x62>
 800c2bc:	4e0d      	ldr	r6, [pc, #52]	; (800c2f4 <GUI__SinHQ+0x7c>)
 800c2be:	480e      	ldr	r0, [pc, #56]	; (800c2f8 <GUI__SinHQ+0x80>)
 800c2c0:	f856 4021 	ldr.w	r4, [r6, r1, lsl #2]
 800c2c4:	fb00 3301 	mla	r3, r0, r1, r3
 800c2c8:	3101      	adds	r1, #1
 800c2ca:	f856 0021 	ldr.w	r0, [r6, r1, lsl #2]
 800c2ce:	1b00      	subs	r0, r0, r4
 800c2d0:	4358      	muls	r0, r3
 800c2d2:	fbb0 f0f5 	udiv	r0, r0, r5
 800c2d6:	4420      	add	r0, r4
 800c2d8:	e001      	b.n	800c2de <GUI__SinHQ+0x66>
 800c2da:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800c2de:	2a01      	cmp	r2, #1
 800c2e0:	bf18      	it	ne
 800c2e2:	4240      	negne	r0, r0
 800c2e4:	bd70      	pop	{r4, r5, r6, pc}
 800c2e6:	bf00      	nop
 800c2e8:	00057e40 	.word	0x00057e40
 800c2ec:	0002bf20 	.word	0x0002bf20
 800c2f0:	00015f90 	.word	0x00015f90
 800c2f4:	0800ff74 	.word	0x0800ff74
 800c2f8:	fffffc18 	.word	0xfffffc18

0800c2fc <GUI__CosHQ>:
 800c2fc:	f500 30af 	add.w	r0, r0, #89600	; 0x15e00
 800c300:	f500 70c8 	add.w	r0, r0, #400	; 0x190
 800c304:	f7ff bfb8 	b.w	800c278 <GUI__SinHQ>

0800c308 <GUI__CompactPixelIndices>:
 800c308:	2a08      	cmp	r2, #8
 800c30a:	b510      	push	{r4, lr}
 800c30c:	dd0e      	ble.n	800c32c <GUI__CompactPixelIndices+0x24>
 800c30e:	2a10      	cmp	r2, #16
 800c310:	dc0a      	bgt.n	800c328 <GUI__CompactPixelIndices+0x20>
 800c312:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800c316:	4603      	mov	r3, r0
 800c318:	f850 2b04 	ldr.w	r2, [r0], #4
 800c31c:	f823 2b02 	strh.w	r2, [r3], #2
 800c320:	428b      	cmp	r3, r1
 800c322:	d1f9      	bne.n	800c318 <GUI__CompactPixelIndices+0x10>
 800c324:	2001      	movs	r0, #1
 800c326:	bd10      	pop	{r4, pc}
 800c328:	2000      	movs	r0, #0
 800c32a:	bd10      	pop	{r4, pc}
 800c32c:	2a02      	cmp	r2, #2
 800c32e:	d06d      	beq.n	800c40c <GUI__CompactPixelIndices+0x104>
 800c330:	2a04      	cmp	r2, #4
 800c332:	d054      	beq.n	800c3de <GUI__CompactPixelIndices+0xd6>
 800c334:	2a01      	cmp	r2, #1
 800c336:	f040 8095 	bne.w	800c464 <GUI__CompactPixelIndices+0x15c>
 800c33a:	4604      	mov	r4, r0
 800c33c:	6803      	ldr	r3, [r0, #0]
 800c33e:	2901      	cmp	r1, #1
 800c340:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 800c344:	b2db      	uxtb	r3, r3
 800c346:	d047      	beq.n	800c3d8 <GUI__CompactPixelIndices+0xd0>
 800c348:	6842      	ldr	r2, [r0, #4]
 800c34a:	2902      	cmp	r1, #2
 800c34c:	f002 0201 	and.w	r2, r2, #1
 800c350:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800c354:	d102      	bne.n	800c35c <GUI__CompactPixelIndices+0x54>
 800c356:	f100 0208 	add.w	r2, r0, #8
 800c35a:	e03e      	b.n	800c3da <GUI__CompactPixelIndices+0xd2>
 800c35c:	6882      	ldr	r2, [r0, #8]
 800c35e:	2903      	cmp	r1, #3
 800c360:	f002 0201 	and.w	r2, r2, #1
 800c364:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800c368:	d102      	bne.n	800c370 <GUI__CompactPixelIndices+0x68>
 800c36a:	f100 020c 	add.w	r2, r0, #12
 800c36e:	e034      	b.n	800c3da <GUI__CompactPixelIndices+0xd2>
 800c370:	68c2      	ldr	r2, [r0, #12]
 800c372:	2904      	cmp	r1, #4
 800c374:	f002 0201 	and.w	r2, r2, #1
 800c378:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800c37c:	d102      	bne.n	800c384 <GUI__CompactPixelIndices+0x7c>
 800c37e:	f100 0210 	add.w	r2, r0, #16
 800c382:	e02a      	b.n	800c3da <GUI__CompactPixelIndices+0xd2>
 800c384:	6902      	ldr	r2, [r0, #16]
 800c386:	2905      	cmp	r1, #5
 800c388:	f002 0201 	and.w	r2, r2, #1
 800c38c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800c390:	d102      	bne.n	800c398 <GUI__CompactPixelIndices+0x90>
 800c392:	f100 0214 	add.w	r2, r0, #20
 800c396:	e020      	b.n	800c3da <GUI__CompactPixelIndices+0xd2>
 800c398:	6942      	ldr	r2, [r0, #20]
 800c39a:	2906      	cmp	r1, #6
 800c39c:	f002 0201 	and.w	r2, r2, #1
 800c3a0:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 800c3a4:	d102      	bne.n	800c3ac <GUI__CompactPixelIndices+0xa4>
 800c3a6:	f100 0218 	add.w	r2, r0, #24
 800c3aa:	e016      	b.n	800c3da <GUI__CompactPixelIndices+0xd2>
 800c3ac:	6982      	ldr	r2, [r0, #24]
 800c3ae:	3907      	subs	r1, #7
 800c3b0:	f002 0201 	and.w	r2, r2, #1
 800c3b4:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 800c3b8:	d102      	bne.n	800c3c0 <GUI__CompactPixelIndices+0xb8>
 800c3ba:	f100 021c 	add.w	r2, r0, #28
 800c3be:	e005      	b.n	800c3cc <GUI__CompactPixelIndices+0xc4>
 800c3c0:	f100 0220 	add.w	r2, r0, #32
 800c3c4:	69c0      	ldr	r0, [r0, #28]
 800c3c6:	f000 0001 	and.w	r0, r0, #1
 800c3ca:	4303      	orrs	r3, r0
 800c3cc:	f804 3b01 	strb.w	r3, [r4], #1
 800c3d0:	2900      	cmp	r1, #0
 800c3d2:	d0a7      	beq.n	800c324 <GUI__CompactPixelIndices+0x1c>
 800c3d4:	4610      	mov	r0, r2
 800c3d6:	e7b1      	b.n	800c33c <GUI__CompactPixelIndices+0x34>
 800c3d8:	1d02      	adds	r2, r0, #4
 800c3da:	2100      	movs	r1, #0
 800c3dc:	e7f6      	b.n	800c3cc <GUI__CompactPixelIndices+0xc4>
 800c3de:	4602      	mov	r2, r0
 800c3e0:	6803      	ldr	r3, [r0, #0]
 800c3e2:	2901      	cmp	r1, #1
 800c3e4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800c3e8:	b2db      	uxtb	r3, r3
 800c3ea:	d102      	bne.n	800c3f2 <GUI__CompactPixelIndices+0xea>
 800c3ec:	1d04      	adds	r4, r0, #4
 800c3ee:	2100      	movs	r1, #0
 800c3f0:	e006      	b.n	800c400 <GUI__CompactPixelIndices+0xf8>
 800c3f2:	f100 0408 	add.w	r4, r0, #8
 800c3f6:	6840      	ldr	r0, [r0, #4]
 800c3f8:	f000 000f 	and.w	r0, r0, #15
 800c3fc:	4303      	orrs	r3, r0
 800c3fe:	3902      	subs	r1, #2
 800c400:	f802 3b01 	strb.w	r3, [r2], #1
 800c404:	2900      	cmp	r1, #0
 800c406:	d08d      	beq.n	800c324 <GUI__CompactPixelIndices+0x1c>
 800c408:	4620      	mov	r0, r4
 800c40a:	e7e9      	b.n	800c3e0 <GUI__CompactPixelIndices+0xd8>
 800c40c:	4604      	mov	r4, r0
 800c40e:	6803      	ldr	r3, [r0, #0]
 800c410:	2901      	cmp	r1, #1
 800c412:	ea4f 1383 	mov.w	r3, r3, lsl #6
 800c416:	b2db      	uxtb	r3, r3
 800c418:	d021      	beq.n	800c45e <GUI__CompactPixelIndices+0x156>
 800c41a:	6842      	ldr	r2, [r0, #4]
 800c41c:	2902      	cmp	r1, #2
 800c41e:	f002 0203 	and.w	r2, r2, #3
 800c422:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800c426:	d102      	bne.n	800c42e <GUI__CompactPixelIndices+0x126>
 800c428:	f100 0208 	add.w	r2, r0, #8
 800c42c:	e018      	b.n	800c460 <GUI__CompactPixelIndices+0x158>
 800c42e:	6882      	ldr	r2, [r0, #8]
 800c430:	2903      	cmp	r1, #3
 800c432:	f002 0203 	and.w	r2, r2, #3
 800c436:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 800c43a:	d102      	bne.n	800c442 <GUI__CompactPixelIndices+0x13a>
 800c43c:	f100 020c 	add.w	r2, r0, #12
 800c440:	e00e      	b.n	800c460 <GUI__CompactPixelIndices+0x158>
 800c442:	f100 0210 	add.w	r2, r0, #16
 800c446:	68c0      	ldr	r0, [r0, #12]
 800c448:	f000 0003 	and.w	r0, r0, #3
 800c44c:	4303      	orrs	r3, r0
 800c44e:	3904      	subs	r1, #4
 800c450:	f804 3b01 	strb.w	r3, [r4], #1
 800c454:	2900      	cmp	r1, #0
 800c456:	f43f af65 	beq.w	800c324 <GUI__CompactPixelIndices+0x1c>
 800c45a:	4610      	mov	r0, r2
 800c45c:	e7d7      	b.n	800c40e <GUI__CompactPixelIndices+0x106>
 800c45e:	1d02      	adds	r2, r0, #4
 800c460:	2100      	movs	r1, #0
 800c462:	e7f5      	b.n	800c450 <GUI__CompactPixelIndices+0x148>
 800c464:	2300      	movs	r3, #0
 800c466:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800c46a:	54c2      	strb	r2, [r0, r3]
 800c46c:	3301      	adds	r3, #1
 800c46e:	428b      	cmp	r3, r1
 800c470:	d1f9      	bne.n	800c466 <GUI__CompactPixelIndices+0x15e>
 800c472:	e757      	b.n	800c324 <GUI__CompactPixelIndices+0x1c>

0800c474 <_GetCharCode>:
 800c474:	7800      	ldrb	r0, [r0, #0]
 800c476:	4770      	bx	lr

0800c478 <_GetCharSize>:
 800c478:	2001      	movs	r0, #1
 800c47a:	4770      	bx	lr

0800c47c <_CalcSizeOfChar>:
 800c47c:	2001      	movs	r0, #1
 800c47e:	4770      	bx	lr

0800c480 <_Encode>:
 800c480:	7001      	strb	r1, [r0, #0]
 800c482:	2001      	movs	r0, #1
 800c484:	4770      	bx	lr
	...

0800c488 <GUI_SetTextAlign>:
 800c488:	4b03      	ldr	r3, [pc, #12]	; (800c498 <GUI_SetTextAlign+0x10>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 800c490:	8598      	strh	r0, [r3, #44]	; 0x2c
 800c492:	4610      	mov	r0, r2
 800c494:	4770      	bx	lr
 800c496:	bf00      	nop
 800c498:	20000018 	.word	0x20000018

0800c49c <GUI_SetOrg>:
 800c49c:	460a      	mov	r2, r1
 800c49e:	4908      	ldr	r1, [pc, #32]	; (800c4c0 <GUI_SetOrg+0x24>)
 800c4a0:	b510      	push	{r4, lr}
 800c4a2:	8008      	strh	r0, [r1, #0]
 800c4a4:	4907      	ldr	r1, [pc, #28]	; (800c4c4 <GUI_SetOrg+0x28>)
 800c4a6:	800a      	strh	r2, [r1, #0]
 800c4a8:	4907      	ldr	r1, [pc, #28]	; (800c4c8 <GUI_SetOrg+0x2c>)
 800c4aa:	6809      	ldr	r1, [r1, #0]
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	7c48      	ldrb	r0, [r1, #17]
 800c4b0:	4906      	ldr	r1, [pc, #24]	; (800c4cc <GUI_SetOrg+0x30>)
 800c4b2:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800c4b6:	68c1      	ldr	r1, [r0, #12]
 800c4b8:	6a0c      	ldr	r4, [r1, #32]
 800c4ba:	4619      	mov	r1, r3
 800c4bc:	47a0      	blx	r4
 800c4be:	bd10      	pop	{r4, pc}
 800c4c0:	200195ec 	.word	0x200195ec
 800c4c4:	200195e0 	.word	0x200195e0
 800c4c8:	20000018 	.word	0x20000018
 800c4cc:	20019604 	.word	0x20019604

0800c4d0 <GUI_GetBkColor>:
 800c4d0:	b508      	push	{r3, lr}
 800c4d2:	f000 f981 	bl	800c7d8 <LCD_GetBkColorIndex>
 800c4d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c4da:	f7fc b8ad 	b.w	8008638 <LCD_Index2Color>

0800c4de <GUI_GetColor>:
 800c4de:	b508      	push	{r3, lr}
 800c4e0:	f000 f982 	bl	800c7e8 <LCD_GetColorIndex>
 800c4e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c4e8:	f7fc b8a6 	b.w	8008638 <LCD_Index2Color>

0800c4ec <_Add>:
 800c4ec:	4a0d      	ldr	r2, [pc, #52]	; (800c524 <_Add+0x38>)
 800c4ee:	6813      	ldr	r3, [r2, #0]
 800c4f0:	2b0b      	cmp	r3, #11
 800c4f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4f4:	4615      	mov	r5, r2
 800c4f6:	dc14      	bgt.n	800c522 <_Add+0x36>
 800c4f8:	4c0b      	ldr	r4, [pc, #44]	; (800c528 <_Add+0x3c>)
 800c4fa:	461a      	mov	r2, r3
 800c4fc:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 800c500:	4626      	mov	r6, r4
 800c502:	b152      	cbz	r2, 800c51a <_Add+0x2e>
 800c504:	f831 4d02 	ldrh.w	r4, [r1, #-2]!
 800c508:	fa0f fc84 	sxth.w	ip, r4
 800c50c:	4584      	cmp	ip, r0
 800c50e:	f102 37ff 	add.w	r7, r2, #4294967295
 800c512:	db02      	blt.n	800c51a <_Add+0x2e>
 800c514:	804c      	strh	r4, [r1, #2]
 800c516:	463a      	mov	r2, r7
 800c518:	e7f3      	b.n	800c502 <_Add+0x16>
 800c51a:	3301      	adds	r3, #1
 800c51c:	f826 0012 	strh.w	r0, [r6, r2, lsl #1]
 800c520:	602b      	str	r3, [r5, #0]
 800c522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c524:	20019210 	.word	0x20019210
 800c528:	20019214 	.word	0x20019214

0800c52c <GL_FillPolygon>:
 800c52c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c530:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 800c6ec <GL_FillPolygon+0x1c0>
 800c534:	9101      	str	r1, [sp, #4]
 800c536:	4692      	mov	sl, r2
 800c538:	4606      	mov	r6, r0
 800c53a:	f643 74ff 	movw	r4, #16383	; 0x3fff
 800c53e:	2200      	movs	r2, #0
 800c540:	9901      	ldr	r1, [sp, #4]
 800c542:	428a      	cmp	r2, r1
 800c544:	da0b      	bge.n	800c55e <GL_FillPolygon+0x32>
 800c546:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800c54a:	3201      	adds	r2, #1
 800c54c:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800c550:	428c      	cmp	r4, r1
 800c552:	bfa8      	it	ge
 800c554:	460c      	movge	r4, r1
 800c556:	4589      	cmp	r9, r1
 800c558:	bfb8      	it	lt
 800c55a:	4689      	movlt	r9, r1
 800c55c:	e7f0      	b.n	800c540 <GL_FillPolygon+0x14>
 800c55e:	4960      	ldr	r1, [pc, #384]	; (800c6e0 <GL_FillPolygon+0x1b4>)
 800c560:	680a      	ldr	r2, [r1, #0]
 800c562:	6952      	ldr	r2, [r2, #20]
 800c564:	468b      	mov	fp, r1
 800c566:	b15a      	cbz	r2, 800c580 <GL_FillPolygon+0x54>
 800c568:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 800c56c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800c570:	1ac9      	subs	r1, r1, r3
 800c572:	1ad2      	subs	r2, r2, r3
 800c574:	4589      	cmp	r9, r1
 800c576:	bfa8      	it	ge
 800c578:	4689      	movge	r9, r1
 800c57a:	4294      	cmp	r4, r2
 800c57c:	bfb8      	it	lt
 800c57e:	4614      	movlt	r4, r2
 800c580:	eb04 0803 	add.w	r8, r4, r3
 800c584:	454c      	cmp	r4, r9
 800c586:	f300 80a7 	bgt.w	800c6d8 <GL_FillPolygon+0x1ac>
 800c58a:	4b56      	ldr	r3, [pc, #344]	; (800c6e4 <GL_FillPolygon+0x1b8>)
 800c58c:	2700      	movs	r7, #0
 800c58e:	601f      	str	r7, [r3, #0]
 800c590:	4635      	mov	r5, r6
 800c592:	9901      	ldr	r1, [sp, #4]
 800c594:	428f      	cmp	r7, r1
 800c596:	da55      	bge.n	800c644 <GL_FillPolygon+0x118>
 800c598:	9b01      	ldr	r3, [sp, #4]
 800c59a:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800c59e:	1e59      	subs	r1, r3, #1
 800c5a0:	428f      	cmp	r7, r1
 800c5a2:	bfb4      	ite	lt
 800c5a4:	f107 0c01 	addlt.w	ip, r7, #1
 800c5a8:	f04f 0c00 	movge.w	ip, #0
 800c5ac:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800c5b0:	eb06 030c 	add.w	r3, r6, ip
 800c5b4:	42a2      	cmp	r2, r4
 800c5b6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c5ba:	d136      	bne.n	800c62a <GL_FillPolygon+0xfe>
 800c5bc:	42a3      	cmp	r3, r4
 800c5be:	d002      	beq.n	800c5c6 <GL_FillPolygon+0x9a>
 800c5c0:	463a      	mov	r2, r7
 800c5c2:	2000      	movs	r0, #0
 800c5c4:	e01b      	b.n	800c5fe <GL_FillPolygon+0xd2>
 800c5c6:	f9b5 e000 	ldrsh.w	lr, [r5]
 800c5ca:	f936 200c 	ldrsh.w	r2, [r6, ip]
 800c5ce:	f8db 3000 	ldr.w	r3, [fp]
 800c5d2:	44d6      	add	lr, sl
 800c5d4:	4452      	add	r2, sl
 800c5d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c5d8:	4596      	cmp	lr, r2
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	da02      	bge.n	800c5e4 <GL_FillPolygon+0xb8>
 800c5de:	4670      	mov	r0, lr
 800c5e0:	4641      	mov	r1, r8
 800c5e2:	e020      	b.n	800c626 <GL_FillPolygon+0xfa>
 800c5e4:	4610      	mov	r0, r2
 800c5e6:	4641      	mov	r1, r8
 800c5e8:	4672      	mov	r2, lr
 800c5ea:	e01c      	b.n	800c626 <GL_FillPolygon+0xfa>
 800c5ec:	b152      	cbz	r2, 800c604 <GL_FillPolygon+0xd8>
 800c5ee:	3a01      	subs	r2, #1
 800c5f0:	eb06 0c82 	add.w	ip, r6, r2, lsl #2
 800c5f4:	f9bc c002 	ldrsh.w	ip, [ip, #2]
 800c5f8:	45a4      	cmp	ip, r4
 800c5fa:	d105      	bne.n	800c608 <GL_FillPolygon+0xdc>
 800c5fc:	3001      	adds	r0, #1
 800c5fe:	4288      	cmp	r0, r1
 800c600:	dbf4      	blt.n	800c5ec <GL_FillPolygon+0xc0>
 800c602:	e01c      	b.n	800c63e <GL_FillPolygon+0x112>
 800c604:	460a      	mov	r2, r1
 800c606:	e7f3      	b.n	800c5f0 <GL_FillPolygon+0xc4>
 800c608:	ebc4 0c0c 	rsb	ip, r4, ip
 800c60c:	1b1b      	subs	r3, r3, r4
 800c60e:	ea9c 0f03 	teq	ip, r3
 800c612:	f9b5 0000 	ldrsh.w	r0, [r5]
 800c616:	d44d      	bmi.n	800c6b4 <GL_FillPolygon+0x188>
 800c618:	f8db 3000 	ldr.w	r3, [fp]
 800c61c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c61e:	4450      	add	r0, sl
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	4641      	mov	r1, r8
 800c624:	4602      	mov	r2, r0
 800c626:	4798      	blx	r3
 800c628:	e009      	b.n	800c63e <GL_FillPolygon+0x112>
 800c62a:	42a3      	cmp	r3, r4
 800c62c:	d007      	beq.n	800c63e <GL_FillPolygon+0x112>
 800c62e:	db44      	blt.n	800c6ba <GL_FillPolygon+0x18e>
 800c630:	42a2      	cmp	r2, r4
 800c632:	dd27      	ble.n	800c684 <GL_FillPolygon+0x158>
 800c634:	42a3      	cmp	r3, r4
 800c636:	dd42      	ble.n	800c6be <GL_FillPolygon+0x192>
 800c638:	e001      	b.n	800c63e <GL_FillPolygon+0x112>
 800c63a:	42a3      	cmp	r3, r4
 800c63c:	dd49      	ble.n	800c6d2 <GL_FillPolygon+0x1a6>
 800c63e:	3701      	adds	r7, #1
 800c640:	3504      	adds	r5, #4
 800c642:	e7a6      	b.n	800c592 <GL_FillPolygon+0x66>
 800c644:	2500      	movs	r5, #0
 800c646:	4628      	mov	r0, r5
 800c648:	462f      	mov	r7, r5
 800c64a:	4b26      	ldr	r3, [pc, #152]	; (800c6e4 <GL_FillPolygon+0x1b8>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	429f      	cmp	r7, r3
 800c650:	da14      	bge.n	800c67c <GL_FillPolygon+0x150>
 800c652:	4b25      	ldr	r3, [pc, #148]	; (800c6e8 <GL_FillPolygon+0x1bc>)
 800c654:	f933 3017 	ldrsh.w	r3, [r3, r7, lsl #1]
 800c658:	b15d      	cbz	r5, 800c672 <GL_FillPolygon+0x146>
 800c65a:	f8db 2000 	ldr.w	r2, [fp]
 800c65e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800c660:	4450      	add	r0, sl
 800c662:	f8d2 c000 	ldr.w	ip, [r2]
 800c666:	9300      	str	r3, [sp, #0]
 800c668:	eb0a 0203 	add.w	r2, sl, r3
 800c66c:	4641      	mov	r1, r8
 800c66e:	47e0      	blx	ip
 800c670:	9b00      	ldr	r3, [sp, #0]
 800c672:	f085 0501 	eor.w	r5, r5, #1
 800c676:	3701      	adds	r7, #1
 800c678:	4618      	mov	r0, r3
 800c67a:	e7e6      	b.n	800c64a <GL_FillPolygon+0x11e>
 800c67c:	3401      	adds	r4, #1
 800c67e:	f108 0801 	add.w	r8, r8, #1
 800c682:	e77f      	b.n	800c584 <GL_FillPolygon+0x58>
 800c684:	429a      	cmp	r2, r3
 800c686:	dcd8      	bgt.n	800c63a <GL_FillPolygon+0x10e>
 800c688:	f9b5 1000 	ldrsh.w	r1, [r5]
 800c68c:	f936 000c 	ldrsh.w	r0, [r6, ip]
 800c690:	ebc2 0e04 	rsb	lr, r2, r4
 800c694:	1a40      	subs	r0, r0, r1
 800c696:	fb0e f000 	mul.w	r0, lr, r0
 800c69a:	2800      	cmp	r0, #0
 800c69c:	ebc2 0303 	rsb	r3, r2, r3
 800c6a0:	bfdb      	ittet	le
 800c6a2:	105a      	asrle	r2, r3, #1
 800c6a4:	f1c2 0201 	rsble	r2, r2, #1
 800c6a8:	eb00 0063 	addgt.w	r0, r0, r3, asr #1
 800c6ac:	1880      	addle	r0, r0, r2
 800c6ae:	fb90 f0f3 	sdiv	r0, r0, r3
 800c6b2:	4408      	add	r0, r1
 800c6b4:	f7ff ff1a 	bl	800c4ec <_Add>
 800c6b8:	e7c1      	b.n	800c63e <GL_FillPolygon+0x112>
 800c6ba:	42a2      	cmp	r2, r4
 800c6bc:	dbbf      	blt.n	800c63e <GL_FillPolygon+0x112>
 800c6be:	429a      	cmp	r2, r3
 800c6c0:	ddbd      	ble.n	800c63e <GL_FillPolygon+0x112>
 800c6c2:	4696      	mov	lr, r2
 800c6c4:	f936 100c 	ldrsh.w	r1, [r6, ip]
 800c6c8:	f9b5 0000 	ldrsh.w	r0, [r5]
 800c6cc:	461a      	mov	r2, r3
 800c6ce:	4673      	mov	r3, lr
 800c6d0:	e7de      	b.n	800c690 <GL_FillPolygon+0x164>
 800c6d2:	42a2      	cmp	r2, r4
 800c6d4:	daf5      	bge.n	800c6c2 <GL_FillPolygon+0x196>
 800c6d6:	e7b2      	b.n	800c63e <GL_FillPolygon+0x112>
 800c6d8:	b003      	add	sp, #12
 800c6da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6de:	bf00      	nop
 800c6e0:	20000018 	.word	0x20000018
 800c6e4:	20019210 	.word	0x20019210
 800c6e8:	20019214 	.word	0x20019214
 800c6ec:	ffffc001 	.word	0xffffc001

0800c6f0 <_GetIndexMask_0>:
 800c6f0:	b508      	push	{r3, lr}
 800c6f2:	f7fb fbe5 	bl	8007ec0 <LCD_GetNumColors>
 800c6f6:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800c6fa:	d010      	beq.n	800c71e <_GetIndexMask_0+0x2e>
 800c6fc:	287f      	cmp	r0, #127	; 0x7f
 800c6fe:	d810      	bhi.n	800c722 <_GetIndexMask_0+0x32>
 800c700:	283f      	cmp	r0, #63	; 0x3f
 800c702:	d810      	bhi.n	800c726 <_GetIndexMask_0+0x36>
 800c704:	281f      	cmp	r0, #31
 800c706:	d810      	bhi.n	800c72a <_GetIndexMask_0+0x3a>
 800c708:	280f      	cmp	r0, #15
 800c70a:	d810      	bhi.n	800c72e <_GetIndexMask_0+0x3e>
 800c70c:	2807      	cmp	r0, #7
 800c70e:	d810      	bhi.n	800c732 <_GetIndexMask_0+0x42>
 800c710:	2803      	cmp	r0, #3
 800c712:	d810      	bhi.n	800c736 <_GetIndexMask_0+0x46>
 800c714:	2801      	cmp	r0, #1
 800c716:	bf94      	ite	ls
 800c718:	2000      	movls	r0, #0
 800c71a:	2001      	movhi	r0, #1
 800c71c:	e00c      	b.n	800c738 <_GetIndexMask_0+0x48>
 800c71e:	2008      	movs	r0, #8
 800c720:	e00a      	b.n	800c738 <_GetIndexMask_0+0x48>
 800c722:	2007      	movs	r0, #7
 800c724:	e008      	b.n	800c738 <_GetIndexMask_0+0x48>
 800c726:	2006      	movs	r0, #6
 800c728:	e006      	b.n	800c738 <_GetIndexMask_0+0x48>
 800c72a:	2005      	movs	r0, #5
 800c72c:	e004      	b.n	800c738 <_GetIndexMask_0+0x48>
 800c72e:	2004      	movs	r0, #4
 800c730:	e002      	b.n	800c738 <_GetIndexMask_0+0x48>
 800c732:	2003      	movs	r0, #3
 800c734:	e000      	b.n	800c738 <_GetIndexMask_0+0x48>
 800c736:	2002      	movs	r0, #2
 800c738:	2301      	movs	r3, #1
 800c73a:	fa03 f000 	lsl.w	r0, r3, r0
 800c73e:	3801      	subs	r0, #1
 800c740:	bd08      	pop	{r3, pc}

0800c742 <_Index2Color_0>:
 800c742:	b538      	push	{r3, r4, r5, lr}
 800c744:	4604      	mov	r4, r0
 800c746:	f7fb fbbb 	bl	8007ec0 <LCD_GetNumColors>
 800c74a:	4605      	mov	r5, r0
 800c74c:	f7fb fbd6 	bl	8007efc <LCD_GetPalette>
 800c750:	42ac      	cmp	r4, r5
 800c752:	d203      	bcs.n	800c75c <_Index2Color_0+0x1a>
 800c754:	b118      	cbz	r0, 800c75e <_Index2Color_0+0x1c>
 800c756:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800c75a:	bd38      	pop	{r3, r4, r5, pc}
 800c75c:	2000      	movs	r0, #0
 800c75e:	bd38      	pop	{r3, r4, r5, pc}

0800c760 <_Color2Index_0>:
 800c760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c764:	4681      	mov	r9, r0
 800c766:	f7fb fbab 	bl	8007ec0 <LCD_GetNumColors>
 800c76a:	4680      	mov	r8, r0
 800c76c:	f7fb fbc6 	bl	8007efc <LCD_GetPalette>
 800c770:	4606      	mov	r6, r0
 800c772:	b1d8      	cbz	r0, 800c7ac <_Color2Index_0+0x4c>
 800c774:	2300      	movs	r3, #0
 800c776:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 800c77a:	4591      	cmp	r9, r2
 800c77c:	d01a      	beq.n	800c7b4 <_Color2Index_0+0x54>
 800c77e:	3301      	adds	r3, #1
 800c780:	4543      	cmp	r3, r8
 800c782:	dbf8      	blt.n	800c776 <_Color2Index_0+0x16>
 800c784:	2500      	movs	r5, #0
 800c786:	f06f 477f 	mvn.w	r7, #4278190080	; 0xff000000
 800c78a:	462c      	mov	r4, r5
 800c78c:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 800c790:	4648      	mov	r0, r9
 800c792:	f000 f831 	bl	800c7f8 <GUI_CalcColorDist>
 800c796:	42b8      	cmp	r0, r7
 800c798:	bf38      	it	cc
 800c79a:	4625      	movcc	r5, r4
 800c79c:	f104 0401 	add.w	r4, r4, #1
 800c7a0:	bf28      	it	cs
 800c7a2:	4638      	movcs	r0, r7
 800c7a4:	4544      	cmp	r4, r8
 800c7a6:	da02      	bge.n	800c7ae <_Color2Index_0+0x4e>
 800c7a8:	4607      	mov	r7, r0
 800c7aa:	e7ef      	b.n	800c78c <_Color2Index_0+0x2c>
 800c7ac:	4605      	mov	r5, r0
 800c7ae:	4628      	mov	r0, r5
 800c7b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800c7ba <LCD_GetNumLayers>:
 800c7ba:	b510      	push	{r4, lr}
 800c7bc:	2000      	movs	r0, #0
 800c7be:	f7fc ff99 	bl	80096f4 <GUI_DEVICE__GetpDriver>
 800c7c2:	1c04      	adds	r4, r0, #0
 800c7c4:	f04f 0001 	mov.w	r0, #1
 800c7c8:	bf18      	it	ne
 800c7ca:	2401      	movne	r4, #1
 800c7cc:	f7fc ff92 	bl	80096f4 <GUI_DEVICE__GetpDriver>
 800c7d0:	b100      	cbz	r0, 800c7d4 <LCD_GetNumLayers+0x1a>
 800c7d2:	3401      	adds	r4, #1
 800c7d4:	4620      	mov	r0, r4
 800c7d6:	bd10      	pop	{r4, pc}

0800c7d8 <LCD_GetBkColorIndex>:
 800c7d8:	4b02      	ldr	r3, [pc, #8]	; (800c7e4 <LCD_GetBkColorIndex+0xc>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7de:	6818      	ldr	r0, [r3, #0]
 800c7e0:	4770      	bx	lr
 800c7e2:	bf00      	nop
 800c7e4:	20000018 	.word	0x20000018

0800c7e8 <LCD_GetColorIndex>:
 800c7e8:	4b02      	ldr	r3, [pc, #8]	; (800c7f4 <LCD_GetColorIndex+0xc>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7ee:	6818      	ldr	r0, [r3, #0]
 800c7f0:	4770      	bx	lr
 800c7f2:	bf00      	nop
 800c7f4:	20000018 	.word	0x20000018

0800c7f8 <GUI_CalcColorDist>:
 800c7f8:	b2cb      	uxtb	r3, r1
 800c7fa:	b2c2      	uxtb	r2, r0
 800c7fc:	1ad2      	subs	r2, r2, r3
 800c7fe:	b292      	uxth	r2, r2
 800c800:	b293      	uxth	r3, r2
 800c802:	b530      	push	{r4, r5, lr}
 800c804:	041c      	lsls	r4, r3, #16
 800c806:	bf48      	it	mi
 800c808:	4253      	negmi	r3, r2
 800c80a:	f3c1 2507 	ubfx	r5, r1, #8, #8
 800c80e:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800c812:	ebc5 0202 	rsb	r2, r5, r2
 800c816:	bf48      	it	mi
 800c818:	b29b      	uxthmi	r3, r3
 800c81a:	b292      	uxth	r2, r2
 800c81c:	0c09      	lsrs	r1, r1, #16
 800c81e:	fb13 f403 	smulbb	r4, r3, r3
 800c822:	ebc1 4110 	rsb	r1, r1, r0, lsr #16
 800c826:	b293      	uxth	r3, r2
 800c828:	041d      	lsls	r5, r3, #16
 800c82a:	b289      	uxth	r1, r1
 800c82c:	b288      	uxth	r0, r1
 800c82e:	bf44      	itt	mi
 800c830:	4253      	negmi	r3, r2
 800c832:	b29b      	uxthmi	r3, r3
 800c834:	0402      	lsls	r2, r0, #16
 800c836:	bf48      	it	mi
 800c838:	4248      	negmi	r0, r1
 800c83a:	fb13 4303 	smlabb	r3, r3, r3, r4
 800c83e:	bf48      	it	mi
 800c840:	b280      	uxthmi	r0, r0
 800c842:	fb00 3000 	mla	r0, r0, r0, r3
 800c846:	bd30      	pop	{r4, r5, pc}

0800c848 <__errno>:
 800c848:	4b01      	ldr	r3, [pc, #4]	; (800c850 <__errno+0x8>)
 800c84a:	6818      	ldr	r0, [r3, #0]
 800c84c:	4770      	bx	lr
 800c84e:	bf00      	nop
 800c850:	20000028 	.word	0x20000028

0800c854 <__libc_init_array>:
 800c854:	b570      	push	{r4, r5, r6, lr}
 800c856:	4e0d      	ldr	r6, [pc, #52]	; (800c88c <__libc_init_array+0x38>)
 800c858:	4c0d      	ldr	r4, [pc, #52]	; (800c890 <__libc_init_array+0x3c>)
 800c85a:	1ba4      	subs	r4, r4, r6
 800c85c:	10a4      	asrs	r4, r4, #2
 800c85e:	2500      	movs	r5, #0
 800c860:	42a5      	cmp	r5, r4
 800c862:	d109      	bne.n	800c878 <__libc_init_array+0x24>
 800c864:	4e0b      	ldr	r6, [pc, #44]	; (800c894 <__libc_init_array+0x40>)
 800c866:	4c0c      	ldr	r4, [pc, #48]	; (800c898 <__libc_init_array+0x44>)
 800c868:	f001 fcfc 	bl	800e264 <_init>
 800c86c:	1ba4      	subs	r4, r4, r6
 800c86e:	10a4      	asrs	r4, r4, #2
 800c870:	2500      	movs	r5, #0
 800c872:	42a5      	cmp	r5, r4
 800c874:	d105      	bne.n	800c882 <__libc_init_array+0x2e>
 800c876:	bd70      	pop	{r4, r5, r6, pc}
 800c878:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c87c:	4798      	blx	r3
 800c87e:	3501      	adds	r5, #1
 800c880:	e7ee      	b.n	800c860 <__libc_init_array+0xc>
 800c882:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c886:	4798      	blx	r3
 800c888:	3501      	adds	r5, #1
 800c88a:	e7f2      	b.n	800c872 <__libc_init_array+0x1e>
 800c88c:	08010580 	.word	0x08010580
 800c890:	08010580 	.word	0x08010580
 800c894:	08010580 	.word	0x08010580
 800c898:	08010584 	.word	0x08010584

0800c89c <memcpy>:
 800c89c:	b510      	push	{r4, lr}
 800c89e:	1e43      	subs	r3, r0, #1
 800c8a0:	440a      	add	r2, r1
 800c8a2:	4291      	cmp	r1, r2
 800c8a4:	d100      	bne.n	800c8a8 <memcpy+0xc>
 800c8a6:	bd10      	pop	{r4, pc}
 800c8a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c8ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c8b0:	e7f7      	b.n	800c8a2 <memcpy+0x6>

0800c8b2 <memmove>:
 800c8b2:	4288      	cmp	r0, r1
 800c8b4:	b510      	push	{r4, lr}
 800c8b6:	eb01 0302 	add.w	r3, r1, r2
 800c8ba:	d807      	bhi.n	800c8cc <memmove+0x1a>
 800c8bc:	1e42      	subs	r2, r0, #1
 800c8be:	4299      	cmp	r1, r3
 800c8c0:	d00a      	beq.n	800c8d8 <memmove+0x26>
 800c8c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c8c6:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c8ca:	e7f8      	b.n	800c8be <memmove+0xc>
 800c8cc:	4283      	cmp	r3, r0
 800c8ce:	d9f5      	bls.n	800c8bc <memmove+0xa>
 800c8d0:	1881      	adds	r1, r0, r2
 800c8d2:	1ad2      	subs	r2, r2, r3
 800c8d4:	42d3      	cmn	r3, r2
 800c8d6:	d100      	bne.n	800c8da <memmove+0x28>
 800c8d8:	bd10      	pop	{r4, pc}
 800c8da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c8de:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c8e2:	e7f7      	b.n	800c8d4 <memmove+0x22>

0800c8e4 <memset>:
 800c8e4:	4402      	add	r2, r0
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	4293      	cmp	r3, r2
 800c8ea:	d100      	bne.n	800c8ee <memset+0xa>
 800c8ec:	4770      	bx	lr
 800c8ee:	f803 1b01 	strb.w	r1, [r3], #1
 800c8f2:	e7f9      	b.n	800c8e8 <memset+0x4>

0800c8f4 <siprintf>:
 800c8f4:	b40e      	push	{r1, r2, r3}
 800c8f6:	b500      	push	{lr}
 800c8f8:	b09c      	sub	sp, #112	; 0x70
 800c8fa:	ab1d      	add	r3, sp, #116	; 0x74
 800c8fc:	9002      	str	r0, [sp, #8]
 800c8fe:	9006      	str	r0, [sp, #24]
 800c900:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c904:	4809      	ldr	r0, [pc, #36]	; (800c92c <siprintf+0x38>)
 800c906:	9107      	str	r1, [sp, #28]
 800c908:	9104      	str	r1, [sp, #16]
 800c90a:	4909      	ldr	r1, [pc, #36]	; (800c930 <siprintf+0x3c>)
 800c90c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c910:	9105      	str	r1, [sp, #20]
 800c912:	6800      	ldr	r0, [r0, #0]
 800c914:	9301      	str	r3, [sp, #4]
 800c916:	a902      	add	r1, sp, #8
 800c918:	f000 f866 	bl	800c9e8 <_svfiprintf_r>
 800c91c:	9b02      	ldr	r3, [sp, #8]
 800c91e:	2200      	movs	r2, #0
 800c920:	701a      	strb	r2, [r3, #0]
 800c922:	b01c      	add	sp, #112	; 0x70
 800c924:	f85d eb04 	ldr.w	lr, [sp], #4
 800c928:	b003      	add	sp, #12
 800c92a:	4770      	bx	lr
 800c92c:	20000028 	.word	0x20000028
 800c930:	ffff0208 	.word	0xffff0208

0800c934 <__ssputs_r>:
 800c934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c938:	688e      	ldr	r6, [r1, #8]
 800c93a:	429e      	cmp	r6, r3
 800c93c:	4682      	mov	sl, r0
 800c93e:	460c      	mov	r4, r1
 800c940:	4690      	mov	r8, r2
 800c942:	4699      	mov	r9, r3
 800c944:	d837      	bhi.n	800c9b6 <__ssputs_r+0x82>
 800c946:	898a      	ldrh	r2, [r1, #12]
 800c948:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c94c:	d031      	beq.n	800c9b2 <__ssputs_r+0x7e>
 800c94e:	6825      	ldr	r5, [r4, #0]
 800c950:	6909      	ldr	r1, [r1, #16]
 800c952:	1a6f      	subs	r7, r5, r1
 800c954:	6965      	ldr	r5, [r4, #20]
 800c956:	2302      	movs	r3, #2
 800c958:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c95c:	fb95 f5f3 	sdiv	r5, r5, r3
 800c960:	f109 0301 	add.w	r3, r9, #1
 800c964:	443b      	add	r3, r7
 800c966:	429d      	cmp	r5, r3
 800c968:	bf38      	it	cc
 800c96a:	461d      	movcc	r5, r3
 800c96c:	0553      	lsls	r3, r2, #21
 800c96e:	d530      	bpl.n	800c9d2 <__ssputs_r+0x9e>
 800c970:	4629      	mov	r1, r5
 800c972:	f000 fb07 	bl	800cf84 <_malloc_r>
 800c976:	4606      	mov	r6, r0
 800c978:	b950      	cbnz	r0, 800c990 <__ssputs_r+0x5c>
 800c97a:	230c      	movs	r3, #12
 800c97c:	f8ca 3000 	str.w	r3, [sl]
 800c980:	89a3      	ldrh	r3, [r4, #12]
 800c982:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c986:	81a3      	strh	r3, [r4, #12]
 800c988:	f04f 30ff 	mov.w	r0, #4294967295
 800c98c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c990:	463a      	mov	r2, r7
 800c992:	6921      	ldr	r1, [r4, #16]
 800c994:	f7ff ff82 	bl	800c89c <memcpy>
 800c998:	89a3      	ldrh	r3, [r4, #12]
 800c99a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c99e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9a2:	81a3      	strh	r3, [r4, #12]
 800c9a4:	6126      	str	r6, [r4, #16]
 800c9a6:	6165      	str	r5, [r4, #20]
 800c9a8:	443e      	add	r6, r7
 800c9aa:	1bed      	subs	r5, r5, r7
 800c9ac:	6026      	str	r6, [r4, #0]
 800c9ae:	60a5      	str	r5, [r4, #8]
 800c9b0:	464e      	mov	r6, r9
 800c9b2:	454e      	cmp	r6, r9
 800c9b4:	d900      	bls.n	800c9b8 <__ssputs_r+0x84>
 800c9b6:	464e      	mov	r6, r9
 800c9b8:	4632      	mov	r2, r6
 800c9ba:	4641      	mov	r1, r8
 800c9bc:	6820      	ldr	r0, [r4, #0]
 800c9be:	f7ff ff78 	bl	800c8b2 <memmove>
 800c9c2:	68a3      	ldr	r3, [r4, #8]
 800c9c4:	1b9b      	subs	r3, r3, r6
 800c9c6:	60a3      	str	r3, [r4, #8]
 800c9c8:	6823      	ldr	r3, [r4, #0]
 800c9ca:	441e      	add	r6, r3
 800c9cc:	6026      	str	r6, [r4, #0]
 800c9ce:	2000      	movs	r0, #0
 800c9d0:	e7dc      	b.n	800c98c <__ssputs_r+0x58>
 800c9d2:	462a      	mov	r2, r5
 800c9d4:	f000 fb30 	bl	800d038 <_realloc_r>
 800c9d8:	4606      	mov	r6, r0
 800c9da:	2800      	cmp	r0, #0
 800c9dc:	d1e2      	bne.n	800c9a4 <__ssputs_r+0x70>
 800c9de:	6921      	ldr	r1, [r4, #16]
 800c9e0:	4650      	mov	r0, sl
 800c9e2:	f000 fa81 	bl	800cee8 <_free_r>
 800c9e6:	e7c8      	b.n	800c97a <__ssputs_r+0x46>

0800c9e8 <_svfiprintf_r>:
 800c9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9ec:	461d      	mov	r5, r3
 800c9ee:	898b      	ldrh	r3, [r1, #12]
 800c9f0:	061f      	lsls	r7, r3, #24
 800c9f2:	b09d      	sub	sp, #116	; 0x74
 800c9f4:	4680      	mov	r8, r0
 800c9f6:	460c      	mov	r4, r1
 800c9f8:	4616      	mov	r6, r2
 800c9fa:	d50f      	bpl.n	800ca1c <_svfiprintf_r+0x34>
 800c9fc:	690b      	ldr	r3, [r1, #16]
 800c9fe:	b96b      	cbnz	r3, 800ca1c <_svfiprintf_r+0x34>
 800ca00:	2140      	movs	r1, #64	; 0x40
 800ca02:	f000 fabf 	bl	800cf84 <_malloc_r>
 800ca06:	6020      	str	r0, [r4, #0]
 800ca08:	6120      	str	r0, [r4, #16]
 800ca0a:	b928      	cbnz	r0, 800ca18 <_svfiprintf_r+0x30>
 800ca0c:	230c      	movs	r3, #12
 800ca0e:	f8c8 3000 	str.w	r3, [r8]
 800ca12:	f04f 30ff 	mov.w	r0, #4294967295
 800ca16:	e0c8      	b.n	800cbaa <_svfiprintf_r+0x1c2>
 800ca18:	2340      	movs	r3, #64	; 0x40
 800ca1a:	6163      	str	r3, [r4, #20]
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	9309      	str	r3, [sp, #36]	; 0x24
 800ca20:	2320      	movs	r3, #32
 800ca22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ca26:	2330      	movs	r3, #48	; 0x30
 800ca28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ca2c:	9503      	str	r5, [sp, #12]
 800ca2e:	f04f 0b01 	mov.w	fp, #1
 800ca32:	4637      	mov	r7, r6
 800ca34:	463d      	mov	r5, r7
 800ca36:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ca3a:	b10b      	cbz	r3, 800ca40 <_svfiprintf_r+0x58>
 800ca3c:	2b25      	cmp	r3, #37	; 0x25
 800ca3e:	d13e      	bne.n	800cabe <_svfiprintf_r+0xd6>
 800ca40:	ebb7 0a06 	subs.w	sl, r7, r6
 800ca44:	d00b      	beq.n	800ca5e <_svfiprintf_r+0x76>
 800ca46:	4653      	mov	r3, sl
 800ca48:	4632      	mov	r2, r6
 800ca4a:	4621      	mov	r1, r4
 800ca4c:	4640      	mov	r0, r8
 800ca4e:	f7ff ff71 	bl	800c934 <__ssputs_r>
 800ca52:	3001      	adds	r0, #1
 800ca54:	f000 80a4 	beq.w	800cba0 <_svfiprintf_r+0x1b8>
 800ca58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca5a:	4453      	add	r3, sl
 800ca5c:	9309      	str	r3, [sp, #36]	; 0x24
 800ca5e:	783b      	ldrb	r3, [r7, #0]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	f000 809d 	beq.w	800cba0 <_svfiprintf_r+0x1b8>
 800ca66:	2300      	movs	r3, #0
 800ca68:	f04f 32ff 	mov.w	r2, #4294967295
 800ca6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca70:	9304      	str	r3, [sp, #16]
 800ca72:	9307      	str	r3, [sp, #28]
 800ca74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ca78:	931a      	str	r3, [sp, #104]	; 0x68
 800ca7a:	462f      	mov	r7, r5
 800ca7c:	2205      	movs	r2, #5
 800ca7e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800ca82:	4850      	ldr	r0, [pc, #320]	; (800cbc4 <_svfiprintf_r+0x1dc>)
 800ca84:	f7f3 fbcc 	bl	8000220 <memchr>
 800ca88:	9b04      	ldr	r3, [sp, #16]
 800ca8a:	b9d0      	cbnz	r0, 800cac2 <_svfiprintf_r+0xda>
 800ca8c:	06d9      	lsls	r1, r3, #27
 800ca8e:	bf44      	itt	mi
 800ca90:	2220      	movmi	r2, #32
 800ca92:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ca96:	071a      	lsls	r2, r3, #28
 800ca98:	bf44      	itt	mi
 800ca9a:	222b      	movmi	r2, #43	; 0x2b
 800ca9c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800caa0:	782a      	ldrb	r2, [r5, #0]
 800caa2:	2a2a      	cmp	r2, #42	; 0x2a
 800caa4:	d015      	beq.n	800cad2 <_svfiprintf_r+0xea>
 800caa6:	9a07      	ldr	r2, [sp, #28]
 800caa8:	462f      	mov	r7, r5
 800caaa:	2000      	movs	r0, #0
 800caac:	250a      	movs	r5, #10
 800caae:	4639      	mov	r1, r7
 800cab0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cab4:	3b30      	subs	r3, #48	; 0x30
 800cab6:	2b09      	cmp	r3, #9
 800cab8:	d94d      	bls.n	800cb56 <_svfiprintf_r+0x16e>
 800caba:	b1b8      	cbz	r0, 800caec <_svfiprintf_r+0x104>
 800cabc:	e00f      	b.n	800cade <_svfiprintf_r+0xf6>
 800cabe:	462f      	mov	r7, r5
 800cac0:	e7b8      	b.n	800ca34 <_svfiprintf_r+0x4c>
 800cac2:	4a40      	ldr	r2, [pc, #256]	; (800cbc4 <_svfiprintf_r+0x1dc>)
 800cac4:	1a80      	subs	r0, r0, r2
 800cac6:	fa0b f000 	lsl.w	r0, fp, r0
 800caca:	4318      	orrs	r0, r3
 800cacc:	9004      	str	r0, [sp, #16]
 800cace:	463d      	mov	r5, r7
 800cad0:	e7d3      	b.n	800ca7a <_svfiprintf_r+0x92>
 800cad2:	9a03      	ldr	r2, [sp, #12]
 800cad4:	1d11      	adds	r1, r2, #4
 800cad6:	6812      	ldr	r2, [r2, #0]
 800cad8:	9103      	str	r1, [sp, #12]
 800cada:	2a00      	cmp	r2, #0
 800cadc:	db01      	blt.n	800cae2 <_svfiprintf_r+0xfa>
 800cade:	9207      	str	r2, [sp, #28]
 800cae0:	e004      	b.n	800caec <_svfiprintf_r+0x104>
 800cae2:	4252      	negs	r2, r2
 800cae4:	f043 0302 	orr.w	r3, r3, #2
 800cae8:	9207      	str	r2, [sp, #28]
 800caea:	9304      	str	r3, [sp, #16]
 800caec:	783b      	ldrb	r3, [r7, #0]
 800caee:	2b2e      	cmp	r3, #46	; 0x2e
 800caf0:	d10c      	bne.n	800cb0c <_svfiprintf_r+0x124>
 800caf2:	787b      	ldrb	r3, [r7, #1]
 800caf4:	2b2a      	cmp	r3, #42	; 0x2a
 800caf6:	d133      	bne.n	800cb60 <_svfiprintf_r+0x178>
 800caf8:	9b03      	ldr	r3, [sp, #12]
 800cafa:	1d1a      	adds	r2, r3, #4
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	9203      	str	r2, [sp, #12]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	bfb8      	it	lt
 800cb04:	f04f 33ff 	movlt.w	r3, #4294967295
 800cb08:	3702      	adds	r7, #2
 800cb0a:	9305      	str	r3, [sp, #20]
 800cb0c:	4d2e      	ldr	r5, [pc, #184]	; (800cbc8 <_svfiprintf_r+0x1e0>)
 800cb0e:	7839      	ldrb	r1, [r7, #0]
 800cb10:	2203      	movs	r2, #3
 800cb12:	4628      	mov	r0, r5
 800cb14:	f7f3 fb84 	bl	8000220 <memchr>
 800cb18:	b138      	cbz	r0, 800cb2a <_svfiprintf_r+0x142>
 800cb1a:	2340      	movs	r3, #64	; 0x40
 800cb1c:	1b40      	subs	r0, r0, r5
 800cb1e:	fa03 f000 	lsl.w	r0, r3, r0
 800cb22:	9b04      	ldr	r3, [sp, #16]
 800cb24:	4303      	orrs	r3, r0
 800cb26:	3701      	adds	r7, #1
 800cb28:	9304      	str	r3, [sp, #16]
 800cb2a:	7839      	ldrb	r1, [r7, #0]
 800cb2c:	4827      	ldr	r0, [pc, #156]	; (800cbcc <_svfiprintf_r+0x1e4>)
 800cb2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cb32:	2206      	movs	r2, #6
 800cb34:	1c7e      	adds	r6, r7, #1
 800cb36:	f7f3 fb73 	bl	8000220 <memchr>
 800cb3a:	2800      	cmp	r0, #0
 800cb3c:	d038      	beq.n	800cbb0 <_svfiprintf_r+0x1c8>
 800cb3e:	4b24      	ldr	r3, [pc, #144]	; (800cbd0 <_svfiprintf_r+0x1e8>)
 800cb40:	bb13      	cbnz	r3, 800cb88 <_svfiprintf_r+0x1a0>
 800cb42:	9b03      	ldr	r3, [sp, #12]
 800cb44:	3307      	adds	r3, #7
 800cb46:	f023 0307 	bic.w	r3, r3, #7
 800cb4a:	3308      	adds	r3, #8
 800cb4c:	9303      	str	r3, [sp, #12]
 800cb4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb50:	444b      	add	r3, r9
 800cb52:	9309      	str	r3, [sp, #36]	; 0x24
 800cb54:	e76d      	b.n	800ca32 <_svfiprintf_r+0x4a>
 800cb56:	fb05 3202 	mla	r2, r5, r2, r3
 800cb5a:	2001      	movs	r0, #1
 800cb5c:	460f      	mov	r7, r1
 800cb5e:	e7a6      	b.n	800caae <_svfiprintf_r+0xc6>
 800cb60:	2300      	movs	r3, #0
 800cb62:	3701      	adds	r7, #1
 800cb64:	9305      	str	r3, [sp, #20]
 800cb66:	4619      	mov	r1, r3
 800cb68:	250a      	movs	r5, #10
 800cb6a:	4638      	mov	r0, r7
 800cb6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb70:	3a30      	subs	r2, #48	; 0x30
 800cb72:	2a09      	cmp	r2, #9
 800cb74:	d903      	bls.n	800cb7e <_svfiprintf_r+0x196>
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d0c8      	beq.n	800cb0c <_svfiprintf_r+0x124>
 800cb7a:	9105      	str	r1, [sp, #20]
 800cb7c:	e7c6      	b.n	800cb0c <_svfiprintf_r+0x124>
 800cb7e:	fb05 2101 	mla	r1, r5, r1, r2
 800cb82:	2301      	movs	r3, #1
 800cb84:	4607      	mov	r7, r0
 800cb86:	e7f0      	b.n	800cb6a <_svfiprintf_r+0x182>
 800cb88:	ab03      	add	r3, sp, #12
 800cb8a:	9300      	str	r3, [sp, #0]
 800cb8c:	4622      	mov	r2, r4
 800cb8e:	4b11      	ldr	r3, [pc, #68]	; (800cbd4 <_svfiprintf_r+0x1ec>)
 800cb90:	a904      	add	r1, sp, #16
 800cb92:	4640      	mov	r0, r8
 800cb94:	f3af 8000 	nop.w
 800cb98:	f1b0 3fff 	cmp.w	r0, #4294967295
 800cb9c:	4681      	mov	r9, r0
 800cb9e:	d1d6      	bne.n	800cb4e <_svfiprintf_r+0x166>
 800cba0:	89a3      	ldrh	r3, [r4, #12]
 800cba2:	065b      	lsls	r3, r3, #25
 800cba4:	f53f af35 	bmi.w	800ca12 <_svfiprintf_r+0x2a>
 800cba8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cbaa:	b01d      	add	sp, #116	; 0x74
 800cbac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbb0:	ab03      	add	r3, sp, #12
 800cbb2:	9300      	str	r3, [sp, #0]
 800cbb4:	4622      	mov	r2, r4
 800cbb6:	4b07      	ldr	r3, [pc, #28]	; (800cbd4 <_svfiprintf_r+0x1ec>)
 800cbb8:	a904      	add	r1, sp, #16
 800cbba:	4640      	mov	r0, r8
 800cbbc:	f000 f882 	bl	800ccc4 <_printf_i>
 800cbc0:	e7ea      	b.n	800cb98 <_svfiprintf_r+0x1b0>
 800cbc2:	bf00      	nop
 800cbc4:	08010368 	.word	0x08010368
 800cbc8:	0801036e 	.word	0x0801036e
 800cbcc:	08010372 	.word	0x08010372
 800cbd0:	00000000 	.word	0x00000000
 800cbd4:	0800c935 	.word	0x0800c935

0800cbd8 <_printf_common>:
 800cbd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbdc:	4691      	mov	r9, r2
 800cbde:	461f      	mov	r7, r3
 800cbe0:	688a      	ldr	r2, [r1, #8]
 800cbe2:	690b      	ldr	r3, [r1, #16]
 800cbe4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cbe8:	4293      	cmp	r3, r2
 800cbea:	bfb8      	it	lt
 800cbec:	4613      	movlt	r3, r2
 800cbee:	f8c9 3000 	str.w	r3, [r9]
 800cbf2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cbf6:	4606      	mov	r6, r0
 800cbf8:	460c      	mov	r4, r1
 800cbfa:	b112      	cbz	r2, 800cc02 <_printf_common+0x2a>
 800cbfc:	3301      	adds	r3, #1
 800cbfe:	f8c9 3000 	str.w	r3, [r9]
 800cc02:	6823      	ldr	r3, [r4, #0]
 800cc04:	0699      	lsls	r1, r3, #26
 800cc06:	bf42      	ittt	mi
 800cc08:	f8d9 3000 	ldrmi.w	r3, [r9]
 800cc0c:	3302      	addmi	r3, #2
 800cc0e:	f8c9 3000 	strmi.w	r3, [r9]
 800cc12:	6825      	ldr	r5, [r4, #0]
 800cc14:	f015 0506 	ands.w	r5, r5, #6
 800cc18:	d107      	bne.n	800cc2a <_printf_common+0x52>
 800cc1a:	f104 0a19 	add.w	sl, r4, #25
 800cc1e:	68e3      	ldr	r3, [r4, #12]
 800cc20:	f8d9 2000 	ldr.w	r2, [r9]
 800cc24:	1a9b      	subs	r3, r3, r2
 800cc26:	42ab      	cmp	r3, r5
 800cc28:	dc28      	bgt.n	800cc7c <_printf_common+0xa4>
 800cc2a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800cc2e:	6822      	ldr	r2, [r4, #0]
 800cc30:	3300      	adds	r3, #0
 800cc32:	bf18      	it	ne
 800cc34:	2301      	movne	r3, #1
 800cc36:	0692      	lsls	r2, r2, #26
 800cc38:	d42d      	bmi.n	800cc96 <_printf_common+0xbe>
 800cc3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cc3e:	4639      	mov	r1, r7
 800cc40:	4630      	mov	r0, r6
 800cc42:	47c0      	blx	r8
 800cc44:	3001      	adds	r0, #1
 800cc46:	d020      	beq.n	800cc8a <_printf_common+0xb2>
 800cc48:	6823      	ldr	r3, [r4, #0]
 800cc4a:	68e5      	ldr	r5, [r4, #12]
 800cc4c:	f8d9 2000 	ldr.w	r2, [r9]
 800cc50:	f003 0306 	and.w	r3, r3, #6
 800cc54:	2b04      	cmp	r3, #4
 800cc56:	bf08      	it	eq
 800cc58:	1aad      	subeq	r5, r5, r2
 800cc5a:	68a3      	ldr	r3, [r4, #8]
 800cc5c:	6922      	ldr	r2, [r4, #16]
 800cc5e:	bf0c      	ite	eq
 800cc60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cc64:	2500      	movne	r5, #0
 800cc66:	4293      	cmp	r3, r2
 800cc68:	bfc4      	itt	gt
 800cc6a:	1a9b      	subgt	r3, r3, r2
 800cc6c:	18ed      	addgt	r5, r5, r3
 800cc6e:	f04f 0900 	mov.w	r9, #0
 800cc72:	341a      	adds	r4, #26
 800cc74:	454d      	cmp	r5, r9
 800cc76:	d11a      	bne.n	800ccae <_printf_common+0xd6>
 800cc78:	2000      	movs	r0, #0
 800cc7a:	e008      	b.n	800cc8e <_printf_common+0xb6>
 800cc7c:	2301      	movs	r3, #1
 800cc7e:	4652      	mov	r2, sl
 800cc80:	4639      	mov	r1, r7
 800cc82:	4630      	mov	r0, r6
 800cc84:	47c0      	blx	r8
 800cc86:	3001      	adds	r0, #1
 800cc88:	d103      	bne.n	800cc92 <_printf_common+0xba>
 800cc8a:	f04f 30ff 	mov.w	r0, #4294967295
 800cc8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc92:	3501      	adds	r5, #1
 800cc94:	e7c3      	b.n	800cc1e <_printf_common+0x46>
 800cc96:	18e1      	adds	r1, r4, r3
 800cc98:	1c5a      	adds	r2, r3, #1
 800cc9a:	2030      	movs	r0, #48	; 0x30
 800cc9c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cca0:	4422      	add	r2, r4
 800cca2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cca6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ccaa:	3302      	adds	r3, #2
 800ccac:	e7c5      	b.n	800cc3a <_printf_common+0x62>
 800ccae:	2301      	movs	r3, #1
 800ccb0:	4622      	mov	r2, r4
 800ccb2:	4639      	mov	r1, r7
 800ccb4:	4630      	mov	r0, r6
 800ccb6:	47c0      	blx	r8
 800ccb8:	3001      	adds	r0, #1
 800ccba:	d0e6      	beq.n	800cc8a <_printf_common+0xb2>
 800ccbc:	f109 0901 	add.w	r9, r9, #1
 800ccc0:	e7d8      	b.n	800cc74 <_printf_common+0x9c>
	...

0800ccc4 <_printf_i>:
 800ccc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ccc8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800cccc:	460c      	mov	r4, r1
 800ccce:	7e09      	ldrb	r1, [r1, #24]
 800ccd0:	b085      	sub	sp, #20
 800ccd2:	296e      	cmp	r1, #110	; 0x6e
 800ccd4:	4617      	mov	r7, r2
 800ccd6:	4606      	mov	r6, r0
 800ccd8:	4698      	mov	r8, r3
 800ccda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ccdc:	f000 80b3 	beq.w	800ce46 <_printf_i+0x182>
 800cce0:	d822      	bhi.n	800cd28 <_printf_i+0x64>
 800cce2:	2963      	cmp	r1, #99	; 0x63
 800cce4:	d036      	beq.n	800cd54 <_printf_i+0x90>
 800cce6:	d80a      	bhi.n	800ccfe <_printf_i+0x3a>
 800cce8:	2900      	cmp	r1, #0
 800ccea:	f000 80b9 	beq.w	800ce60 <_printf_i+0x19c>
 800ccee:	2958      	cmp	r1, #88	; 0x58
 800ccf0:	f000 8083 	beq.w	800cdfa <_printf_i+0x136>
 800ccf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ccf8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ccfc:	e032      	b.n	800cd64 <_printf_i+0xa0>
 800ccfe:	2964      	cmp	r1, #100	; 0x64
 800cd00:	d001      	beq.n	800cd06 <_printf_i+0x42>
 800cd02:	2969      	cmp	r1, #105	; 0x69
 800cd04:	d1f6      	bne.n	800ccf4 <_printf_i+0x30>
 800cd06:	6820      	ldr	r0, [r4, #0]
 800cd08:	6813      	ldr	r3, [r2, #0]
 800cd0a:	0605      	lsls	r5, r0, #24
 800cd0c:	f103 0104 	add.w	r1, r3, #4
 800cd10:	d52a      	bpl.n	800cd68 <_printf_i+0xa4>
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	6011      	str	r1, [r2, #0]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	da03      	bge.n	800cd22 <_printf_i+0x5e>
 800cd1a:	222d      	movs	r2, #45	; 0x2d
 800cd1c:	425b      	negs	r3, r3
 800cd1e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800cd22:	486f      	ldr	r0, [pc, #444]	; (800cee0 <_printf_i+0x21c>)
 800cd24:	220a      	movs	r2, #10
 800cd26:	e039      	b.n	800cd9c <_printf_i+0xd8>
 800cd28:	2973      	cmp	r1, #115	; 0x73
 800cd2a:	f000 809d 	beq.w	800ce68 <_printf_i+0x1a4>
 800cd2e:	d808      	bhi.n	800cd42 <_printf_i+0x7e>
 800cd30:	296f      	cmp	r1, #111	; 0x6f
 800cd32:	d020      	beq.n	800cd76 <_printf_i+0xb2>
 800cd34:	2970      	cmp	r1, #112	; 0x70
 800cd36:	d1dd      	bne.n	800ccf4 <_printf_i+0x30>
 800cd38:	6823      	ldr	r3, [r4, #0]
 800cd3a:	f043 0320 	orr.w	r3, r3, #32
 800cd3e:	6023      	str	r3, [r4, #0]
 800cd40:	e003      	b.n	800cd4a <_printf_i+0x86>
 800cd42:	2975      	cmp	r1, #117	; 0x75
 800cd44:	d017      	beq.n	800cd76 <_printf_i+0xb2>
 800cd46:	2978      	cmp	r1, #120	; 0x78
 800cd48:	d1d4      	bne.n	800ccf4 <_printf_i+0x30>
 800cd4a:	2378      	movs	r3, #120	; 0x78
 800cd4c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cd50:	4864      	ldr	r0, [pc, #400]	; (800cee4 <_printf_i+0x220>)
 800cd52:	e055      	b.n	800ce00 <_printf_i+0x13c>
 800cd54:	6813      	ldr	r3, [r2, #0]
 800cd56:	1d19      	adds	r1, r3, #4
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	6011      	str	r1, [r2, #0]
 800cd5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cd60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cd64:	2301      	movs	r3, #1
 800cd66:	e08c      	b.n	800ce82 <_printf_i+0x1be>
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	6011      	str	r1, [r2, #0]
 800cd6c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cd70:	bf18      	it	ne
 800cd72:	b21b      	sxthne	r3, r3
 800cd74:	e7cf      	b.n	800cd16 <_printf_i+0x52>
 800cd76:	6813      	ldr	r3, [r2, #0]
 800cd78:	6825      	ldr	r5, [r4, #0]
 800cd7a:	1d18      	adds	r0, r3, #4
 800cd7c:	6010      	str	r0, [r2, #0]
 800cd7e:	0628      	lsls	r0, r5, #24
 800cd80:	d501      	bpl.n	800cd86 <_printf_i+0xc2>
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	e002      	b.n	800cd8c <_printf_i+0xc8>
 800cd86:	0668      	lsls	r0, r5, #25
 800cd88:	d5fb      	bpl.n	800cd82 <_printf_i+0xbe>
 800cd8a:	881b      	ldrh	r3, [r3, #0]
 800cd8c:	4854      	ldr	r0, [pc, #336]	; (800cee0 <_printf_i+0x21c>)
 800cd8e:	296f      	cmp	r1, #111	; 0x6f
 800cd90:	bf14      	ite	ne
 800cd92:	220a      	movne	r2, #10
 800cd94:	2208      	moveq	r2, #8
 800cd96:	2100      	movs	r1, #0
 800cd98:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cd9c:	6865      	ldr	r5, [r4, #4]
 800cd9e:	60a5      	str	r5, [r4, #8]
 800cda0:	2d00      	cmp	r5, #0
 800cda2:	f2c0 8095 	blt.w	800ced0 <_printf_i+0x20c>
 800cda6:	6821      	ldr	r1, [r4, #0]
 800cda8:	f021 0104 	bic.w	r1, r1, #4
 800cdac:	6021      	str	r1, [r4, #0]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d13d      	bne.n	800ce2e <_printf_i+0x16a>
 800cdb2:	2d00      	cmp	r5, #0
 800cdb4:	f040 808e 	bne.w	800ced4 <_printf_i+0x210>
 800cdb8:	4665      	mov	r5, ip
 800cdba:	2a08      	cmp	r2, #8
 800cdbc:	d10b      	bne.n	800cdd6 <_printf_i+0x112>
 800cdbe:	6823      	ldr	r3, [r4, #0]
 800cdc0:	07db      	lsls	r3, r3, #31
 800cdc2:	d508      	bpl.n	800cdd6 <_printf_i+0x112>
 800cdc4:	6923      	ldr	r3, [r4, #16]
 800cdc6:	6862      	ldr	r2, [r4, #4]
 800cdc8:	429a      	cmp	r2, r3
 800cdca:	bfde      	ittt	le
 800cdcc:	2330      	movle	r3, #48	; 0x30
 800cdce:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cdd2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cdd6:	ebac 0305 	sub.w	r3, ip, r5
 800cdda:	6123      	str	r3, [r4, #16]
 800cddc:	f8cd 8000 	str.w	r8, [sp]
 800cde0:	463b      	mov	r3, r7
 800cde2:	aa03      	add	r2, sp, #12
 800cde4:	4621      	mov	r1, r4
 800cde6:	4630      	mov	r0, r6
 800cde8:	f7ff fef6 	bl	800cbd8 <_printf_common>
 800cdec:	3001      	adds	r0, #1
 800cdee:	d14d      	bne.n	800ce8c <_printf_i+0x1c8>
 800cdf0:	f04f 30ff 	mov.w	r0, #4294967295
 800cdf4:	b005      	add	sp, #20
 800cdf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cdfa:	4839      	ldr	r0, [pc, #228]	; (800cee0 <_printf_i+0x21c>)
 800cdfc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800ce00:	6813      	ldr	r3, [r2, #0]
 800ce02:	6821      	ldr	r1, [r4, #0]
 800ce04:	1d1d      	adds	r5, r3, #4
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	6015      	str	r5, [r2, #0]
 800ce0a:	060a      	lsls	r2, r1, #24
 800ce0c:	d50b      	bpl.n	800ce26 <_printf_i+0x162>
 800ce0e:	07ca      	lsls	r2, r1, #31
 800ce10:	bf44      	itt	mi
 800ce12:	f041 0120 	orrmi.w	r1, r1, #32
 800ce16:	6021      	strmi	r1, [r4, #0]
 800ce18:	b91b      	cbnz	r3, 800ce22 <_printf_i+0x15e>
 800ce1a:	6822      	ldr	r2, [r4, #0]
 800ce1c:	f022 0220 	bic.w	r2, r2, #32
 800ce20:	6022      	str	r2, [r4, #0]
 800ce22:	2210      	movs	r2, #16
 800ce24:	e7b7      	b.n	800cd96 <_printf_i+0xd2>
 800ce26:	064d      	lsls	r5, r1, #25
 800ce28:	bf48      	it	mi
 800ce2a:	b29b      	uxthmi	r3, r3
 800ce2c:	e7ef      	b.n	800ce0e <_printf_i+0x14a>
 800ce2e:	4665      	mov	r5, ip
 800ce30:	fbb3 f1f2 	udiv	r1, r3, r2
 800ce34:	fb02 3311 	mls	r3, r2, r1, r3
 800ce38:	5cc3      	ldrb	r3, [r0, r3]
 800ce3a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ce3e:	460b      	mov	r3, r1
 800ce40:	2900      	cmp	r1, #0
 800ce42:	d1f5      	bne.n	800ce30 <_printf_i+0x16c>
 800ce44:	e7b9      	b.n	800cdba <_printf_i+0xf6>
 800ce46:	6813      	ldr	r3, [r2, #0]
 800ce48:	6825      	ldr	r5, [r4, #0]
 800ce4a:	6961      	ldr	r1, [r4, #20]
 800ce4c:	1d18      	adds	r0, r3, #4
 800ce4e:	6010      	str	r0, [r2, #0]
 800ce50:	0628      	lsls	r0, r5, #24
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	d501      	bpl.n	800ce5a <_printf_i+0x196>
 800ce56:	6019      	str	r1, [r3, #0]
 800ce58:	e002      	b.n	800ce60 <_printf_i+0x19c>
 800ce5a:	066a      	lsls	r2, r5, #25
 800ce5c:	d5fb      	bpl.n	800ce56 <_printf_i+0x192>
 800ce5e:	8019      	strh	r1, [r3, #0]
 800ce60:	2300      	movs	r3, #0
 800ce62:	6123      	str	r3, [r4, #16]
 800ce64:	4665      	mov	r5, ip
 800ce66:	e7b9      	b.n	800cddc <_printf_i+0x118>
 800ce68:	6813      	ldr	r3, [r2, #0]
 800ce6a:	1d19      	adds	r1, r3, #4
 800ce6c:	6011      	str	r1, [r2, #0]
 800ce6e:	681d      	ldr	r5, [r3, #0]
 800ce70:	6862      	ldr	r2, [r4, #4]
 800ce72:	2100      	movs	r1, #0
 800ce74:	4628      	mov	r0, r5
 800ce76:	f7f3 f9d3 	bl	8000220 <memchr>
 800ce7a:	b108      	cbz	r0, 800ce80 <_printf_i+0x1bc>
 800ce7c:	1b40      	subs	r0, r0, r5
 800ce7e:	6060      	str	r0, [r4, #4]
 800ce80:	6863      	ldr	r3, [r4, #4]
 800ce82:	6123      	str	r3, [r4, #16]
 800ce84:	2300      	movs	r3, #0
 800ce86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce8a:	e7a7      	b.n	800cddc <_printf_i+0x118>
 800ce8c:	6923      	ldr	r3, [r4, #16]
 800ce8e:	462a      	mov	r2, r5
 800ce90:	4639      	mov	r1, r7
 800ce92:	4630      	mov	r0, r6
 800ce94:	47c0      	blx	r8
 800ce96:	3001      	adds	r0, #1
 800ce98:	d0aa      	beq.n	800cdf0 <_printf_i+0x12c>
 800ce9a:	6823      	ldr	r3, [r4, #0]
 800ce9c:	079b      	lsls	r3, r3, #30
 800ce9e:	d413      	bmi.n	800cec8 <_printf_i+0x204>
 800cea0:	68e0      	ldr	r0, [r4, #12]
 800cea2:	9b03      	ldr	r3, [sp, #12]
 800cea4:	4298      	cmp	r0, r3
 800cea6:	bfb8      	it	lt
 800cea8:	4618      	movlt	r0, r3
 800ceaa:	e7a3      	b.n	800cdf4 <_printf_i+0x130>
 800ceac:	2301      	movs	r3, #1
 800ceae:	464a      	mov	r2, r9
 800ceb0:	4639      	mov	r1, r7
 800ceb2:	4630      	mov	r0, r6
 800ceb4:	47c0      	blx	r8
 800ceb6:	3001      	adds	r0, #1
 800ceb8:	d09a      	beq.n	800cdf0 <_printf_i+0x12c>
 800ceba:	3501      	adds	r5, #1
 800cebc:	68e3      	ldr	r3, [r4, #12]
 800cebe:	9a03      	ldr	r2, [sp, #12]
 800cec0:	1a9b      	subs	r3, r3, r2
 800cec2:	42ab      	cmp	r3, r5
 800cec4:	dcf2      	bgt.n	800ceac <_printf_i+0x1e8>
 800cec6:	e7eb      	b.n	800cea0 <_printf_i+0x1dc>
 800cec8:	2500      	movs	r5, #0
 800ceca:	f104 0919 	add.w	r9, r4, #25
 800cece:	e7f5      	b.n	800cebc <_printf_i+0x1f8>
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d1ac      	bne.n	800ce2e <_printf_i+0x16a>
 800ced4:	7803      	ldrb	r3, [r0, #0]
 800ced6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ceda:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cede:	e76c      	b.n	800cdba <_printf_i+0xf6>
 800cee0:	08010379 	.word	0x08010379
 800cee4:	0801038a 	.word	0x0801038a

0800cee8 <_free_r>:
 800cee8:	b538      	push	{r3, r4, r5, lr}
 800ceea:	4605      	mov	r5, r0
 800ceec:	2900      	cmp	r1, #0
 800ceee:	d045      	beq.n	800cf7c <_free_r+0x94>
 800cef0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cef4:	1f0c      	subs	r4, r1, #4
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	bfb8      	it	lt
 800cefa:	18e4      	addlt	r4, r4, r3
 800cefc:	f000 f8d2 	bl	800d0a4 <__malloc_lock>
 800cf00:	4a1f      	ldr	r2, [pc, #124]	; (800cf80 <_free_r+0x98>)
 800cf02:	6813      	ldr	r3, [r2, #0]
 800cf04:	4610      	mov	r0, r2
 800cf06:	b933      	cbnz	r3, 800cf16 <_free_r+0x2e>
 800cf08:	6063      	str	r3, [r4, #4]
 800cf0a:	6014      	str	r4, [r2, #0]
 800cf0c:	4628      	mov	r0, r5
 800cf0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf12:	f000 b8c8 	b.w	800d0a6 <__malloc_unlock>
 800cf16:	42a3      	cmp	r3, r4
 800cf18:	d90c      	bls.n	800cf34 <_free_r+0x4c>
 800cf1a:	6821      	ldr	r1, [r4, #0]
 800cf1c:	1862      	adds	r2, r4, r1
 800cf1e:	4293      	cmp	r3, r2
 800cf20:	bf04      	itt	eq
 800cf22:	681a      	ldreq	r2, [r3, #0]
 800cf24:	685b      	ldreq	r3, [r3, #4]
 800cf26:	6063      	str	r3, [r4, #4]
 800cf28:	bf04      	itt	eq
 800cf2a:	1852      	addeq	r2, r2, r1
 800cf2c:	6022      	streq	r2, [r4, #0]
 800cf2e:	6004      	str	r4, [r0, #0]
 800cf30:	e7ec      	b.n	800cf0c <_free_r+0x24>
 800cf32:	4613      	mov	r3, r2
 800cf34:	685a      	ldr	r2, [r3, #4]
 800cf36:	b10a      	cbz	r2, 800cf3c <_free_r+0x54>
 800cf38:	42a2      	cmp	r2, r4
 800cf3a:	d9fa      	bls.n	800cf32 <_free_r+0x4a>
 800cf3c:	6819      	ldr	r1, [r3, #0]
 800cf3e:	1858      	adds	r0, r3, r1
 800cf40:	42a0      	cmp	r0, r4
 800cf42:	d10b      	bne.n	800cf5c <_free_r+0x74>
 800cf44:	6820      	ldr	r0, [r4, #0]
 800cf46:	4401      	add	r1, r0
 800cf48:	1858      	adds	r0, r3, r1
 800cf4a:	4282      	cmp	r2, r0
 800cf4c:	6019      	str	r1, [r3, #0]
 800cf4e:	d1dd      	bne.n	800cf0c <_free_r+0x24>
 800cf50:	6810      	ldr	r0, [r2, #0]
 800cf52:	6852      	ldr	r2, [r2, #4]
 800cf54:	605a      	str	r2, [r3, #4]
 800cf56:	4401      	add	r1, r0
 800cf58:	6019      	str	r1, [r3, #0]
 800cf5a:	e7d7      	b.n	800cf0c <_free_r+0x24>
 800cf5c:	d902      	bls.n	800cf64 <_free_r+0x7c>
 800cf5e:	230c      	movs	r3, #12
 800cf60:	602b      	str	r3, [r5, #0]
 800cf62:	e7d3      	b.n	800cf0c <_free_r+0x24>
 800cf64:	6820      	ldr	r0, [r4, #0]
 800cf66:	1821      	adds	r1, r4, r0
 800cf68:	428a      	cmp	r2, r1
 800cf6a:	bf04      	itt	eq
 800cf6c:	6811      	ldreq	r1, [r2, #0]
 800cf6e:	6852      	ldreq	r2, [r2, #4]
 800cf70:	6062      	str	r2, [r4, #4]
 800cf72:	bf04      	itt	eq
 800cf74:	1809      	addeq	r1, r1, r0
 800cf76:	6021      	streq	r1, [r4, #0]
 800cf78:	605c      	str	r4, [r3, #4]
 800cf7a:	e7c7      	b.n	800cf0c <_free_r+0x24>
 800cf7c:	bd38      	pop	{r3, r4, r5, pc}
 800cf7e:	bf00      	nop
 800cf80:	2001922c 	.word	0x2001922c

0800cf84 <_malloc_r>:
 800cf84:	b570      	push	{r4, r5, r6, lr}
 800cf86:	1ccd      	adds	r5, r1, #3
 800cf88:	f025 0503 	bic.w	r5, r5, #3
 800cf8c:	3508      	adds	r5, #8
 800cf8e:	2d0c      	cmp	r5, #12
 800cf90:	bf38      	it	cc
 800cf92:	250c      	movcc	r5, #12
 800cf94:	2d00      	cmp	r5, #0
 800cf96:	4606      	mov	r6, r0
 800cf98:	db01      	blt.n	800cf9e <_malloc_r+0x1a>
 800cf9a:	42a9      	cmp	r1, r5
 800cf9c:	d903      	bls.n	800cfa6 <_malloc_r+0x22>
 800cf9e:	230c      	movs	r3, #12
 800cfa0:	6033      	str	r3, [r6, #0]
 800cfa2:	2000      	movs	r0, #0
 800cfa4:	bd70      	pop	{r4, r5, r6, pc}
 800cfa6:	f000 f87d 	bl	800d0a4 <__malloc_lock>
 800cfaa:	4a21      	ldr	r2, [pc, #132]	; (800d030 <_malloc_r+0xac>)
 800cfac:	6814      	ldr	r4, [r2, #0]
 800cfae:	4621      	mov	r1, r4
 800cfb0:	b991      	cbnz	r1, 800cfd8 <_malloc_r+0x54>
 800cfb2:	4c20      	ldr	r4, [pc, #128]	; (800d034 <_malloc_r+0xb0>)
 800cfb4:	6823      	ldr	r3, [r4, #0]
 800cfb6:	b91b      	cbnz	r3, 800cfc0 <_malloc_r+0x3c>
 800cfb8:	4630      	mov	r0, r6
 800cfba:	f000 f863 	bl	800d084 <_sbrk_r>
 800cfbe:	6020      	str	r0, [r4, #0]
 800cfc0:	4629      	mov	r1, r5
 800cfc2:	4630      	mov	r0, r6
 800cfc4:	f000 f85e 	bl	800d084 <_sbrk_r>
 800cfc8:	1c43      	adds	r3, r0, #1
 800cfca:	d124      	bne.n	800d016 <_malloc_r+0x92>
 800cfcc:	230c      	movs	r3, #12
 800cfce:	6033      	str	r3, [r6, #0]
 800cfd0:	4630      	mov	r0, r6
 800cfd2:	f000 f868 	bl	800d0a6 <__malloc_unlock>
 800cfd6:	e7e4      	b.n	800cfa2 <_malloc_r+0x1e>
 800cfd8:	680b      	ldr	r3, [r1, #0]
 800cfda:	1b5b      	subs	r3, r3, r5
 800cfdc:	d418      	bmi.n	800d010 <_malloc_r+0x8c>
 800cfde:	2b0b      	cmp	r3, #11
 800cfe0:	d90f      	bls.n	800d002 <_malloc_r+0x7e>
 800cfe2:	600b      	str	r3, [r1, #0]
 800cfe4:	50cd      	str	r5, [r1, r3]
 800cfe6:	18cc      	adds	r4, r1, r3
 800cfe8:	4630      	mov	r0, r6
 800cfea:	f000 f85c 	bl	800d0a6 <__malloc_unlock>
 800cfee:	f104 000b 	add.w	r0, r4, #11
 800cff2:	1d23      	adds	r3, r4, #4
 800cff4:	f020 0007 	bic.w	r0, r0, #7
 800cff8:	1ac3      	subs	r3, r0, r3
 800cffa:	d0d3      	beq.n	800cfa4 <_malloc_r+0x20>
 800cffc:	425a      	negs	r2, r3
 800cffe:	50e2      	str	r2, [r4, r3]
 800d000:	e7d0      	b.n	800cfa4 <_malloc_r+0x20>
 800d002:	428c      	cmp	r4, r1
 800d004:	684b      	ldr	r3, [r1, #4]
 800d006:	bf16      	itet	ne
 800d008:	6063      	strne	r3, [r4, #4]
 800d00a:	6013      	streq	r3, [r2, #0]
 800d00c:	460c      	movne	r4, r1
 800d00e:	e7eb      	b.n	800cfe8 <_malloc_r+0x64>
 800d010:	460c      	mov	r4, r1
 800d012:	6849      	ldr	r1, [r1, #4]
 800d014:	e7cc      	b.n	800cfb0 <_malloc_r+0x2c>
 800d016:	1cc4      	adds	r4, r0, #3
 800d018:	f024 0403 	bic.w	r4, r4, #3
 800d01c:	42a0      	cmp	r0, r4
 800d01e:	d005      	beq.n	800d02c <_malloc_r+0xa8>
 800d020:	1a21      	subs	r1, r4, r0
 800d022:	4630      	mov	r0, r6
 800d024:	f000 f82e 	bl	800d084 <_sbrk_r>
 800d028:	3001      	adds	r0, #1
 800d02a:	d0cf      	beq.n	800cfcc <_malloc_r+0x48>
 800d02c:	6025      	str	r5, [r4, #0]
 800d02e:	e7db      	b.n	800cfe8 <_malloc_r+0x64>
 800d030:	2001922c 	.word	0x2001922c
 800d034:	20019230 	.word	0x20019230

0800d038 <_realloc_r>:
 800d038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d03a:	4607      	mov	r7, r0
 800d03c:	4614      	mov	r4, r2
 800d03e:	460e      	mov	r6, r1
 800d040:	b921      	cbnz	r1, 800d04c <_realloc_r+0x14>
 800d042:	4611      	mov	r1, r2
 800d044:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d048:	f7ff bf9c 	b.w	800cf84 <_malloc_r>
 800d04c:	b922      	cbnz	r2, 800d058 <_realloc_r+0x20>
 800d04e:	f7ff ff4b 	bl	800cee8 <_free_r>
 800d052:	4625      	mov	r5, r4
 800d054:	4628      	mov	r0, r5
 800d056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d058:	f000 f826 	bl	800d0a8 <_malloc_usable_size_r>
 800d05c:	42a0      	cmp	r0, r4
 800d05e:	d20f      	bcs.n	800d080 <_realloc_r+0x48>
 800d060:	4621      	mov	r1, r4
 800d062:	4638      	mov	r0, r7
 800d064:	f7ff ff8e 	bl	800cf84 <_malloc_r>
 800d068:	4605      	mov	r5, r0
 800d06a:	2800      	cmp	r0, #0
 800d06c:	d0f2      	beq.n	800d054 <_realloc_r+0x1c>
 800d06e:	4631      	mov	r1, r6
 800d070:	4622      	mov	r2, r4
 800d072:	f7ff fc13 	bl	800c89c <memcpy>
 800d076:	4631      	mov	r1, r6
 800d078:	4638      	mov	r0, r7
 800d07a:	f7ff ff35 	bl	800cee8 <_free_r>
 800d07e:	e7e9      	b.n	800d054 <_realloc_r+0x1c>
 800d080:	4635      	mov	r5, r6
 800d082:	e7e7      	b.n	800d054 <_realloc_r+0x1c>

0800d084 <_sbrk_r>:
 800d084:	b538      	push	{r3, r4, r5, lr}
 800d086:	4c06      	ldr	r4, [pc, #24]	; (800d0a0 <_sbrk_r+0x1c>)
 800d088:	2300      	movs	r3, #0
 800d08a:	4605      	mov	r5, r0
 800d08c:	4608      	mov	r0, r1
 800d08e:	6023      	str	r3, [r4, #0]
 800d090:	f7f8 fcb8 	bl	8005a04 <_sbrk>
 800d094:	1c43      	adds	r3, r0, #1
 800d096:	d102      	bne.n	800d09e <_sbrk_r+0x1a>
 800d098:	6823      	ldr	r3, [r4, #0]
 800d09a:	b103      	cbz	r3, 800d09e <_sbrk_r+0x1a>
 800d09c:	602b      	str	r3, [r5, #0]
 800d09e:	bd38      	pop	{r3, r4, r5, pc}
 800d0a0:	20019708 	.word	0x20019708

0800d0a4 <__malloc_lock>:
 800d0a4:	4770      	bx	lr

0800d0a6 <__malloc_unlock>:
 800d0a6:	4770      	bx	lr

0800d0a8 <_malloc_usable_size_r>:
 800d0a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d0ac:	1f18      	subs	r0, r3, #4
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	bfbc      	itt	lt
 800d0b2:	580b      	ldrlt	r3, [r1, r0]
 800d0b4:	18c0      	addlt	r0, r0, r3
 800d0b6:	4770      	bx	lr

0800d0b8 <ceil>:
 800d0b8:	ec51 0b10 	vmov	r0, r1, d0
 800d0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0c0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800d0c4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800d0c8:	2e13      	cmp	r6, #19
 800d0ca:	460c      	mov	r4, r1
 800d0cc:	ee10 5a10 	vmov	r5, s0
 800d0d0:	4680      	mov	r8, r0
 800d0d2:	dc30      	bgt.n	800d136 <ceil+0x7e>
 800d0d4:	2e00      	cmp	r6, #0
 800d0d6:	da12      	bge.n	800d0fe <ceil+0x46>
 800d0d8:	a333      	add	r3, pc, #204	; (adr r3, 800d1a8 <ceil+0xf0>)
 800d0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0de:	f7f3 f8f5 	bl	80002cc <__adddf3>
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	f7f3 fd37 	bl	8000b58 <__aeabi_dcmpgt>
 800d0ea:	b128      	cbz	r0, 800d0f8 <ceil+0x40>
 800d0ec:	2c00      	cmp	r4, #0
 800d0ee:	db55      	blt.n	800d19c <ceil+0xe4>
 800d0f0:	432c      	orrs	r4, r5
 800d0f2:	d057      	beq.n	800d1a4 <ceil+0xec>
 800d0f4:	4c2e      	ldr	r4, [pc, #184]	; (800d1b0 <ceil+0xf8>)
 800d0f6:	2500      	movs	r5, #0
 800d0f8:	4621      	mov	r1, r4
 800d0fa:	4628      	mov	r0, r5
 800d0fc:	e025      	b.n	800d14a <ceil+0x92>
 800d0fe:	4f2d      	ldr	r7, [pc, #180]	; (800d1b4 <ceil+0xfc>)
 800d100:	4137      	asrs	r7, r6
 800d102:	ea01 0307 	and.w	r3, r1, r7
 800d106:	4303      	orrs	r3, r0
 800d108:	d01f      	beq.n	800d14a <ceil+0x92>
 800d10a:	a327      	add	r3, pc, #156	; (adr r3, 800d1a8 <ceil+0xf0>)
 800d10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d110:	f7f3 f8dc 	bl	80002cc <__adddf3>
 800d114:	2200      	movs	r2, #0
 800d116:	2300      	movs	r3, #0
 800d118:	f7f3 fd1e 	bl	8000b58 <__aeabi_dcmpgt>
 800d11c:	2800      	cmp	r0, #0
 800d11e:	d0eb      	beq.n	800d0f8 <ceil+0x40>
 800d120:	2c00      	cmp	r4, #0
 800d122:	bfc2      	ittt	gt
 800d124:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 800d128:	fa43 f606 	asrgt.w	r6, r3, r6
 800d12c:	19a4      	addgt	r4, r4, r6
 800d12e:	ea24 0407 	bic.w	r4, r4, r7
 800d132:	2500      	movs	r5, #0
 800d134:	e7e0      	b.n	800d0f8 <ceil+0x40>
 800d136:	2e33      	cmp	r6, #51	; 0x33
 800d138:	dd0b      	ble.n	800d152 <ceil+0x9a>
 800d13a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d13e:	d104      	bne.n	800d14a <ceil+0x92>
 800d140:	ee10 2a10 	vmov	r2, s0
 800d144:	460b      	mov	r3, r1
 800d146:	f7f3 f8c1 	bl	80002cc <__adddf3>
 800d14a:	ec41 0b10 	vmov	d0, r0, r1
 800d14e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d152:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800d156:	f04f 33ff 	mov.w	r3, #4294967295
 800d15a:	fa23 f707 	lsr.w	r7, r3, r7
 800d15e:	4207      	tst	r7, r0
 800d160:	d0f3      	beq.n	800d14a <ceil+0x92>
 800d162:	a311      	add	r3, pc, #68	; (adr r3, 800d1a8 <ceil+0xf0>)
 800d164:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d168:	f7f3 f8b0 	bl	80002cc <__adddf3>
 800d16c:	2200      	movs	r2, #0
 800d16e:	2300      	movs	r3, #0
 800d170:	f7f3 fcf2 	bl	8000b58 <__aeabi_dcmpgt>
 800d174:	2800      	cmp	r0, #0
 800d176:	d0bf      	beq.n	800d0f8 <ceil+0x40>
 800d178:	2c00      	cmp	r4, #0
 800d17a:	dd02      	ble.n	800d182 <ceil+0xca>
 800d17c:	2e14      	cmp	r6, #20
 800d17e:	d103      	bne.n	800d188 <ceil+0xd0>
 800d180:	3401      	adds	r4, #1
 800d182:	ea25 0507 	bic.w	r5, r5, r7
 800d186:	e7b7      	b.n	800d0f8 <ceil+0x40>
 800d188:	2301      	movs	r3, #1
 800d18a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d18e:	fa03 f606 	lsl.w	r6, r3, r6
 800d192:	4435      	add	r5, r6
 800d194:	4545      	cmp	r5, r8
 800d196:	bf38      	it	cc
 800d198:	18e4      	addcc	r4, r4, r3
 800d19a:	e7f2      	b.n	800d182 <ceil+0xca>
 800d19c:	2500      	movs	r5, #0
 800d19e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800d1a2:	e7a9      	b.n	800d0f8 <ceil+0x40>
 800d1a4:	4625      	mov	r5, r4
 800d1a6:	e7a7      	b.n	800d0f8 <ceil+0x40>
 800d1a8:	8800759c 	.word	0x8800759c
 800d1ac:	7e37e43c 	.word	0x7e37e43c
 800d1b0:	3ff00000 	.word	0x3ff00000
 800d1b4:	000fffff 	.word	0x000fffff

0800d1b8 <cos>:
 800d1b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d1ba:	ec51 0b10 	vmov	r0, r1, d0
 800d1be:	4a1e      	ldr	r2, [pc, #120]	; (800d238 <cos+0x80>)
 800d1c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d1c4:	4293      	cmp	r3, r2
 800d1c6:	dc06      	bgt.n	800d1d6 <cos+0x1e>
 800d1c8:	ed9f 1b19 	vldr	d1, [pc, #100]	; 800d230 <cos+0x78>
 800d1cc:	f000 faf8 	bl	800d7c0 <__kernel_cos>
 800d1d0:	ec51 0b10 	vmov	r0, r1, d0
 800d1d4:	e007      	b.n	800d1e6 <cos+0x2e>
 800d1d6:	4a19      	ldr	r2, [pc, #100]	; (800d23c <cos+0x84>)
 800d1d8:	4293      	cmp	r3, r2
 800d1da:	dd09      	ble.n	800d1f0 <cos+0x38>
 800d1dc:	ee10 2a10 	vmov	r2, s0
 800d1e0:	460b      	mov	r3, r1
 800d1e2:	f7f3 f871 	bl	80002c8 <__aeabi_dsub>
 800d1e6:	ec41 0b10 	vmov	d0, r0, r1
 800d1ea:	b005      	add	sp, #20
 800d1ec:	f85d fb04 	ldr.w	pc, [sp], #4
 800d1f0:	4668      	mov	r0, sp
 800d1f2:	f000 f8f1 	bl	800d3d8 <__ieee754_rem_pio2>
 800d1f6:	f000 0003 	and.w	r0, r0, #3
 800d1fa:	2801      	cmp	r0, #1
 800d1fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d200:	ed9d 0b00 	vldr	d0, [sp]
 800d204:	d007      	beq.n	800d216 <cos+0x5e>
 800d206:	2802      	cmp	r0, #2
 800d208:	d00e      	beq.n	800d228 <cos+0x70>
 800d20a:	2800      	cmp	r0, #0
 800d20c:	d0de      	beq.n	800d1cc <cos+0x14>
 800d20e:	2001      	movs	r0, #1
 800d210:	f000 fede 	bl	800dfd0 <__kernel_sin>
 800d214:	e7dc      	b.n	800d1d0 <cos+0x18>
 800d216:	f000 fedb 	bl	800dfd0 <__kernel_sin>
 800d21a:	ec53 2b10 	vmov	r2, r3, d0
 800d21e:	ee10 0a10 	vmov	r0, s0
 800d222:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d226:	e7de      	b.n	800d1e6 <cos+0x2e>
 800d228:	f000 faca 	bl	800d7c0 <__kernel_cos>
 800d22c:	e7f5      	b.n	800d21a <cos+0x62>
 800d22e:	bf00      	nop
	...
 800d238:	3fe921fb 	.word	0x3fe921fb
 800d23c:	7fefffff 	.word	0x7fefffff

0800d240 <floor>:
 800d240:	ec51 0b10 	vmov	r0, r1, d0
 800d244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d248:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800d24c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800d250:	2e13      	cmp	r6, #19
 800d252:	460c      	mov	r4, r1
 800d254:	ee10 5a10 	vmov	r5, s0
 800d258:	4680      	mov	r8, r0
 800d25a:	dc34      	bgt.n	800d2c6 <floor+0x86>
 800d25c:	2e00      	cmp	r6, #0
 800d25e:	da16      	bge.n	800d28e <floor+0x4e>
 800d260:	a335      	add	r3, pc, #212	; (adr r3, 800d338 <floor+0xf8>)
 800d262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d266:	f7f3 f831 	bl	80002cc <__adddf3>
 800d26a:	2200      	movs	r2, #0
 800d26c:	2300      	movs	r3, #0
 800d26e:	f7f3 fc73 	bl	8000b58 <__aeabi_dcmpgt>
 800d272:	b148      	cbz	r0, 800d288 <floor+0x48>
 800d274:	2c00      	cmp	r4, #0
 800d276:	da59      	bge.n	800d32c <floor+0xec>
 800d278:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d27c:	4a30      	ldr	r2, [pc, #192]	; (800d340 <floor+0x100>)
 800d27e:	432b      	orrs	r3, r5
 800d280:	2500      	movs	r5, #0
 800d282:	42ab      	cmp	r3, r5
 800d284:	bf18      	it	ne
 800d286:	4614      	movne	r4, r2
 800d288:	4621      	mov	r1, r4
 800d28a:	4628      	mov	r0, r5
 800d28c:	e025      	b.n	800d2da <floor+0x9a>
 800d28e:	4f2d      	ldr	r7, [pc, #180]	; (800d344 <floor+0x104>)
 800d290:	4137      	asrs	r7, r6
 800d292:	ea01 0307 	and.w	r3, r1, r7
 800d296:	4303      	orrs	r3, r0
 800d298:	d01f      	beq.n	800d2da <floor+0x9a>
 800d29a:	a327      	add	r3, pc, #156	; (adr r3, 800d338 <floor+0xf8>)
 800d29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2a0:	f7f3 f814 	bl	80002cc <__adddf3>
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	f7f3 fc56 	bl	8000b58 <__aeabi_dcmpgt>
 800d2ac:	2800      	cmp	r0, #0
 800d2ae:	d0eb      	beq.n	800d288 <floor+0x48>
 800d2b0:	2c00      	cmp	r4, #0
 800d2b2:	bfbe      	ittt	lt
 800d2b4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d2b8:	fa43 f606 	asrlt.w	r6, r3, r6
 800d2bc:	19a4      	addlt	r4, r4, r6
 800d2be:	ea24 0407 	bic.w	r4, r4, r7
 800d2c2:	2500      	movs	r5, #0
 800d2c4:	e7e0      	b.n	800d288 <floor+0x48>
 800d2c6:	2e33      	cmp	r6, #51	; 0x33
 800d2c8:	dd0b      	ble.n	800d2e2 <floor+0xa2>
 800d2ca:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d2ce:	d104      	bne.n	800d2da <floor+0x9a>
 800d2d0:	ee10 2a10 	vmov	r2, s0
 800d2d4:	460b      	mov	r3, r1
 800d2d6:	f7f2 fff9 	bl	80002cc <__adddf3>
 800d2da:	ec41 0b10 	vmov	d0, r0, r1
 800d2de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2e2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800d2e6:	f04f 33ff 	mov.w	r3, #4294967295
 800d2ea:	fa23 f707 	lsr.w	r7, r3, r7
 800d2ee:	4207      	tst	r7, r0
 800d2f0:	d0f3      	beq.n	800d2da <floor+0x9a>
 800d2f2:	a311      	add	r3, pc, #68	; (adr r3, 800d338 <floor+0xf8>)
 800d2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2f8:	f7f2 ffe8 	bl	80002cc <__adddf3>
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	2300      	movs	r3, #0
 800d300:	f7f3 fc2a 	bl	8000b58 <__aeabi_dcmpgt>
 800d304:	2800      	cmp	r0, #0
 800d306:	d0bf      	beq.n	800d288 <floor+0x48>
 800d308:	2c00      	cmp	r4, #0
 800d30a:	da02      	bge.n	800d312 <floor+0xd2>
 800d30c:	2e14      	cmp	r6, #20
 800d30e:	d103      	bne.n	800d318 <floor+0xd8>
 800d310:	3401      	adds	r4, #1
 800d312:	ea25 0507 	bic.w	r5, r5, r7
 800d316:	e7b7      	b.n	800d288 <floor+0x48>
 800d318:	2301      	movs	r3, #1
 800d31a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d31e:	fa03 f606 	lsl.w	r6, r3, r6
 800d322:	4435      	add	r5, r6
 800d324:	4545      	cmp	r5, r8
 800d326:	bf38      	it	cc
 800d328:	18e4      	addcc	r4, r4, r3
 800d32a:	e7f2      	b.n	800d312 <floor+0xd2>
 800d32c:	2500      	movs	r5, #0
 800d32e:	462c      	mov	r4, r5
 800d330:	e7aa      	b.n	800d288 <floor+0x48>
 800d332:	bf00      	nop
 800d334:	f3af 8000 	nop.w
 800d338:	8800759c 	.word	0x8800759c
 800d33c:	7e37e43c 	.word	0x7e37e43c
 800d340:	bff00000 	.word	0xbff00000
 800d344:	000fffff 	.word	0x000fffff

0800d348 <sin>:
 800d348:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d34a:	ec51 0b10 	vmov	r0, r1, d0
 800d34e:	4a20      	ldr	r2, [pc, #128]	; (800d3d0 <sin+0x88>)
 800d350:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d354:	4293      	cmp	r3, r2
 800d356:	dc07      	bgt.n	800d368 <sin+0x20>
 800d358:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800d3c8 <sin+0x80>
 800d35c:	2000      	movs	r0, #0
 800d35e:	f000 fe37 	bl	800dfd0 <__kernel_sin>
 800d362:	ec51 0b10 	vmov	r0, r1, d0
 800d366:	e007      	b.n	800d378 <sin+0x30>
 800d368:	4a1a      	ldr	r2, [pc, #104]	; (800d3d4 <sin+0x8c>)
 800d36a:	4293      	cmp	r3, r2
 800d36c:	dd09      	ble.n	800d382 <sin+0x3a>
 800d36e:	ee10 2a10 	vmov	r2, s0
 800d372:	460b      	mov	r3, r1
 800d374:	f7f2 ffa8 	bl	80002c8 <__aeabi_dsub>
 800d378:	ec41 0b10 	vmov	d0, r0, r1
 800d37c:	b005      	add	sp, #20
 800d37e:	f85d fb04 	ldr.w	pc, [sp], #4
 800d382:	4668      	mov	r0, sp
 800d384:	f000 f828 	bl	800d3d8 <__ieee754_rem_pio2>
 800d388:	f000 0003 	and.w	r0, r0, #3
 800d38c:	2801      	cmp	r0, #1
 800d38e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d392:	ed9d 0b00 	vldr	d0, [sp]
 800d396:	d004      	beq.n	800d3a2 <sin+0x5a>
 800d398:	2802      	cmp	r0, #2
 800d39a:	d005      	beq.n	800d3a8 <sin+0x60>
 800d39c:	b970      	cbnz	r0, 800d3bc <sin+0x74>
 800d39e:	2001      	movs	r0, #1
 800d3a0:	e7dd      	b.n	800d35e <sin+0x16>
 800d3a2:	f000 fa0d 	bl	800d7c0 <__kernel_cos>
 800d3a6:	e7dc      	b.n	800d362 <sin+0x1a>
 800d3a8:	2001      	movs	r0, #1
 800d3aa:	f000 fe11 	bl	800dfd0 <__kernel_sin>
 800d3ae:	ec53 2b10 	vmov	r2, r3, d0
 800d3b2:	ee10 0a10 	vmov	r0, s0
 800d3b6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d3ba:	e7dd      	b.n	800d378 <sin+0x30>
 800d3bc:	f000 fa00 	bl	800d7c0 <__kernel_cos>
 800d3c0:	e7f5      	b.n	800d3ae <sin+0x66>
 800d3c2:	bf00      	nop
 800d3c4:	f3af 8000 	nop.w
	...
 800d3d0:	3fe921fb 	.word	0x3fe921fb
 800d3d4:	7fefffff 	.word	0x7fefffff

0800d3d8 <__ieee754_rem_pio2>:
 800d3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3dc:	ec57 6b10 	vmov	r6, r7, d0
 800d3e0:	4bc3      	ldr	r3, [pc, #780]	; (800d6f0 <__ieee754_rem_pio2+0x318>)
 800d3e2:	b08d      	sub	sp, #52	; 0x34
 800d3e4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800d3e8:	4598      	cmp	r8, r3
 800d3ea:	4604      	mov	r4, r0
 800d3ec:	9704      	str	r7, [sp, #16]
 800d3ee:	dc07      	bgt.n	800d400 <__ieee754_rem_pio2+0x28>
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	ed84 0b00 	vstr	d0, [r4]
 800d3f8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d3fc:	2500      	movs	r5, #0
 800d3fe:	e027      	b.n	800d450 <__ieee754_rem_pio2+0x78>
 800d400:	4bbc      	ldr	r3, [pc, #752]	; (800d6f4 <__ieee754_rem_pio2+0x31c>)
 800d402:	4598      	cmp	r8, r3
 800d404:	dc75      	bgt.n	800d4f2 <__ieee754_rem_pio2+0x11a>
 800d406:	9b04      	ldr	r3, [sp, #16]
 800d408:	4dbb      	ldr	r5, [pc, #748]	; (800d6f8 <__ieee754_rem_pio2+0x320>)
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	ee10 0a10 	vmov	r0, s0
 800d410:	a3a9      	add	r3, pc, #676	; (adr r3, 800d6b8 <__ieee754_rem_pio2+0x2e0>)
 800d412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d416:	4639      	mov	r1, r7
 800d418:	dd36      	ble.n	800d488 <__ieee754_rem_pio2+0xb0>
 800d41a:	f7f2 ff55 	bl	80002c8 <__aeabi_dsub>
 800d41e:	45a8      	cmp	r8, r5
 800d420:	4606      	mov	r6, r0
 800d422:	460f      	mov	r7, r1
 800d424:	d018      	beq.n	800d458 <__ieee754_rem_pio2+0x80>
 800d426:	a3a6      	add	r3, pc, #664	; (adr r3, 800d6c0 <__ieee754_rem_pio2+0x2e8>)
 800d428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d42c:	f7f2 ff4c 	bl	80002c8 <__aeabi_dsub>
 800d430:	4602      	mov	r2, r0
 800d432:	460b      	mov	r3, r1
 800d434:	e9c4 2300 	strd	r2, r3, [r4]
 800d438:	4630      	mov	r0, r6
 800d43a:	4639      	mov	r1, r7
 800d43c:	f7f2 ff44 	bl	80002c8 <__aeabi_dsub>
 800d440:	a39f      	add	r3, pc, #636	; (adr r3, 800d6c0 <__ieee754_rem_pio2+0x2e8>)
 800d442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d446:	f7f2 ff3f 	bl	80002c8 <__aeabi_dsub>
 800d44a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d44e:	2501      	movs	r5, #1
 800d450:	4628      	mov	r0, r5
 800d452:	b00d      	add	sp, #52	; 0x34
 800d454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d458:	a39b      	add	r3, pc, #620	; (adr r3, 800d6c8 <__ieee754_rem_pio2+0x2f0>)
 800d45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d45e:	f7f2 ff33 	bl	80002c8 <__aeabi_dsub>
 800d462:	a39b      	add	r3, pc, #620	; (adr r3, 800d6d0 <__ieee754_rem_pio2+0x2f8>)
 800d464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d468:	4606      	mov	r6, r0
 800d46a:	460f      	mov	r7, r1
 800d46c:	f7f2 ff2c 	bl	80002c8 <__aeabi_dsub>
 800d470:	4602      	mov	r2, r0
 800d472:	460b      	mov	r3, r1
 800d474:	e9c4 2300 	strd	r2, r3, [r4]
 800d478:	4630      	mov	r0, r6
 800d47a:	4639      	mov	r1, r7
 800d47c:	f7f2 ff24 	bl	80002c8 <__aeabi_dsub>
 800d480:	a393      	add	r3, pc, #588	; (adr r3, 800d6d0 <__ieee754_rem_pio2+0x2f8>)
 800d482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d486:	e7de      	b.n	800d446 <__ieee754_rem_pio2+0x6e>
 800d488:	f7f2 ff20 	bl	80002cc <__adddf3>
 800d48c:	45a8      	cmp	r8, r5
 800d48e:	4606      	mov	r6, r0
 800d490:	460f      	mov	r7, r1
 800d492:	d016      	beq.n	800d4c2 <__ieee754_rem_pio2+0xea>
 800d494:	a38a      	add	r3, pc, #552	; (adr r3, 800d6c0 <__ieee754_rem_pio2+0x2e8>)
 800d496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d49a:	f7f2 ff17 	bl	80002cc <__adddf3>
 800d49e:	4602      	mov	r2, r0
 800d4a0:	460b      	mov	r3, r1
 800d4a2:	e9c4 2300 	strd	r2, r3, [r4]
 800d4a6:	4630      	mov	r0, r6
 800d4a8:	4639      	mov	r1, r7
 800d4aa:	f7f2 ff0d 	bl	80002c8 <__aeabi_dsub>
 800d4ae:	a384      	add	r3, pc, #528	; (adr r3, 800d6c0 <__ieee754_rem_pio2+0x2e8>)
 800d4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4b4:	f7f2 ff0a 	bl	80002cc <__adddf3>
 800d4b8:	f04f 35ff 	mov.w	r5, #4294967295
 800d4bc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d4c0:	e7c6      	b.n	800d450 <__ieee754_rem_pio2+0x78>
 800d4c2:	a381      	add	r3, pc, #516	; (adr r3, 800d6c8 <__ieee754_rem_pio2+0x2f0>)
 800d4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4c8:	f7f2 ff00 	bl	80002cc <__adddf3>
 800d4cc:	a380      	add	r3, pc, #512	; (adr r3, 800d6d0 <__ieee754_rem_pio2+0x2f8>)
 800d4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4d2:	4606      	mov	r6, r0
 800d4d4:	460f      	mov	r7, r1
 800d4d6:	f7f2 fef9 	bl	80002cc <__adddf3>
 800d4da:	4602      	mov	r2, r0
 800d4dc:	460b      	mov	r3, r1
 800d4de:	e9c4 2300 	strd	r2, r3, [r4]
 800d4e2:	4630      	mov	r0, r6
 800d4e4:	4639      	mov	r1, r7
 800d4e6:	f7f2 feef 	bl	80002c8 <__aeabi_dsub>
 800d4ea:	a379      	add	r3, pc, #484	; (adr r3, 800d6d0 <__ieee754_rem_pio2+0x2f8>)
 800d4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4f0:	e7e0      	b.n	800d4b4 <__ieee754_rem_pio2+0xdc>
 800d4f2:	4b82      	ldr	r3, [pc, #520]	; (800d6fc <__ieee754_rem_pio2+0x324>)
 800d4f4:	4598      	cmp	r8, r3
 800d4f6:	f300 80d0 	bgt.w	800d69a <__ieee754_rem_pio2+0x2c2>
 800d4fa:	f000 fe23 	bl	800e144 <fabs>
 800d4fe:	ec57 6b10 	vmov	r6, r7, d0
 800d502:	ee10 0a10 	vmov	r0, s0
 800d506:	a374      	add	r3, pc, #464	; (adr r3, 800d6d8 <__ieee754_rem_pio2+0x300>)
 800d508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d50c:	4639      	mov	r1, r7
 800d50e:	f7f3 f893 	bl	8000638 <__aeabi_dmul>
 800d512:	2200      	movs	r2, #0
 800d514:	4b7a      	ldr	r3, [pc, #488]	; (800d700 <__ieee754_rem_pio2+0x328>)
 800d516:	f7f2 fed9 	bl	80002cc <__adddf3>
 800d51a:	f7f3 fb27 	bl	8000b6c <__aeabi_d2iz>
 800d51e:	4605      	mov	r5, r0
 800d520:	f7f3 f820 	bl	8000564 <__aeabi_i2d>
 800d524:	a364      	add	r3, pc, #400	; (adr r3, 800d6b8 <__ieee754_rem_pio2+0x2e0>)
 800d526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d52a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d52e:	f7f3 f883 	bl	8000638 <__aeabi_dmul>
 800d532:	4602      	mov	r2, r0
 800d534:	460b      	mov	r3, r1
 800d536:	4630      	mov	r0, r6
 800d538:	4639      	mov	r1, r7
 800d53a:	f7f2 fec5 	bl	80002c8 <__aeabi_dsub>
 800d53e:	a360      	add	r3, pc, #384	; (adr r3, 800d6c0 <__ieee754_rem_pio2+0x2e8>)
 800d540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d544:	4682      	mov	sl, r0
 800d546:	468b      	mov	fp, r1
 800d548:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d54c:	f7f3 f874 	bl	8000638 <__aeabi_dmul>
 800d550:	2d1f      	cmp	r5, #31
 800d552:	4606      	mov	r6, r0
 800d554:	460f      	mov	r7, r1
 800d556:	dc0c      	bgt.n	800d572 <__ieee754_rem_pio2+0x19a>
 800d558:	1e6a      	subs	r2, r5, #1
 800d55a:	4b6a      	ldr	r3, [pc, #424]	; (800d704 <__ieee754_rem_pio2+0x32c>)
 800d55c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d560:	4543      	cmp	r3, r8
 800d562:	d006      	beq.n	800d572 <__ieee754_rem_pio2+0x19a>
 800d564:	4632      	mov	r2, r6
 800d566:	463b      	mov	r3, r7
 800d568:	4650      	mov	r0, sl
 800d56a:	4659      	mov	r1, fp
 800d56c:	f7f2 feac 	bl	80002c8 <__aeabi_dsub>
 800d570:	e00e      	b.n	800d590 <__ieee754_rem_pio2+0x1b8>
 800d572:	4632      	mov	r2, r6
 800d574:	463b      	mov	r3, r7
 800d576:	4650      	mov	r0, sl
 800d578:	4659      	mov	r1, fp
 800d57a:	f7f2 fea5 	bl	80002c8 <__aeabi_dsub>
 800d57e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d582:	9305      	str	r3, [sp, #20]
 800d584:	9a05      	ldr	r2, [sp, #20]
 800d586:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d58a:	1ad3      	subs	r3, r2, r3
 800d58c:	2b10      	cmp	r3, #16
 800d58e:	dc02      	bgt.n	800d596 <__ieee754_rem_pio2+0x1be>
 800d590:	e9c4 0100 	strd	r0, r1, [r4]
 800d594:	e039      	b.n	800d60a <__ieee754_rem_pio2+0x232>
 800d596:	a34c      	add	r3, pc, #304	; (adr r3, 800d6c8 <__ieee754_rem_pio2+0x2f0>)
 800d598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d59c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d5a0:	f7f3 f84a 	bl	8000638 <__aeabi_dmul>
 800d5a4:	4606      	mov	r6, r0
 800d5a6:	460f      	mov	r7, r1
 800d5a8:	4602      	mov	r2, r0
 800d5aa:	460b      	mov	r3, r1
 800d5ac:	4650      	mov	r0, sl
 800d5ae:	4659      	mov	r1, fp
 800d5b0:	f7f2 fe8a 	bl	80002c8 <__aeabi_dsub>
 800d5b4:	4602      	mov	r2, r0
 800d5b6:	460b      	mov	r3, r1
 800d5b8:	4680      	mov	r8, r0
 800d5ba:	4689      	mov	r9, r1
 800d5bc:	4650      	mov	r0, sl
 800d5be:	4659      	mov	r1, fp
 800d5c0:	f7f2 fe82 	bl	80002c8 <__aeabi_dsub>
 800d5c4:	4632      	mov	r2, r6
 800d5c6:	463b      	mov	r3, r7
 800d5c8:	f7f2 fe7e 	bl	80002c8 <__aeabi_dsub>
 800d5cc:	a340      	add	r3, pc, #256	; (adr r3, 800d6d0 <__ieee754_rem_pio2+0x2f8>)
 800d5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5d2:	4606      	mov	r6, r0
 800d5d4:	460f      	mov	r7, r1
 800d5d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d5da:	f7f3 f82d 	bl	8000638 <__aeabi_dmul>
 800d5de:	4632      	mov	r2, r6
 800d5e0:	463b      	mov	r3, r7
 800d5e2:	f7f2 fe71 	bl	80002c8 <__aeabi_dsub>
 800d5e6:	4602      	mov	r2, r0
 800d5e8:	460b      	mov	r3, r1
 800d5ea:	4606      	mov	r6, r0
 800d5ec:	460f      	mov	r7, r1
 800d5ee:	4640      	mov	r0, r8
 800d5f0:	4649      	mov	r1, r9
 800d5f2:	f7f2 fe69 	bl	80002c8 <__aeabi_dsub>
 800d5f6:	9a05      	ldr	r2, [sp, #20]
 800d5f8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d5fc:	1ad3      	subs	r3, r2, r3
 800d5fe:	2b31      	cmp	r3, #49	; 0x31
 800d600:	dc20      	bgt.n	800d644 <__ieee754_rem_pio2+0x26c>
 800d602:	e9c4 0100 	strd	r0, r1, [r4]
 800d606:	46c2      	mov	sl, r8
 800d608:	46cb      	mov	fp, r9
 800d60a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d60e:	4650      	mov	r0, sl
 800d610:	4642      	mov	r2, r8
 800d612:	464b      	mov	r3, r9
 800d614:	4659      	mov	r1, fp
 800d616:	f7f2 fe57 	bl	80002c8 <__aeabi_dsub>
 800d61a:	463b      	mov	r3, r7
 800d61c:	4632      	mov	r2, r6
 800d61e:	f7f2 fe53 	bl	80002c8 <__aeabi_dsub>
 800d622:	9b04      	ldr	r3, [sp, #16]
 800d624:	2b00      	cmp	r3, #0
 800d626:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d62a:	f6bf af11 	bge.w	800d450 <__ieee754_rem_pio2+0x78>
 800d62e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d632:	6063      	str	r3, [r4, #4]
 800d634:	f8c4 8000 	str.w	r8, [r4]
 800d638:	60a0      	str	r0, [r4, #8]
 800d63a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d63e:	60e3      	str	r3, [r4, #12]
 800d640:	426d      	negs	r5, r5
 800d642:	e705      	b.n	800d450 <__ieee754_rem_pio2+0x78>
 800d644:	a326      	add	r3, pc, #152	; (adr r3, 800d6e0 <__ieee754_rem_pio2+0x308>)
 800d646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d64a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d64e:	f7f2 fff3 	bl	8000638 <__aeabi_dmul>
 800d652:	4606      	mov	r6, r0
 800d654:	460f      	mov	r7, r1
 800d656:	4602      	mov	r2, r0
 800d658:	460b      	mov	r3, r1
 800d65a:	4640      	mov	r0, r8
 800d65c:	4649      	mov	r1, r9
 800d65e:	f7f2 fe33 	bl	80002c8 <__aeabi_dsub>
 800d662:	4602      	mov	r2, r0
 800d664:	460b      	mov	r3, r1
 800d666:	4682      	mov	sl, r0
 800d668:	468b      	mov	fp, r1
 800d66a:	4640      	mov	r0, r8
 800d66c:	4649      	mov	r1, r9
 800d66e:	f7f2 fe2b 	bl	80002c8 <__aeabi_dsub>
 800d672:	4632      	mov	r2, r6
 800d674:	463b      	mov	r3, r7
 800d676:	f7f2 fe27 	bl	80002c8 <__aeabi_dsub>
 800d67a:	a31b      	add	r3, pc, #108	; (adr r3, 800d6e8 <__ieee754_rem_pio2+0x310>)
 800d67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d680:	4606      	mov	r6, r0
 800d682:	460f      	mov	r7, r1
 800d684:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d688:	f7f2 ffd6 	bl	8000638 <__aeabi_dmul>
 800d68c:	4632      	mov	r2, r6
 800d68e:	463b      	mov	r3, r7
 800d690:	f7f2 fe1a 	bl	80002c8 <__aeabi_dsub>
 800d694:	4606      	mov	r6, r0
 800d696:	460f      	mov	r7, r1
 800d698:	e764      	b.n	800d564 <__ieee754_rem_pio2+0x18c>
 800d69a:	4b1b      	ldr	r3, [pc, #108]	; (800d708 <__ieee754_rem_pio2+0x330>)
 800d69c:	4598      	cmp	r8, r3
 800d69e:	dd35      	ble.n	800d70c <__ieee754_rem_pio2+0x334>
 800d6a0:	ee10 2a10 	vmov	r2, s0
 800d6a4:	463b      	mov	r3, r7
 800d6a6:	4630      	mov	r0, r6
 800d6a8:	4639      	mov	r1, r7
 800d6aa:	f7f2 fe0d 	bl	80002c8 <__aeabi_dsub>
 800d6ae:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d6b2:	e9c4 0100 	strd	r0, r1, [r4]
 800d6b6:	e6a1      	b.n	800d3fc <__ieee754_rem_pio2+0x24>
 800d6b8:	54400000 	.word	0x54400000
 800d6bc:	3ff921fb 	.word	0x3ff921fb
 800d6c0:	1a626331 	.word	0x1a626331
 800d6c4:	3dd0b461 	.word	0x3dd0b461
 800d6c8:	1a600000 	.word	0x1a600000
 800d6cc:	3dd0b461 	.word	0x3dd0b461
 800d6d0:	2e037073 	.word	0x2e037073
 800d6d4:	3ba3198a 	.word	0x3ba3198a
 800d6d8:	6dc9c883 	.word	0x6dc9c883
 800d6dc:	3fe45f30 	.word	0x3fe45f30
 800d6e0:	2e000000 	.word	0x2e000000
 800d6e4:	3ba3198a 	.word	0x3ba3198a
 800d6e8:	252049c1 	.word	0x252049c1
 800d6ec:	397b839a 	.word	0x397b839a
 800d6f0:	3fe921fb 	.word	0x3fe921fb
 800d6f4:	4002d97b 	.word	0x4002d97b
 800d6f8:	3ff921fb 	.word	0x3ff921fb
 800d6fc:	413921fb 	.word	0x413921fb
 800d700:	3fe00000 	.word	0x3fe00000
 800d704:	0801039c 	.word	0x0801039c
 800d708:	7fefffff 	.word	0x7fefffff
 800d70c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800d710:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800d714:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800d718:	4630      	mov	r0, r6
 800d71a:	460f      	mov	r7, r1
 800d71c:	f7f3 fa26 	bl	8000b6c <__aeabi_d2iz>
 800d720:	f7f2 ff20 	bl	8000564 <__aeabi_i2d>
 800d724:	4602      	mov	r2, r0
 800d726:	460b      	mov	r3, r1
 800d728:	4630      	mov	r0, r6
 800d72a:	4639      	mov	r1, r7
 800d72c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d730:	f7f2 fdca 	bl	80002c8 <__aeabi_dsub>
 800d734:	2200      	movs	r2, #0
 800d736:	4b1f      	ldr	r3, [pc, #124]	; (800d7b4 <__ieee754_rem_pio2+0x3dc>)
 800d738:	f7f2 ff7e 	bl	8000638 <__aeabi_dmul>
 800d73c:	460f      	mov	r7, r1
 800d73e:	4606      	mov	r6, r0
 800d740:	f7f3 fa14 	bl	8000b6c <__aeabi_d2iz>
 800d744:	f7f2 ff0e 	bl	8000564 <__aeabi_i2d>
 800d748:	4602      	mov	r2, r0
 800d74a:	460b      	mov	r3, r1
 800d74c:	4630      	mov	r0, r6
 800d74e:	4639      	mov	r1, r7
 800d750:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d754:	f7f2 fdb8 	bl	80002c8 <__aeabi_dsub>
 800d758:	2200      	movs	r2, #0
 800d75a:	4b16      	ldr	r3, [pc, #88]	; (800d7b4 <__ieee754_rem_pio2+0x3dc>)
 800d75c:	f7f2 ff6c 	bl	8000638 <__aeabi_dmul>
 800d760:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d764:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800d768:	f04f 0803 	mov.w	r8, #3
 800d76c:	2600      	movs	r6, #0
 800d76e:	2700      	movs	r7, #0
 800d770:	4632      	mov	r2, r6
 800d772:	463b      	mov	r3, r7
 800d774:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800d778:	f108 3aff 	add.w	sl, r8, #4294967295
 800d77c:	f7f3 f9c4 	bl	8000b08 <__aeabi_dcmpeq>
 800d780:	b9b0      	cbnz	r0, 800d7b0 <__ieee754_rem_pio2+0x3d8>
 800d782:	4b0d      	ldr	r3, [pc, #52]	; (800d7b8 <__ieee754_rem_pio2+0x3e0>)
 800d784:	9301      	str	r3, [sp, #4]
 800d786:	2302      	movs	r3, #2
 800d788:	9300      	str	r3, [sp, #0]
 800d78a:	462a      	mov	r2, r5
 800d78c:	4643      	mov	r3, r8
 800d78e:	4621      	mov	r1, r4
 800d790:	a806      	add	r0, sp, #24
 800d792:	f000 f8dd 	bl	800d950 <__kernel_rem_pio2>
 800d796:	9b04      	ldr	r3, [sp, #16]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	4605      	mov	r5, r0
 800d79c:	f6bf ae58 	bge.w	800d450 <__ieee754_rem_pio2+0x78>
 800d7a0:	6863      	ldr	r3, [r4, #4]
 800d7a2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d7a6:	6063      	str	r3, [r4, #4]
 800d7a8:	68e3      	ldr	r3, [r4, #12]
 800d7aa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d7ae:	e746      	b.n	800d63e <__ieee754_rem_pio2+0x266>
 800d7b0:	46d0      	mov	r8, sl
 800d7b2:	e7dd      	b.n	800d770 <__ieee754_rem_pio2+0x398>
 800d7b4:	41700000 	.word	0x41700000
 800d7b8:	0801041c 	.word	0x0801041c
 800d7bc:	00000000 	.word	0x00000000

0800d7c0 <__kernel_cos>:
 800d7c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7c4:	ec59 8b10 	vmov	r8, r9, d0
 800d7c8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800d7cc:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800d7d0:	ed2d 8b02 	vpush	{d8}
 800d7d4:	eeb0 8a41 	vmov.f32	s16, s2
 800d7d8:	eef0 8a61 	vmov.f32	s17, s3
 800d7dc:	da07      	bge.n	800d7ee <__kernel_cos+0x2e>
 800d7de:	ee10 0a10 	vmov	r0, s0
 800d7e2:	4649      	mov	r1, r9
 800d7e4:	f7f3 f9c2 	bl	8000b6c <__aeabi_d2iz>
 800d7e8:	2800      	cmp	r0, #0
 800d7ea:	f000 8089 	beq.w	800d900 <__kernel_cos+0x140>
 800d7ee:	4642      	mov	r2, r8
 800d7f0:	464b      	mov	r3, r9
 800d7f2:	4640      	mov	r0, r8
 800d7f4:	4649      	mov	r1, r9
 800d7f6:	f7f2 ff1f 	bl	8000638 <__aeabi_dmul>
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	4b4e      	ldr	r3, [pc, #312]	; (800d938 <__kernel_cos+0x178>)
 800d7fe:	4604      	mov	r4, r0
 800d800:	460d      	mov	r5, r1
 800d802:	f7f2 ff19 	bl	8000638 <__aeabi_dmul>
 800d806:	a340      	add	r3, pc, #256	; (adr r3, 800d908 <__kernel_cos+0x148>)
 800d808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d80c:	4682      	mov	sl, r0
 800d80e:	468b      	mov	fp, r1
 800d810:	4620      	mov	r0, r4
 800d812:	4629      	mov	r1, r5
 800d814:	f7f2 ff10 	bl	8000638 <__aeabi_dmul>
 800d818:	a33d      	add	r3, pc, #244	; (adr r3, 800d910 <__kernel_cos+0x150>)
 800d81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d81e:	f7f2 fd55 	bl	80002cc <__adddf3>
 800d822:	4622      	mov	r2, r4
 800d824:	462b      	mov	r3, r5
 800d826:	f7f2 ff07 	bl	8000638 <__aeabi_dmul>
 800d82a:	a33b      	add	r3, pc, #236	; (adr r3, 800d918 <__kernel_cos+0x158>)
 800d82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d830:	f7f2 fd4a 	bl	80002c8 <__aeabi_dsub>
 800d834:	4622      	mov	r2, r4
 800d836:	462b      	mov	r3, r5
 800d838:	f7f2 fefe 	bl	8000638 <__aeabi_dmul>
 800d83c:	a338      	add	r3, pc, #224	; (adr r3, 800d920 <__kernel_cos+0x160>)
 800d83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d842:	f7f2 fd43 	bl	80002cc <__adddf3>
 800d846:	4622      	mov	r2, r4
 800d848:	462b      	mov	r3, r5
 800d84a:	f7f2 fef5 	bl	8000638 <__aeabi_dmul>
 800d84e:	a336      	add	r3, pc, #216	; (adr r3, 800d928 <__kernel_cos+0x168>)
 800d850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d854:	f7f2 fd38 	bl	80002c8 <__aeabi_dsub>
 800d858:	4622      	mov	r2, r4
 800d85a:	462b      	mov	r3, r5
 800d85c:	f7f2 feec 	bl	8000638 <__aeabi_dmul>
 800d860:	a333      	add	r3, pc, #204	; (adr r3, 800d930 <__kernel_cos+0x170>)
 800d862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d866:	f7f2 fd31 	bl	80002cc <__adddf3>
 800d86a:	4622      	mov	r2, r4
 800d86c:	462b      	mov	r3, r5
 800d86e:	f7f2 fee3 	bl	8000638 <__aeabi_dmul>
 800d872:	4622      	mov	r2, r4
 800d874:	462b      	mov	r3, r5
 800d876:	f7f2 fedf 	bl	8000638 <__aeabi_dmul>
 800d87a:	ec53 2b18 	vmov	r2, r3, d8
 800d87e:	4604      	mov	r4, r0
 800d880:	460d      	mov	r5, r1
 800d882:	4640      	mov	r0, r8
 800d884:	4649      	mov	r1, r9
 800d886:	f7f2 fed7 	bl	8000638 <__aeabi_dmul>
 800d88a:	460b      	mov	r3, r1
 800d88c:	4602      	mov	r2, r0
 800d88e:	4629      	mov	r1, r5
 800d890:	4620      	mov	r0, r4
 800d892:	f7f2 fd19 	bl	80002c8 <__aeabi_dsub>
 800d896:	4b29      	ldr	r3, [pc, #164]	; (800d93c <__kernel_cos+0x17c>)
 800d898:	429e      	cmp	r6, r3
 800d89a:	4680      	mov	r8, r0
 800d89c:	4689      	mov	r9, r1
 800d89e:	dc11      	bgt.n	800d8c4 <__kernel_cos+0x104>
 800d8a0:	4602      	mov	r2, r0
 800d8a2:	460b      	mov	r3, r1
 800d8a4:	4650      	mov	r0, sl
 800d8a6:	4659      	mov	r1, fp
 800d8a8:	f7f2 fd0e 	bl	80002c8 <__aeabi_dsub>
 800d8ac:	460b      	mov	r3, r1
 800d8ae:	4924      	ldr	r1, [pc, #144]	; (800d940 <__kernel_cos+0x180>)
 800d8b0:	4602      	mov	r2, r0
 800d8b2:	2000      	movs	r0, #0
 800d8b4:	f7f2 fd08 	bl	80002c8 <__aeabi_dsub>
 800d8b8:	ecbd 8b02 	vpop	{d8}
 800d8bc:	ec41 0b10 	vmov	d0, r0, r1
 800d8c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8c4:	4b1f      	ldr	r3, [pc, #124]	; (800d944 <__kernel_cos+0x184>)
 800d8c6:	491e      	ldr	r1, [pc, #120]	; (800d940 <__kernel_cos+0x180>)
 800d8c8:	429e      	cmp	r6, r3
 800d8ca:	bfcc      	ite	gt
 800d8cc:	4d1e      	ldrgt	r5, [pc, #120]	; (800d948 <__kernel_cos+0x188>)
 800d8ce:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800d8d2:	2400      	movs	r4, #0
 800d8d4:	4622      	mov	r2, r4
 800d8d6:	462b      	mov	r3, r5
 800d8d8:	2000      	movs	r0, #0
 800d8da:	f7f2 fcf5 	bl	80002c8 <__aeabi_dsub>
 800d8de:	4622      	mov	r2, r4
 800d8e0:	4606      	mov	r6, r0
 800d8e2:	460f      	mov	r7, r1
 800d8e4:	462b      	mov	r3, r5
 800d8e6:	4650      	mov	r0, sl
 800d8e8:	4659      	mov	r1, fp
 800d8ea:	f7f2 fced 	bl	80002c8 <__aeabi_dsub>
 800d8ee:	4642      	mov	r2, r8
 800d8f0:	464b      	mov	r3, r9
 800d8f2:	f7f2 fce9 	bl	80002c8 <__aeabi_dsub>
 800d8f6:	4602      	mov	r2, r0
 800d8f8:	460b      	mov	r3, r1
 800d8fa:	4630      	mov	r0, r6
 800d8fc:	4639      	mov	r1, r7
 800d8fe:	e7d9      	b.n	800d8b4 <__kernel_cos+0xf4>
 800d900:	2000      	movs	r0, #0
 800d902:	490f      	ldr	r1, [pc, #60]	; (800d940 <__kernel_cos+0x180>)
 800d904:	e7d8      	b.n	800d8b8 <__kernel_cos+0xf8>
 800d906:	bf00      	nop
 800d908:	be8838d4 	.word	0xbe8838d4
 800d90c:	bda8fae9 	.word	0xbda8fae9
 800d910:	bdb4b1c4 	.word	0xbdb4b1c4
 800d914:	3e21ee9e 	.word	0x3e21ee9e
 800d918:	809c52ad 	.word	0x809c52ad
 800d91c:	3e927e4f 	.word	0x3e927e4f
 800d920:	19cb1590 	.word	0x19cb1590
 800d924:	3efa01a0 	.word	0x3efa01a0
 800d928:	16c15177 	.word	0x16c15177
 800d92c:	3f56c16c 	.word	0x3f56c16c
 800d930:	5555554c 	.word	0x5555554c
 800d934:	3fa55555 	.word	0x3fa55555
 800d938:	3fe00000 	.word	0x3fe00000
 800d93c:	3fd33332 	.word	0x3fd33332
 800d940:	3ff00000 	.word	0x3ff00000
 800d944:	3fe90000 	.word	0x3fe90000
 800d948:	3fd20000 	.word	0x3fd20000
 800d94c:	00000000 	.word	0x00000000

0800d950 <__kernel_rem_pio2>:
 800d950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d954:	ed2d 8b02 	vpush	{d8}
 800d958:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800d95c:	1ed4      	subs	r4, r2, #3
 800d95e:	9308      	str	r3, [sp, #32]
 800d960:	9101      	str	r1, [sp, #4]
 800d962:	4bc5      	ldr	r3, [pc, #788]	; (800dc78 <__kernel_rem_pio2+0x328>)
 800d964:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800d966:	9009      	str	r0, [sp, #36]	; 0x24
 800d968:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d96c:	9304      	str	r3, [sp, #16]
 800d96e:	9b08      	ldr	r3, [sp, #32]
 800d970:	3b01      	subs	r3, #1
 800d972:	9307      	str	r3, [sp, #28]
 800d974:	2318      	movs	r3, #24
 800d976:	fb94 f4f3 	sdiv	r4, r4, r3
 800d97a:	f06f 0317 	mvn.w	r3, #23
 800d97e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800d982:	fb04 3303 	mla	r3, r4, r3, r3
 800d986:	eb03 0a02 	add.w	sl, r3, r2
 800d98a:	9b04      	ldr	r3, [sp, #16]
 800d98c:	9a07      	ldr	r2, [sp, #28]
 800d98e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800dc68 <__kernel_rem_pio2+0x318>
 800d992:	eb03 0802 	add.w	r8, r3, r2
 800d996:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800d998:	1aa7      	subs	r7, r4, r2
 800d99a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d99e:	ae22      	add	r6, sp, #136	; 0x88
 800d9a0:	2500      	movs	r5, #0
 800d9a2:	4545      	cmp	r5, r8
 800d9a4:	dd13      	ble.n	800d9ce <__kernel_rem_pio2+0x7e>
 800d9a6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800dc68 <__kernel_rem_pio2+0x318>
 800d9aa:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800d9ae:	2600      	movs	r6, #0
 800d9b0:	9b04      	ldr	r3, [sp, #16]
 800d9b2:	429e      	cmp	r6, r3
 800d9b4:	dc32      	bgt.n	800da1c <__kernel_rem_pio2+0xcc>
 800d9b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9b8:	9302      	str	r3, [sp, #8]
 800d9ba:	9b08      	ldr	r3, [sp, #32]
 800d9bc:	199d      	adds	r5, r3, r6
 800d9be:	ab22      	add	r3, sp, #136	; 0x88
 800d9c0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d9c4:	9306      	str	r3, [sp, #24]
 800d9c6:	ec59 8b18 	vmov	r8, r9, d8
 800d9ca:	2700      	movs	r7, #0
 800d9cc:	e01f      	b.n	800da0e <__kernel_rem_pio2+0xbe>
 800d9ce:	42ef      	cmn	r7, r5
 800d9d0:	d407      	bmi.n	800d9e2 <__kernel_rem_pio2+0x92>
 800d9d2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d9d6:	f7f2 fdc5 	bl	8000564 <__aeabi_i2d>
 800d9da:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d9de:	3501      	adds	r5, #1
 800d9e0:	e7df      	b.n	800d9a2 <__kernel_rem_pio2+0x52>
 800d9e2:	ec51 0b18 	vmov	r0, r1, d8
 800d9e6:	e7f8      	b.n	800d9da <__kernel_rem_pio2+0x8a>
 800d9e8:	9906      	ldr	r1, [sp, #24]
 800d9ea:	9d02      	ldr	r5, [sp, #8]
 800d9ec:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800d9f0:	9106      	str	r1, [sp, #24]
 800d9f2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800d9f6:	9502      	str	r5, [sp, #8]
 800d9f8:	f7f2 fe1e 	bl	8000638 <__aeabi_dmul>
 800d9fc:	4602      	mov	r2, r0
 800d9fe:	460b      	mov	r3, r1
 800da00:	4640      	mov	r0, r8
 800da02:	4649      	mov	r1, r9
 800da04:	f7f2 fc62 	bl	80002cc <__adddf3>
 800da08:	3701      	adds	r7, #1
 800da0a:	4680      	mov	r8, r0
 800da0c:	4689      	mov	r9, r1
 800da0e:	9b07      	ldr	r3, [sp, #28]
 800da10:	429f      	cmp	r7, r3
 800da12:	dde9      	ble.n	800d9e8 <__kernel_rem_pio2+0x98>
 800da14:	e8eb 8902 	strd	r8, r9, [fp], #8
 800da18:	3601      	adds	r6, #1
 800da1a:	e7c9      	b.n	800d9b0 <__kernel_rem_pio2+0x60>
 800da1c:	9b04      	ldr	r3, [sp, #16]
 800da1e:	aa0e      	add	r2, sp, #56	; 0x38
 800da20:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800da24:	930c      	str	r3, [sp, #48]	; 0x30
 800da26:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800da28:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800da2c:	9c04      	ldr	r4, [sp, #16]
 800da2e:	930b      	str	r3, [sp, #44]	; 0x2c
 800da30:	ab9a      	add	r3, sp, #616	; 0x268
 800da32:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800da36:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800da3a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800da3e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800da42:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800da46:	ab9a      	add	r3, sp, #616	; 0x268
 800da48:	445b      	add	r3, fp
 800da4a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800da4e:	2500      	movs	r5, #0
 800da50:	1b63      	subs	r3, r4, r5
 800da52:	2b00      	cmp	r3, #0
 800da54:	dc78      	bgt.n	800db48 <__kernel_rem_pio2+0x1f8>
 800da56:	4650      	mov	r0, sl
 800da58:	ec49 8b10 	vmov	d0, r8, r9
 800da5c:	f000 fb7c 	bl	800e158 <scalbn>
 800da60:	ec57 6b10 	vmov	r6, r7, d0
 800da64:	2200      	movs	r2, #0
 800da66:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800da6a:	ee10 0a10 	vmov	r0, s0
 800da6e:	4639      	mov	r1, r7
 800da70:	f7f2 fde2 	bl	8000638 <__aeabi_dmul>
 800da74:	ec41 0b10 	vmov	d0, r0, r1
 800da78:	f7ff fbe2 	bl	800d240 <floor>
 800da7c:	2200      	movs	r2, #0
 800da7e:	ec51 0b10 	vmov	r0, r1, d0
 800da82:	4b7e      	ldr	r3, [pc, #504]	; (800dc7c <__kernel_rem_pio2+0x32c>)
 800da84:	f7f2 fdd8 	bl	8000638 <__aeabi_dmul>
 800da88:	4602      	mov	r2, r0
 800da8a:	460b      	mov	r3, r1
 800da8c:	4630      	mov	r0, r6
 800da8e:	4639      	mov	r1, r7
 800da90:	f7f2 fc1a 	bl	80002c8 <__aeabi_dsub>
 800da94:	460f      	mov	r7, r1
 800da96:	4606      	mov	r6, r0
 800da98:	f7f3 f868 	bl	8000b6c <__aeabi_d2iz>
 800da9c:	9006      	str	r0, [sp, #24]
 800da9e:	f7f2 fd61 	bl	8000564 <__aeabi_i2d>
 800daa2:	4602      	mov	r2, r0
 800daa4:	460b      	mov	r3, r1
 800daa6:	4630      	mov	r0, r6
 800daa8:	4639      	mov	r1, r7
 800daaa:	f7f2 fc0d 	bl	80002c8 <__aeabi_dsub>
 800daae:	f1ba 0f00 	cmp.w	sl, #0
 800dab2:	4606      	mov	r6, r0
 800dab4:	460f      	mov	r7, r1
 800dab6:	dd6c      	ble.n	800db92 <__kernel_rem_pio2+0x242>
 800dab8:	1e62      	subs	r2, r4, #1
 800daba:	ab0e      	add	r3, sp, #56	; 0x38
 800dabc:	f1ca 0118 	rsb	r1, sl, #24
 800dac0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800dac4:	9d06      	ldr	r5, [sp, #24]
 800dac6:	fa40 f301 	asr.w	r3, r0, r1
 800daca:	441d      	add	r5, r3
 800dacc:	408b      	lsls	r3, r1
 800dace:	1ac0      	subs	r0, r0, r3
 800dad0:	ab0e      	add	r3, sp, #56	; 0x38
 800dad2:	9506      	str	r5, [sp, #24]
 800dad4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800dad8:	f1ca 0317 	rsb	r3, sl, #23
 800dadc:	fa40 f303 	asr.w	r3, r0, r3
 800dae0:	9302      	str	r3, [sp, #8]
 800dae2:	9b02      	ldr	r3, [sp, #8]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	dd62      	ble.n	800dbae <__kernel_rem_pio2+0x25e>
 800dae8:	9b06      	ldr	r3, [sp, #24]
 800daea:	2200      	movs	r2, #0
 800daec:	3301      	adds	r3, #1
 800daee:	9306      	str	r3, [sp, #24]
 800daf0:	4615      	mov	r5, r2
 800daf2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800daf6:	4294      	cmp	r4, r2
 800daf8:	f300 8095 	bgt.w	800dc26 <__kernel_rem_pio2+0x2d6>
 800dafc:	f1ba 0f00 	cmp.w	sl, #0
 800db00:	dd07      	ble.n	800db12 <__kernel_rem_pio2+0x1c2>
 800db02:	f1ba 0f01 	cmp.w	sl, #1
 800db06:	f000 80a2 	beq.w	800dc4e <__kernel_rem_pio2+0x2fe>
 800db0a:	f1ba 0f02 	cmp.w	sl, #2
 800db0e:	f000 80c1 	beq.w	800dc94 <__kernel_rem_pio2+0x344>
 800db12:	9b02      	ldr	r3, [sp, #8]
 800db14:	2b02      	cmp	r3, #2
 800db16:	d14a      	bne.n	800dbae <__kernel_rem_pio2+0x25e>
 800db18:	4632      	mov	r2, r6
 800db1a:	463b      	mov	r3, r7
 800db1c:	2000      	movs	r0, #0
 800db1e:	4958      	ldr	r1, [pc, #352]	; (800dc80 <__kernel_rem_pio2+0x330>)
 800db20:	f7f2 fbd2 	bl	80002c8 <__aeabi_dsub>
 800db24:	4606      	mov	r6, r0
 800db26:	460f      	mov	r7, r1
 800db28:	2d00      	cmp	r5, #0
 800db2a:	d040      	beq.n	800dbae <__kernel_rem_pio2+0x25e>
 800db2c:	4650      	mov	r0, sl
 800db2e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800dc70 <__kernel_rem_pio2+0x320>
 800db32:	f000 fb11 	bl	800e158 <scalbn>
 800db36:	4630      	mov	r0, r6
 800db38:	4639      	mov	r1, r7
 800db3a:	ec53 2b10 	vmov	r2, r3, d0
 800db3e:	f7f2 fbc3 	bl	80002c8 <__aeabi_dsub>
 800db42:	4606      	mov	r6, r0
 800db44:	460f      	mov	r7, r1
 800db46:	e032      	b.n	800dbae <__kernel_rem_pio2+0x25e>
 800db48:	2200      	movs	r2, #0
 800db4a:	4b4e      	ldr	r3, [pc, #312]	; (800dc84 <__kernel_rem_pio2+0x334>)
 800db4c:	4640      	mov	r0, r8
 800db4e:	4649      	mov	r1, r9
 800db50:	f7f2 fd72 	bl	8000638 <__aeabi_dmul>
 800db54:	f7f3 f80a 	bl	8000b6c <__aeabi_d2iz>
 800db58:	f7f2 fd04 	bl	8000564 <__aeabi_i2d>
 800db5c:	2200      	movs	r2, #0
 800db5e:	4b4a      	ldr	r3, [pc, #296]	; (800dc88 <__kernel_rem_pio2+0x338>)
 800db60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800db64:	f7f2 fd68 	bl	8000638 <__aeabi_dmul>
 800db68:	4602      	mov	r2, r0
 800db6a:	460b      	mov	r3, r1
 800db6c:	4640      	mov	r0, r8
 800db6e:	4649      	mov	r1, r9
 800db70:	f7f2 fbaa 	bl	80002c8 <__aeabi_dsub>
 800db74:	f7f2 fffa 	bl	8000b6c <__aeabi_d2iz>
 800db78:	ab0e      	add	r3, sp, #56	; 0x38
 800db7a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800db7e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800db82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db86:	f7f2 fba1 	bl	80002cc <__adddf3>
 800db8a:	3501      	adds	r5, #1
 800db8c:	4680      	mov	r8, r0
 800db8e:	4689      	mov	r9, r1
 800db90:	e75e      	b.n	800da50 <__kernel_rem_pio2+0x100>
 800db92:	d105      	bne.n	800dba0 <__kernel_rem_pio2+0x250>
 800db94:	1e63      	subs	r3, r4, #1
 800db96:	aa0e      	add	r2, sp, #56	; 0x38
 800db98:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800db9c:	15c3      	asrs	r3, r0, #23
 800db9e:	e79f      	b.n	800dae0 <__kernel_rem_pio2+0x190>
 800dba0:	2200      	movs	r2, #0
 800dba2:	4b3a      	ldr	r3, [pc, #232]	; (800dc8c <__kernel_rem_pio2+0x33c>)
 800dba4:	f7f2 ffce 	bl	8000b44 <__aeabi_dcmpge>
 800dba8:	2800      	cmp	r0, #0
 800dbaa:	d139      	bne.n	800dc20 <__kernel_rem_pio2+0x2d0>
 800dbac:	9002      	str	r0, [sp, #8]
 800dbae:	2200      	movs	r2, #0
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	4630      	mov	r0, r6
 800dbb4:	4639      	mov	r1, r7
 800dbb6:	f7f2 ffa7 	bl	8000b08 <__aeabi_dcmpeq>
 800dbba:	2800      	cmp	r0, #0
 800dbbc:	f000 80c7 	beq.w	800dd4e <__kernel_rem_pio2+0x3fe>
 800dbc0:	1e65      	subs	r5, r4, #1
 800dbc2:	462b      	mov	r3, r5
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	9904      	ldr	r1, [sp, #16]
 800dbc8:	428b      	cmp	r3, r1
 800dbca:	da6a      	bge.n	800dca2 <__kernel_rem_pio2+0x352>
 800dbcc:	2a00      	cmp	r2, #0
 800dbce:	f000 8088 	beq.w	800dce2 <__kernel_rem_pio2+0x392>
 800dbd2:	ab0e      	add	r3, sp, #56	; 0x38
 800dbd4:	f1aa 0a18 	sub.w	sl, sl, #24
 800dbd8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	f000 80b4 	beq.w	800dd4a <__kernel_rem_pio2+0x3fa>
 800dbe2:	4650      	mov	r0, sl
 800dbe4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800dc70 <__kernel_rem_pio2+0x320>
 800dbe8:	f000 fab6 	bl	800e158 <scalbn>
 800dbec:	00ec      	lsls	r4, r5, #3
 800dbee:	ab72      	add	r3, sp, #456	; 0x1c8
 800dbf0:	191e      	adds	r6, r3, r4
 800dbf2:	ec59 8b10 	vmov	r8, r9, d0
 800dbf6:	f106 0a08 	add.w	sl, r6, #8
 800dbfa:	462f      	mov	r7, r5
 800dbfc:	2f00      	cmp	r7, #0
 800dbfe:	f280 80df 	bge.w	800ddc0 <__kernel_rem_pio2+0x470>
 800dc02:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800dc68 <__kernel_rem_pio2+0x318>
 800dc06:	f04f 0a00 	mov.w	sl, #0
 800dc0a:	eba5 030a 	sub.w	r3, r5, sl
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	f2c0 810a 	blt.w	800de28 <__kernel_rem_pio2+0x4d8>
 800dc14:	f8df b078 	ldr.w	fp, [pc, #120]	; 800dc90 <__kernel_rem_pio2+0x340>
 800dc18:	ec59 8b18 	vmov	r8, r9, d8
 800dc1c:	2700      	movs	r7, #0
 800dc1e:	e0f5      	b.n	800de0c <__kernel_rem_pio2+0x4bc>
 800dc20:	2302      	movs	r3, #2
 800dc22:	9302      	str	r3, [sp, #8]
 800dc24:	e760      	b.n	800dae8 <__kernel_rem_pio2+0x198>
 800dc26:	ab0e      	add	r3, sp, #56	; 0x38
 800dc28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc2c:	b94d      	cbnz	r5, 800dc42 <__kernel_rem_pio2+0x2f2>
 800dc2e:	b12b      	cbz	r3, 800dc3c <__kernel_rem_pio2+0x2ec>
 800dc30:	a80e      	add	r0, sp, #56	; 0x38
 800dc32:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800dc36:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800dc3a:	2301      	movs	r3, #1
 800dc3c:	3201      	adds	r2, #1
 800dc3e:	461d      	mov	r5, r3
 800dc40:	e759      	b.n	800daf6 <__kernel_rem_pio2+0x1a6>
 800dc42:	a80e      	add	r0, sp, #56	; 0x38
 800dc44:	1acb      	subs	r3, r1, r3
 800dc46:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800dc4a:	462b      	mov	r3, r5
 800dc4c:	e7f6      	b.n	800dc3c <__kernel_rem_pio2+0x2ec>
 800dc4e:	1e62      	subs	r2, r4, #1
 800dc50:	ab0e      	add	r3, sp, #56	; 0x38
 800dc52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc56:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800dc5a:	a90e      	add	r1, sp, #56	; 0x38
 800dc5c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800dc60:	e757      	b.n	800db12 <__kernel_rem_pio2+0x1c2>
 800dc62:	bf00      	nop
 800dc64:	f3af 8000 	nop.w
	...
 800dc74:	3ff00000 	.word	0x3ff00000
 800dc78:	08010568 	.word	0x08010568
 800dc7c:	40200000 	.word	0x40200000
 800dc80:	3ff00000 	.word	0x3ff00000
 800dc84:	3e700000 	.word	0x3e700000
 800dc88:	41700000 	.word	0x41700000
 800dc8c:	3fe00000 	.word	0x3fe00000
 800dc90:	08010528 	.word	0x08010528
 800dc94:	1e62      	subs	r2, r4, #1
 800dc96:	ab0e      	add	r3, sp, #56	; 0x38
 800dc98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc9c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800dca0:	e7db      	b.n	800dc5a <__kernel_rem_pio2+0x30a>
 800dca2:	a90e      	add	r1, sp, #56	; 0x38
 800dca4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800dca8:	3b01      	subs	r3, #1
 800dcaa:	430a      	orrs	r2, r1
 800dcac:	e78b      	b.n	800dbc6 <__kernel_rem_pio2+0x276>
 800dcae:	3301      	adds	r3, #1
 800dcb0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800dcb4:	2900      	cmp	r1, #0
 800dcb6:	d0fa      	beq.n	800dcae <__kernel_rem_pio2+0x35e>
 800dcb8:	9a08      	ldr	r2, [sp, #32]
 800dcba:	4422      	add	r2, r4
 800dcbc:	00d2      	lsls	r2, r2, #3
 800dcbe:	a922      	add	r1, sp, #136	; 0x88
 800dcc0:	18e3      	adds	r3, r4, r3
 800dcc2:	9206      	str	r2, [sp, #24]
 800dcc4:	440a      	add	r2, r1
 800dcc6:	9302      	str	r3, [sp, #8]
 800dcc8:	f10b 0108 	add.w	r1, fp, #8
 800dccc:	f102 0308 	add.w	r3, r2, #8
 800dcd0:	1c66      	adds	r6, r4, #1
 800dcd2:	910a      	str	r1, [sp, #40]	; 0x28
 800dcd4:	2500      	movs	r5, #0
 800dcd6:	930d      	str	r3, [sp, #52]	; 0x34
 800dcd8:	9b02      	ldr	r3, [sp, #8]
 800dcda:	42b3      	cmp	r3, r6
 800dcdc:	da04      	bge.n	800dce8 <__kernel_rem_pio2+0x398>
 800dcde:	461c      	mov	r4, r3
 800dce0:	e6a6      	b.n	800da30 <__kernel_rem_pio2+0xe0>
 800dce2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dce4:	2301      	movs	r3, #1
 800dce6:	e7e3      	b.n	800dcb0 <__kernel_rem_pio2+0x360>
 800dce8:	9b06      	ldr	r3, [sp, #24]
 800dcea:	18ef      	adds	r7, r5, r3
 800dcec:	ab22      	add	r3, sp, #136	; 0x88
 800dcee:	441f      	add	r7, r3
 800dcf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dcf2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800dcf6:	f7f2 fc35 	bl	8000564 <__aeabi_i2d>
 800dcfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcfc:	461c      	mov	r4, r3
 800dcfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dd00:	e9c7 0100 	strd	r0, r1, [r7]
 800dd04:	eb03 0b05 	add.w	fp, r3, r5
 800dd08:	2700      	movs	r7, #0
 800dd0a:	f04f 0800 	mov.w	r8, #0
 800dd0e:	f04f 0900 	mov.w	r9, #0
 800dd12:	9b07      	ldr	r3, [sp, #28]
 800dd14:	429f      	cmp	r7, r3
 800dd16:	dd08      	ble.n	800dd2a <__kernel_rem_pio2+0x3da>
 800dd18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd1a:	aa72      	add	r2, sp, #456	; 0x1c8
 800dd1c:	18eb      	adds	r3, r5, r3
 800dd1e:	4413      	add	r3, r2
 800dd20:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800dd24:	3601      	adds	r6, #1
 800dd26:	3508      	adds	r5, #8
 800dd28:	e7d6      	b.n	800dcd8 <__kernel_rem_pio2+0x388>
 800dd2a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800dd2e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800dd32:	f7f2 fc81 	bl	8000638 <__aeabi_dmul>
 800dd36:	4602      	mov	r2, r0
 800dd38:	460b      	mov	r3, r1
 800dd3a:	4640      	mov	r0, r8
 800dd3c:	4649      	mov	r1, r9
 800dd3e:	f7f2 fac5 	bl	80002cc <__adddf3>
 800dd42:	3701      	adds	r7, #1
 800dd44:	4680      	mov	r8, r0
 800dd46:	4689      	mov	r9, r1
 800dd48:	e7e3      	b.n	800dd12 <__kernel_rem_pio2+0x3c2>
 800dd4a:	3d01      	subs	r5, #1
 800dd4c:	e741      	b.n	800dbd2 <__kernel_rem_pio2+0x282>
 800dd4e:	f1ca 0000 	rsb	r0, sl, #0
 800dd52:	ec47 6b10 	vmov	d0, r6, r7
 800dd56:	f000 f9ff 	bl	800e158 <scalbn>
 800dd5a:	ec57 6b10 	vmov	r6, r7, d0
 800dd5e:	2200      	movs	r2, #0
 800dd60:	4b99      	ldr	r3, [pc, #612]	; (800dfc8 <__kernel_rem_pio2+0x678>)
 800dd62:	ee10 0a10 	vmov	r0, s0
 800dd66:	4639      	mov	r1, r7
 800dd68:	f7f2 feec 	bl	8000b44 <__aeabi_dcmpge>
 800dd6c:	b1f8      	cbz	r0, 800ddae <__kernel_rem_pio2+0x45e>
 800dd6e:	2200      	movs	r2, #0
 800dd70:	4b96      	ldr	r3, [pc, #600]	; (800dfcc <__kernel_rem_pio2+0x67c>)
 800dd72:	4630      	mov	r0, r6
 800dd74:	4639      	mov	r1, r7
 800dd76:	f7f2 fc5f 	bl	8000638 <__aeabi_dmul>
 800dd7a:	f7f2 fef7 	bl	8000b6c <__aeabi_d2iz>
 800dd7e:	4680      	mov	r8, r0
 800dd80:	f7f2 fbf0 	bl	8000564 <__aeabi_i2d>
 800dd84:	2200      	movs	r2, #0
 800dd86:	4b90      	ldr	r3, [pc, #576]	; (800dfc8 <__kernel_rem_pio2+0x678>)
 800dd88:	f7f2 fc56 	bl	8000638 <__aeabi_dmul>
 800dd8c:	460b      	mov	r3, r1
 800dd8e:	4602      	mov	r2, r0
 800dd90:	4639      	mov	r1, r7
 800dd92:	4630      	mov	r0, r6
 800dd94:	f7f2 fa98 	bl	80002c8 <__aeabi_dsub>
 800dd98:	f7f2 fee8 	bl	8000b6c <__aeabi_d2iz>
 800dd9c:	1c65      	adds	r5, r4, #1
 800dd9e:	ab0e      	add	r3, sp, #56	; 0x38
 800dda0:	f10a 0a18 	add.w	sl, sl, #24
 800dda4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800dda8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800ddac:	e719      	b.n	800dbe2 <__kernel_rem_pio2+0x292>
 800ddae:	4630      	mov	r0, r6
 800ddb0:	4639      	mov	r1, r7
 800ddb2:	f7f2 fedb 	bl	8000b6c <__aeabi_d2iz>
 800ddb6:	ab0e      	add	r3, sp, #56	; 0x38
 800ddb8:	4625      	mov	r5, r4
 800ddba:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ddbe:	e710      	b.n	800dbe2 <__kernel_rem_pio2+0x292>
 800ddc0:	ab0e      	add	r3, sp, #56	; 0x38
 800ddc2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800ddc6:	f7f2 fbcd 	bl	8000564 <__aeabi_i2d>
 800ddca:	4642      	mov	r2, r8
 800ddcc:	464b      	mov	r3, r9
 800ddce:	f7f2 fc33 	bl	8000638 <__aeabi_dmul>
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800ddd8:	4b7c      	ldr	r3, [pc, #496]	; (800dfcc <__kernel_rem_pio2+0x67c>)
 800ddda:	4640      	mov	r0, r8
 800dddc:	4649      	mov	r1, r9
 800ddde:	f7f2 fc2b 	bl	8000638 <__aeabi_dmul>
 800dde2:	3f01      	subs	r7, #1
 800dde4:	4680      	mov	r8, r0
 800dde6:	4689      	mov	r9, r1
 800dde8:	e708      	b.n	800dbfc <__kernel_rem_pio2+0x2ac>
 800ddea:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800ddee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddf2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800ddf6:	f7f2 fc1f 	bl	8000638 <__aeabi_dmul>
 800ddfa:	4602      	mov	r2, r0
 800ddfc:	460b      	mov	r3, r1
 800ddfe:	4640      	mov	r0, r8
 800de00:	4649      	mov	r1, r9
 800de02:	f7f2 fa63 	bl	80002cc <__adddf3>
 800de06:	3701      	adds	r7, #1
 800de08:	4680      	mov	r8, r0
 800de0a:	4689      	mov	r9, r1
 800de0c:	9b04      	ldr	r3, [sp, #16]
 800de0e:	429f      	cmp	r7, r3
 800de10:	dc01      	bgt.n	800de16 <__kernel_rem_pio2+0x4c6>
 800de12:	45ba      	cmp	sl, r7
 800de14:	dae9      	bge.n	800ddea <__kernel_rem_pio2+0x49a>
 800de16:	ab4a      	add	r3, sp, #296	; 0x128
 800de18:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800de1c:	e9c3 8900 	strd	r8, r9, [r3]
 800de20:	f10a 0a01 	add.w	sl, sl, #1
 800de24:	3e08      	subs	r6, #8
 800de26:	e6f0      	b.n	800dc0a <__kernel_rem_pio2+0x2ba>
 800de28:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800de2a:	2b03      	cmp	r3, #3
 800de2c:	d85b      	bhi.n	800dee6 <__kernel_rem_pio2+0x596>
 800de2e:	e8df f003 	tbb	[pc, r3]
 800de32:	264a      	.short	0x264a
 800de34:	0226      	.short	0x0226
 800de36:	ab9a      	add	r3, sp, #616	; 0x268
 800de38:	441c      	add	r4, r3
 800de3a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800de3e:	46a2      	mov	sl, r4
 800de40:	46ab      	mov	fp, r5
 800de42:	f1bb 0f00 	cmp.w	fp, #0
 800de46:	dc6c      	bgt.n	800df22 <__kernel_rem_pio2+0x5d2>
 800de48:	46a2      	mov	sl, r4
 800de4a:	46ab      	mov	fp, r5
 800de4c:	f1bb 0f01 	cmp.w	fp, #1
 800de50:	f300 8086 	bgt.w	800df60 <__kernel_rem_pio2+0x610>
 800de54:	2000      	movs	r0, #0
 800de56:	2100      	movs	r1, #0
 800de58:	2d01      	cmp	r5, #1
 800de5a:	f300 80a0 	bgt.w	800df9e <__kernel_rem_pio2+0x64e>
 800de5e:	9b02      	ldr	r3, [sp, #8]
 800de60:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800de64:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800de68:	2b00      	cmp	r3, #0
 800de6a:	f040 809e 	bne.w	800dfaa <__kernel_rem_pio2+0x65a>
 800de6e:	9b01      	ldr	r3, [sp, #4]
 800de70:	e9c3 7800 	strd	r7, r8, [r3]
 800de74:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800de78:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800de7c:	e033      	b.n	800dee6 <__kernel_rem_pio2+0x596>
 800de7e:	3408      	adds	r4, #8
 800de80:	ab4a      	add	r3, sp, #296	; 0x128
 800de82:	441c      	add	r4, r3
 800de84:	462e      	mov	r6, r5
 800de86:	2000      	movs	r0, #0
 800de88:	2100      	movs	r1, #0
 800de8a:	2e00      	cmp	r6, #0
 800de8c:	da3a      	bge.n	800df04 <__kernel_rem_pio2+0x5b4>
 800de8e:	9b02      	ldr	r3, [sp, #8]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d03d      	beq.n	800df10 <__kernel_rem_pio2+0x5c0>
 800de94:	4602      	mov	r2, r0
 800de96:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800de9a:	9c01      	ldr	r4, [sp, #4]
 800de9c:	e9c4 2300 	strd	r2, r3, [r4]
 800dea0:	4602      	mov	r2, r0
 800dea2:	460b      	mov	r3, r1
 800dea4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800dea8:	f7f2 fa0e 	bl	80002c8 <__aeabi_dsub>
 800deac:	ae4c      	add	r6, sp, #304	; 0x130
 800deae:	2401      	movs	r4, #1
 800deb0:	42a5      	cmp	r5, r4
 800deb2:	da30      	bge.n	800df16 <__kernel_rem_pio2+0x5c6>
 800deb4:	9b02      	ldr	r3, [sp, #8]
 800deb6:	b113      	cbz	r3, 800debe <__kernel_rem_pio2+0x56e>
 800deb8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800debc:	4619      	mov	r1, r3
 800debe:	9b01      	ldr	r3, [sp, #4]
 800dec0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800dec4:	e00f      	b.n	800dee6 <__kernel_rem_pio2+0x596>
 800dec6:	ab9a      	add	r3, sp, #616	; 0x268
 800dec8:	441c      	add	r4, r3
 800deca:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800dece:	2000      	movs	r0, #0
 800ded0:	2100      	movs	r1, #0
 800ded2:	2d00      	cmp	r5, #0
 800ded4:	da10      	bge.n	800def8 <__kernel_rem_pio2+0x5a8>
 800ded6:	9b02      	ldr	r3, [sp, #8]
 800ded8:	b113      	cbz	r3, 800dee0 <__kernel_rem_pio2+0x590>
 800deda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dede:	4619      	mov	r1, r3
 800dee0:	9b01      	ldr	r3, [sp, #4]
 800dee2:	e9c3 0100 	strd	r0, r1, [r3]
 800dee6:	9b06      	ldr	r3, [sp, #24]
 800dee8:	f003 0007 	and.w	r0, r3, #7
 800deec:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800def0:	ecbd 8b02 	vpop	{d8}
 800def4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800def8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800defc:	f7f2 f9e6 	bl	80002cc <__adddf3>
 800df00:	3d01      	subs	r5, #1
 800df02:	e7e6      	b.n	800ded2 <__kernel_rem_pio2+0x582>
 800df04:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800df08:	f7f2 f9e0 	bl	80002cc <__adddf3>
 800df0c:	3e01      	subs	r6, #1
 800df0e:	e7bc      	b.n	800de8a <__kernel_rem_pio2+0x53a>
 800df10:	4602      	mov	r2, r0
 800df12:	460b      	mov	r3, r1
 800df14:	e7c1      	b.n	800de9a <__kernel_rem_pio2+0x54a>
 800df16:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800df1a:	f7f2 f9d7 	bl	80002cc <__adddf3>
 800df1e:	3401      	adds	r4, #1
 800df20:	e7c6      	b.n	800deb0 <__kernel_rem_pio2+0x560>
 800df22:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800df26:	ed3a 7b02 	vldmdb	sl!, {d7}
 800df2a:	4640      	mov	r0, r8
 800df2c:	ec53 2b17 	vmov	r2, r3, d7
 800df30:	4649      	mov	r1, r9
 800df32:	ed8d 7b04 	vstr	d7, [sp, #16]
 800df36:	f7f2 f9c9 	bl	80002cc <__adddf3>
 800df3a:	4602      	mov	r2, r0
 800df3c:	460b      	mov	r3, r1
 800df3e:	4606      	mov	r6, r0
 800df40:	460f      	mov	r7, r1
 800df42:	4640      	mov	r0, r8
 800df44:	4649      	mov	r1, r9
 800df46:	f7f2 f9bf 	bl	80002c8 <__aeabi_dsub>
 800df4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800df4e:	f7f2 f9bd 	bl	80002cc <__adddf3>
 800df52:	f10b 3bff 	add.w	fp, fp, #4294967295
 800df56:	e9ca 0100 	strd	r0, r1, [sl]
 800df5a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800df5e:	e770      	b.n	800de42 <__kernel_rem_pio2+0x4f2>
 800df60:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800df64:	ed3a 7b02 	vldmdb	sl!, {d7}
 800df68:	4630      	mov	r0, r6
 800df6a:	ec53 2b17 	vmov	r2, r3, d7
 800df6e:	4639      	mov	r1, r7
 800df70:	ed8d 7b04 	vstr	d7, [sp, #16]
 800df74:	f7f2 f9aa 	bl	80002cc <__adddf3>
 800df78:	4602      	mov	r2, r0
 800df7a:	460b      	mov	r3, r1
 800df7c:	4680      	mov	r8, r0
 800df7e:	4689      	mov	r9, r1
 800df80:	4630      	mov	r0, r6
 800df82:	4639      	mov	r1, r7
 800df84:	f7f2 f9a0 	bl	80002c8 <__aeabi_dsub>
 800df88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800df8c:	f7f2 f99e 	bl	80002cc <__adddf3>
 800df90:	f10b 3bff 	add.w	fp, fp, #4294967295
 800df94:	e9ca 0100 	strd	r0, r1, [sl]
 800df98:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800df9c:	e756      	b.n	800de4c <__kernel_rem_pio2+0x4fc>
 800df9e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800dfa2:	f7f2 f993 	bl	80002cc <__adddf3>
 800dfa6:	3d01      	subs	r5, #1
 800dfa8:	e756      	b.n	800de58 <__kernel_rem_pio2+0x508>
 800dfaa:	9b01      	ldr	r3, [sp, #4]
 800dfac:	9a01      	ldr	r2, [sp, #4]
 800dfae:	601f      	str	r7, [r3, #0]
 800dfb0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800dfb4:	605c      	str	r4, [r3, #4]
 800dfb6:	609d      	str	r5, [r3, #8]
 800dfb8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800dfbc:	60d3      	str	r3, [r2, #12]
 800dfbe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dfc2:	6110      	str	r0, [r2, #16]
 800dfc4:	6153      	str	r3, [r2, #20]
 800dfc6:	e78e      	b.n	800dee6 <__kernel_rem_pio2+0x596>
 800dfc8:	41700000 	.word	0x41700000
 800dfcc:	3e700000 	.word	0x3e700000

0800dfd0 <__kernel_sin>:
 800dfd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfd4:	ec55 4b10 	vmov	r4, r5, d0
 800dfd8:	b085      	sub	sp, #20
 800dfda:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800dfde:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800dfe2:	ed8d 1b00 	vstr	d1, [sp]
 800dfe6:	9002      	str	r0, [sp, #8]
 800dfe8:	da06      	bge.n	800dff8 <__kernel_sin+0x28>
 800dfea:	ee10 0a10 	vmov	r0, s0
 800dfee:	4629      	mov	r1, r5
 800dff0:	f7f2 fdbc 	bl	8000b6c <__aeabi_d2iz>
 800dff4:	2800      	cmp	r0, #0
 800dff6:	d051      	beq.n	800e09c <__kernel_sin+0xcc>
 800dff8:	4622      	mov	r2, r4
 800dffa:	462b      	mov	r3, r5
 800dffc:	4620      	mov	r0, r4
 800dffe:	4629      	mov	r1, r5
 800e000:	f7f2 fb1a 	bl	8000638 <__aeabi_dmul>
 800e004:	4682      	mov	sl, r0
 800e006:	468b      	mov	fp, r1
 800e008:	4602      	mov	r2, r0
 800e00a:	460b      	mov	r3, r1
 800e00c:	4620      	mov	r0, r4
 800e00e:	4629      	mov	r1, r5
 800e010:	f7f2 fb12 	bl	8000638 <__aeabi_dmul>
 800e014:	a341      	add	r3, pc, #260	; (adr r3, 800e11c <__kernel_sin+0x14c>)
 800e016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e01a:	4680      	mov	r8, r0
 800e01c:	4689      	mov	r9, r1
 800e01e:	4650      	mov	r0, sl
 800e020:	4659      	mov	r1, fp
 800e022:	f7f2 fb09 	bl	8000638 <__aeabi_dmul>
 800e026:	a33f      	add	r3, pc, #252	; (adr r3, 800e124 <__kernel_sin+0x154>)
 800e028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e02c:	f7f2 f94c 	bl	80002c8 <__aeabi_dsub>
 800e030:	4652      	mov	r2, sl
 800e032:	465b      	mov	r3, fp
 800e034:	f7f2 fb00 	bl	8000638 <__aeabi_dmul>
 800e038:	a33c      	add	r3, pc, #240	; (adr r3, 800e12c <__kernel_sin+0x15c>)
 800e03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e03e:	f7f2 f945 	bl	80002cc <__adddf3>
 800e042:	4652      	mov	r2, sl
 800e044:	465b      	mov	r3, fp
 800e046:	f7f2 faf7 	bl	8000638 <__aeabi_dmul>
 800e04a:	a33a      	add	r3, pc, #232	; (adr r3, 800e134 <__kernel_sin+0x164>)
 800e04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e050:	f7f2 f93a 	bl	80002c8 <__aeabi_dsub>
 800e054:	4652      	mov	r2, sl
 800e056:	465b      	mov	r3, fp
 800e058:	f7f2 faee 	bl	8000638 <__aeabi_dmul>
 800e05c:	a337      	add	r3, pc, #220	; (adr r3, 800e13c <__kernel_sin+0x16c>)
 800e05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e062:	f7f2 f933 	bl	80002cc <__adddf3>
 800e066:	9b02      	ldr	r3, [sp, #8]
 800e068:	4606      	mov	r6, r0
 800e06a:	460f      	mov	r7, r1
 800e06c:	b9db      	cbnz	r3, 800e0a6 <__kernel_sin+0xd6>
 800e06e:	4602      	mov	r2, r0
 800e070:	460b      	mov	r3, r1
 800e072:	4650      	mov	r0, sl
 800e074:	4659      	mov	r1, fp
 800e076:	f7f2 fadf 	bl	8000638 <__aeabi_dmul>
 800e07a:	a325      	add	r3, pc, #148	; (adr r3, 800e110 <__kernel_sin+0x140>)
 800e07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e080:	f7f2 f922 	bl	80002c8 <__aeabi_dsub>
 800e084:	4642      	mov	r2, r8
 800e086:	464b      	mov	r3, r9
 800e088:	f7f2 fad6 	bl	8000638 <__aeabi_dmul>
 800e08c:	4602      	mov	r2, r0
 800e08e:	460b      	mov	r3, r1
 800e090:	4620      	mov	r0, r4
 800e092:	4629      	mov	r1, r5
 800e094:	f7f2 f91a 	bl	80002cc <__adddf3>
 800e098:	4604      	mov	r4, r0
 800e09a:	460d      	mov	r5, r1
 800e09c:	ec45 4b10 	vmov	d0, r4, r5
 800e0a0:	b005      	add	sp, #20
 800e0a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	4b1b      	ldr	r3, [pc, #108]	; (800e118 <__kernel_sin+0x148>)
 800e0aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e0ae:	f7f2 fac3 	bl	8000638 <__aeabi_dmul>
 800e0b2:	4632      	mov	r2, r6
 800e0b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e0b8:	463b      	mov	r3, r7
 800e0ba:	4640      	mov	r0, r8
 800e0bc:	4649      	mov	r1, r9
 800e0be:	f7f2 fabb 	bl	8000638 <__aeabi_dmul>
 800e0c2:	4602      	mov	r2, r0
 800e0c4:	460b      	mov	r3, r1
 800e0c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e0ca:	f7f2 f8fd 	bl	80002c8 <__aeabi_dsub>
 800e0ce:	4652      	mov	r2, sl
 800e0d0:	465b      	mov	r3, fp
 800e0d2:	f7f2 fab1 	bl	8000638 <__aeabi_dmul>
 800e0d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e0da:	f7f2 f8f5 	bl	80002c8 <__aeabi_dsub>
 800e0de:	a30c      	add	r3, pc, #48	; (adr r3, 800e110 <__kernel_sin+0x140>)
 800e0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0e4:	4606      	mov	r6, r0
 800e0e6:	460f      	mov	r7, r1
 800e0e8:	4640      	mov	r0, r8
 800e0ea:	4649      	mov	r1, r9
 800e0ec:	f7f2 faa4 	bl	8000638 <__aeabi_dmul>
 800e0f0:	4602      	mov	r2, r0
 800e0f2:	460b      	mov	r3, r1
 800e0f4:	4630      	mov	r0, r6
 800e0f6:	4639      	mov	r1, r7
 800e0f8:	f7f2 f8e8 	bl	80002cc <__adddf3>
 800e0fc:	4602      	mov	r2, r0
 800e0fe:	460b      	mov	r3, r1
 800e100:	4620      	mov	r0, r4
 800e102:	4629      	mov	r1, r5
 800e104:	f7f2 f8e0 	bl	80002c8 <__aeabi_dsub>
 800e108:	e7c6      	b.n	800e098 <__kernel_sin+0xc8>
 800e10a:	bf00      	nop
 800e10c:	f3af 8000 	nop.w
 800e110:	55555549 	.word	0x55555549
 800e114:	3fc55555 	.word	0x3fc55555
 800e118:	3fe00000 	.word	0x3fe00000
 800e11c:	5acfd57c 	.word	0x5acfd57c
 800e120:	3de5d93a 	.word	0x3de5d93a
 800e124:	8a2b9ceb 	.word	0x8a2b9ceb
 800e128:	3e5ae5e6 	.word	0x3e5ae5e6
 800e12c:	57b1fe7d 	.word	0x57b1fe7d
 800e130:	3ec71de3 	.word	0x3ec71de3
 800e134:	19c161d5 	.word	0x19c161d5
 800e138:	3f2a01a0 	.word	0x3f2a01a0
 800e13c:	1110f8a6 	.word	0x1110f8a6
 800e140:	3f811111 	.word	0x3f811111

0800e144 <fabs>:
 800e144:	ec51 0b10 	vmov	r0, r1, d0
 800e148:	ee10 2a10 	vmov	r2, s0
 800e14c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e150:	ec43 2b10 	vmov	d0, r2, r3
 800e154:	4770      	bx	lr
	...

0800e158 <scalbn>:
 800e158:	b570      	push	{r4, r5, r6, lr}
 800e15a:	ec55 4b10 	vmov	r4, r5, d0
 800e15e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e162:	4606      	mov	r6, r0
 800e164:	462b      	mov	r3, r5
 800e166:	b9aa      	cbnz	r2, 800e194 <scalbn+0x3c>
 800e168:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e16c:	4323      	orrs	r3, r4
 800e16e:	d03b      	beq.n	800e1e8 <scalbn+0x90>
 800e170:	4b31      	ldr	r3, [pc, #196]	; (800e238 <scalbn+0xe0>)
 800e172:	4629      	mov	r1, r5
 800e174:	2200      	movs	r2, #0
 800e176:	ee10 0a10 	vmov	r0, s0
 800e17a:	f7f2 fa5d 	bl	8000638 <__aeabi_dmul>
 800e17e:	4b2f      	ldr	r3, [pc, #188]	; (800e23c <scalbn+0xe4>)
 800e180:	429e      	cmp	r6, r3
 800e182:	4604      	mov	r4, r0
 800e184:	460d      	mov	r5, r1
 800e186:	da12      	bge.n	800e1ae <scalbn+0x56>
 800e188:	a327      	add	r3, pc, #156	; (adr r3, 800e228 <scalbn+0xd0>)
 800e18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e18e:	f7f2 fa53 	bl	8000638 <__aeabi_dmul>
 800e192:	e009      	b.n	800e1a8 <scalbn+0x50>
 800e194:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e198:	428a      	cmp	r2, r1
 800e19a:	d10c      	bne.n	800e1b6 <scalbn+0x5e>
 800e19c:	ee10 2a10 	vmov	r2, s0
 800e1a0:	4620      	mov	r0, r4
 800e1a2:	4629      	mov	r1, r5
 800e1a4:	f7f2 f892 	bl	80002cc <__adddf3>
 800e1a8:	4604      	mov	r4, r0
 800e1aa:	460d      	mov	r5, r1
 800e1ac:	e01c      	b.n	800e1e8 <scalbn+0x90>
 800e1ae:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e1b2:	460b      	mov	r3, r1
 800e1b4:	3a36      	subs	r2, #54	; 0x36
 800e1b6:	4432      	add	r2, r6
 800e1b8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e1bc:	428a      	cmp	r2, r1
 800e1be:	dd0b      	ble.n	800e1d8 <scalbn+0x80>
 800e1c0:	ec45 4b11 	vmov	d1, r4, r5
 800e1c4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800e230 <scalbn+0xd8>
 800e1c8:	f000 f83c 	bl	800e244 <copysign>
 800e1cc:	a318      	add	r3, pc, #96	; (adr r3, 800e230 <scalbn+0xd8>)
 800e1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1d2:	ec51 0b10 	vmov	r0, r1, d0
 800e1d6:	e7da      	b.n	800e18e <scalbn+0x36>
 800e1d8:	2a00      	cmp	r2, #0
 800e1da:	dd08      	ble.n	800e1ee <scalbn+0x96>
 800e1dc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e1e0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e1e4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e1e8:	ec45 4b10 	vmov	d0, r4, r5
 800e1ec:	bd70      	pop	{r4, r5, r6, pc}
 800e1ee:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e1f2:	da0d      	bge.n	800e210 <scalbn+0xb8>
 800e1f4:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e1f8:	429e      	cmp	r6, r3
 800e1fa:	ec45 4b11 	vmov	d1, r4, r5
 800e1fe:	dce1      	bgt.n	800e1c4 <scalbn+0x6c>
 800e200:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800e228 <scalbn+0xd0>
 800e204:	f000 f81e 	bl	800e244 <copysign>
 800e208:	a307      	add	r3, pc, #28	; (adr r3, 800e228 <scalbn+0xd0>)
 800e20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e20e:	e7e0      	b.n	800e1d2 <scalbn+0x7a>
 800e210:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e214:	3236      	adds	r2, #54	; 0x36
 800e216:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e21a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e21e:	4620      	mov	r0, r4
 800e220:	4629      	mov	r1, r5
 800e222:	2200      	movs	r2, #0
 800e224:	4b06      	ldr	r3, [pc, #24]	; (800e240 <scalbn+0xe8>)
 800e226:	e7b2      	b.n	800e18e <scalbn+0x36>
 800e228:	c2f8f359 	.word	0xc2f8f359
 800e22c:	01a56e1f 	.word	0x01a56e1f
 800e230:	8800759c 	.word	0x8800759c
 800e234:	7e37e43c 	.word	0x7e37e43c
 800e238:	43500000 	.word	0x43500000
 800e23c:	ffff3cb0 	.word	0xffff3cb0
 800e240:	3c900000 	.word	0x3c900000

0800e244 <copysign>:
 800e244:	ec51 0b10 	vmov	r0, r1, d0
 800e248:	ee11 0a90 	vmov	r0, s3
 800e24c:	ee10 2a10 	vmov	r2, s0
 800e250:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e254:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800e258:	ea41 0300 	orr.w	r3, r1, r0
 800e25c:	ec43 2b10 	vmov	d0, r2, r3
 800e260:	4770      	bx	lr
	...

0800e264 <_init>:
 800e264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e266:	bf00      	nop
 800e268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e26a:	bc08      	pop	{r3}
 800e26c:	469e      	mov	lr, r3
 800e26e:	4770      	bx	lr

0800e270 <_fini>:
 800e270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e272:	bf00      	nop
 800e274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e276:	bc08      	pop	{r3}
 800e278:	469e      	mov	lr, r3
 800e27a:	4770      	bx	lr
